<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.DecimalFormat</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A struct holding the min, max, avg, 95th, and 99th percentile measurements for the collection of</color>
<color=#75715e> * values held in a LatencyStat.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Latency</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DecimalFormat</color> <color=#f8f8f2>FORMAT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DecimalFormat</color><color=#f8f8f2>(</color><color=#e6db74>"###,###,###,###,###,###,###.##"</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>min</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>avg</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>totalOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>percent95</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>percent99</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This field should be called requestsOverflow, but is left opsOverflow</color>
<color=#75715e>   * for serialization compatibility with JE 5.0.69 and earlier.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>opsOverflow</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The totalRequests field was added in JE 5.0.70.  When an object</color>
<color=#75715e>   * serialized by JE 5.0.69 or earler is deserialized here, this field is</color>
<color=#75715e>   * initialized here to 0 by Java and then set equal to totalOps by</color>
<color=#75715e>   * readObject.  Setting totalRequests to totalOps is accurate for</color>
<color=#75715e>   * single-op-per-request stats.  It is inaccurate for</color>
<color=#75715e>   * multiple-op-per-request stats, but the best we can do with the</color>
<color=#75715e>   * information we have available.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>totalRequests</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a Latency with a maxTrackedLatencyMillis and all fields with zero values. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Latency</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxTrackedLatencyMillis</color> <color=#f92672>=</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#a6e22e>Latency</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>minMillis</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>maxMillis</color><color=#f8f8f2>,</color>
      <color=#66d9ef>float</color> <color=#f8f8f2>avg</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>totalOps</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>totalRequests</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>percent95</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>percent99</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>requestsOverflow</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxTrackedLatencyMillis</color> <color=#f92672>=</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>min</color> <color=#f92672>=</color> <color=#f8f8f2>minMillis</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>max</color> <color=#f92672>=</color> <color=#f8f8f2>maxMillis</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>avg</color> <color=#f92672>=</color> <color=#f8f8f2>avg</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>totalOps</color> <color=#f92672>=</color> <color=#f8f8f2>totalOps</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>totalRequests</color> <color=#f92672>=</color> <color=#f8f8f2>totalRequests</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>percent95</color> <color=#f92672>=</color> <color=#f8f8f2>percent95</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>percent99</color> <color=#f92672>=</color> <color=#f8f8f2>percent99</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>opsOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>requestsOverflow</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* See totalRequests field. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>ObjectInputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>defaultReadObject</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalRequests</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>totalRequests</color> <color=#f92672>=</color> <color=#f8f8f2>totalOps</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Latency</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Latency</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen. */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalOps</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"No operations"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#e6db74>"maxTrackedLatencyMillis="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" totalOps="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>totalOps</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" totalReq="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>totalRequests</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" reqOverflow="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>opsOverflow</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" min="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>min</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" max="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>max</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" avg="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>avg</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" 95%="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>percent95</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" 99%="</color>
        <color=#f92672>+</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>percent99</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the number of operations recorded by this stat. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTotalOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totalOps</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the number of requests recorded by this stat. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTotalRequests</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totalRequests</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the number of requests which exceed the max expected latency */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getRequestsOverflow</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>opsOverflow</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the max expected latency for this kind of operation */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMaxTrackedLatencyMillis</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the fastest latency tracked */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMin</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>min</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the slowest latency tracked */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMax</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the average latency tracked */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAvg</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>avg</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the 95th percentile latency tracked by the histogram */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>get95thPercent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>percent95</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the 99th percentile latency tracked by the histogram */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>get99thPercent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>percent99</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Add the measurements from "other" and recalculate the min, max, and average values. The 95th</color>
<color=#75715e>   * and 99th percentile are not recalculated, because the histogram from LatencyStatis not</color>
<color=#75715e>   * available, and those values can't be generated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>rollup</color><color=#f8f8f2>(</color><color=#f8f8f2>Latency</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>totalOps</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>totalRequests</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Can't rollup a Latency that doesn't have any data"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxTrackedLatencyMillis</color> <color=#f92672>!=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>maxTrackedLatencyMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Can't rollup a Latency whose maxTrackedLatencyMillis is "</color> <color=#f92672>+</color> <color=#e6db74>"different"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>min</color> <color=#f92672>></color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>min</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>max</color> <color=#f92672><</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>avg</color> <color=#f92672>=</color>
        <color=#f8f8f2>((</color><color=#f8f8f2>totalRequests</color> <color=#f92672>*</color> <color=#f8f8f2>avg</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>totalRequests</color> <color=#f92672>*</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>avg</color><color=#f8f8f2>))</color>
            <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalRequests</color> <color=#f92672>+</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>totalRequests</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Clear out 95th and 99th. They have become invalid. */</color>
    <color=#f8f8f2>percent95</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>percent99</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>totalOps</color> <color=#f92672>+=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>totalOps</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>totalRequests</color> <color=#f92672>+=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>totalRequests</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>opsOverflow</color> <color=#f92672>+=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>opsOverflow</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>