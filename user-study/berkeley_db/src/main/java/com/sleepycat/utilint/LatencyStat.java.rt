<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicIntegerArray</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicLong</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A stat that keeps track of latency in milliseconds and presents average, min, max, 95th and 99th</color>
<color=#75715e> * percentile values.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LatencyStat</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The maximum tracked latency, in milliseconds, it's also the size of the</color>
<color=#75715e>   * configurable array which is used to save latencies.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Values</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The number of total operations that have been tracked. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>numOps</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The number of total requests that have been tracked. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>numRequests</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The number of total nanoseconds that have been tracked. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>totalNanos</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Array is indexed by latency in millis and elements contain the</color>
<color=#75715e>     * number of ops for that latency.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicIntegerArray</color> <color=#f8f8f2>histogram</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Min and max latency. They may both exceed maxTrackedLatencyMillis.</color>
<color=#75715e>     * A volatile int rather than an AtomicInteger is used because</color>
<color=#75715e>     * AtomicInteger has no min() or max() method, so there is no advantage</color>
<color=#75715e>     * to using it.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>minIncludingOverflow</color><color=#f8f8f2>;</color>
    <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxIncludingOverflow</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Number of requests whose latency exceed maxTrackedLatencyMillis. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>requestsOverflow</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>Values</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>histogram</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicIntegerArray</color><color=#f8f8f2>(</color><color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>numOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>numRequests</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>requestsOverflow</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>totalNanos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>minIncludingOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>maxIncludingOverflow</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Contains the values tracked by set() and reported by calculate().</color>
<color=#75715e>   *</color>
<color=#75715e>   * To clear the values, this field is assigned a new instance.  This</color>
<color=#75715e>   * prevents uninitialized values when set() and clear() run concurrently.</color>
<color=#75715e>   * Methods that access the values (set and calculate) should assign</color>
<color=#75715e>   * trackedValues to a local var and perform all access using the local var,</color>
<color=#75715e>   * so that clear() will not impact the computation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Concurrent access by set() and calculate() is handled differently.  The</color>
<color=#75715e>   * numOps and numRequests fields are incremented by set() last, and are</color>
<color=#75715e>   * checked first by calculate().  If numOps or numRequests is zero,</color>
<color=#75715e>   * calculate() will return an empty Latency object.  If numOps and</color>
<color=#75715e>   * numRequests are non-zero, calculate() may still return latency values</color>
<color=#75715e>   * that are inconsistent, when set() runs concurrently.  But at least</color>
<color=#75715e>   * calculate() won't return uninitialized latency values.  Without</color>
<color=#75715e>   * synchronizing set(), this is the best we can do.  Synchronizing set()</color>
<color=#75715e>   * might introduce contention during CRUD operations.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Values</color> <color=#f8f8f2>trackedValues</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>saveMin</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>saveMax</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>saveAvg</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>saveNumOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>saveNumRequests</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>save95</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>save99</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>saveRequestsOverflow</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>LatencyStat</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxTrackedLatencyMillis</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>clear</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>clearInternal</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns and clears the current stats. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>Values</color> <color=#a6e22e>clearInternal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Values</color> <color=#f8f8f2>values</color> <color=#f92672>=</color> <color=#f8f8f2>trackedValues</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Create a new instance to support concurrent access.  See {@link</color>
<color=#75715e>     * #trackedValues}.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>trackedValues</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Values</color><color=#f8f8f2>(</color><color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>values</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Generate the min, max, avg, 95th and 99th percentile for the collected measurements. Do not</color>
<color=#75715e>   * clear the measurement collection.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Latency</color> <color=#a6e22e>calculate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>calculate</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Generate the min, max, avg, 95th and 99th percentile for the collected measurements, then clear</color>
<color=#75715e>   * the measurement collection.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Latency</color> <color=#a6e22e>calculateAndClear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>calculate</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calculate may be called on a stat that is concurrently updating, so while it has to be thread</color>
<color=#75715e>   * safe, it's a bit inaccurate when there's concurrent activity. That tradeoff is made in order to</color>
<color=#75715e>   * avoid the cost of synchronization during the set() method. See {@link #trackedValues}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>Latency</color> <color=#a6e22e>calculate</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>clear</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use a local var to support concurrent access.  See {@link</color>
<color=#75715e>     * #trackedValues}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Values</color> <color=#f8f8f2>values</color> <color=#f92672>=</color> <color=#f8f8f2>clear</color> <color=#f92672>?</color> <color=#f8f8f2>clearInternal</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>trackedValues</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check numOps and numReqests first and return an empty Latency if</color>
<color=#75715e>     * either one is zero.  This ensures that we don't report partially</color>
<color=#75715e>     * computed values when they are zero.  This works because the other</color>
<color=#75715e>     * values are calculated first by set(), and numOps and numRequests are</color>
<color=#75715e>     * incremented last.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>totalOps</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>numOps</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>totalRequests</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>numRequests</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalOps</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>totalRequests</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Latency</color><color=#f8f8f2>(</color><color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>totalNanos</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>totalNanos</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>requestsOverflow</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxIncludingOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>maxIncludingOverflow</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>minIncludingOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>minIncludingOverflow</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>avgMs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>totalNanos</color> <color=#f92672>*</color> <color=#ae81ff>1e-6</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>totalRequests</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The 95% and 99% values will be -1 if there are no recorded latencies</color>
<color=#75715e>     * in the histogram.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>percent95</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>percent99</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Min/max can be inaccurate because of concurrent set() calls, i.e.,</color>
<color=#75715e>     * values may be from a mixture of different set() calls.  Bound the</color>
<color=#75715e>     * min/max to the average, so they are sensible.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>avgMsInt</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>(</color><color=#f8f8f2>avgMs</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>avgMsInt</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxIncludingOverflow</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>min</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>avgMsInt</color><color=#f8f8f2>,</color> <color=#f8f8f2>minIncludingOverflow</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>percent95Count</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>percent99Count</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nTrackedRequests</color> <color=#f92672>=</color> <color=#f8f8f2>totalRequests</color> <color=#f92672>-</color> <color=#f8f8f2>nOverflow</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTrackedRequests</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* For one request, always include it in the 95% and 99%. */</color>
      <color=#f8f8f2>percent95Count</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>percent99Count</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Otherwise truncate: never include the last/highest request. */</color>
      <color=#f8f8f2>percent95Count</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTrackedRequests</color> <color=#f92672>*</color> <color=#ae81ff>.95</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>percent99Count</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTrackedRequests</color> <color=#f92672>*</color> <color=#ae81ff>.99</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>histogramLength</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>histogram</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numRequestsSeen</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>latency</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>latency</color> <color=#f92672><</color> <color=#f8f8f2>histogramLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>latency</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>histogram</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>latency</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>min</color> <color=#f92672>></color> <color=#f8f8f2>latency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>min</color> <color=#f92672>=</color> <color=#f8f8f2>latency</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>max</color> <color=#f92672><</color> <color=#f8f8f2>latency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>latency</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numRequestsSeen</color> <color=#f92672><</color> <color=#f8f8f2>percent95Count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>percent95</color> <color=#f92672>=</color> <color=#f8f8f2>latency</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numRequestsSeen</color> <color=#f92672><</color> <color=#f8f8f2>percent99Count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>percent99</color> <color=#f92672>=</color> <color=#f8f8f2>latency</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>numRequestsSeen</color> <color=#f92672>+=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>saveMax</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>saveMin</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>saveAvg</color> <color=#f92672>=</color> <color=#f8f8f2>avgMs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>saveNumOps</color> <color=#f92672>=</color> <color=#f8f8f2>totalOps</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>saveNumRequests</color> <color=#f92672>=</color> <color=#f8f8f2>totalRequests</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>save95</color> <color=#f92672>=</color> <color=#f8f8f2>percent95</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>save99</color> <color=#f92672>=</color> <color=#f8f8f2>percent99</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>saveRequestsOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>nOverflow</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Latency</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>saveMin</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>saveMax</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>saveAvg</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>saveNumOps</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>saveNumRequests</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>save95</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>save99</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>saveRequestsOverflow</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Record a single operation that took place in a request of "nanolatency" nanos. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>nanoLatency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>set</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>nanoLatency</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Record "numRecordedOps" (one or more) operations that took place in a single request of</color>
<color=#75715e>   * "nanoLatency" nanos.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numRecordedOps</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>nanoLatency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* ignore negative values [#22466] */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nanoLatency</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use a local var to support concurrent access.  See {@link</color>
<color=#75715e>     * #trackedValues}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Values</color> <color=#f8f8f2>values</color> <color=#f92672>=</color> <color=#f8f8f2>trackedValues</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Round the latency to determine where to mark the histogram. */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>millisRounded</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>nanoLatency</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#ae81ff>1000000l</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>))</color> <color=#f92672>/</color> <color=#ae81ff>1000000l</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Record this latency. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>millisRounded</color> <color=#f92672>>=</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>requestsOverflow</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>histogram</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>(</color><color=#f8f8f2>millisRounded</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Update the min/max latency if necessary.  This is not atomic, so we</color>
<color=#75715e>     * loop to account for lost updates.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>maxIncludingOverflow</color> <color=#f92672><</color> <color=#f8f8f2>millisRounded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>maxIncludingOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>millisRounded</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>minIncludingOverflow</color> <color=#f92672>></color> <color=#f8f8f2>millisRounded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>minIncludingOverflow</color> <color=#f92672>=</color> <color=#f8f8f2>millisRounded</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Keep a count of latency that is precise enough to record sub</color>
<color=#75715e>     * millisecond values.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>totalNanos</color><color=#f8f8f2>.</color><color=#a6e22e>addAndGet</color><color=#f8f8f2>(</color><color=#f8f8f2>nanoLatency</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Increment numOps and numRequests last so that calculate() won't use</color>
<color=#75715e>     * other uninitialized values when numOps or numRequests is zero.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>numOps</color><color=#f8f8f2>.</color><color=#a6e22e>addAndGet</color><color=#f8f8f2>(</color><color=#f8f8f2>numRecordedOps</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>numRequests</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>trackedValues</color><color=#f8f8f2>.</color><color=#a6e22e>numOps</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>trackedValues</color><color=#f8f8f2>.</color><color=#a6e22e>numRequests</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Latency</color> <color=#f8f8f2>results</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Latency</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>saveMin</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>saveMax</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>saveAvg</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>saveNumRequests</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>saveNumOps</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>save95</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>save99</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>saveRequestsOverflow</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>results</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>