<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Maintain interval and cumulative stats for a given set of operations, as well as a</color>
<color=#75715e> * activityCounter that generates thread dumps if operations take too long. The markStart and</color>
<color=#75715e> * markFinish methods can be used to bracket each tracked operation.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>StatsTracker</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#75715e>/* Latency stats. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>LatencyStat</color><color=#f92672>></color> <color=#f8f8f2>intervalLatencies</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>LatencyStat</color><color=#f92672>></color> <color=#f8f8f2>cumulativeLatencies</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * ActivityCounter tracks throughput and dumps thread stacktraces when</color>
<color=#75715e>   * throughput drops.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ActivityCounter</color> <color=#f8f8f2>activityCounter</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The logger is used for activity stack traces. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>StatsTracker</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>T</color><color=#f92672>[]</color> <color=#f8f8f2>opTypes</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>stackTraceLogger</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>activeThreadThreshold</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>threadDumpIntervalMillis</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>threadDumpMax</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>intervalLatencies</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>LatencyStat</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cumulativeLatencies</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>LatencyStat</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>opType</color> <color=#f8f8f2>:</color> <color=#f8f8f2>opTypes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>intervalLatencies</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>opType</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>LatencyStat</color><color=#f8f8f2>(</color><color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>cumulativeLatencies</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>opType</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>LatencyStat</color><color=#f8f8f2>(</color><color=#f8f8f2>maxTrackedLatencyMillis</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>activityCounter</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ActivityCounter</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>activeThreadThreshold</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadDumpIntervalMillis</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadDumpMax</color><color=#f8f8f2>,</color> <color=#f8f8f2>stackTraceLogger</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Track the start of a operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value of System.nanoTime, for passing to markFinish.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>markStart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>activityCounter</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>nanoTime</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Track the end of an operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param startTime should be the value returned by the corresponding call to markStart</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>markFinish</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>opType</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>markFinish</color><color=#f8f8f2>(</color><color=#f8f8f2>opType</color><color=#f8f8f2>,</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
  <color=#75715e>/**</color>
<color=#75715e>   * Track the end of an operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param startTime should be the value returned by the corresponding call to markStart</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>markFinish</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>opType</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>numOperations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numOperations</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>elapsed</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>nanoTime</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>intervalLatencies</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>opType</color><color=#f8f8f2>).</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>numOperations</color><color=#f8f8f2>,</color> <color=#f8f8f2>elapsed</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>cumulativeLatencies</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>opType</color><color=#f8f8f2>).</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>numOperations</color><color=#f8f8f2>,</color> <color=#f8f8f2>elapsed</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Must be invoked to clear the ActivityCounter stats. */</color>
      <color=#f8f8f2>activityCounter</color><color=#f8f8f2>.</color><color=#a6e22e>finish</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Should be called after each interval latency stat collection, to reset for the next period's</color>
<color=#75715e>   * collection.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clearLatency</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>LatencyStat</color><color=#f92672>></color> <color=#f8f8f2>e</color> <color=#f8f8f2>:</color> <color=#f8f8f2>intervalLatencies</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>().</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>LatencyStat</color><color=#f92672>></color> <color=#a6e22e>getIntervalLatency</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>intervalLatencies</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>LatencyStat</color><color=#f92672>></color> <color=#a6e22e>getCumulativeLatency</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cumulativeLatencies</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit test support. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumCompletedDumps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>activityCounter</color><color=#f8f8f2>.</color><color=#a6e22e>getNumCompletedDumps</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>