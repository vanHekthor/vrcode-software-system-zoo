<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.collections</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.ExceptionUnwrapper</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Starts a transaction, calls {@link TransactionWorker#doWork}, and handles transaction retry and</color>
<color=#75715e> * exceptions. To perform a transaction, the user implements the {@link TransactionWorker} interface</color>
<color=#75715e> * and passes an instance of that class to the {@link #run run} method.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A single TransactionRunner instance may be used by any number of threads for any number of</color>
<color=#75715e> * transactions.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The behavior of the run() method depends on whether the environment is transactional, whether</color>
<color=#75715e> * nested transactions are enabled, and whether a transaction is already active.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>When the run() method is called in a transactional environment and no transaction is active</color>
<color=#75715e> *       for the current thread, a new transaction is started before calling doWork(). If</color>
<color=#75715e> *       LockConflictException is thrown by doWork(), the transaction will be aborted and the</color>
<color=#75715e> *       process will be repeated up to the maximum number of retries. If another exception is</color>
<color=#75715e> *       thrown by doWork() or the maximum number of retries has occurred, the transaction will be</color>
<color=#75715e> *       aborted and the exception will be rethrown by the run() method. If no exception is thrown</color>
<color=#75715e> *       by doWork(), the transaction will be committed. The run() method will not attempt to commit</color>
<color=#75715e> *       or abort a transaction if it has already been committed or aborted by doWork().</color>
<color=#75715e> *   <li>When the run() method is called and a transaction is active for the current thread, and</color>
<color=#75715e> *       nested transactions are enabled, a nested transaction is started before calling doWork().</color>
<color=#75715e> *       The transaction that is active when calling the run() method will become the parent of the</color>
<color=#75715e> *       nested transaction. The nested transaction will be committed or aborted by the run() method</color>
<color=#75715e> *       following the same rules described above. Note that nested transactions may not be enabled</color>
<color=#75715e> *       for the JE product, since JE does not support nested transactions.</color>
<color=#75715e> *   <li>When the run() method is called in a non-transactional environment, the doWork() method is</color>
<color=#75715e> *       called without starting a transaction. The run() method will return without committing or</color>
<color=#75715e> *       aborting a transaction, and any exceptions thrown by the doWork() method will be thrown by</color>
<color=#75715e> *       the run() method.</color>
<color=#75715e> *   <li>When the run() method is called and a transaction is active for the current thread and</color>
<color=#75715e> *       nested transactions are not enabled (the default) the same rules as above apply. All the</color>
<color=#75715e> *       operations performed by the doWork() method will be part of the currently active</color>
<color=#75715e> *       transaction.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>In a transactional environment, the rules described above support nested calls to the run()</color>
<color=#75715e> * method and guarantee that the outermost call will cause the transaction to be committed or</color>
<color=#75715e> * aborted. This is true whether or not nested transactions are supported or enabled. Note that</color>
<color=#75715e> * nested transactions are provided as an optimization for improving concurrency but do not change</color>
<color=#75715e> * the meaning of the outermost transaction. Nested transactions are not currently supported by the</color>
<color=#75715e> * JE product.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TransactionRunner</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** The default maximum number of retries. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_MAX_RETRIES</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>CurrentTransaction</color> <color=#f8f8f2>currentTxn</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowNestedTxn</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a transaction runner for a given Berkeley DB environment. The default maximum number of</color>
<color=#75715e>   * retries ({@link #DEFAULT_MAX_RETRIES}) and a null (default) {@link TransactionConfig} will be</color>
<color=#75715e>   * used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param env is the environment for running transactions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TransactionRunner</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEFAULT_MAX_RETRIES</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a transaction runner for a given Berkeley DB environment and with a given number of</color>
<color=#75715e>   * maximum retries.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param env is the environment for running transactions.</color>
<color=#75715e>   * @param maxRetries is the maximum number of retries that will be performed when deadlocks are</color>
<color=#75715e>   *     detected.</color>
<color=#75715e>   * @param config the transaction configuration used for calling {@link</color>
<color=#75715e>   *     Environment#beginTransaction}, or null to use the default configuration. The configuration</color>
<color=#75715e>   *     object is not cloned, and any modifications to it will impact subsequent transactions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TransactionRunner</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>currentTxn</color> <color=#f92672>=</color> <color=#f8f8f2>CurrentTransaction</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxRetries</color> <color=#f92672>=</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>config</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the maximum number of retries that will be performed when deadlocks are detected.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the maximum number of retries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMaxRetries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Changes the maximum number of retries that will be performed when deadlocks are detected.</color>
<color=#75715e>   * Calling this method does not impact transactions already running.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param maxRetries the maximum number of retries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaxRetries</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxRetries</color> <color=#f92672>=</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether nested transactions will be created if <code>run()</code> is called when a</color>
<color=#75715e>   * transaction is already active for the current thread. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether nested transactions will be created.</color>
<color=#75715e>   *     <p>Note that this method always returns false in the JE product, since nested transactions</color>
<color=#75715e>   *     are not supported by JE.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowNestedTransactions</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>allowNestedTxn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Changes whether nested transactions will be created if <code>run()</code> is called when a</color>
<color=#75715e>   * transaction is already active for the current thread. Calling this method does not impact</color>
<color=#75715e>   * transactions already running.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param allowNestedTxn whether nested transactions will be created.</color>
<color=#75715e>   *     <p>Note that true may not be passed to this method in the JE product, since nested</color>
<color=#75715e>   *     transactions are not supported by JE.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAllowNestedTransactions</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowNestedTxn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allowNestedTxn</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>NESTED_TRANSACTIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"Nested transactions are not supported."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowNestedTxn</color> <color=#f92672>=</color> <color=#f8f8f2>allowNestedTxn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the transaction configuration used for calling {@link Environment#beginTransaction}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is null, the default configuration is used. The configuration object is not</color>
<color=#75715e>   * cloned, and any modifications to it will impact subsequent transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the transaction configuration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>getTransactionConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Changes the transaction configuration used for calling {@link Environment#beginTransaction}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is null, the default configuration is used. The configuration object is not</color>
<color=#75715e>   * cloned, and any modifications to it will impact subsequent transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config the transaction configuration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransactionConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>config</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls the {@link TransactionWorker#doWork} method and, for transactional environments, may</color>
<color=#75715e>   * begin and end a transaction. If the environment given is non-transactional, a transaction will</color>
<color=#75715e>   * not be used but the doWork() method will still be called. See the class description for more</color>
<color=#75715e>   * information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param worker the TransactionWorker.</color>
<color=#75715e>   * @throws LockConflictException when it is thrown by doWork() and the maximum number of retries</color>
<color=#75715e>   *     has occurred. The transaction will have been aborted by this method.</color>
<color=#75715e>   * @throws Exception when any other exception is thrown by doWork(). The exception will first be</color>
<color=#75715e>   *     unwrapped by calling {@link ExceptionUnwrapper#unwrap}. The transaction will have been</color>
<color=#75715e>   *     aborted by this method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionWorker</color> <color=#f8f8f2>worker</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentTxn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>allowNestedTxn</color> <color=#f92672>||</color> <color=#f8f8f2>currentTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getTransaction</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Transactional and (not nested or nested txns allowed). */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>useMaxRetries</color> <color=#f92672>=</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>retries</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>retries</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#f8f8f2>currentTxn</color><color=#f8f8f2>.</color><color=#a6e22e>beginTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>worker</color><color=#f8f8f2>.</color><color=#a6e22e>doWork</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>txn</color> <color=#f92672>==</color> <color=#f8f8f2>currentTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getTransaction</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>currentTxn</color><color=#f8f8f2>.</color><color=#a6e22e>commitTransaction</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>ExceptionUnwrapper</color><color=#f8f8f2>.</color><color=#a6e22e>unwrapAny</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>txn</color> <color=#f92672>==</color> <color=#f8f8f2>currentTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getTransaction</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>currentTxn</color><color=#f8f8f2>.</color><color=#a6e22e>abortTransaction</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

              <color=#75715e>/*</color>
<color=#75715e>               * We print this stack trace so that the</color>
<color=#75715e>               * information is not lost when we throw the</color>
<color=#75715e>               * original exception.</color>
<color=#75715e>               */</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>TRANSACTION_RUNNER_PRINT_STACK_TRACES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>e2</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>}</color>
              <color=#75715e>/* Force the original exception to be thrown. */</color>
              <color=#f8f8f2>retries</color> <color=#f92672>=</color> <color=#f8f8f2>useMaxRetries</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#75715e>/* An Error should not require special handling. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Error</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#75715e>/* Allow a subclass to determine retry policy. */</color>
          <color=#f8f8f2>Exception</color> <color=#f8f8f2>ex</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>useMaxRetries</color> <color=#f92672>=</color> <color=#f8f8f2>handleException</color><color=#f8f8f2>(</color><color=#f8f8f2>ex</color><color=#f8f8f2>,</color> <color=#f8f8f2>retries</color><color=#f8f8f2>,</color> <color=#f8f8f2>useMaxRetries</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>retries</color> <color=#f92672>>=</color> <color=#f8f8f2>useMaxRetries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>ex</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Non-transactional or (nested and no nested txns allowed). */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>worker</color><color=#f8f8f2>.</color><color=#a6e22e>doWork</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>ExceptionUnwrapper</color><color=#f8f8f2>.</color><color=#a6e22e>unwrap</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Handles exceptions that occur during a transaction, and may implement transaction retry policy.</color>
<color=#75715e>   * The transaction is aborted by the {@link #run run} method before calling this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default implementation of this method throws the {@code exception} parameter if it is</color>
<color=#75715e>   * not an instance of {@link LockConflictException} and otherwise returns the {@code maxRetries}</color>
<color=#75715e>   * parameter value. This method can be overridden to throw a different exception or return a</color>
<color=#75715e>   * different number of retries. For example:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>This method could call {@code Thread.sleep} for a short interval to allow other</color>
<color=#75715e>   *       transactions to finish.</color>
<color=#75715e>   *   <li>This method could return a different {@code maxRetries} value depending on the {@code</color>
<color=#75715e>   *       exception} that occurred.</color>
<color=#75715e>   *   <li>This method could throw an application-defined exception when the {@code retries} value</color>
<color=#75715e>   *       is greater or equal to the {@code maxRetries} and a {@link LockConflictException} occurs,</color>
<color=#75715e>   *       to override the default behavior which is to throw the {@link LockConflictException}.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param exception an exception that was thrown by the {@link TransactionWorker#doWork} method or</color>
<color=#75715e>   *     thrown when beginning or committing the transaction. If the {@code retries} value is</color>
<color=#75715e>   *     greater or equal to {@code maxRetries} when this method returns normally, this exception</color>
<color=#75715e>   *     will be thrown by the {@link #run run} method.</color>
<color=#75715e>   * @param retries the current value of a counter that starts out at zero and is incremented when</color>
<color=#75715e>   *     each retry is performed.</color>
<color=#75715e>   * @param maxRetries the maximum retries to be performed. By default, this value is set to {@link</color>
<color=#75715e>   *     #getMaxRetries}. This method may return a different maximum retries value to override that</color>
<color=#75715e>   *     default.</color>
<color=#75715e>   * @return the maximum number of retries to perform. The default policy is to return the {@code</color>
<color=#75715e>   *     maxRetries} parameter value if the {@code exception} parameter value is an instance of</color>
<color=#75715e>   *     {@link LockConflictException}.</color>
<color=#75715e>   * @throws Exception to cause the exception to be thrown by the {@link #run run} method. The</color>
<color=#75715e>   *     default policy is to throw the {@code exception} parameter value if it is not an instance</color>
<color=#75715e>   *     of {@link LockConflictException}.</color>
<color=#75715e>   * @since 3.4</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>handleException</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>exception</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>retries</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LockConflictException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>exception</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>