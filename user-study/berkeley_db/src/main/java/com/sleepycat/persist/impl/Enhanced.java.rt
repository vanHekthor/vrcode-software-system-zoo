<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Interface implemented by a persistent class via bytecode enhancement.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>See {@link Accessor} for method documentation. {@link EnhancedAccessor} implements Accessor</color>
<color=#75715e> * and forwards all calls to methods in the Enhanced class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each class that implements this interface (including its subclasses and superclasses except</color>
<color=#75715e> * for Object) must also implement a static block that registers a prototype instance by calling</color>
<color=#75715e> * EnhancedAccessor.registerPrototype. Other instances are created from the protype instance using</color>
<color=#75715e> * {@link #bdbNewInstance}.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre>static { EnhancedAccessor.registerPrototype(new Xxx()); }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>An example of the generated code for reading and writing fields is shown below.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *  private int f1;</color>
<color=#75715e> *  private String f2;</color>
<color=#75715e> *  private MyClass f3;</color>
<color=#75715e> *</color>
<color=#75715e> *  public void bdbWriteNonKeyFields(EntityOutput output) {</color>
<color=#75715e> *</color>
<color=#75715e> *      super.bdbWriteNonKeyFields(output);</color>
<color=#75715e> *</color>
<color=#75715e> *      output.writeInt(f1);</color>
<color=#75715e> *      output.writeObject(f2, null);</color>
<color=#75715e> *      output.writeObject(f3, null);</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  public void bdbReadNonKeyFields(EntityInput input,</color>
<color=#75715e> *                                  int startField,</color>
<color=#75715e> *                                  int endField,</color>
<color=#75715e> *                                  int superLevel) {</color>
<color=#75715e> *</color>
<color=#75715e> *      if (superLevel != 0) {</color>
<color=#75715e> *          super.bdbReadNonKeyFields(input, startField, endField,</color>
<color=#75715e> *                                    superLevel - 1);</color>
<color=#75715e> *      }</color>
<color=#75715e> *      if (superLevel &lt;= 0) {</color>
<color=#75715e> *          switch (startField) {</color>
<color=#75715e> *          case 0:</color>
<color=#75715e> *              f1 = input.readInt();</color>
<color=#75715e> *              if (endField == 0) break;</color>
<color=#75715e> *          case 1:</color>
<color=#75715e> *              f2 = (String) input.readObject();</color>
<color=#75715e> *              if (endField == 1) break;</color>
<color=#75715e> *          case 2:</color>
<color=#75715e> *              f3 = (MyClass) input.readObject();</color>
<color=#75715e> *          }</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>Enhanced</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** @see Accessor#newInstance */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>bdbNewInstance</color><color=#f8f8f2>();</color>

  <color=#75715e>/** @see Accessor#newArray */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>bdbNewArray</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls the super class method if this class does not contain the primary key field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Accessor#isPriKeyFieldNullOrZero</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>bdbIsPriKeyFieldNullOrZero</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls the super class method if this class does not contain the primary key field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Accessor#writePriKeyField</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbWritePriKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls the super class method if this class does not contain the primary key field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Accessor#readPriKeyField</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbReadPriKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see Accessor#writeSecKeyFields */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbWriteSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see Accessor#readSecKeyFields */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbReadSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>endField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see Accessor#writeNonKeyFields */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbWriteNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see Accessor#readNonKeyFields */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbReadNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>endField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see Accessor#writeCompositeKeyFields */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbWriteCompositeKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>[]</color> <color=#f8f8f2>formats</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see Accessor#readCompositeKeyFields */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbReadCompositeKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>[]</color> <color=#f8f8f2>formats</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see Accessor#getField */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>bdbGetField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>field</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>);</color>

  <color=#75715e>/** @see Accessor#setField */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbSetField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>field</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>

  <color=#75715e>/** @see Accessor#setPriField */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>bdbSetPriField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>