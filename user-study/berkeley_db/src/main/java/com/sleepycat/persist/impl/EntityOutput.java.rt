<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleOutput</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.math.BigDecimal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.math.BigInteger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Used for writing object fields.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Unlike TupleOutput, Strings should be passed to {@link #writeObject} when using this class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that currently there is only one implementation of EntityOutput: RecordOutput. There is</color>
<color=#75715e> * no RawObjectOutput implemention because we currently have no need to convert from persistent</color>
<color=#75715e> * objects to RawObject instances. The EntityOutput interface is only for symmetry with EntityInput</color>
<color=#75715e> * and in case we need RawObjectOutput in the future.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>EntityOutput</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called via Accessor to write all fields with reference types, except for the primary key field</color>
<color=#75715e>   * and composite key fields (see writeKeyObject below).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>fieldFormat</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Called for a primary key field or composite key field with a reference type. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeKeyObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>fieldFormat</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called via Accessor.writeSecKeyFields for a primary key field with a reference type. This</color>
<color=#75715e>   * method must be called before writing any other fields.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>registerPriKeyObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Called by ObjectArrayFormat and PrimitiveArrayFormat to write the array length. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeArrayLength</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Called by EnumFormat to write the given index of the enum constant. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeEnumConstant</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>

  <color=#75715e>/* The following methods are a subset of the methods in TupleOutput. */</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeString</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeChar</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeByte</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedFloat</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedDouble</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeBigInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedBigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>