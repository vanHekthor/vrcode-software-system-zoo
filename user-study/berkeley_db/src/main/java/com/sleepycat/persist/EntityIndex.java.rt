<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.collections.StoredMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.collections.StoredSortedMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.SortedMap</color><color=#f8f8f2>;</color>
<color=#75715e>/* <!-- end JE only --> */</color>

<color=#75715e>/**</color>
<color=#75715e> * The interface for accessing keys and entities via a primary or secondary index.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code EntityIndex} objects are thread-safe. Multiple threads may safely call the methods of a</color>
<color=#75715e> * shared {@code EntityIndex} object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>An index is conceptually a <em>map</em>. {key:value} mappings are stored in the index and</color>
<color=#75715e> * accessed by key. In fact, for interoperability with other libraries that use the standard Java</color>
<color=#75715e> * {@link Map} or {@link SortedMap} interfaces, an {@code EntityIndex} may be accessed via these</color>
<color=#75715e> * standard interfaces by calling the {@link #map} or {@link #sortedMap} methods.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code EntityIndex} is an interface that is implemented by several classes in this package for</color>
<color=#75715e> * different purposes. Depending on the context, the key type (K) and value type (V) of the index</color>
<color=#75715e> * take on different meanings. The different classes that implement {@code EntityIndex} are:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link PrimaryIndex} maps primary keys to entities.</color>
<color=#75715e> *   <li>{@link SecondaryIndex} maps secondary keys to entities.</color>
<color=#75715e> *   <li>{@link SecondaryIndex#keysIndex} maps secondary keys to primary keys.</color>
<color=#75715e> *   <li>{@link SecondaryIndex#subIndex} maps primary keys to entities, for the subset of entities</color>
<color=#75715e> *       having a specified secondary key.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>In all cases, the index key type (K) is a primary or secondary key class. The index value type</color>
<color=#75715e> * (V) is an entity class in all cases except for a {@link SecondaryIndex#keysIndex}, when it is a</color>
<color=#75715e> * primary key class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In the following example, a {@code Employee} entity with a {@code MANY_TO_ONE} secondary key</color>
<color=#75715e> * is defined.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE)}</color>
<color=#75715e> *     String department;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Consider that we have stored the entities below: <div></color>
<color=#75715e> *</color>
<color=#75715e> * <table class="code" border="1" summary=""></color>
<color=#75715e> *   <tr><th colspan="3">Entities</th></tr></color>
<color=#75715e> *   <tr><th>ID</th><th>Department</th><th>Name</th></tr></color>
<color=#75715e> *   <tr><td>1</td><td>Engineering</td><td>Jane Smith</td></tr></color>
<color=#75715e> *   <tr><td>2</td><td>Sales</td><td>Joan Smith</td></tr></color>
<color=#75715e> *   <tr><td>3</td><td>Engineering</td><td>John Smith</td></tr></color>
<color=#75715e> *   <tr><td>4</td><td>Sales</td><td>Jim Smith</td></tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * </div></color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@link PrimaryIndex} maps primary keys to entities:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code PrimaryIndex<Long, Employee>} primaryIndex =</color>
<color=#75715e> *     store.getPrimaryIndex(Long.class, Employee.class);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <div></color>
<color=#75715e> *</color>
<color=#75715e> * <table class="code" border="1" summary=""></color>
<color=#75715e> *   <tr><th colspan="4">primaryIndex</th></tr></color>
<color=#75715e> *   <tr><th>Primary Key</th><th colspan="3">Entity</th></tr></color>
<color=#75715e> *   <tr><td>1</td><td>1</td><td>Engineering</td><td>Jane Smith</td></tr></color>
<color=#75715e> *   <tr><td>2</td><td>2</td><td>Sales</td><td>Joan Smith</td></tr></color>
<color=#75715e> *   <tr><td>3</td><td>3</td><td>Engineering</td><td>John Smith</td></tr></color>
<color=#75715e> *   <tr><td>4</td><td>4</td><td>Sales</td><td>Jim Smith</td></tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * </div></color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@link SecondaryIndex} maps secondary keys to entities:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code SecondaryIndex<String, Long, Employee>} secondaryIndex =</color>
<color=#75715e> *     store.getSecondaryIndex(primaryIndex, String.class, "department");</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <div></color>
<color=#75715e> *</color>
<color=#75715e> * <table class="code" border="1" summary=""></color>
<color=#75715e> *   <tr><th colspan="4">secondaryIndex</th></tr></color>
<color=#75715e> *   <tr><th>Secondary Key</th><th colspan="3">Entity</th></tr></color>
<color=#75715e> *   <tr><td>Engineering</td><td>1</td><td>Engineering</td><td>Jane Smith</td></tr></color>
<color=#75715e> *   <tr><td>Engineering</td><td>3</td><td>Engineering</td><td>John Smith</td></tr></color>
<color=#75715e> *   <tr><td>Sales</td><td>2</td><td>Sales</td><td>Joan Smith</td></tr></color>
<color=#75715e> *   <tr><td>Sales</td><td>4</td><td>Sales</td><td>Jim Smith</td></tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * </div></color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@link SecondaryIndex#keysIndex} maps secondary keys to primary keys:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityIndex<String, Long>} keysIndex = secondaryIndex.keysIndex();</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <div></color>
<color=#75715e> *</color>
<color=#75715e> * <table class="code" border="1" summary=""></color>
<color=#75715e> *   <tr><th colspan="4">keysIndex</th></tr></color>
<color=#75715e> *   <tr><th>Secondary Key</th><th colspan="3">Primary Key</th></tr></color>
<color=#75715e> *   <tr><td>Engineering</td><td>1</td></tr></color>
<color=#75715e> *   <tr><td>Engineering</td><td>3</td></tr></color>
<color=#75715e> *   <tr><td>Sales</td><td>2</td></tr></color>
<color=#75715e> *   <tr><td>Sales</td><td>4</td></tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * </div></color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@link SecondaryIndex#subIndex} maps primary keys to entities, for the subset of entities</color>
<color=#75715e> * having a specified secondary key:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityIndex<Long, Entity>} subIndex = secondaryIndex.subIndex("Engineering");</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <div></color>
<color=#75715e> *</color>
<color=#75715e> * <table class="code" border="1" summary=""></color>
<color=#75715e> *   <tr><th colspan="4">subIndex</th></tr></color>
<color=#75715e> *   <tr><th>Primary Key</th><th colspan="3">Entity</th></tr></color>
<color=#75715e> *   <tr><td>1</td><td>1</td><td>Engineering</td><td>Jane Smith</td></tr></color>
<color=#75715e> *   <tr><td>3</td><td>3</td><td>Engineering</td><td>John Smith</td></tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * </div></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Accessing the Index</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>An {@code EntityIndex} provides a variety of methods for retrieving entities from an index. It</color>
<color=#75715e> * also provides methods for deleting entities. However, it does not provide methods for inserting</color>
<color=#75715e> * and updating. To insert and update entities, use the {@link PrimaryIndex#put} family of methods</color>
<color=#75715e> * in the {@link PrimaryIndex} class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>An {@code EntityIndex} supports two mechanisms for retrieving entities:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>The {@link #get} method returns a single value for a given key. If there are multiple</color>
<color=#75715e> *       values with the same secondary key (duplicates), it returns the first entity in the</color>
<color=#75715e> *       duplicate set.</color>
<color=#75715e> *   <li>An {@link EntityCursor} can be obtained using the {@link #keys} and {@link #entities}</color>
<color=#75715e> *       family of methods. A cursor can be used to return all values in the index, including</color>
<color=#75715e> *       duplicates. A cursor can also be used to return values within a specified range of keys.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Using the example entities above, calling {@link #get} on the primary index will always return</color>
<color=#75715e> * the employee with the given ID, or null if no such ID exists. But calling {@link #get} on the</color>
<color=#75715e> * secondary index will retrieve the first employee in the given department, which may not be very</color>
<color=#75715e> * useful:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Employee emp = primaryIndex.get(1);      // Returns by unique ID</color>
<color=#75715e> * emp = secondaryIndex.get("Engineering"); // Returns first in department</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Using a cursor, you can iterate through all duplicates in the secondary index:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = secondaryIndex.entities();</color>
<color=#75715e> * try {</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         if (entity.department.equals("Engineering")) {</color>
<color=#75715e> *             // Do something with the entity...</color>
<color=#75715e> *         }</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>But for a large database it is much more efficient to iterate over only those entities with</color>
<color=#75715e> * the secondary key you're searching for. This could be done by restricting a cursor to a range of</color>
<color=#75715e> * keys:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor =</color>
<color=#75715e> *     secondaryIndex.entities("Engineering", true, "Engineering", true);</color>
<color=#75715e> * try {</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         // Do something with the entity...</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>However, when you are interested only in the entities with a particular secondary key value,</color>
<color=#75715e> * it is more convenient to use a sub-index:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityIndex<Long, Entity>} subIndex = secondaryIndex.subIndex("Engineering");</color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = subIndex.entities();</color>
<color=#75715e> * try {</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         // Do something with the entity...</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>In addition to being more convenient than a cursor range, a sub-index allows retrieving by</color>
<color=#75715e> * primary key:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Employee emp = subIndex.get(1);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using a sub-index, all operations performed on the sub-index are restricted to the single</color>
<color=#75715e> * key that was specified when the sub-index was created. For example, the following returns null</color>
<color=#75715e> * because employee 2 is not in the Engineering department and therefore is not part of the</color>
<color=#75715e> * sub-index:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Employee emp = subIndex.get(2);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>For more information on using cursors and cursor ranges, see {@link EntityCursor}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that when using an index, keys and values are stored and retrieved by value not by</color>
<color=#75715e> * reference. In other words, if an entity object is stored and then retrieved, or retrieved twice,</color>
<color=#75715e> * each object will be a separate instance. For example, in the code below the assertion will always</color>
<color=#75715e> * fail.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * MyKey key = ...;</color>
<color=#75715e> * MyEntity entity1 = index.get(key);</color>
<color=#75715e> * MyEntity entity2 = index.get(key);</color>
<color=#75715e> * assert entity1 == entity2; // always fails!</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Deleting from the Index</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Any type of index may be used to delete entities with a specified key by calling {@link</color>
<color=#75715e> * #delete}. The important thing to keep in mind is that <em>all entities</em> with the specified</color>
<color=#75715e> * key are deleted. In a primary index, at most a single entity is deleted:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * primaryIndex.delete(1); // Deletes a single employee by unique ID</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>But in a secondary index, multiple entities may be deleted:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * secondaryIndex.delete("Engineering"); // Deletes all Engineering employees</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>This begs this question: How can a single entity be deleted without knowing its primary key?</color>
<color=#75715e> * The answer is to use cursors. After locating an entity using a cursor, the entity can be deleted</color>
<color=#75715e> * by calling {@link EntityCursor#delete}.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Transactions</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Transactions can be used to provide standard ACID (Atomicity, Consistency, Integrity and</color>
<color=#75715e> * Durability) guarantees when retrieving, storing and deleting entities. This section provides a</color>
<color=#75715e> * brief overview of how to use transactions with the Direct Persistence Layer. For more information</color>
<color=#75715e> * on using transactions, see <a href="{@docRoot}/../TransactionGettingStarted/index.html">Writing</color>
<color=#75715e> * Transactional Applications</a>.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Transactions may be used only with a transactional {@link EntityStore}, which is one for which</color>
<color=#75715e> * {@link StoreConfig#setTransactional StoreConfig.setTransactional(true)} has been called.</color>
<color=#75715e> * Likewise, a transactional store may only be used with a transactional {@link Environment}, which</color>
<color=#75715e> * is one for which {@link EnvironmentConfig#setTransactional</color>
<color=#75715e> * EnvironmentConfig.setTransactional(true)} has been called. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * EnvironmentConfig envConfig = new EnvironmentConfig();</color>
<color=#75715e> * envConfig.setTransactional(true);</color>
<color=#75715e> * envConfig.setAllowCreate(true);</color>
<color=#75715e> * Environment env = new Environment(new File("/my/data"), envConfig);</color>
<color=#75715e> *</color>
<color=#75715e> * StoreConfig storeConfig = new StoreConfig();</color>
<color=#75715e> * storeConfig.setTransactional(true);</color>
<color=#75715e> * storeConfig.setAllowCreate(true);</color>
<color=#75715e> * EntityStore store = new EntityStore(env, "myStore", storeConfig);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Transactions are represented by {@link Transaction} objects, which are part of the {@link</color>
<color=#75715e> * com.sleepycat.je Base API}. Transactions are created using the {@link</color>
<color=#75715e> * Environment#beginTransaction Environment.beginTransaction} method.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A transaction will include all operations for which the transaction object is passed as a</color>
<color=#75715e> * method argument. All retrieval, storage and deletion methods have an optional {@link Transaction}</color>
<color=#75715e> * parameter for this purpose. When a transaction is passed to a method that opens a cursor, all</color>
<color=#75715e> * retrieval, storage and deletion operations performed using that cursor will be included in the</color>
<color=#75715e> * transaction.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A transaction may be committed by calling {@link Transaction#commit} or aborted by calling</color>
<color=#75715e> * {@link Transaction#abort}. For example, two employees may be deleted atomically with a</color>
<color=#75715e> * transaction; other words, either both are deleted or neither is deleted:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Transaction txn = env.beginTransaction(null, null);</color>
<color=#75715e> * try {</color>
<color=#75715e> *     primaryIndex.delete(txn, 1);</color>
<color=#75715e> *     primaryIndex.delete(txn, 2);</color>
<color=#75715e> *     txn.commit();</color>
<color=#75715e> *     txn = null;</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     if (txn != null) {</color>
<color=#75715e> *         txn.abort();</color>
<color=#75715e> *     }</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>WARNING:</em> Transactions must always be committed or aborted to prevent resource leaks</color>
<color=#75715e> * which could lead to the index becoming unusable or cause an <code>OutOfMemoryError</code>. To</color>
<color=#75715e> * ensure that a transaction is aborted in the face of exceptions, call {@link Transaction#abort} in</color>
<color=#75715e> * a finally block.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For a transactional store, storage and deletion operations are always transaction protected,</color>
<color=#75715e> * whether or not a transaction is explicitly used. A null transaction argument means to perform the</color>
<color=#75715e> * operation using auto-commit, or the implied thread transaction if an XAEnvironment is being used.</color>
<color=#75715e> * A transaction is automatically started as part of the operation and is automatically committed if</color>
<color=#75715e> * the operation completes successfully. The transaction is automatically aborted if an exception</color>
<color=#75715e> * occurs during the operation, and the exception is re-thrown to the caller. For example, each</color>
<color=#75715e> * employee is deleted using a an auto-commit transaction below, but it is possible that employee 1</color>
<color=#75715e> * will be deleted and employee 2 will not be deleted, if an error or crash occurs while deleting</color>
<color=#75715e> * employee 2:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * primaryIndex.delete(null, 1);</color>
<color=#75715e> * primaryIndex.delete(null, 2);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When retrieving entities, a null transaction argument means to perform the operation</color>
<color=#75715e> * non-transactionally. The operation is performed outside the scope of any transaction, without</color>
<color=#75715e> * providing transactional ACID guarantees. If an implied thread transaction is present (i.e. if an</color>
<color=#75715e> * XAEnvironment is being used), that transaction is used. When a non-transactional store is used,</color>
<color=#75715e> * transactional ACID guarantees are also not provided.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For non-transactional and auto-commit usage, overloaded signatures for retrieval, storage and</color>
<color=#75715e> * deletion methods are provided to avoid having to pass a null transaction argument. For example,</color>
<color=#75715e> * {@link #delete} may be called instead of {@link #delete(Transaction,Object)}. For example, the</color>
<color=#75715e> * following code is equivalent to the code above where null was passed for the transaction:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * primaryIndex.delete(1);</color>
<color=#75715e> * primaryIndex.delete(2);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>For retrieval methods the overloaded signatures also include an optional {@link LockMode}</color>
<color=#75715e> * parameter, and overloaded signatures for opening cursors include an optional {@link CursorConfig}</color>
<color=#75715e> * parameter. These parameters are described further below in the Locking and Lock Modes section.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Transactions and Cursors</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>There are two special consideration when using cursors with transactions. First, for a</color>
<color=#75715e> * transactional store, a non-null transaction must be passed to methods that open a cursor if that</color>
<color=#75715e> * cursor will be used to delete or update entities. Cursors do not perform auto-commit when a null</color>
<color=#75715e> * transaction is explicitly passed or implied by the method signature. For example, the following</color>
<color=#75715e> * code will throw {@link DatabaseException} when the {@link EntityCursor#delete} method is called:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * // <strong>Does not work with a transactional store!</strong></color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = primaryIndex.entities();</color>
<color=#75715e> * try {</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         cursor.delete(); // <strong>Will throw DatabaseException.</strong></color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Instead, the {@link #entities(Transaction,CursorConfig)} signature must be used and a non-null</color>
<color=#75715e> * transaction must be passed:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = primaryIndex.entities(txn, null);</color>
<color=#75715e> * try {</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         cursor.delete();</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The second consideration is that error handling is more complex when using both transactions</color>
<color=#75715e> * and cursors, for the following reasons:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>When an exception occurs, the transaction should be aborted.</color>
<color=#75715e> *   <li>Cursors must be closed whether or not an exception occurs.</color>
<color=#75715e> *   <li>Cursors must be closed before committing or aborting the transaction.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Transaction txn = env.beginTransaction(null, null);</color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = null;</color>
<color=#75715e> * try {</color>
<color=#75715e> *     cursor = primaryIndex.entities(txn, null);</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         cursor.delete();</color>
<color=#75715e> *     }</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> *     cursor = null;</color>
<color=#75715e> *     txn.commit();</color>
<color=#75715e> *     txn = null;</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     if (cursor != null) {</color>
<color=#75715e> *         cursor.close();</color>
<color=#75715e> *     }</color>
<color=#75715e> *     if (txn != null) {</color>
<color=#75715e> *         txn.abort();</color>
<color=#75715e> *     }</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Locking and Lock Modes</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>This section provides a brief overview of locking and describes how lock modes are used with</color>
<color=#75715e> * the Direct Persistence Layer. For more information on locking, see <a</color>
<color=#75715e> * href="{@docRoot}/../TransactionGettingStarted/index.html">Writing Transactional Applications</a>.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using transactions, locks are normally acquired on each entity that is retrieved or</color>
<color=#75715e> * stored. The locks are used to isolate one transaction from another. Locks are normally released</color>
<color=#75715e> * only when the transaction is committed or aborted.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When not using transactions, locks are also normally acquired on each entity that is retrieved</color>
<color=#75715e> * or stored. However, these locks are released when the operation is complete. When using cursors,</color>
<color=#75715e> * in order to provide <em>cursor stability</em> locks are held until the cursor is moved to a</color>
<color=#75715e> * different entity or closed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This default locking behavior provides full transactional ACID guarantees and cursor</color>
<color=#75715e> * stability. However, application performance can sometimes be improved by compromising these</color>
<color=#75715e> * guarantees. As described in <a href="{@docRoot}/../TransactionGettingStarted/index.html">Writing</color>
<color=#75715e> * Transactional Applications</a>, the {@link LockMode} and {@link CursorConfig} parameters are two</color>
<color=#75715e> * of the mechanisms that can be used to make compromises.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example, imagine that you need an approximate count of all entities matching certain</color>
<color=#75715e> * criterion, and it is acceptable for entities to be changed by other threads or other transactions</color>
<color=#75715e> * while performing this query. {@link LockMode#READ_UNCOMMITTED} can be used to perform the</color>
<color=#75715e> * retrievals without acquiring any locks. This reduces memory consumption, does less processing,</color>
<color=#75715e> * and improves concurrency.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = primaryIndex.entities(txn, null);</color>
<color=#75715e> * try {</color>
<color=#75715e> *     Employee entity;</color>
<color=#75715e> *     while ((entity = cursor.next(LockMode.READ_UNCOMMITTED)) != null) {</color>
<color=#75715e> *         // Examine the entity and accumulate totals...</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link LockMode} parameter specifies locking behavior on a per-operation basis. If null or</color>
<color=#75715e> * {@link LockMode#DEFAULT} is specified, the default lock mode is used.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>It is also possible to specify the default locking behavior for a cursor using {@link</color>
<color=#75715e> * CursorConfig}. The example below is equivalent to the example above:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * CursorConfig config = new CursorConfig();</color>
<color=#75715e> * config.setReadUncommitted(true);</color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = primaryIndex.entities(txn, config);</color>
<color=#75715e> * try {</color>
<color=#75715e> *     Employee entity;</color>
<color=#75715e> *     while ((entity = cursor.next()) != null) {</color>
<color=#75715e> *         // Examine the entity and accumulate totals...</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <!-- begin JE only --></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that {@code READ_UNCOMMITTED} can be used with a key cursor to reduce I/O, potentially</color>
<color=#75715e> * providing significant performance benefits. See <a href="#keyCursorReadUncommitted">Key Cursor</color>
<color=#75715e> * Optimization with READ_UNCOMMITTED</a></color>
<color=#75715e> * <!-- end JE only --></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The use of other lock modes, cursor configuration, and transaction configuration are discussed</color>
<color=#75715e> * in <a href="{@docRoot}/../TransactionGettingStarted/index.html">Writing Transactional</color>
<color=#75715e> * Applications</a>.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3><a name="retries">Performing Transaction Retries</a></h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Lock conflict handling is another important topic discussed in <a</color>
<color=#75715e> * href="{@docRoot}/../TransactionGettingStarted/index.html">Writing Transactional Applications</a>.</color>
<color=#75715e> * To go along with that material, here we show a lock conflict handling loop in the context of the</color>
<color=#75715e> * Direct Persistence Layer. The example below shows deleting all entities in a primary index in a</color>
<color=#75715e> * single transaction. If a lock conflict occurs, the transaction is aborted and the operation is</color>
<color=#75715e> * retried.</color>
<color=#75715e> * <!-- begin JE only --></color>
<color=#75715e> *</color>
<color=#75715e> * <p>This is a DPL version of the <a href="../je/LockConflictException.html#retries">equivalent</color>
<color=#75715e> * example code</a> for the base API.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following example code illustrates the recommended approach. Note that the {@code</color>
<color=#75715e> * Environment.beginTransaction} and {@code Transaction.commit} calls are intentially inside the</color>
<color=#75715e> * {@code try} block. When using JE-HA, this will make it easy to add a {@code catch} for other</color>
<color=#75715e> * exceptions that can be resolved by retrying the transaction, such as consistency exceptions.</color>
<color=#75715e> * <!-- end JE only --></color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  void doTransaction(final Environment env,</color>
<color=#75715e> *                     final {@code PrimaryIndex<Long, Employee>} primaryIndex,</color>
<color=#75715e> *                     final int maxTries)</color>
<color=#75715e> *      throws DatabaseException {</color>
<color=#75715e> *</color>
<color=#75715e> *      boolean success = false;</color>
<color=#75715e> *      long sleepMillis = 0;</color>
<color=#75715e> *      for (int i = 0; i &lt; maxTries; i++) {</color>
<color=#75715e> *          // Sleep before retrying.</color>
<color=#75715e> *          if (sleepMillis != 0) {</color>
<color=#75715e> *              Thread.sleep(sleepMillis);</color>
<color=#75715e> *              sleepMillis = 0;</color>
<color=#75715e> *          }</color>
<color=#75715e> *          Transaction txn = null;</color>
<color=#75715e> *          try {</color>
<color=#75715e> *              txn = env.beginTransaction(null, null);</color>
<color=#75715e> *              final {@code EntityCursor<Employee>} cursor =</color>
<color=#75715e> *                  primaryIndex.entities(txn, null);</color>
<color=#75715e> *              try {</color>
<color=#75715e> *                  // INSERT APP-SPECIFIC CODE HERE:</color>
<color=#75715e> *                  // Perform read and write operations, for example:</color>
<color=#75715e> *                  for (Employee entity : cursor) {</color>
<color=#75715e> *                      cursor.delete();</color>
<color=#75715e> *                  }</color>
<color=#75715e> *              } finally {</color>
<color=#75715e> *                  cursor.close();</color>
<color=#75715e> *              }</color>
<color=#75715e> *              txn.commit();</color>
<color=#75715e> *              success = true;</color>
<color=#75715e> *              return;</color>
<color=#75715e> *          } catch (LockConflictException e) {</color>
<color=#75715e> *              sleepMillis = LOCK_CONFLICT_RETRY_SEC * 1000;</color>
<color=#75715e> *              continue;</color>
<color=#75715e> *          } finally {</color>
<color=#75715e> *              if (!success) {</color>
<color=#75715e> *                  if (txn != null) {</color>
<color=#75715e> *                      txn.abort();</color>
<color=#75715e> *                  }</color>
<color=#75715e> *              }</color>
<color=#75715e> *          }</color>
<color=#75715e> *      }</color>
<color=#75715e> *      // INSERT APP-SPECIFIC CODE HERE:</color>
<color=#75715e> *      // Transaction failed, despite retries.</color>
<color=#75715e> *      // Take some app-specific course of action.</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Low Level Access</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each Direct Persistence Layer index is associated with an underlying {@link Database} or</color>
<color=#75715e> * {@link SecondaryDatabase} defined in the {@link com.sleepycat.je Base API}. At this level, an</color>
<color=#75715e> * index is a Btree managed by the Berkeley DB Java Edition transactional storage engine. Although</color>
<color=#75715e> * you may never need to work at the {@code Base API} level, keep in mind that some types of</color>
<color=#75715e> * performance tuning can be done by configuring the underlying databases. See the {@link</color>
<color=#75715e> * EntityStore} class for more information on database and sequence configuration.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If you wish to access an index using the {@code Base API}, you may call the {@link</color>
<color=#75715e> * PrimaryIndex#getDatabase} or {@link SecondaryIndex#getDatabase} method to get the underlying</color>
<color=#75715e> * database. To translate between entity or key objects and {@link DatabaseEntry} objects at this</color>
<color=#75715e> * level, use the bindings returned by {@link PrimaryIndex#getEntityBinding}, {@link</color>
<color=#75715e> * PrimaryIndex#getKeyBinding}, and {@link SecondaryIndex#getKeyBinding}.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>EntityIndex</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the underlying database for this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the database.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Database</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks for existence of a key in this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The operation will not be transaction protected, and {@link LockMode#DEFAULT} is used</color>
<color=#75715e>   * implicitly.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@code READ_UNCOMMITTED} can be used with this method to reduce I/O, since the record data</color>
<color=#75715e>   * item will not be read. This is the same benefit as described in <a</color>
<color=#75715e>   * href="#keyCursorReadUncommitted">Key Cursor Optimization with READ_UNCOMMITTED</a></color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @return whether the key exists in the index.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks for existence of a key in this index.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@code READ_UNCOMMITTED} can be used with this method to reduce I/O, since the record data</color>
<color=#75715e>   * item will not be read. This is the same benefit as described in <a</color>
<color=#75715e>   * href="#keyCursorReadUncommitted">Key Cursor Optimization with READ_UNCOMMITTED</a></color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect this operation, or null if the operation should not</color>
<color=#75715e>   *     be transaction protected.</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @param lockMode the lock mode to use for this operation, or null to use {@link</color>
<color=#75715e>   *     LockMode#DEFAULT}.</color>
<color=#75715e>   * @return whether the key exists in the index.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Gets an entity via a key of this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The operation will not be transaction protected, and {@link LockMode#DEFAULT} is used</color>
<color=#75715e>   * implicitly.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @return the value mapped to the given key, or null if the key is not present in the index.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>V</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Gets an entity via a key of this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect this operation, or null if the operation should not</color>
<color=#75715e>   *     be transaction protected.</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @param lockMode the lock mode to use for this operation, or null to use {@link</color>
<color=#75715e>   *     LockMode#DEFAULT}.</color>
<color=#75715e>   * @return the value mapped to the given key, or null if the key is not present in the index.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>V</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#75715e>/**</color>
<color=#75715e>   * Gets an entity via a key of this index, using Get type and ReadOptions parameters, and</color>
<color=#75715e>   * returning an EntityResult.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect this operation, or null if the operation should not</color>
<color=#75715e>   *     be transaction protected.</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @param getType must be {@link Get#SEARCH}.</color>
<color=#75715e>   * @param options the ReadOptions, or null to use default options.</color>
<color=#75715e>   * @return the EntityResult, including the value mapped to the given key, or null if the key is</color>
<color=#75715e>   *     not present in the index.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityResult</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>
  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a non-transactional count of the entities in this index.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation is faster than obtaining a count by scanning the index manually, and will not</color>
<color=#75715e>   * perturb the current contents of the cache. However, the count is not guaranteed to be accurate</color>
<color=#75715e>   * if there are concurrent updates. Note that this method does scan a significant portion of the</color>
<color=#75715e>   * index and should be considered a fairly expensive operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation will disable deletion of log files by the JE log cleaner during its execution</color>
<color=#75715e>   * and will consume a certain amount of memory (but without affecting the memory that is available</color>
<color=#75715e>   * for the JE cache). To avoid excessive memory consumption (and a potential {@code</color>
<color=#75715e>   * OutOfMemoryError}) this method places an internal limit on its memory consumption. If this</color>
<color=#75715e>   * limit is reached, the method will still work properly, but its performance will degrade. To</color>
<color=#75715e>   * specify a different memory limit than the one used by this method, use the {@link</color>
<color=#75715e>   * EntityIndex#count(long memoryLimit)} method.</color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of entities in this index.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a non-transactional count of the entities in this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation is faster than obtaining a count by scanning the index manually, and will not</color>
<color=#75715e>   * perturb the current contents of the cache. However, the count is not guaranteed to be accurate</color>
<color=#75715e>   * if there are concurrent updates. Note that this method does scan a significant portion of the</color>
<color=#75715e>   * index and should be considered a fairly expensive operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation will disable deletion of log files by the JE log cleaner during its execution</color>
<color=#75715e>   * and will consume a certain amount of memory (but without affecting the memory that is available</color>
<color=#75715e>   * for the JE cache). To avoid excessive memory consumption (and a potential {@code</color>
<color=#75715e>   * OutOfMemoryError}) this method takes as input an upper bound on the memory it may consume. If</color>
<color=#75715e>   * this limit is reached, the method will still work properly, but its performance will degrade.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of entities in this index.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memoryLimit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Deletes all entities with a given index key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Auto-commit is used implicitly if the store is transactional.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @return whether any entities were deleted.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Deletes all entities with a given index key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect this operation, null to use auto-commit, or null if</color>
<color=#75715e>   *     the store is non-transactional.</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @return whether any entities were deleted.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#75715e>/**</color>
<color=#75715e>   * Deletes all entities with a given index key, using a WriteOptions parameter and returning an</color>
<color=#75715e>   * OperationResult.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect this operation, null to use auto-commit, or null if</color>
<color=#75715e>   *     the store is non-transactional.</color>
<color=#75715e>   * @param key the key to search for.</color>
<color=#75715e>   * @param options the WriteOptions, or null to use default options.</color>
<color=#75715e>   * @return the OperationResult if any entities were deleted, else null. If</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>
  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing all keys in this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The operations performed with the cursor will not be transaction protected, and {@link</color>
<color=#75715e>   * CursorConfig#DEFAULT} is used implicitly. If the store is transactional, the cursor may not be</color>
<color=#75715e>   * used to update or delete entities.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that {@code READ_UNCOMMITTED} can be used with a key cursor to reduce I/O, potentially</color>
<color=#75715e>   * providing significant performance benefits. See <a href="#keyCursorReadUncommitted">Key Cursor</color>
<color=#75715e>   * Optimization with READ_UNCOMMITTED</a></color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>keys</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing all keys in this index.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that {@code READ_UNCOMMITTED} can be used with a key cursor to reduce I/O, potentially</color>
<color=#75715e>   * providing significant performance benefits. See <a href="#keyCursorReadUncommitted">Key Cursor</color>
<color=#75715e>   * Optimization with READ_UNCOMMITTED</a></color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect all operations performed with the cursor, or null if</color>
<color=#75715e>   *     the operations should not be transaction protected. If the store is non-transactional, null</color>
<color=#75715e>   *     must be specified. For a transactional store the transaction is optional for read-only</color>
<color=#75715e>   *     access and required for read-write access.</color>
<color=#75715e>   * @param config the cursor configuration that determines the default lock mode used for all</color>
<color=#75715e>   *     cursor operations, or null to implicitly use {@link CursorConfig#DEFAULT}.</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>keys</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing all entities in this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The operations performed with the cursor will not be transaction protected, and {@link</color>
<color=#75715e>   * CursorConfig#DEFAULT} is used implicitly. If the store is transactional, the cursor may not be</color>
<color=#75715e>   * used to update or delete entities.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>entities</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing all entities in this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect all operations performed with the cursor, or null if</color>
<color=#75715e>   *     the operations should not be transaction protected. If the store is non-transactional, null</color>
<color=#75715e>   *     must be specified. For a transactional store the transaction is optional for read-only</color>
<color=#75715e>   *     access and required for read-write access.</color>
<color=#75715e>   * @param config the cursor configuration that determines the default lock mode used for all</color>
<color=#75715e>   *     cursor operations, or null to implicitly use {@link CursorConfig#DEFAULT}.</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>entities</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing keys in a key range.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The operations performed with the cursor will not be transaction protected, and {@link</color>
<color=#75715e>   * CursorConfig#DEFAULT} is used implicitly. If the store is transactional, the cursor may not be</color>
<color=#75715e>   * used to update or delete entities.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that {@code READ_UNCOMMITTED} can be used with a key cursor to reduce I/O, potentially</color>
<color=#75715e>   * providing significant performance benefits. See <a href="#keyCursorReadUncommitted">Key Cursor</color>
<color=#75715e>   * Optimization with READ_UNCOMMITTED</a></color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fromKey is the lower bound of the key range, or null if the range has no lower bound.</color>
<color=#75715e>   * @param fromInclusive is true if keys greater than or equal to fromKey should be included in the</color>
<color=#75715e>   *     key range, or false if only keys greater than fromKey should be included.</color>
<color=#75715e>   * @param toKey is the upper bound of the key range, or null if the range has no upper bound.</color>
<color=#75715e>   * @param toInclusive is true if keys less than or equal to toKey should be included in the key</color>
<color=#75715e>   *     range, or false if only keys less than toKey should be included.</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>keys</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>fromKey</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>fromInclusive</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color> <color=#f8f8f2>toKey</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>toInclusive</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing keys in a key range.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   * <a name="keyCursorReadUncommitted"></color>
<color=#75715e>   *</color>
<color=#75715e>   * <h4>Key Cursor Optimization with READ_UNCOMMITTED</h4></color>
<color=#75715e>   *</color>
<color=#75715e>   * </a></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Using a key cursor potentially has a large performance benefit when the {@code</color>
<color=#75715e>   * READ_UNCOMMITTED} isolation mode is used. In this case, if the record data is not in the JE</color>
<color=#75715e>   * cache, it will not be read from disk. The performance benefit is potentially large because</color>
<color=#75715e>   * random access disk reads may be reduced. Examples are:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>Scanning all records in key order, when the entity is not needed and {@code</color>
<color=#75715e>   *       READ_UNCOMMITTED} isolation is acceptable.</color>
<color=#75715e>   *   <li>Skipping over records quickly to perform approximate pagination with {@code</color>
<color=#75715e>   *       READ_UNCOMMITTED} isolation.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For other isolation modes ({@code READ_COMMITTED}, {@code REPEATABLE_READ} and {@code</color>
<color=#75715e>   * SERIALIZABLE}), the performance benefit of a key cursor is not as significant. In this case,</color>
<color=#75715e>   * the data item must be read into the JE cache if it is not already present, in order to lock the</color>
<color=#75715e>   * record. The only performance benefit is that the data will not be copied from the JE cache to</color>
<color=#75715e>   * the application's entry parameter, and will not be unmarshalled into an entity object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For information on specifying isolation modes, see {@link LockMode}, {@link CursorConfig}</color>
<color=#75715e>   * and {@link com.sleepycat.je.TransactionConfig}.</color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect all operations performed with the cursor, or null if</color>
<color=#75715e>   *     the operations should not be transaction protected. If the store is non-transactional, null</color>
<color=#75715e>   *     must be specified. For a transactional store the transaction is optional for read-only</color>
<color=#75715e>   *     access and required for read-write access.</color>
<color=#75715e>   * @param fromKey is the lower bound of the key range, or null if the range has no lower bound.</color>
<color=#75715e>   * @param fromInclusive is true if keys greater than or equal to fromKey should be included in the</color>
<color=#75715e>   *     key range, or false if only keys greater than fromKey should be included.</color>
<color=#75715e>   * @param toKey is the upper bound of the key range, or null if the range has no upper bound.</color>
<color=#75715e>   * @param toInclusive is true if keys less than or equal to toKey should be included in the key</color>
<color=#75715e>   *     range, or false if only keys less than toKey should be included.</color>
<color=#75715e>   * @param config the cursor configuration that determines the default lock mode used for all</color>
<color=#75715e>   *     cursor operations, or null to implicitly use {@link CursorConfig#DEFAULT}.</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>keys</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>K</color> <color=#f8f8f2>fromKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>fromInclusive</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>K</color> <color=#f8f8f2>toKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>toInclusive</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing entities in a key range.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The operations performed with the cursor will not be transaction protected, and {@link</color>
<color=#75715e>   * CursorConfig#DEFAULT} is used implicitly. If the store is transactional, the cursor may not be</color>
<color=#75715e>   * used to update or delete entities.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fromKey is the lower bound of the key range, or null if the range has no lower bound.</color>
<color=#75715e>   * @param fromInclusive is true if keys greater than or equal to fromKey should be included in the</color>
<color=#75715e>   *     key range, or false if only keys greater than fromKey should be included.</color>
<color=#75715e>   * @param toKey is the upper bound of the key range, or null if the range has no upper bound.</color>
<color=#75715e>   * @param toInclusive is true if keys less than or equal to toKey should be included in the key</color>
<color=#75715e>   *     range, or false if only keys less than toKey should be included.</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>entities</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>fromKey</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>fromInclusive</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color> <color=#f8f8f2>toKey</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>toInclusive</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a cursor for traversing entities in a key range.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect all operations performed with the cursor, or null if</color>
<color=#75715e>   *     the operations should not be transaction protected. If the store is non-transactional, null</color>
<color=#75715e>   *     must be specified. For a transactional store the transaction is optional for read-only</color>
<color=#75715e>   *     access and required for read-write access.</color>
<color=#75715e>   * @param fromKey is the lower bound of the key range, or null if the range has no lower bound.</color>
<color=#75715e>   * @param fromInclusive is true if keys greater than or equal to fromKey should be included in the</color>
<color=#75715e>   *     key range, or false if only keys greater than fromKey should be included.</color>
<color=#75715e>   * @param toKey is the upper bound of the key range, or null if the range has no upper bound.</color>
<color=#75715e>   * @param toInclusive is true if keys less than or equal to toKey should be included in the key</color>
<color=#75715e>   *     range, or false if only keys less than toKey should be included.</color>
<color=#75715e>   * @param config the cursor configuration that determines the default lock mode used for all</color>
<color=#75715e>   *     cursor operations, or null to implicitly use {@link CursorConfig#DEFAULT}.</color>
<color=#75715e>   * @return the cursor.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityCursor</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>entities</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>K</color> <color=#f8f8f2>fromKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>fromInclusive</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>K</color> <color=#f8f8f2>toKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>toInclusive</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a standard Java map based on this entity index. The {@link StoredMap} returned is</color>
<color=#75715e>   * defined by the {@linkplain com.sleepycat.collections Collections API}. Stored collections</color>
<color=#75715e>   * conform to the standard Java collections framework interface.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the map.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>map</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a standard Java sorted map based on this entity index. The {@link StoredSortedMap}</color>
<color=#75715e>   * returned is defined by the {@linkplain com.sleepycat.collections Collections API}. Stored</color>
<color=#75715e>   * collections conform to the standard Java collections framework interface.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the map.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>sortedMap</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>