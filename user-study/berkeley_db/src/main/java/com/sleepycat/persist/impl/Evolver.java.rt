<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Transaction</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.SecondaryKeyMetadata</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Evolves each old format that is still relevant if necessary, using Mutations to configure</color>
<color=#75715e> * deleters, renamers, and converters.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>Evolver</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EVOLVE_NONE</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EVOLVE_NEEDED</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EVOLVE_FAILURE</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forceEvolution</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>disallowClassChanges</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nestedFormatsChanged</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>changedFormats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>errors</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>deleteDbs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>renameDbs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>renameFormats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f8f8f2>,</color> <color=#f8f8f2>Boolean</color><color=#f92672>></color> <color=#f8f8f2>evolvedFormats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>unprocessedFormats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>>></color> <color=#f8f8f2>subclassMap</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>Evolver</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>forceEvolution</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>disallowClassChanges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>catalog</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>storePrefix</color> <color=#f92672>=</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>newFormats</color> <color=#f92672>=</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>forceEvolution</color> <color=#f92672>=</color> <color=#f8f8f2>forceEvolution</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>disallowClassChanges</color> <color=#f92672>=</color> <color=#f8f8f2>disallowClassChanges</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>changedFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IdentityHashMap</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>errors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>deleteDbs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>renameDbs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>renameFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IdentityHashMap</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>evolvedFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f8f8f2>,</color> <color=#f8f8f2>Boolean</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>unprocessedFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>subclassMap</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getSubclassMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>final</color> <color=#f8f8f2>Mutations</color> <color=#a6e22e>getMutations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether any formats were changed during evolution, and therefore need to be stored in</color>
<color=#75715e>   * the catalog.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>areFormatsChanged</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>changedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether the given format was changed during evolution. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isFormatChanged</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>changedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setFormatsChanged</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkClassChangesAllowed</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>changedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nestedFormatsChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#75715e>/* PersistCatalog.expectNoClassChanges is true in unit tests only. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>PersistCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>expectNoClassChanges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"expectNoClassChanges"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkClassChangesAllowed</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>disallowClassChanges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"When performing an upgrade changes are not allowed "</color>
              <color=#f92672>+</color> <color=#e6db74>"but were made to: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the set of formats for a specific superclass format, or null if the superclass is not a</color>
<color=#75715e>   * complex type or has not subclasses.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#a6e22e>getSubclassFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>superFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>subclassMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an error string if any mutations are invalid or missing, or returns null otherwise. If</color>
<color=#75715e>   * non-null is returned, the store may not be opened.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>getErrors</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>errors</color>
          <color=#f92672>+</color> <color=#e6db74>"\n---\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"(Note that when upgrading an application in a replicated "</color>
          <color=#f92672>+</color> <color=#e6db74>"environment, this exception may indicate that the Master "</color>
          <color=#f92672>+</color> <color=#e6db74>"was mistakenly upgraded before this Replica could be "</color>
          <color=#f92672>+</color> <color=#e6db74>"upgraded, and the solution is to upgrade this Replica.)"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds a newline and the given error. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addError</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>error</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n---\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>error</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>getClassVersionLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>prefix</color> <color=#f92672>+</color> <color=#e6db74>" class: "</color> <color=#f92672>+</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" version: "</color> <color=#f92672>+</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds a specified error when no specific mutation is involved. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addEvolveError</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>scenario</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>error</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkClassChangesAllowed</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>scenario</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>scenario</color> <color=#f92672>=</color> <color=#e6db74>"Error"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>addError</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>scenario</color>
            <color=#f92672>+</color> <color=#e6db74>" when evolving"</color>
            <color=#f92672>+</color> <color=#f8f8f2>getClassVersionLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#e6db74>""</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#f8f8f2>getClassVersionLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#e6db74>" to"</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#e6db74>" Error: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>error</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds an error for an invalid mutation. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addInvalidMutation</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Mutation</color> <color=#f8f8f2>mutation</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>error</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkClassChangesAllowed</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>addError</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Invalid mutation: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>mutation</color>
            <color=#f92672>+</color> <color=#f8f8f2>getClassVersionLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#e6db74>" For"</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#f8f8f2>getClassVersionLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#e6db74>" New"</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#e6db74>" Error: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>error</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds an error for a missing mutation. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addMissingMutation</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>error</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkClassChangesAllowed</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>addError</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Mutation is missing to evolve"</color>
            <color=#f92672>+</color> <color=#f8f8f2>getClassVersionLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#e6db74>""</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#f8f8f2>getClassVersionLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#e6db74>" to"</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#e6db74>" Error: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>error</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called by PersistCatalog for all non-entity formats. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addNonEntityFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>unprocessedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by PersistCatalog after calling evolveFormat or addNonEntityFormat for all old formats.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We do not require deletion of an unreferenced class for two reasons: 1) built-in proxy</color>
<color=#75715e>   * classes may not be referenced, 2) the user may wish to declare persistent classes that are not</color>
<color=#75715e>   * yet used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>finishEvolution</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Process unreferenced classes. */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color> <color=#f8f8f2>:</color> <color=#f8f8f2>unprocessedFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>setUnused</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by PersistCatalog for all entity formats, and by Format.evolve methods for all</color>
<color=#75715e>   * potentially referenced non-entity formats.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isNew</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>oldEntityFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityFormat</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>trackEntityChanges</color> <color=#f92672>=</color> <color=#f8f8f2>oldEntityFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>saveNestedFormatsChanged</color> <color=#f92672>=</color> <color=#f8f8f2>nestedFormatsChanged</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>trackEntityChanges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nestedFormatsChanged</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Integer</color> <color=#f8f8f2>oldFormatId</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evolvedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormatId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>evolvedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormatId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolvedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormatId</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>evolveFormatInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>evolvedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormatId</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>().</color><color=#a6e22e>isNew</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nestedFormatsChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>trackEntityChanges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nestedFormatsChanged</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Format</color> <color=#f8f8f2>latest</color> <color=#f92672>=</color> <color=#f8f8f2>oldEntityFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>latest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>latest</color><color=#f8f8f2>.</color><color=#a6e22e>setEvolveNeeded</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>nestedFormatsChanged</color> <color=#f92672>=</color> <color=#f8f8f2>saveNestedFormatsChanged</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Tries to evolve a given existing format to the current version of the class and returns false</color>
<color=#75715e>   * if an invalid mutation is encountered or the configured mutations are not sufficient.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>evolveFormatInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Predefined formats and deleted classes never need evolving. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>isPredefined</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Get class mutations. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>oldName</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>oldVersion</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Renamer</color> <color=#f8f8f2>renamer</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getRenamer</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Deleter</color> <color=#f8f8f2>deleter</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getDeleter</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>deleter</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Class Deleter not allowed along with a Renamer or "</color> <color=#f92672>+</color> <color=#e6db74>"Converter for the same class"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For determining the new name, arrays get special treatment.  The</color>
<color=#75715e>     * component format is evolved in the process, and we disallow muations</color>
<color=#75715e>     * for arrays.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Mutation</color> <color=#f8f8f2>mutation</color> <color=#f92672>=</color>
            <color=#f8f8f2>(</color><color=#f8f8f2>deleter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>deleter</color> <color=#f8f8f2>:</color> <color=#f8f8f2>((</color><color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>converter</color> <color=#f8f8f2>:</color> <color=#f8f8f2>renamer</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>mutation</color><color=#f8f8f2>,</color> <color=#e6db74>"Mutations not allowed for an array"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>compFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>compFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>latest</color> <color=#f92672>=</color> <color=#f8f8f2>compFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>latest</color> <color=#f92672>!=</color> <color=#f8f8f2>compFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>latest</color><color=#f8f8f2>.</color><color=#a6e22e>isArray</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#e6db74>"["</color> <color=#f8f8f2>:</color> <color=#e6db74>"[L"</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>latest</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>';'</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>renamer</color><color=#f8f8f2>.</color><color=#a6e22e>getNewName</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Try to get the new class format.  Save exception for later. */</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>newFormatException</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Class</color> <color=#f8f8f2>newClass</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>newClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#f8f8f2>oldFormat</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>newFormatException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>newFormatException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newFormatException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the old format is not the existing latest version and the new</color>
<color=#75715e>       * format is not an existing format, then we must evolve the latest</color>
<color=#75715e>       * old version to the new format first.  We cannot evolve old</color>
<color=#75715e>       * format to a new format that may be discarded because it is equal</color>
<color=#75715e>       * to the latest existing format (which will remain the current</color>
<color=#75715e>       * version).</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color> <color=#f92672>!=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getPreviousVersion</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>containsValue</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Format</color> <color=#f8f8f2>oldLatestFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldLatestFormat</color> <color=#f92672>==</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* newFormat is no longer relevant [#21869]. */</color>
          <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the old format was previously evolved to the new format</color>
<color=#75715e>       * (which means the new format is actually an existing format),</color>
<color=#75715e>       * then there is nothing to do.  This is the case where no class</color>
<color=#75715e>       * changes were made.</color>
<color=#75715e>       *</color>
<color=#75715e>       * However, if mutations were specified when opening the catalog</color>
<color=#75715e>       * that are different than the mutations last used, then we must</color>
<color=#75715e>       * force the re-evolution of all old formats.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>forceEvolution</color> <color=#f92672>&&</color> <color=#f8f8f2>newFormat</color> <color=#f92672>==</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Apply class Renamer and continue if successful. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>applyClassRenamer</color><color=#f8f8f2>(</color><color=#f8f8f2>renamer</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Apply class Converter and return. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>converter</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Class converter not allowed for an entity class "</color>
                  <color=#f92672>+</color> <color=#e6db74>"that is no longer present or not having an "</color>
                  <color=#f92672>+</color> <color=#e6db74>"@Entity annotation"</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>evolveMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>applyConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Apply class Deleter and return. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>needDeleter</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>needDeleter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>deleter</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Class deleter not allowed when the class and its "</color>
                <color=#f92672>+</color> <color=#e6db74>"@Entity or @Persistent annotation is still present"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>applyClassDeleter</color><color=#f8f8f2>(</color><color=#f8f8f2>deleter</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needDeleter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>newFormatException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#75715e>/* FindBugs newFormat known to be null excluded. */</color>
          <color=#f8f8f2>addMissingMutation</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormatException</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>addMissingMutation</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#e6db74>"@Entity switched to/from @Persistent"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Class-level mutations have been applied.  Now apply field mutations</color>
<color=#75715e>     * (for complex classes) or special conversions (enum conversions, for</color>
<color=#75715e>     * example) by calling the old format's evolve method.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>evolve</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Use the old format and discard the new format. Called by Format.evolve when the old and new</color>
<color=#75715e>   * formats are identical.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>useOldFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>renamedFormat</color> <color=#f92672>=</color> <color=#f8f8f2>renameFormats</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>renamedFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The format was renamed but, because this method is called, we</color>
<color=#75715e>       * know that no other class changes were made.  Use the new/renamed</color>
<color=#75715e>       * format as the reader.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>renamedFormat</color> <color=#f92672>==</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>useEvolvedFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>renamedFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>renamedFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isCurrentVersion</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the user wants a new version number, but ther are no other</color>
<color=#75715e>       * changes, we will oblige.  Or, if an attempt is being made to</color>
<color=#75715e>       * use an old version, then the following events happened and we</color>
<color=#75715e>       * must evolve the old format:</color>
<color=#75715e>       * 1) The (previously) latest version of the format was evolved</color>
<color=#75715e>       * because it is not equal to the live class version.  Note that</color>
<color=#75715e>       * evolveFormatInternal always evolves the latest version first.</color>
<color=#75715e>       * 2) We are now attempting to evolve an older version of the same</color>
<color=#75715e>       * format, and it happens to be equal to the live class version.</color>
<color=#75715e>       * However, we're already committed to the new format, and we must</color>
<color=#75715e>       * evolve all versions.</color>
<color=#75715e>       * [#16467]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>useEvolvedFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* The new format is discarded. */</color>
      <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>useExistingFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Install an evolver Reader in the old format. Called by Format.evolve when the old and new</color>
<color=#75715e>   * formats are not identical.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>useEvolvedFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Reader</color> <color=#f8f8f2>evolveReader</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>setReader</color><color=#f8f8f2>(</color><color=#f8f8f2>evolveReader</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>setLatestVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>setFormatsChanged</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>applyClassRenamer</color><color=#f8f8f2>(</color><color=#f8f8f2>Renamer</color> <color=#f8f8f2>renamer</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkUpdatedVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>renamer</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>newClassName</color> <color=#f92672>=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>oldClassName</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
      <color=#75715e>/* Queue the renaming of the primary and secondary databases. */</color>
      <color=#f8f8f2>renameDbs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makePriDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldClassName</color><color=#f8f8f2>),</color>
          <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makePriDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>newClassName</color><color=#f8f8f2>));</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>keyMeta</color> <color=#f8f8f2>:</color>
          <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>().</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color> <color=#f92672>=</color> <color=#f8f8f2>keyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>renameDbs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makeSecDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makeSecDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>newClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Link the old format to the renamed format so that we can detect the</color>
<color=#75715e>     * rename in useOldFormat.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>renameFormats</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setFormatsChanged</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called by ComplexFormat when a secondary key name is changed. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>renameSecondaryDatabase</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>oldEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>oldKeyName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newKeyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>renameDbs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makeSecDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldKeyName</color><color=#f8f8f2>),</color>
        <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makeSecDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>newEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>newKeyName</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>applyClassDeleter</color><color=#f8f8f2>(</color><color=#f8f8f2>Deleter</color> <color=#f8f8f2>deleter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkUpdatedVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>deleter</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Queue the deletion of the primary and secondary databases. */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>className</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>deleteDbs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makePriDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>));</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>keyMeta</color> <color=#f8f8f2>:</color>
          <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>().</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>deleteDbs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makeSecDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>()));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set the format to deleted last, so that the above test using</color>
<color=#75715e>     * isCurrentVersion works properly.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>setDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>setLatestVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setFormatsChanged</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called by ComplexFormat when a secondary key is dropped. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>deleteSecondaryDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>oldEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>deleteDbs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>makeSecDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>applyConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkUpdatedVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConverterReader</color><color=#f8f8f2>(</color><color=#f8f8f2>converter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>useEvolvedFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>reader</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isClassConverted</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getReader</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ConverterReader</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkUpdatedVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>Mutation</color> <color=#f8f8f2>mutation</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEnum</color><color=#f8f8f2>()</color>
        <color=#f92672>&&</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>mutation</color><color=#f8f8f2>,</color> <color=#e6db74>"A new higher version number must be assigned"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>checkUpdatedVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>scenario</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEnum</color><color=#f8f8f2>()</color>
        <color=#f92672>&&</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addEvolveError</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>scenario</color><color=#f8f8f2>,</color> <color=#e6db74>"A new higher version number must be assigned"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>renameAndRemoveDatabases</color><color=#f8f8f2>(</color><color=#f8f8f2>Store</color> <color=#f8f8f2>store</color><color=#f8f8f2>,</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color> <color=#f8f8f2>:</color> <color=#f8f8f2>deleteDbs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>fileAndDbNames</color> <color=#f92672>=</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>parseDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>);</color>
      <color=#75715e>/* Do nothing if database does not exist. */</color>
      <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>removeDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>(),</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * An importunate locker must be used to rename databases, since rename</color>
<color=#75715e>     * with Database handles open is not currently possible.  This is the</color>
<color=#75715e>     * same sort of operation as performed by the HA replayer.  If the</color>
<color=#75715e>     * evolution (and rename here) occurs in a replication group upgrade,</color>
<color=#75715e>     * this will cause DatabasePreemptedException the next time the</color>
<color=#75715e>     * database is accessed (via the store or otherwise).  In a standalone</color>
<color=#75715e>     * environment, this won't happen because the database won't be open;</color>
<color=#75715e>     * evolve occurs before opening the database in this case.  [#16655]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>saveImportunate</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>saveImportunate</color> <color=#f92672>=</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>setImportunate</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>renameDbs</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>oldName</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>oldFileAndDbNames</color> <color=#f92672>=</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>parseDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>newFileAndDbNames</color> <color=#f92672>=</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>parseDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
        <color=#75715e>/* Do nothing if database does not exist. */</color>
        <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>renameDatabase</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>oldFileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>oldFileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>setImportunate</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>saveImportunate</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Evolves a primary key field or composite key field. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>evolveRequiredKeyField</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>oldParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>newField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>EVOLVE_NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>oldName</color> <color=#f92672>=</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FIELD_KIND</color> <color=#f92672>=</color> <color=#e6db74>"primary key field or composite key class field"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FIELD_LABEL</color> <color=#f92672>=</color> <color=#f8f8f2>FIELD_KIND</color> <color=#f92672>+</color> <color=#e6db74>": "</color> <color=#f92672>+</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newField</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addMissingMutation</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldParent</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newParent</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Field is missing and deletion is not allowed for a "</color> <color=#f92672>+</color> <color=#f8f8f2>FIELD_LABEL</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check field mutations.  Only a Renamer is allowed. */</color>
    <color=#f8f8f2>Deleter</color> <color=#f8f8f2>deleter</color> <color=#f92672>=</color>
        <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getDeleter</color><color=#f8f8f2>(</color><color=#f8f8f2>oldParent</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldParent</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>newParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>deleter</color><color=#f8f8f2>,</color> <color=#e6db74>"Deleter is not allowed for a "</color> <color=#f92672>+</color> <color=#f8f8f2>FIELD_LABEL</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color>
        <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>oldParent</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldParent</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>newParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#e6db74>"Converter is not allowed for a "</color> <color=#f92672>+</color> <color=#f8f8f2>FIELD_LABEL</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Renamer</color> <color=#f8f8f2>renamer</color> <color=#f92672>=</color>
        <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getRenamer</color><color=#f8f8f2>(</color><color=#f8f8f2>oldParent</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldParent</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>newField</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>renamer</color><color=#f8f8f2>.</color><color=#a6e22e>getNewName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>addInvalidMutation</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>oldParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>newParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#e6db74>"Converter is not allowed for a "</color> <color=#f92672>+</color> <color=#f8f8f2>FIELD_LABEL</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>EVOLVE_NEEDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>addMissingMutation</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>oldParent</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newParent</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Renamer is required when field name is changed from: "</color> <color=#f92672>+</color> <color=#f8f8f2>oldName</color> <color=#f92672>+</color> <color=#e6db74>" to: "</color> <color=#f92672>+</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Evolve the declared version of the field format.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFieldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>oldLatestFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFieldFormat</color> <color=#f92672>!=</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>EVOLVE_NEEDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>newFieldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>newField</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Formats are identical. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
            <color=#f92672>&&</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>())</color>
        <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
            <color=#f92672>&&</color> <color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Primitive <-> primitive wrapper type change. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_NEEDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Type was changed incompatibly. */</color>
      <color=#f8f8f2>addEvolveError</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldParent</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newParent</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Type may not be changed for a "</color> <color=#f92672>+</color> <color=#f8f8f2>FIELD_KIND</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Old field type: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" is not compatible with the new type: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" for field: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>