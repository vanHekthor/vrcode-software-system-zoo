<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.ClassMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.EntityModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.FieldMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawField</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Field</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Modifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.ParameterizedType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Type</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collection</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A field definition used by ComplexFormat and CompositeKeyFormat.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the equals(), compareTo() and hashCode() methods only use the name field in this</color>
<color=#75715e> * class. Comparing two FieldInfo objects is only done when both are declared in the same class, so</color>
<color=#75715e> * comparing the field name is sufficient.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>FieldInfo</color> <color=#66d9ef>implements</color> <color=#f8f8f2>RawField</color><color=#f8f8f2>,</color> <color=#f8f8f2>Serializable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Comparable</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>2062721100372306296L</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Returns a list of all non-transient non-static fields that are declared in the given class. */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#a6e22e>getInstanceFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassMetadata</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>fields</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clsMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>FieldMetadata</color><color=#f92672>></color> <color=#f8f8f2>persistentFields</color> <color=#f92672>=</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getPersistentFields</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>persistentFields</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fields</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>persistentFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color> <color=#f92672>=</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldMetadata</color> <color=#f8f8f2>fieldMeta</color> <color=#f8f8f2>:</color> <color=#f8f8f2>persistentFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>clsName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaringClassName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Persistent field "</color> <color=#f92672>+</color> <color=#f8f8f2>fieldMeta</color> <color=#f92672>+</color> <color=#e6db74>" must be declared in "</color> <color=#f92672>+</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>Field</color> <color=#f8f8f2>field</color><color=#f8f8f2>;</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaredField</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchFieldException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Persistent field "</color> <color=#f92672>+</color> <color=#f8f8f2>fieldMeta</color> <color=#f92672>+</color> <color=#e6db74>" is not declared in this class"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Persistent field "</color> <color=#f92672>+</color> <color=#f8f8f2>fieldMeta</color> <color=#f92672>+</color> <color=#e6db74>" must be of type "</color> <color=#f92672>+</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isStatic</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Persistent field "</color> <color=#f92672>+</color> <color=#f8f8f2>fieldMeta</color> <color=#f92672>+</color> <color=#e6db74>" may not be static"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fields</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Field</color><color=#f92672>[]</color> <color=#f8f8f2>declaredFields</color> <color=#f92672>=</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaredFields</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fields</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>declaredFields</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Field</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>declaredFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>mods</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isTransient</color><color=#f8f8f2>(</color><color=#f8f8f2>mods</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isStatic</color><color=#f8f8f2>(</color><color=#f8f8f2>mods</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fields</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>FieldInfo</color> <color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>fields</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>getFieldIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>fields</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getFieldIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>fields</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Field</color> <color=#f8f8f2>field</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#a6e22e>FieldInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>Field</color> <color=#f8f8f2>field</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>className</color> <color=#f92672>=</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>field</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>collectRelatedFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Prior to intialization we save the newly created format in the</color>
<color=#75715e>     * format field so that it can be used by class evolution.  But note</color>
<color=#75715e>     * that it may be replaced by the initialize method.  [#16233]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the created format is a NonPersistentFormat, and the field is a</color>
<color=#75715e>     * map or a collection, then the generic types of this field are</color>
<color=#75715e>     * ParameterizedTypes, e.g., Map<MyClass1, MyClass2>, so the formats of</color>
<color=#75715e>     * the generic types for this field, i.e., MyClass1 and MyClass2 will</color>
<color=#75715e>     * be created here. [#19377]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>NonPersistentFormat</color>
        <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>Collection</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getGenericType</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ParameterizedType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>collectParameterizedTypeFormats</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ParameterizedType</color><color=#f8f8f2>)</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getGenericType</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Create formats for the parameterized types, e.g., will create formats</color>
<color=#75715e>   * for MyClass1 and MyClass2 when meeting Map<MyClass1, Set<MyClass2>>,</color>
<color=#75715e>   * where MyClass1 and MyClass2 are instance of java.lang.Class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>collectParameterizedTypeFormats</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>,</color> <color=#f8f8f2>ParameterizedType</color> <color=#f8f8f2>parameType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Type</color><color=#f92672>[]</color> <color=#f8f8f2>types</color> <color=#f92672>=</color> <color=#f8f8f2>parameType</color><color=#f8f8f2>.</color><color=#a6e22e>getActualTypeArguments</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>types</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>types</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ParameterizedType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>collectParameterizedTypeFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ParameterizedType</color><color=#f8f8f2>)</color> <color=#f8f8f2>types</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>types</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Only use Catalog.createFormat to create the format for the</color>
<color=#75715e>         * class which is instance of java.lang.class.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>createFormat</color><color=#f8f8f2>((</color><color=#f8f8f2>Class</color><color=#f8f8f2>)</color> <color=#f8f8f2>types</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>migrateFromBeta</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Reset the format if it was never initialized, which can occur when a</color>
<color=#75715e>     * new format instance created during class evolution and discarded</color>
<color=#75715e>     * because nothing changed. [#16233]</color>
<color=#75715e>     *</color>
<color=#75715e>     * Note that the format field may be null when used in a composite key</color>
<color=#75715e>     * format used as a key comparator (via PersistComparator).  In that</color>
<color=#75715e>     * case (null format), we must not attempt to reset the format.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>isNew</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>Class</color> <color=#a6e22e>getFieldClass</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cls</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cls</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>String</color> <color=#a6e22e>getClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>className</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>other</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"[Field name: "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>" class: "</color> <color=#f92672>+</color> <color=#f8f8f2>className</color> <color=#f92672>+</color> <color=#e6db74>']'</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>