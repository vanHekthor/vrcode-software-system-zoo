<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.EvolveConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.EvolveStats</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.IncompatibleClassException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Mutations</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.impl.Store</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Closeable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A store for managing persistent entity objects.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code EntityStore} objects are thread-safe. Multiple threads may safely call the methods of a</color>
<color=#75715e> * shared {@code EntityStore} object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>See the <a href="package-summary.html#example">package summary example</a> for an example of</color>
<color=#75715e> * using an {@code EntityStore}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Before creating an <code>EntityStore</code> you must create an {@link Environment} object</color>
<color=#75715e> * using the Berkeley DB engine API. The environment may contain any number of entity stores and</color>
<color=#75715e> * their associated databases, as well as other databases not associated with an entity store.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>An entity store is based on an {@link EntityModel}: a data model which defines persistent</color>
<color=#75715e> * classes (<em>entity classes</em>), primary keys, secondary keys, and relationships between</color>
<color=#75715e> * entities. A primary index is created for each entity class. An associated secondary index is</color>
<color=#75715e> * created for each secondary key. The {@link Entity}, {@link PrimaryKey} and {@link SecondaryKey}</color>
<color=#75715e> * annotations may be used to define entities and keys.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To use an <code>EntityStore</code>, first obtain {@link PrimaryIndex} and {@link</color>
<color=#75715e> * SecondaryIndex} objects by calling {@link #getPrimaryIndex getPrimaryIndex} and {@link</color>
<color=#75715e> * #getSecondaryIndex getSecondaryIndex}. Then use these indices to store and access entity records</color>
<color=#75715e> * by key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Although not normally needed, you can also use the entity store along with the {@link</color>
<color=#75715e> * com.sleepycat.je Base API}. Methods in the {@link PrimaryIndex} and {@link SecondaryIndex}</color>
<color=#75715e> * classes may be used to obtain databases and bindings. The databases may be used directly for</color>
<color=#75715e> * accessing entity records. The bindings should be called explicitly to translate between {@link</color>
<color=#75715e> * com.sleepycat.je.DatabaseEntry} objects and entity model objects.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each primary and secondary index is associated internally with a {@link Database}. With any of</color>
<color=#75715e> * the above mentioned use cases, methods are provided that may be used for database performance</color>
<color=#75715e> * tuning. The {@link #setPrimaryConfig setPrimaryConfig} and {@link #setSecondaryConfig</color>
<color=#75715e> * setSecondaryConfig} methods may be called anytime before a database is opened via {@link</color>
<color=#75715e> * #getPrimaryIndex getPrimaryIndex} or {@link #getSecondaryIndex getSecondaryIndex}. The {@link</color>
<color=#75715e> * #setSequenceConfig setSequenceConfig} method may be called anytime before {@link #getSequence</color>
<color=#75715e> * getSequence} is called or {@link #getPrimaryIndex getPrimaryIndex} is called for a primary index</color>
<color=#75715e> * associated with that sequence.</color>
<color=#75715e> * <!-- begin JE only --></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Database Names</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The database names of primary and secondary indices are designed to be unique within the</color>
<color=#75715e> * environment and identifiable for debugging and use with tools such as {@link</color>
<color=#75715e> * com.sleepycat.je.util.DbDump} and {@link com.sleepycat.je.util.DbLoad}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The syntax of a primary index database name is:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre>   persist#STORE_NAME#ENTITY_CLASS</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Where STORE_NAME is the name parameter passed to {@link #EntityStore EntityStore} and</color>
<color=#75715e> * ENTITY_CLASS is name of the class passed to {@link #getPrimaryIndex getPrimaryIndex}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The syntax of a secondary index database name is:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre>   persist#STORE_NAME#ENTITY_CLASS#KEY_NAME</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Where KEY_NAME is the secondary key name passed to {@link #getSecondaryIndex</color>
<color=#75715e> * getSecondaryIndex}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Although you should never have to construct these names manually, understanding their syntax</color>
<color=#75715e> * is useful for several reasons:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Exception messages sometimes contain the database name, from which you can identify the</color>
<color=#75715e> *       entity class and secondary key.</color>
<color=#75715e> *   <li>If you create other databases in the same environment that are not part of an <code></color>
<color=#75715e> *       EntityStore</code>, to avoid naming conflicts the other database names should not begin</color>
<color=#75715e> *       with <code>"persist#"</code>.</color>
<color=#75715e> *   <li>If you are using {@link com.sleepycat.je.util.DbDump} or {@link</color>
<color=#75715e> *       com.sleepycat.je.util.DbLoad} to perform a backup or copy databases between environments,</color>
<color=#75715e> *       knowing the database names can be useful. Normally you will dump or load all database names</color>
<color=#75715e> *       starting with <code>"persist#STORE_NAME#"</code>.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If you are copying all databases in a store as mentioned in the last point above, there is one</color>
<color=#75715e> * further consideration. There are two internal databases that must be kept with the other</color>
<color=#75715e> * databases in the store in order for the store to be used. These contain the data formats and</color>
<color=#75715e> * sequences for the store:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre>   persist#STORE_NAME#com.sleepycat.persist.formats</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <pre>   persist#STORE_NAME#com.sleepycat.persist.sequences</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>These databases must normally be included with copies of other databases in the store. They</color>
<color=#75715e> * should not be modified by the application.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example, the following code snippet removes all databases for a given store in a single</color>
<color=#75715e> * transaction.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  Environment env = ...</color>
<color=#75715e> *  EntityStore store = ...</color>
<color=#75715e> *  Transaction txn = env.beginTransaction(null, null);</color>
<color=#75715e> *  String prefix = "persist#" + store.getStoreName() + "#";</color>
<color=#75715e> *  for (String dbName : env.getDatabaseNames()) {</color>
<color=#75715e> *      if (dbName.startsWith(prefix)) {</color>
<color=#75715e> *          env.removeDatabase(txn, dbName);</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> *  txn.commit();</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <!-- end JE only --></color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EntityStore</color>
    <color=#75715e>/* <!-- begin JE only --> */</color>
    <color=#66d9ef>implements</color> <color=#f8f8f2>Closeable</color>
<color=#75715e>/* <!-- end JE only --> */</color>
<color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Store</color> <color=#f8f8f2>store</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens an entity store in a given environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param env an open Berkeley DB Environment.</color>
<color=#75715e>   * @param storeName the name of the entity store within the given environment. An empty string is</color>
<color=#75715e>   *     allowed. Named stores may be used to distinguish multiple sets of persistent entities for</color>
<color=#75715e>   *     the same entity classes in a single environment. Underlying database names are prefixed</color>
<color=#75715e>   *     with the store name.</color>
<color=#75715e>   * @param config the entity store configuration, or null to use default configuration properties.</color>
<color=#75715e>   * @throws StoreExistsException when the {@link StoreConfig#setExclusiveCreate ExclusiveCreate}</color>
<color=#75715e>   *     configuration parameter is true and the store's internal catalog database already exists.</color>
<color=#75715e>   * @throws StoreNotFoundException when when the {@link StoreConfig#setAllowCreate AllowCreate}</color>
<color=#75715e>   *     configuration parameter is false and the store's internal catalog database does not exist.</color>
<color=#75715e>   * @throws IncompatibleClassException if an incompatible class change has been made and mutations</color>
<color=#75715e>   *     are not configured for handling the change. See {@link com.sleepycat.persist.evolve Class</color>
<color=#75715e>   *     Evolution} for more information.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs. If the store does not exist and the {@link StoreConfig#setAllowCreate AllowCreate}</color>
<color=#75715e>   *     parameter is true, then one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a> may</color>
<color=#75715e>   *     also occur.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>EntityStore</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>StoreConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>StoreExistsException</color><color=#f8f8f2>,</color> <color=#f8f8f2>StoreNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IncompatibleClassException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>store</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Store</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*rawAccess*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the environment associated with this store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>getEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a copy of the entity store configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the config.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>getConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the name of this store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the name.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getStoreName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getStoreName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#75715e>/**</color>
<color=#75715e>   * Returns the names of all entity stores in the given environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the store names. An empty set is returned if no stores are present.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getStoreNames</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>getStoreNames</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#75715e>/** @hidden For internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicaUpgradeMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicaUpgradeMode</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the current entity model for this store. The current model is derived from the</color>
<color=#75715e>   * configured entity model and the live entity class definitions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the model.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntityModel</color> <color=#a6e22e>getModel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getModel</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the set of mutations that were configured when the store was opened, or if none were</color>
<color=#75715e>   * configured, the set of mutations that were configured and stored previously.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the mutations.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Mutations</color> <color=#a6e22e>getMutations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getMutations</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the primary index for a given entity class, opening it if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If they are not already open, the primary and secondary databases for the entity class are</color>
<color=#75715e>   * created/opened together in a single internal transaction. When the secondary indices are</color>
<color=#75715e>   * opened, that can cascade to open other related primary indices.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param primaryKeyClass the class of the entity's primary key field, or the corresponding</color>
<color=#75715e>   *     primitive wrapper class if the primary key field type is a primitive.</color>
<color=#75715e>   * @param entityClass the entity class for which to open the primary index.</color>
<color=#75715e>   * @param <PK> the primary key class.</color>
<color=#75715e>   * @param <E> the entity class.</color>
<color=#75715e>   * @return the primary index.</color>
<color=#75715e>   * @throws IllegalArgumentException if the entity class or classes referenced by it are not</color>
<color=#75715e>   *     persistent, or the primary key class does not match the entity's primary key field, or if</color>
<color=#75715e>   *     metadata for the entity or primary key is invalid.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws IndexNotAvailableException in a replicated environment if this Replica's persistent</color>
<color=#75715e>   *     classes have been upgraded to define a new index, but the Master has not yet been upgraded.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs. If the index does not exist and the {@link StoreConfig#setReadOnly ReadOnly}</color>
<color=#75715e>   *     parameter is false, then one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a> may</color>
<color=#75715e>   *     also occur.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>PrimaryIndex</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>getPrimaryIndex</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f92672>></color> <color=#f8f8f2>primaryKeyClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryIndex</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>primaryKeyClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>primaryKeyClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexNotAvailableException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>attemptRefresh</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryIndex</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>primaryKeyClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>primaryKeyClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a secondary index for a given primary index and secondary key, opening it if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>NOTE:</em> If the secondary key field is declared in a subclass of the entity class, use</color>
<color=#75715e>   * {@link #getSubclassIndex} instead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If a {@link SecondaryKey#relatedEntity} is used and the primary index for the related entity</color>
<color=#75715e>   * is not already open, it will be opened by this method. That will, in turn, open its secondary</color>
<color=#75715e>   * indices, which can cascade to open other primary indices.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param primaryIndex the primary index associated with the returned secondary index. The entity</color>
<color=#75715e>   *     class of the primary index, or one of its superclasses, must contain a secondary key with</color>
<color=#75715e>   *     the given secondary key class and key name.</color>
<color=#75715e>   * @param keyClass the class of the secondary key field, or the corresponding primitive wrapper</color>
<color=#75715e>   *     class if the secondary key field type is a primitive.</color>
<color=#75715e>   * @param keyName the name of the secondary key field, or the {@link SecondaryKey#name} if this</color>
<color=#75715e>   *     name annotation property was specified.</color>
<color=#75715e>   * @param <SK> the secondary key class.</color>
<color=#75715e>   * @param <PK> the primary key class.</color>
<color=#75715e>   * @param <E> the entity class.</color>
<color=#75715e>   * @return the secondary index.</color>
<color=#75715e>   * @throws IllegalArgumentException if the entity class or one of its superclasses does not</color>
<color=#75715e>   *     contain a key field of the given key class and key name, or if the metadata for the</color>
<color=#75715e>   *     secondary key is invalid.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws IndexNotAvailableException in a replicated environment if this Replica's persistent</color>
<color=#75715e>   *     classes have been upgraded to define a new index, but the Master has not yet been upgraded.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs. If the index does not exist and the {@link StoreConfig#setReadOnly ReadOnly}</color>
<color=#75715e>   *     parameter is false, then one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a> may</color>
<color=#75715e>   *     also occur.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>SecondaryIndex</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>getSecondaryIndex</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>PrimaryIndex</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f92672>></color> <color=#f8f8f2>keyClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryIndex</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityClass</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexNotAvailableException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>attemptRefresh</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryIndex</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityClass</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a secondary index for a secondary key in an entity subclass, opening it if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If a {@link SecondaryKey#relatedEntity} is used and the primary index for the related entity</color>
<color=#75715e>   * is not already open, it will be opened by this method. That will, in turn, open its secondary</color>
<color=#75715e>   * indices, which can cascade to open other primary indices.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param primaryIndex the primary index associated with the returned secondary index. The entity</color>
<color=#75715e>   *     class of the primary index, or one of its superclasses, must contain a secondary key with</color>
<color=#75715e>   *     the given secondary key class and key name.</color>
<color=#75715e>   * @param entitySubclass a subclass of the entity class for the primary index. The entity subclass</color>
<color=#75715e>   *     must contain a secondary key with the given secondary key class and key name.</color>
<color=#75715e>   * @param keyClass the class of the secondary key field, or the corresponding primitive wrapper</color>
<color=#75715e>   *     class if the secondary key field type is a primitive.</color>
<color=#75715e>   * @param keyName the name of the secondary key field, or the {@link SecondaryKey#name} if this</color>
<color=#75715e>   *     name annotation property was specified.</color>
<color=#75715e>   * @param <SK> the secondary key class.</color>
<color=#75715e>   * @param <PK> the primary key class.</color>
<color=#75715e>   * @param <E1> the entity class.</color>
<color=#75715e>   * @param <E2> the entity sub-class.</color>
<color=#75715e>   * @return the secondary index.</color>
<color=#75715e>   * @throws IllegalArgumentException if the given entity subclass does not contain a key field of</color>
<color=#75715e>   *     the given key class and key name, or if the metadata for the secondary key is invalid.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws IndexNotAvailableException in a replicated environment if this Replica's persistent</color>
<color=#75715e>   *     classes have been upgraded to define a new index, but the Master has not yet been upgraded.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs. If the index does not exist and the {@link StoreConfig#setReadOnly ReadOnly}</color>
<color=#75715e>   *     parameter is false, then one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a> may</color>
<color=#75715e>   *     also occur.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E1</color><color=#f8f8f2>,</color> <color=#f8f8f2>E2</color> <color=#66d9ef>extends</color> <color=#f8f8f2>E1</color><color=#f92672>></color> <color=#f8f8f2>SecondaryIndex</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E2</color><color=#f92672>></color> <color=#a6e22e>getSubclassIndex</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>PrimaryIndex</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E1</color><color=#f92672>></color> <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>E2</color><color=#f92672>></color> <color=#f8f8f2>entitySubclass</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f92672>></color> <color=#f8f8f2>keyClass</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Make subclass metadata available before getting the index. */</color>
    <color=#f8f8f2>getModel</color><color=#f8f8f2>().</color><color=#a6e22e>getClassMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>entitySubclass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryIndex</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>entitySubclass</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexNotAvailableException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>attemptRefresh</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryIndex</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>entitySubclass</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>keyClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs conversion of unevolved objects in order to reduce lazy conversion overhead. Evolution</color>
<color=#75715e>   * may be performed concurrently with normal access to the store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Conversion is performed one entity class at a time. An entity class is converted only if it</color>
<color=#75715e>   * has {@link Mutations} associated with it via {@link StoreConfig#setMutations</color>
<color=#75715e>   * StoreConfig.setMutations}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Conversion of an entity class is performed by reading each entity, converting it if</color>
<color=#75715e>   * necessary, and updating it if conversion was performed. When all instances of an entity class</color>
<color=#75715e>   * are converted, references to the appropriate {@link Mutations} are deleted. Therefore, if this</color>
<color=#75715e>   * method is called twice successfully without changing class definitions, the second call will do</color>
<color=#75715e>   * nothing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config the EvolveConfig.</color>
<color=#75715e>   * @return the EvolveStats.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   * @see com.sleepycat.persist.evolve Class Evolution</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EvolveStats</color> <color=#a6e22e>evolve</color><color=#f8f8f2>(</color><color=#f8f8f2>EvolveConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>evolve</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Deletes all instances of this entity class and its (non-entity) subclasses.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The primary database for the given entity class will be truncated and all secondary</color>
<color=#75715e>   * databases will be removed. The primary and secondary databases associated with the entity class</color>
<color=#75715e>   * must not be open except by this store, since database truncation/removal is only possible when</color>
<color=#75715e>   * the database is not open.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The primary and secondary databases for the entity class will be closed by this operation</color>
<color=#75715e>   * and the existing {@link PrimaryIndex} and {@link SecondaryIndex} objects will be invalidated.</color>
<color=#75715e>   * To access the indexes, the user must call {@link #getPrimaryIndex} and {@link</color>
<color=#75715e>   * #getSecondaryIndex} after this operation is complete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Auto-commit is used implicitly if the store is transactional.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the entity class whose instances are to be deleted.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>truncateClass</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>truncateClass</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Deletes all instances of this entity class and its (non-entity) subclasses.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The primary database for the given entity class will be truncated and all secondary</color>
<color=#75715e>   * databases will be removed. The primary and secondary databases associated with the entity class</color>
<color=#75715e>   * must not be open except by this store, since database truncation/removal is only possible when</color>
<color=#75715e>   * the database is not open.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The primary and secondary databases for the entity class will be closed by this operation</color>
<color=#75715e>   * and the existing {@link PrimaryIndex} and {@link SecondaryIndex} objects will be invalidated.</color>
<color=#75715e>   * To access the indexes, the user must call {@link #getPrimaryIndex} and {@link</color>
<color=#75715e>   * #getSecondaryIndex} after this operation is complete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect this operation, null to use auto-commit, or null if</color>
<color=#75715e>   *     the store is non-transactional.</color>
<color=#75715e>   * @param entityClass the entity class whose instances are to be deleted.</color>
<color=#75715e>   *     <!-- begin JE only --></color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>truncateClass</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>truncateClass</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#75715e>/**</color>
<color=#75715e>   * Flushes each modified index to disk that was opened in deferred-write mode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>All indexes are opened in deferred-write mode if true was passed to {@link</color>
<color=#75715e>   * StoreConfig#setDeferredWrite} for the store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Alternatively, individual databases may be configured for deferred write using {@link</color>
<color=#75715e>   * DatabaseConfig#setDeferredWrite} along with {@link #getPrimaryConfig} and {@link</color>
<color=#75715e>   * #setPrimaryConfig}. Caution should be used when configuring only some databases for</color>
<color=#75715e>   * deferred-write, since durability will be different for these databases than for other databases</color>
<color=#75715e>   * in the same store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is equivalent to calling {@link Database#sync} for each deferred-write index</color>
<color=#75715e>   * Database that is open for this store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Instead of calling this method, {@link Environment#sync} may be used. The difference is that</color>
<color=#75715e>   * this method will only flush the databases for this store, while {@link Environment#sync} will</color>
<color=#75715e>   * sync all deferred-write databases currently open for the environment and will also perform a</color>
<color=#75715e>   * full checkpoint. This method is therefore less expensive than a full sync of the environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>sync</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>sync</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes the primary and secondary databases for the given entity class that were opened via this</color>
<color=#75715e>   * store. The caller must ensure that the primary and secondary indices for the entity class are</color>
<color=#75715e>   * no longer in use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The primary and secondary databases for the entity class will be closed by this operation</color>
<color=#75715e>   * and the existing {@link PrimaryIndex} and {@link SecondaryIndex} objects will be invalidated.</color>
<color=#75715e>   * To access the indexes, the user must call {@link #getPrimaryIndex} and {@link</color>
<color=#75715e>   * #getSecondaryIndex} after this operation is complete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the entity class whose databases are to be closed.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>closeClass</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>closeClass</color><color=#f8f8f2>(</color><color=#f8f8f2>entityClass</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes all databases and sequences that were opened via this store. The caller must ensure that</color>
<color=#75715e>   * no databases opened via this store are in use.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To prevent memory leaks, the application must call this method even when the</color>
<color=#75715e>   * Environment has become invalid. While this is not necessary for Database objects, it is</color>
<color=#75715e>   * necessary for EntityStore objects to prevent the accumulation of memory in the global DPL</color>
<color=#75715e>   * metadata cache.</color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a named sequence for using Berkeley DB engine API directly, opening it if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the sequence name, which is normally defined using the {@link PrimaryKey#sequence}</color>
<color=#75715e>   *     annotation property.</color>
<color=#75715e>   * @return the open sequence for the given sequence name.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Sequence</color> <color=#a6e22e>getSequence</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSequence</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the default Berkeley DB engine API configuration for a named key sequence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The returned configuration is as follows. All other properties have default values.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>The {@link SequenceConfig#setInitialValue InitialValue} is one.</color>
<color=#75715e>   *   <li>The {@link SequenceConfig#setRange Range} minimum is one.</color>
<color=#75715e>   *   <li>The {@link SequenceConfig#setCacheSize CacheSize} is 100.</color>
<color=#75715e>   *   <li>{@link SequenceConfig#setAutoCommitNoSync AutoCommitNoSync} is true.</color>
<color=#75715e>   *   <li>{@link SequenceConfig#setAllowCreate AllowCreate} is set to the inverse of the store</color>
<color=#75715e>   *       {@link StoreConfig#setReadOnly ReadOnly}. setting.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the sequence name, which is normally defined using the {@link PrimaryKey#sequence}</color>
<color=#75715e>   *     annotation property.</color>
<color=#75715e>   * @return the default configuration for the given sequence name.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SequenceConfig</color> <color=#a6e22e>getSequenceConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSequenceConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures a named key sequence using the Berkeley DB engine API.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To be compatible with the entity model and the Direct Persistence Layer, the configuration</color>
<color=#75715e>   * should be retrieved using {@link #getSequenceConfig getSequenceConfig}, modified, and then</color>
<color=#75715e>   * passed to this method. The following configuration properties may not be changed:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>{@link SequenceConfig#setExclusiveCreate ExclusiveCreate}</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, {@link SequenceConfig#setAllowCreate AllowCreate} must be the inverse of {@code</color>
<color=#75715e>   * ReadOnly}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the range is changed to include the value zero, see {@link PrimaryKey} for restrictions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the sequence name, which is normally defined using the {@link PrimaryKey#sequence}</color>
<color=#75715e>   *     annotation property.</color>
<color=#75715e>   * @param config the configuration to use for the given sequence name.</color>
<color=#75715e>   * @throws IllegalArgumentException if the configuration is incompatible with the entity model or</color>
<color=#75715e>   *     the Direct Persistence Layer.</color>
<color=#75715e>   * @throws IllegalStateException if the sequence has already been opened.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSequenceConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>SequenceConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>setSequenceConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the default primary database Berkeley DB engine API configuration for an entity class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The returned configuration is as follows. All other properties have default values.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setTransactional Transactional} is set to match {@link</color>
<color=#75715e>   *       StoreConfig#setTransactional StoreConfig}.</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setAllowCreate AllowCreate} is set to the inverse of the store</color>
<color=#75715e>   *       {@link StoreConfig#setReadOnly ReadOnly}. setting.</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setReadOnly ReadOnly} is set to match {@link</color>
<color=#75715e>   *       StoreConfig#setReadOnly StoreConfig}.</color>
<color=#75715e>   *       <!-- begin JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setDeferredWrite DeferredWrite} is set to match {@link</color>
<color=#75715e>   *       StoreConfig#setDeferredWrite StoreConfig}.</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setTemporary Temporary} is set to match {@link</color>
<color=#75715e>   *       StoreConfig#setTemporary StoreConfig}.</color>
<color=#75715e>   *       <!-- end JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setBtreeComparator BtreeComparator} is set to an internal class if</color>
<color=#75715e>   *       a key comparator is used.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the entity class identifying the primary database.</color>
<color=#75715e>   * @return the default configuration for the given entity class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseConfig</color> <color=#a6e22e>getPrimaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>entityClass</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the primary database for an entity class using the Berkeley DB engine API.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To be compatible with the entity model and the Direct Persistence Layer, the configuration</color>
<color=#75715e>   * should be retrieved using {@link #getPrimaryConfig getPrimaryConfig}, modified, and then passed</color>
<color=#75715e>   * to this method. The following configuration properties may not be changed:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setExclusiveCreate ExclusiveCreate}</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setSortedDuplicates SortedDuplicates}</color>
<color=#75715e>   *       <!-- begin JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setTemporary Temporary}</color>
<color=#75715e>   *       <!-- end JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setBtreeComparator BtreeComparator}</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, {@link DatabaseConfig#setAllowCreate AllowCreate} must be the inverse of {@code</color>
<color=#75715e>   * ReadOnly}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the entity class identifying the primary database.</color>
<color=#75715e>   * @param config the configuration to use for the given entity class.</color>
<color=#75715e>   * @throws IllegalArgumentException if the configuration is incompatible with the entity model or</color>
<color=#75715e>   *     the Direct Persistence Layer.</color>
<color=#75715e>   * @throws IllegalStateException if the database has already been opened.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPrimaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>setPrimaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the default secondary database Berkeley DB engine API configuration for an entity class</color>
<color=#75715e>   * and key name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The returned configuration is as follows. All other properties have default values.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setTransactional Transactional} is set to match the primary</color>
<color=#75715e>   *       database.</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setAllowCreate AllowCreate} is set to the inverse of the primary</color>
<color=#75715e>   *       database {@link DatabaseConfig#setReadOnly ReadOnly} setting.</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setReadOnly ReadOnly} is set to match the primary database.</color>
<color=#75715e>   *       <!-- begin JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setDeferredWrite DeferredWrite} is set to match the primary</color>
<color=#75715e>   *       database.</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setTemporary Temporary} is set to match {@link</color>
<color=#75715e>   *       StoreConfig#setTemporary StoreConfig}.</color>
<color=#75715e>   *       <!-- end JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setBtreeComparator BtreeComparator} is set to an internal class if</color>
<color=#75715e>   *       a key comparator is used.</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setSortedDuplicates SortedDuplicates} is set according to {@link</color>
<color=#75715e>   *       SecondaryKey#relate}.</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setAllowPopulate AllowPopulate} is set to true when a secondary</color>
<color=#75715e>   *       key is added to an existing primary index.</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setKeyCreator KeyCreator} or {@link</color>
<color=#75715e>   *       SecondaryConfig#setMultiKeyCreator MultiKeyCreator} is set to an internal instance.</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setForeignMultiKeyNullifier ForeignMultiKeyNullifier} is set to an</color>
<color=#75715e>   *       internal instance if {@link SecondaryKey#onRelatedEntityDelete} is {@link</color>
<color=#75715e>   *       DeleteAction#NULLIFY}.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the entity class containing the given secondary key name.</color>
<color=#75715e>   * @param keyName the name of the secondary key field, or the {@link SecondaryKey#name} if this</color>
<color=#75715e>   *     name annotation property was specified.</color>
<color=#75715e>   * @return the default configuration for the given secondary key.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>getSecondaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures a secondary database for an entity class and key name using the Berkeley DB engine</color>
<color=#75715e>   * API.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To be compatible with the entity model and the Direct Persistence Layer, the configuration</color>
<color=#75715e>   * should be retrieved using {@link #getSecondaryConfig getSecondaryConfig}, modified, and then</color>
<color=#75715e>   * passed to this method. The following configuration properties may not be changed:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setExclusiveCreate ExclusiveCreate}</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setSortedDuplicates SortedDuplicates}</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setBtreeComparator BtreeComparator}</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setDuplicateComparator DuplicateComparator}</color>
<color=#75715e>   *       <!-- begin JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link DatabaseConfig#setTemporary Temporary}</color>
<color=#75715e>   *       <!-- end JE only --></color>
<color=#75715e>   *       *</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setAllowPopulate AllowPopulate}</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setKeyCreator KeyCreator}</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setMultiKeyCreator MultiKeyCreator}</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setForeignKeyNullifier ForeignKeyNullifier}</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setForeignMultiKeyNullifier ForeignMultiKeyNullifier}</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setForeignKeyDeleteAction ForeignKeyDeleteAction}</color>
<color=#75715e>   *   <li>{@link SecondaryConfig#setForeignKeyDatabase ForeignKeyDatabase}</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, {@link DatabaseConfig#setAllowCreate AllowCreate} must be the inverse of {@code</color>
<color=#75715e>   * ReadOnly}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the entity class containing the given secondary key name.</color>
<color=#75715e>   * @param keyName the name of the secondary key field, or the {@link SecondaryKey#name} if this</color>
<color=#75715e>   *     name annotation property was specified.</color>
<color=#75715e>   * @param config the configuration to use for the given secondary key.</color>
<color=#75715e>   * @throws IllegalArgumentException if the configuration is incompatible with the entity model or</color>
<color=#75715e>   *     the Direct Persistence Layer.</color>
<color=#75715e>   * @throws IllegalStateException if the database has already been opened.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSecondaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>,</color> <color=#f8f8f2>SecondaryConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>setSecondaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>