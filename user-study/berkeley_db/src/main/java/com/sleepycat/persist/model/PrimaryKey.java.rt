<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.model</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.EntityStore</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.PrimaryIndex</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Documented</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Retention</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Target</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.ElementType.FIELD</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.RetentionPolicy.RUNTIME</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Indicates the primary key field of an entity class. The value of the primary key field is the</color>
<color=#75715e> * unique identifier for the entity in a {@link PrimaryIndex}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@link PrimaryKey} may appear on at most one declared field per class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Primary key values may be automatically assigned as sequential integers using a {@link</color>
<color=#75715e> * #sequence}. In this case the type of the key field is restricted to a simple integer type.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A primary key field may not be null, unless it is being assigned from a sequence.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><a name="keyTypes"><strong>Key Field Types</strong></a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The type of a key field must either be one of the following:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Any of the <a href="Entity.html#simpleTypes">simple types</a>.</color>
<color=#75715e> *   <li>An enum type.</color>
<color=#75715e> *   <li>A composite key class containing one or more simple type or enum fields.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Array types are not allowed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using a composite key class, each field of the composite key class must be annotated with</color>
<color=#75715e> * {@link KeyField} to identify the storage order and default sort order. See {@link KeyField} for</color>
<color=#75715e> * an example and more information on composite keys.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><a name="sortOrder"><strong>Key Sort Order</strong></a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Key field types, being simple types, have a well defined and reasonable default sort order,</color>
<color=#75715e> * described below. This sort order is based on a storage encoding that allows a fast byte-by-byte</color>
<color=#75715e> * comparison.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>All simple types except for {@code String} are encoded so that they are sorted as expected,</color>
<color=#75715e> *       that is, as if the {@link Comparable#compareTo} method of their class (or, for primitives,</color>
<color=#75715e> *       their wrapper class) is called.</color>
<color=#75715e> *   <li>Strings are encoded as UTF-8 byte arrays. Zero (0x0000) character values are UTF encoded as</color>
<color=#75715e> *       non-zero values, and therefore embedded zeros in the string are supported. The sequence</color>
<color=#75715e> *       {@literal {0xC0,0x80}} is used to encode a zero character. This UTF encoding is the same</color>
<color=#75715e> *       one used by native Java UTF libraries. However, this encoding of zero does impact the</color>
<color=#75715e> *       lexicographical ordering, and zeros will not be sorted first (the natural order) or last.</color>
<color=#75715e> *       For all character values other than zero, the default UTF byte ordering is the same as the</color>
<color=#75715e> *       Unicode lexicographical character ordering.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using a composite key class with more than one field, the sorting order among fields is</color>
<color=#75715e> * determined by the {@link KeyField} annotations. To override the default sort order, you can use a</color>
<color=#75715e> * composite key class that implements {@link Comparable}. This allows overriding the sort order and</color>
<color=#75715e> * is therefore useful even when there is only one key field in the composite key class. See <a</color>
<color=#75715e> * href="KeyField.html#comparable">Custom Sort Order</a> for more information on sorting of</color>
<color=#75715e> * composite keys.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><a name="inherit"><strong>Inherited Primary Key</strong></a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If it does not appear on a declared field in the entity class, {@code PrimaryKey} must appear</color>
<color=#75715e> * on a field of an entity superclass. In the following example, the primary key on the base class</color>
<color=#75715e> * is used:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Persistent}</color>
<color=#75715e> * class BaseClass {</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *     ...</color>
<color=#75715e> * }</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee extends BaseClass {</color>
<color=#75715e> *     // inherits id primary key</color>
<color=#75715e> *     ...</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If more than one class with {@code PrimaryKey} is present in a class hierarchy, the key in the</color>
<color=#75715e> * most derived class is used. In this case, primary key fields in superclasses are "shadowed" and</color>
<color=#75715e> * are not persistent. In the following example, the primary key in the base class is not used and</color>
<color=#75715e> * is not persistent:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Persistent}</color>
<color=#75715e> * class BaseClass {</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *     ...</color>
<color=#75715e> * }</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee extends BaseClass {</color>
<color=#75715e> *     // overrides id primary key</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String uuid;</color>
<color=#75715e> *     ...</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that a {@code PrimaryKey} is not allowed on entity subclasses. The following is illegal</color>
<color=#75715e> * and will cause an {@code IllegalArgumentException} when trying to store an {@code Employee}</color>
<color=#75715e> * instance:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Person {</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *     ...</color>
<color=#75715e> * }</color>
<color=#75715e> * {@literal @Persistent}</color>
<color=#75715e> * class Employee extends Person {</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String uuid;</color>
<color=#75715e> *     ...</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#a6e22e>@Documented</color>
<color=#a6e22e>@Retention</color><color=#f8f8f2>(</color><color=#f8f8f2>RUNTIME</color><color=#f8f8f2>)</color>
<color=#a6e22e>@Target</color><color=#f8f8f2>(</color><color=#f8f8f2>FIELD</color><color=#f8f8f2>)</color>
<color=#66d9ef>public</color> <color=#a6e22e>@interface</color> <color=#f8f8f2>PrimaryKey</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The name of a sequence from which to assign primary key values automatically. If a non-empty</color>
<color=#75715e>   * string is specified, sequential integers will be assigned from the named sequence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A single sequence may be used for more than one entity class by specifying the same sequence</color>
<color=#75715e>   * name for each {@code PrimaryKey}. For each named sequence, a {@link com.sleepycat.je.Sequence}</color>
<color=#75715e>   * will be used to assign key values. For more information on configuring sequences, see {@link</color>
<color=#75715e>   * EntityStore#setSequenceConfig EntityStore.setSequenceConfig}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To use a sequence, the type of the key field must be a primitive integer type ({@code byte},</color>
<color=#75715e>   * {@code short}, {@code int} or {@code long}) or the primitive wrapper class for one of these</color>
<color=#75715e>   * types. A composite key class may also be used to override sort order, but it may contain only a</color>
<color=#75715e>   * single key field, and this field must have one of the types previously mentioned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When an entity with a primary key sequence is stored using one of the <code>put</code></color>
<color=#75715e>   * methods in the {@link PrimaryIndex}, a new key will be assigned if the primary key field in the</color>
<color=#75715e>   * entity instance is null (for a reference type) or zero (for a primitive integer type).</color>
<color=#75715e>   * Specifying zero for a primitive integer key field is allowed because the initial value of the</color>
<color=#75715e>   * sequence is one (not zero) by default. If the sequence configuration is changed such that zero</color>
<color=#75715e>   * is part of the sequence, then the field type must be a primitive wrapper class and the field</color>
<color=#75715e>   * value must be null to cause a new key to be assigned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When one of the <code>put</code> methods in the {@link PrimaryIndex} is called and a new key</color>
<color=#75715e>   * is assigned, the assigned value is returned to the caller via the key field of the entity</color>
<color=#75715e>   * object that is passed as a parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the sequence name or an empty string.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>sequence</color><color=#f8f8f2>()</color> <color=#66d9ef>default</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>