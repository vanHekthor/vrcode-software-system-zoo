<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.evolve</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A mutation for converting an old version of an object value to conform to the current class or</color>
<color=#75715e> * field definition. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  package my.package;</color>
<color=#75715e> *</color>
<color=#75715e> *  // The old class.  Version 0 is implied.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Entity}</color>
<color=#75715e> *  class Person {</color>
<color=#75715e> *      // ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new class.  A new version number must be assigned.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Entity(version=1)}</color>
<color=#75715e> *  class Person {</color>
<color=#75715e> *      // Incompatible changes were made here...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // Add a converter mutation.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  Mutations mutations = new Mutations();</color>
<color=#75715e> *</color>
<color=#75715e> *  mutations.addConverter(new Converter(Person.class.getName(), 0,</color>
<color=#75715e> *                                       new MyConversion()));</color>
<color=#75715e> *</color>
<color=#75715e> *  // Configure the mutations as described {@link Mutations here}.</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>See {@link Conversion} for more information.</color>
<color=#75715e> *</color>
<color=#75715e> * @see com.sleepycat.persist.evolve Class Evolution</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Converter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Mutation</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>4558176842096181863L</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Conversion</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a mutation for converting all instances of the given class version to the current</color>
<color=#75715e>   * version of the class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param className the class to which this mutation applies.</color>
<color=#75715e>   * @param classVersion the class version to which this mutation applies.</color>
<color=#75715e>   * @param conversion converter instance.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Converter</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>classVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>Conversion</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>classVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a mutation for converting all values of the given field in the given class version to a</color>
<color=#75715e>   * type compatible with the current declared type of the field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param declaringClassName the class to which this mutation applies.</color>
<color=#75715e>   * @param declaringClassVersion the class version to which this mutation applies.</color>
<color=#75715e>   * @param fieldName field name to which this mutation applies.</color>
<color=#75715e>   * @param conversion converter instance.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Converter</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>declaringClassName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>declaringClassVersion</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Conversion</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>declaringClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>declaringClassVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>conversion</color> <color=#f92672>=</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Require explicit implementation of the equals method. */</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Method</color> <color=#f8f8f2>m</color> <color=#f92672>=</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#e6db74>"equals"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaringClass</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Conversion class does not implement the equals method "</color>
                <color=#f92672>+</color> <color=#e6db74>"explicitly (Object.equals is not sufficient): "</color>
                <color=#f92672>+</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the converter instance specified to the constructor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the converter instance.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Conversion</color> <color=#a6e22e>getConversion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the conversion objects are equal in this object and given object, and if the</color>
<color=#75715e>   * {@link Mutation#equals} superclass method returns true.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Converter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Converter</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Converter</color><color=#f8f8f2>)</color> <color=#f8f8f2>other</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>conversion</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>conversion</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"[Converter "</color> <color=#f92672>+</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" Conversion: "</color> <color=#f92672>+</color> <color=#f8f8f2>conversion</color> <color=#f92672>+</color> <color=#e6db74>']'</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>