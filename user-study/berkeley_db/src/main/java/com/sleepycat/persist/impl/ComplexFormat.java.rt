<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawField</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawObject</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Modifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Format for persistent complex classes that are not composite key classes. This includes entity</color>
<color=#75715e> * classes and subclasses.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ComplexFormat</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>2847843033590454917L</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassMetadata</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EntityMetadata</color> <color=#f8f8f2>entityMeta</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>secKeyFieldReader</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>nonKeyFieldReader</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>oldToNewKeyMap</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>newToOldFieldMap</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>evolveNeeded</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>rawAccessor</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldAddress</color><color=#f92672>></color> <color=#f8f8f2>secKeyAddresses</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawField</color><color=#f92672>></color> <color=#f8f8f2>rawFields</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>FieldInfo</color><color=#f92672>[]</color> <color=#f8f8f2>rawInputFields</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rawInputLevels</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>rawInputDepth</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This field contains the names of secondary keys that are incorrectly ordered because, in an</color>
<color=#75715e>   * earlier version, we failed to set the dup comparator. This bug applies only when the primary</color>
<color=#75715e>   * key has a comparator. The bug was fixed by setting the dup comparator to the primary key</color>
<color=#75715e>   * comparator, for all new secondary databases. [#17252]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A field containing an empty set signifies that no keys are incorrectly ordered, while a null</color>
<color=#75715e>   * field signifies that all keys are incorrect (when the primary key has a comparator). The field</color>
<color=#75715e>   * is assigned to an empty set when declared, so that it will be null only when a pre-fix version</color>
<color=#75715e>   * of the format is deserialized. (With Java serialization, when a field is added to a class and a</color>
<color=#75715e>   * previously serialized instance is deserialized, the new field will always be null).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This field is used to determine when a dup comparator should be set. We cannot set the</color>
<color=#75715e>   * comparator for secondary databases created prior to the bug fix, since ordering cannot be</color>
<color=#75715e>   * changed for existing records. See isSecKeyIncorrectlyOrdered and setSecKeyCorrectlyOrdered.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This field does not count in comparisons of formats during evolution. When the user wants to</color>
<color=#75715e>   * correct the ordering for an incorrectly ordered secondary database, she must delete the</color>
<color=#75715e>   * database but does not need to increment the class version. In other words, this is information</color>
<color=#75715e>   * about the database order but is not considered class metadata.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>incorrectlyOrderedSecKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * In JE 5.0 we changed the format for String fields. Instead of treating the String as an object</color>
<color=#75715e>   * with a format ID embedded in the serialized bytes, we treat it as a primitive and do not</color>
<color=#75715e>   * include the format ID. This works well because a field declared to be type String cannot be</color>
<color=#75715e>   * used to store any other object, and because the String tuple format supports null values.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A field containing false signifies that the old String format was used when the entity was</color>
<color=#75715e>   * written, while a true value signifies that the new String format was used. The field is</color>
<color=#75715e>   * assigned to true when declared, so that it will be false only when a pre-JE 5.0 version of the</color>
<color=#75715e>   * format is deserialized. (With Java serialization, when a boolean field is added to a class and</color>
<color=#75715e>   * a previously serialized instance is deserialized, the new field will always be false).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>newStringFormat</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassMetadata</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityMetadata</color> <color=#f8f8f2>entityMeta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>cls</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>clsMeta</color> <color=#f92672>=</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>entityMeta</color> <color=#f92672>=</color> <color=#f8f8f2>entityMeta</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>secKeyFields</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nonKeyFields</color> <color=#f92672>=</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getInstanceFields</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Validate primary key metadata and move primary key field from</color>
<color=#75715e>     * nonKeyFields to priKeyField.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryKey</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>fieldName</color> <color=#f92672>=</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryKey</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Primary key field does not exist: "</color> <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>'.'</color> <color=#f92672>+</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priKeyField</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Validate secondary key metadata and move secondary key fields from</color>
<color=#75715e>     * nonKeyFields to secKeyFields.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>secKeyMeta</color> <color=#f8f8f2>:</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>().</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>fieldName</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Secondary key field does not exist: "</color> <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>'.'</color> <color=#f92672>+</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>Class</color> <color=#f8f8f2>fieldCls</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getFieldClass</color><color=#f8f8f2>(</color><color=#f8f8f2>getCatalog</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>Relationship</color> <color=#f8f8f2>rel</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getRelationship</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rel</color> <color=#f92672>==</color> <color=#f8f8f2>Relationship</color><color=#f8f8f2>.</color><color=#a6e22e>ONE_TO_MANY</color> <color=#f92672>||</color> <color=#f8f8f2>rel</color> <color=#f92672>==</color> <color=#f8f8f2>Relationship</color><color=#f8f8f2>.</color><color=#a6e22e>MANY_TO_MANY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>PersistKeyCreator</color><color=#f8f8f2>.</color><color=#a6e22e>isManyType</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldCls</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"ONE_TO_MANY and MANY_TO_MANY keys must"</color>
                    <color=#f92672>+</color> <color=#e6db74>" have an array or Collection type: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>'.'</color>
                    <color=#f92672>+</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>PersistKeyCreator</color><color=#f8f8f2>.</color><color=#a6e22e>isManyType</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldCls</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"ONE_TO_ONE and MANY_TO_ONE keys must not"</color>
                    <color=#f92672>+</color> <color=#e6db74>" have an array or Collection type: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>'.'</color>
                    <color=#f92672>+</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldCls</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getDeleteAction</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>DeleteAction</color><color=#f8f8f2>.</color><color=#a6e22e>NULLIFY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"NULLIFY may not be used with primitive fields: "</color> <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>'.'</color> <color=#f92672>+</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Sort each group of fields by name. */</color>
    <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeyFields</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>migrateFromBeta</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>migrateFromBeta</color><color=#f8f8f2>(</color><color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>migrateFromBeta</color><color=#f8f8f2>(</color><color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>migrateFromBeta</color><color=#f8f8f2>(</color><color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>migrateFromBeta</color><color=#f8f8f2>(</color><color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns getSuperFormat cast to ComplexFormat. It is guaranteed that all super formats of a</color>
<color=#75715e>   * ComplexFormat are a ComplexFormat.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>ComplexFormat</color> <color=#a6e22e>getComplexSuper</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>getSuperFormat</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns getLatestVersion cast to ComplexFormat. It is guaranteed that all versions of a</color>
<color=#75715e>   * ComplexFormat are a ComplexFormat.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ComplexFormat</color> <color=#a6e22e>getComplexLatest</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>getLatestVersion</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>FieldInfo</color> <color=#a6e22e>getPriKeyFieldInfo</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>String</color> <color=#a6e22e>getPriKeyField</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryKey</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryKey</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isEntity</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>isEntityClass</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isModelClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ClassMetadata</color> <color=#a6e22e>getClassMetadata</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntityMetadata</color> <color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entityMeta</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#f8f8f2>ComplexFormat</color> <color=#a6e22e>getEntityFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isInitialized</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* The transient entityFormat field is set by initialize(). */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If not initialized, the entity format can be found by traversing</color>
<color=#75715e>       * the super formats.  However, this is only possible for an</color>
<color=#75715e>       * existing format which has its superFormat field set.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isNew</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>toString</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setEvolveNeeded</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>needed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>evolveNeeded</color> <color=#f92672>=</color> <color=#f8f8f2>needed</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getEvolveNeeded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>evolveNeeded</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getNewStringFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getEntityFormat</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newStringFormat</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawField</color><color=#f92672>></color> <color=#a6e22e>getFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Synchronization is not required since rawFields is immutable.  If</color>
<color=#75715e>     * by chance we create two maps when two threads execute this block, no</color>
<color=#75715e>     * harm is done.  But be sure to assign the rawFields field only after</color>
<color=#75715e>     * the map is fully populated.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rawFields</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawField</color><color=#f92672>></color> <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawField</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>RawField</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>field</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>RawField</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>field</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>rawFields</color> <color=#f92672>=</color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>rawFields</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>collectRelatedFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>();</color>
    <color=#75715e>/* Collect field formats. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>collectRelatedFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>collectRelatedFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>collectRelatedFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Collect TO_MANY secondary key field element class formats. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entityMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>secKeyMeta</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entityMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>().</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>elemClsName</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getElementClassName</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>elemClsName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Class</color> <color=#f8f8f2>elemCls</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>elemClsName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>elemCls</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Recursively collect superclass formats. */</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>superCls</color> <color=#f92672>=</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>superCls</color> <color=#f92672>!=</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>superFormat</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>superCls</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"The superclass of a complex type must not be a"</color>
                <color=#f92672>+</color> <color=#e6db74>" composite key class or a simple type class: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>superCls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Collect proxied format. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>proxiedClsName</color> <color=#f92672>=</color> <color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getProxiedClassName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proxiedClsName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>proxiedClsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Class</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>useEnhanced</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>useEnhanced</color> <color=#f92672>=</color> <color=#f8f8f2>EnhancedAccessor</color><color=#f8f8f2>.</color><color=#a6e22e>isEnhanced</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Initialize all fields. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Set the superclass format for a new (never initialized) format. */</color>
    <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>superFormat</color> <color=#f92672>=</color> <color=#f8f8f2>getComplexSuper</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>superFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Class</color> <color=#f8f8f2>superCls</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>superCls</color> <color=#f92672>!=</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>superFormat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>superCls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>setSuperFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Initialize the superclass format and validate the super accessor. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>initializeIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Accessor</color> <color=#f8f8f2>superAccessor</color> <color=#f92672>=</color> <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>objAccessor</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>superAccessor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useEnhanced</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>superAccessor</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>EnhancedAccessor</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"The superclass of an enhanced class must also "</color>
                    <color=#f92672>+</color> <color=#e6db74>"be enhanced: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>" extends "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>superAccessor</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ReflectionAccessor</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"The superclass of an unenhanced class must "</color>
                    <color=#f92672>+</color> <color=#e6db74>"not be enhanced: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>" extends "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Find entity format, if any. */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entityFormat</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Ensure that the current entity metadata is always referenced in</color>
<color=#75715e>     * order to return it to the user and to properly construct secondary</color>
<color=#75715e>     * key addresses.  Secondary key metadata can change in an entity</color>
<color=#75715e>     * subclass or be created when a new subclass is used, but this will</color>
<color=#75715e>     * not cause evolution of the entity class; instead, the metadata is</color>
<color=#75715e>     * updated here.  [#16467]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEntity</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entityMeta</color> <color=#f92672>=</color> <color=#f8f8f2>model</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>getClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Disallow proxy class that extends an entity class. [#15950] */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getProxiedClassName</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>entityFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"A proxy may not be an entity: "</color> <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Disallow primary keys on entity subclasses.  [#15757] */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entityFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>entityFormat</color> <color=#f92672>!=</color> <color=#66d9ef>this</color> <color=#f92672>&&</color> <color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"A PrimaryKey may not appear on an Entity subclass: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" field: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Create the accessors. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useEnhanced</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>objAccessor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnhancedAccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Accessor</color> <color=#f8f8f2>superObjAccessor</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>objAccessor</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>objAccessor</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>ReflectionAccessor</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>superObjAccessor</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Accessor</color> <color=#f8f8f2>superRawAccessor</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccessor</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>rawAccessor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RawAccessor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>superRawAccessor</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Initialize secondary key field addresses. */</color>
    <color=#f8f8f2>EntityMetadata</color> <color=#f8f8f2>latestEntityMeta</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entityFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>latestEntityMeta</color> <color=#f92672>=</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>().</color><color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>latestEntityMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secKeyAddresses</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldAddress</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>thisLatest</color> <color=#f92672>=</color> <color=#f8f8f2>getComplexLatest</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisLatest</color> <color=#f92672>!=</color> <color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>thisLatest</color><color=#f8f8f2>.</color><color=#a6e22e>initializeIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>nextKeyLoop</color><color=#f8f8f2>:</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>secKeyMeta</color> <color=#f8f8f2>:</color> <color=#f8f8f2>latestEntityMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>().</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaringClassName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>fieldName</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>().</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>useFieldName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>newToOldFieldMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>newToOldFieldMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>useFieldName</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>newToOldFieldMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldName</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>useFieldName</color> <color=#f92672>=</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>useFieldName</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>isSecField</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>fieldNum</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>isSecField</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>useFieldName</color><color=#f8f8f2>);</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>/* Field not present in old format. */</color>
                <color=#66d9ef>assert</color> <color=#f8f8f2>thisLatest</color> <color=#f92672>!=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>thisLatest</color><color=#f8f8f2>.</color><color=#a6e22e>checkNewSecKeyInitializer</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>);</color>
                <color=#66d9ef>continue</color> <color=#f8f8f2>nextKeyLoop</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
              <color=#f8f8f2>fieldNum</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>FieldAddress</color> <color=#f8f8f2>addr</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>FieldAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>isSecField</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>secKeyAddresses</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>addr</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>superLevel</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks that the type of a new secondary key is not a primitive and that the default contructor</color>
<color=#75715e>   * does not initialize it to a non-null value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkNewSecKeyInitializer</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>objAccessor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If this format represents an abstract class, we will not do the</color>
<color=#75715e>       * following check. When initializing this abstract class's</color>
<color=#75715e>       * subclass, which is not abstract, the new added secondary key</color>
<color=#75715e>       * will be checked then. [#19358]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isAbstract</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>FieldAddress</color> <color=#f8f8f2>addr</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyAddresses</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color> <color=#f92672>=</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Object</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>superLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>isSecField</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>keyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"For a new secondary key field the field type must "</color>
                  <color=#f92672>+</color> <color=#e6db74>"not be a primitive -- class: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaringClassName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" field: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"For a new secondary key field the default "</color>
                  <color=#f92672>+</color> <color=#e6db74>"constructor must not initialize the field to a "</color>
                  <color=#f92672>+</color> <color=#e6db74>"non-null value -- class: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaringClassName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" field: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>secKeyMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>nullOrEqual</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o1</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o1</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>o2</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>o1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>o2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>newArray</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>.</color><color=#a6e22e>newArray</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>writeSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>writeNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>convertRawObject</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawObject</color> <color=#f8f8f2>rawObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>IdentityHashMap</color> <color=#f8f8f2>converted</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Synchronization is not required since rawInputFields, rawInputLevels</color>
<color=#75715e>     * and rawInputDepth are immutable.  If by chance we create duplicate</color>
<color=#75715e>     * values when two threads execute this block, no harm is done.  But be</color>
<color=#75715e>     * sure to assign the fields only after the values are fully populated.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>FieldInfo</color><color=#f92672>[]</color> <color=#f8f8f2>fields</color> <color=#f92672>=</color> <color=#f8f8f2>rawInputFields</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>levels</color> <color=#f92672>=</color> <color=#f8f8f2>rawInputLevels</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>depth</color> <color=#f92672>=</color> <color=#f8f8f2>rawInputDepth</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fields</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>levels</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>depth</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The volatile fields are not yet set.  Prepare to process the</color>
<color=#75715e>       * class hierarchy, storing class formats in order from the highest</color>
<color=#75715e>       * superclass down to the current class.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>depth</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nFields</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nFields</color> <color=#f92672>+=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getNFields</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>depth</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>ComplexFormat</color><color=#f92672>[]</color> <color=#f8f8f2>hierarchy</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ComplexFormat</color><color=#f92672>[</color><color=#f8f8f2>depth</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>depth</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>level</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>hierarchy</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Populate levels and fields in parallel. */</color>
      <color=#f8f8f2>levels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>nFields</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fields</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FieldInfo</color><color=#f92672>[</color><color=#f8f8f2>nFields</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The primary key is the first field read/written.  We use the</color>
<color=#75715e>       * first primary key field encountered going from this class upward</color>
<color=#75715e>       * in the class hierarchy.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getEntityFormat</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>depth</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>hierarchy</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>levels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>fields</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyField</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Secondary key fields are read/written next, from the highest</color>
<color=#75715e>       * base class downward.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672><</color> <color=#f8f8f2>depth</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>hierarchy</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>levels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>fields</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Other fields are read/written last, from the highest base class</color>
<color=#75715e>       * downward.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672><</color> <color=#f8f8f2>depth</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>hierarchy</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>levels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>fields</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* We're finished -- update the volatile fields for next time. */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>rawInputFields</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>rawInputLevels</color> <color=#f92672>=</color> <color=#f8f8f2>levels</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>rawInputDepth</color> <color=#f92672>=</color> <color=#f8f8f2>depth</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Create an objects array that is parallel to the fields and levels</color>
<color=#75715e>     * arrays, but contains the RawObject for each slot from which the</color>
<color=#75715e>     * field value can be retrieved.  The predetermined level for each</color>
<color=#75715e>     * field determines which RawObject in the instance hierarchy to use.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RawObject</color><color=#f92672>[]</color> <color=#f8f8f2>objectsByLevel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RawObject</color><color=#f92672>[</color><color=#f8f8f2>depth</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>depth</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>RawObject</color> <color=#f8f8f2>raw</color> <color=#f92672>=</color> <color=#f8f8f2>rawObject</color><color=#f8f8f2>;</color> <color=#f8f8f2>raw</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>raw</color> <color=#f92672>=</color> <color=#f8f8f2>raw</color><color=#f8f8f2>.</color><color=#a6e22e>getSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"RawObject has too many superclasses: "</color> <color=#f92672>+</color> <color=#f8f8f2>rawObject</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>level</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>objectsByLevel</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>raw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"RawObject has too few superclasses: "</color> <color=#f92672>+</color> <color=#f8f8f2>rawObject</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>RawObject</color><color=#f92672>[]</color> <color=#f8f8f2>objects</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RawObject</color><color=#f92672>[</color><color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>objects</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>objects</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>objectsByLevel</color><color=#f92672>[</color><color=#f8f8f2>levels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Create the persistent object and convert all RawObject fields. */</color>
    <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RawComplexInput</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color> <color=#f8f8f2>converted</color><color=#f8f8f2>,</color> <color=#f8f8f2>fields</color><color=#f8f8f2>,</color> <color=#f8f8f2>objects</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Object</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>converted</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>rawObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>o</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getEntityFormat</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>readPriKey</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isPriKeyNullOrZero</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>isPriKeyFieldNullOrZero</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writePriKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>writePriKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readPriKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readPriKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getOldKeyName</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newToOldFieldMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>newToOldFieldMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newToOldFieldMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>nullifySecKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>keyElement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeyAddresses</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>FieldAddress</color> <color=#f8f8f2>addr</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyAddresses</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Object</color> <color=#f8f8f2>oldVal</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccessor</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>superLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>isSecField</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldVal</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyElement</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>RawObject</color> <color=#f8f8f2>container</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RawObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>oldVal</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>a1</color> <color=#f92672>=</color> <color=#f8f8f2>container</color><color=#f8f8f2>.</color><color=#a6e22e>getElements</color><color=#f8f8f2>();</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>isArray</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>a1</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>a1</color> <color=#f92672>=</color> <color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>getElements</color><color=#f8f8f2>(</color><color=#f8f8f2>container</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a1</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>a1</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyElement</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>a1</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>a1</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>a2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>a1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a2</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>a1</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>a2</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                  <color=#f8f8f2>rawAccessor</color><color=#f8f8f2>.</color><color=#a6e22e>setField</color><color=#f8f8f2>(</color>
                      <color=#f8f8f2>entity</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>fieldNum</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>superLevel</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>isSecField</color><color=#f8f8f2>,</color>
                      <color=#66d9ef>new</color> <color=#f8f8f2>RawObject</color><color=#f8f8f2>(</color><color=#f8f8f2>container</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>a2</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                  <color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>setElements</color><color=#f8f8f2>(</color><color=#f8f8f2>container</color><color=#f8f8f2>,</color> <color=#f8f8f2>a2</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>rawAccessor</color><color=#f8f8f2>.</color><color=#a6e22e>setField</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>superLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>isSecField</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>skipContents</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>skipToSecKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>skipToNonKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copySecMultiKey</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>keyFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color> <color=#f8f8f2>results</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>copyElements</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>results</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#f8f8f2>Format</color> <color=#a6e22e>skipToSecKey</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeyAddresses</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>FieldAddress</color> <color=#f8f8f2>addr</color> <color=#f92672>=</color> <color=#f8f8f2>secKeyAddresses</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>isSecField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>clsFormat</color><color=#f8f8f2>.</color><color=#a6e22e>skipToSecKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>fieldNum</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>skipToSecKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>clsFormat</color><color=#f8f8f2>.</color><color=#a6e22e>skipToNonKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>fieldNum</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>keyFormat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getNFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>skipToSecKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>toFieldNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>superFormat</color> <color=#f92672>=</color> <color=#f8f8f2>getComplexSuper</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>skipToSecKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxNum</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(),</color> <color=#f8f8f2>toFieldNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>maxNum</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>skipField</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>skipToNonKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>toFieldNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>superFormat</color> <color=#f92672>=</color> <color=#f8f8f2>getComplexSuper</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>superFormat</color><color=#f8f8f2>.</color><color=#a6e22e>skipToNonKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxNum</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(),</color> <color=#f8f8f2>toFieldNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>maxNum</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>skipField</color><color=#f8f8f2>(</color><color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FieldAddress</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>clsFormat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>keyFormat</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>FieldAddress</color><color=#f8f8f2>(</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>,</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>clsFormat</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Format</color> <color=#f8f8f2>keyFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>isSecField</color> <color=#f92672>=</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fieldNum</color> <color=#f92672>=</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>superLevel</color> <color=#f92672>=</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>clsFormat</color> <color=#f92672>=</color> <color=#f8f8f2>clsFormat</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keyFormat</color> <color=#f92672>=</color> <color=#f8f8f2>keyFormat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>evolve</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Disallow evolution to a non-complex format. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormatParam</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addMissingMutation</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Converter is required when a complex type is changed "</color>
              <color=#f92672>+</color> <color=#e6db74>"to a simple type or enum type"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>getMutations</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>thisChanged</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>hierarchyChanged</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>allKeyNameMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#75715e>/* The Evolver has already ensured that entities evolve to entities. */</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isEntity</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isEntity</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#f8f8f2>entityMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>entityMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Keep track of the old and new entity class names for use in deleting</color>
<color=#75715e>     * and renaming secondary keys below.  If the oldEntityClass is</color>
<color=#75715e>     * non-null this also signifies an entity class or subclass.  Note that</color>
<color=#75715e>     * getEntityFormat cannot be called on a newly created format during</color>
<color=#75715e>     * evolution because its super format property is not yet initialized.</color>
<color=#75715e>     * [#16253]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>oldEntityClass</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>newEntityClass</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>oldEntityClass</color> <color=#f92672>=</color> <color=#f8f8f2>getClassName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newEntityClass</color> <color=#f92672>=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>oldEntityClass</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newEntityClass</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Evolve all superclass formats, even when a deleted class appears in</color>
<color=#75715e>     * the hierarchy.  This ensures that the super format's</color>
<color=#75715e>     * getLatestVersion/getComplexLatest method can be used accurately</color>
<color=#75715e>     * below.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldSuper</color> <color=#f92672>=</color> <color=#f8f8f2>getComplexSuper</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>oldSuper</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>oldSuper</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color>
          <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addMissingMutation</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Converter is required for this subclass when a "</color>
                <color=#f92672>+</color> <color=#e6db74>"Converter appears on its superclass: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>converter</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>evolveDeletedClass</color><color=#f8f8f2>(</color><color=#f8f8f2>evolver</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>oldToNewKeyMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>allKeyNameMap</color><color=#f8f8f2>.</color><color=#a6e22e>putAll</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>oldToNewKeyMap</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>hierarchyChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Compare the old and new class hierarhies and decide whether each</color>
<color=#75715e>     * change is allowed or not:</color>
<color=#75715e>     * + Old deleted and removed superclass -- allowed</color>
<color=#75715e>     * + Old empty and removed superclass -- allowed</color>
<color=#75715e>     * + Old non-empty and removed superclass -- not allowed</color>
<color=#75715e>     * + Old superclass repositioned in the hierarchy -- not allowed</color>
<color=#75715e>     * + New inserted superclass -- allowed</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>newFormatCls</color> <color=#f92672>=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getExistingType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>newSuper</color> <color=#f92672>=</color> <color=#f8f8f2>newFormatCls</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>newLevels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newLevel</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>newLevels</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>newLevel</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * When this format has a new superclass, we treat it as a change to</color>
<color=#75715e>     * this format as well as to the superclass hierarchy.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getSuperFormat</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormatCls</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>thisChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>hierarchyChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>getSuperFormat</color><color=#f8f8f2>()</color>
          <color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>()</color>
          <color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color>
          <color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormatCls</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>thisChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>hierarchyChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldSuper</color> <color=#f92672>=</color> <color=#f8f8f2>getComplexSuper</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>oldSuper</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>oldSuper</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Find the matching superclass in the new hierarchy. */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>oldSuperName</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>().</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Class</color> <color=#f8f8f2>foundNewSuper</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>tryNewLevel</color> <color=#f92672>=</color> <color=#f8f8f2>newLevel</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>newSuper2</color> <color=#f92672>=</color> <color=#f8f8f2>newSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>newSuper2</color> <color=#f92672>!=</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newSuper2</color> <color=#f92672>=</color> <color=#f8f8f2>newSuper2</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tryNewLevel</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldSuperName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newSuper2</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>foundNewSuper</color> <color=#f92672>=</color> <color=#f8f8f2>newSuper2</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newLevel</color> <color=#f92672>=</color> <color=#f8f8f2>tryNewLevel</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>oldEntityClass</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>newEntityClass</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>oldEntityClass</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>newEntityClass</color> <color=#f92672>=</color> <color=#f8f8f2>foundNewSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>foundNewSuper</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * We found the old superclass in the new hierarchy.  Traverse</color>
<color=#75715e>         * through the superclass formats that were skipped over above</color>
<color=#75715e>         * when finding it.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>newSuper2</color> <color=#f92672>=</color> <color=#f8f8f2>newSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>newSuper2</color> <color=#f92672>!=</color> <color=#f8f8f2>foundNewSuper</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>newSuper2</color> <color=#f92672>=</color> <color=#f8f8f2>newSuper2</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * The class hierarchy changed -- a new class was inserted.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>hierarchyChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Check that the new formats skipped over above are not at</color>
<color=#75715e>           * a different position in the old hierarchy.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldSuper2</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>oldSuper2</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>oldSuper2</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper2</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>oldSuper2Name</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper2</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>().</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldSuper2Name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newSuper2</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addMissingMutation</color><color=#f8f8f2>(</color>
                  <color=#66d9ef>this</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color>
                  <color=#e6db74>"Class Converter is required when a "</color>
                      <color=#f92672>+</color> <color=#e6db74>"superclass is moved in the class "</color>
                      <color=#f92672>+</color> <color=#e6db74>"hierarchy: "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>newSuper2</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
              <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>newSuper</color> <color=#f92672>=</color> <color=#f8f8f2>foundNewSuper</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>newLevels</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>newLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * We did not find the old superclass in the new hierarchy.</color>
<color=#75715e>         * The class hierarchy changed, since an old class no longer</color>
<color=#75715e>         * appears.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>hierarchyChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#75715e>/* Check that the old class can be safely removed. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldSuperLatest</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexLatest</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldSuperLatest</color><color=#f8f8f2>.</color><color=#a6e22e>getNFields</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addMissingMutation</color><color=#f8f8f2>(</color>
                <color=#66d9ef>this</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color>
                <color=#e6db74>"When a superclass is removed from the class "</color>
                    <color=#f92672>+</color> <color=#e6db74>"hierarchy, the superclass or all of its "</color>
                    <color=#f92672>+</color> <color=#e6db74>"persistent fields must be deleted with a "</color>
                    <color=#f92672>+</color> <color=#e6db74>"Deleter: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>oldSuperLatest</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldEntityClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>SecondaryKeyMetadata</color><color=#f92672>></color> <color=#f8f8f2>secKeys</color> <color=#f92672>=</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>();</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>oldSuper</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>meta</color> <color=#f92672>=</color>
                <color=#f8f8f2>getSecondaryKeyMetadataByFieldName</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeys</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>meta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>allKeyNameMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>meta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Add the DO_NOT_READ_ACCESSOR level to prevent an empty class</color>
<color=#75715e>         * (no persistent fields) from being read via the Accessor.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>newLevels</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>EvolveReader</color><color=#f8f8f2>.</color><color=#a6e22e>DO_NOT_READ_ACCESSOR</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Make FieldReaders for this format if needed. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>evolveAllFields</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_FAILURE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_NEEDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>thisChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>allKeyNameMap</color><color=#f8f8f2>.</color><color=#a6e22e>putAll</color><color=#f8f8f2>(</color><color=#f8f8f2>oldToNewKeyMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Require new version number if this class was changed. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisChanged</color>
        <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>checkUpdatedVersion</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Changes to the fields or superclass were detected"</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Rename and delete the secondary databases. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allKeyNameMap</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color>
        <color=#f92672>&&</color> <color=#f8f8f2>oldEntityClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f8f8f2>newEntityClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f8f8f2>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>allKeyNameMap</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>oldKeyName</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>newKeyName</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newKeyName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>renameSecondaryDatabase</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>oldEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>newEntityClass</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>oldKeyName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newKeyName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>deleteSecondaryDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>oldEntityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldKeyName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use an EvolveReader if needed.</color>
<color=#75715e>     *</color>
<color=#75715e>     * We force evolution to occur if the old format did not use the new</color>
<color=#75715e>     * String format.  We do not require the user to bump the version</color>
<color=#75715e>     * number, since the format change is internal.  Note that we could</color>
<color=#75715e>     * optimize by only forcing evolution if this format may contain</color>
<color=#75715e>     * Strings. [#19247]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hierarchyChanged</color> <color=#f92672>||</color> <color=#f8f8f2>thisChanged</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>newStringFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EvolveReader</color><color=#f8f8f2>(</color><color=#f8f8f2>newLevels</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>useEvolvedFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>reader</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>useOldFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>evolveMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>isDeleted</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isEntity</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkKeyTypeChange</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>entityMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryKey</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>entityMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryKey</color><color=#f8f8f2>(),</color>
        <color=#e6db74>"primary key"</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>evolver</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>deletedKeys</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>EntityConverter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EntityConverter</color> <color=#f8f8f2>entityConverter</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>EntityConverter</color><color=#f8f8f2>)</color> <color=#f8f8f2>converter</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>deletedKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entityConverter</color><color=#f8f8f2>.</color><color=#a6e22e>getDeletedKeys</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>deletedKeys</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptySet</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>SecondaryKeyMetadata</color><color=#f92672>></color> <color=#f8f8f2>oldSecondaryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entityMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>SecondaryKeyMetadata</color><color=#f92672>></color> <color=#f8f8f2>newSecondaryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>entityMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>insertedKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>newSecondaryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>());</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>oldMeta</color> <color=#f8f8f2>:</color> <color=#f8f8f2>oldSecondaryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color> <color=#f92672>=</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deletedKeys</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>deleteSecondaryDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>newMeta</color> <color=#f92672>=</color> <color=#f8f8f2>newSecondaryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newMeta</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addInvalidMutation</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>converter</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Existing key not found in new entity metadata: "</color> <color=#f92672>+</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>insertedKeys</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>keyLabel</color> <color=#f92672>=</color> <color=#e6db74>"secondary key: "</color> <color=#f92672>+</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkKeyTypeChange</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>,</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyLabel</color><color=#f8f8f2>,</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkSecKeyMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>,</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>,</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>insertedKeys</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addEvolveError</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Error"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"New keys "</color> <color=#f92672>+</color> <color=#f8f8f2>insertedKeys</color> <color=#f92672>+</color> <color=#e6db74>" not allowed when using a Converter with an entity class"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks that changes to secondary key metadata are legal. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkSecKeyMetadata</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getRelationship</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getRelationship</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addEvolveError</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Change detected in the relate attribute (Relationship) "</color> <color=#f92672>+</color> <color=#e6db74>"of a secondary key"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Old key: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" relate: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getRelationship</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" new key: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" relate: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getRelationship</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks that the type of a key field did not change, as known from metadata when a class</color>
<color=#75715e>   * conversion is used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkKeyTypeChange</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>FieldMetadata</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>FieldMetadata</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>keyLabel</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>oldClass</color> <color=#f92672>=</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>newClass</color> <color=#f92672>=</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldClass</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newClass</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>oldType</color> <color=#f92672>=</color> <color=#f8f8f2>getCatalog</color><color=#f8f8f2>().</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldClass</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>newType</color> <color=#f92672>=</color> <color=#f8f8f2>getCatalog</color><color=#f8f8f2>().</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>newClass</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldType</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
          <color=#f92672>||</color> <color=#f8f8f2>newType</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
          <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>oldType</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
                  <color=#f92672>||</color> <color=#f8f8f2>oldType</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>newType</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>())</color>
              <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>newType</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
                  <color=#f92672>||</color> <color=#f8f8f2>newType</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>oldType</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addEvolveError</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Type change detected for "</color> <color=#f92672>+</color> <color=#f8f8f2>keyLabel</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Old field type: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>oldClass</color>
                <color=#f92672>+</color> <color=#e6db74>" is not compatible with the new type: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>newClass</color>
                <color=#f92672>+</color> <color=#e6db74>" old field: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" new field: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Special case for creating FieldReaders for a deleted class when it appears in the class</color>
<color=#75715e>   * hierarchy of its non-deleted subclass.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>evolveDeletedClass</color><color=#f8f8f2>(</color><color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isDeleted</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeyFieldReader</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>nonKeyFieldReader</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>getEntityFormat</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>getEntityFormat</color><color=#f8f8f2>().</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addEvolveError</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Class containing primary key field was deleted "</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Primary key is needed in an entity class hierarchy: "</color> <color=#f92672>+</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>secKeyFieldReader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SkipFieldReader</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>nonKeyFieldReader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SkipFieldReader</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a FieldReader for secondary key fields and non-key fields if necessary. Checks the</color>
<color=#75715e>   * primary key field if necessary. Does not evolve superclass format fields.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>evolveAllFields</color><color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>isDeleted</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>secKeyFieldReader</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nonKeyFieldReader</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Evolve primary key field. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>evolveRequiredKeyField</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyField</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_FAILURE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_NEEDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Copy the incorrectlyOrderedSecKeys from old format to new format. */</color>
    <color=#f8f8f2>copyIncorrectlyOrderedSecKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Evolve secondary key fields. */</color>
    <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color>
        <color=#f8f8f2>evolveFieldList</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>==</color> <color=#f8f8f2>FieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_FAILURE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>!=</color> <color=#f8f8f2>FieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_NEEDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secKeyFieldReader</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Evolve non-key fields. */</color>
    <color=#f8f8f2>reader</color> <color=#f92672>=</color>
        <color=#f8f8f2>evolveFieldList</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFields</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>evolver</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>==</color> <color=#f8f8f2>FieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_FAILURE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>!=</color> <color=#f8f8f2>FieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_NEEDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nonKeyFieldReader</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Return result. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evolveFailure</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localEvolveNeeded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_NEEDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a FieldReader that reads no fields.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Instead of adding a DoNothingFieldReader class, we use a MultiFieldReader with an empty</color>
<color=#75715e>   * field list. We do not add a new FieldReader class to avoid changing the catalog format.</color>
<color=#75715e>   * [#15524]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FieldReader</color> <color=#a6e22e>getDoNothingFieldReader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldReader</color><color=#f92672>></color> <color=#f8f8f2>emptyList</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptyList</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MultiFieldReader</color><color=#f8f8f2>(</color><color=#f8f8f2>emptyList</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Evolves a list of fields, either secondary key or non-key fields, for a single class format.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a FieldReader if field evolution is needed, null if no evolution is needed, or</color>
<color=#75715e>   *     FieldReader.EVOLVE_FAILURE if an evolution error occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FieldReader</color> <color=#a6e22e>evolveFieldList</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>oldFields</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>newFields</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>isOldSecKeyField</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>otherNewFields</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>getMutations</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>readerNeeded</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldReader</color><color=#f92672>></color> <color=#f8f8f2>fieldReaders</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>FieldReader</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>currentReader</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newFieldsMatched</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Add FieldReaders to the list in old field storage order, since that</color>
<color=#75715e>     * is the order in which field values must be read.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>:</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>oldFieldIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>oldFieldIndex</color> <color=#f92672><</color> <color=#f8f8f2>oldFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>oldFieldIndex</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>oldField</color> <color=#f92672>=</color> <color=#f8f8f2>oldFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>oldName</color> <color=#f92672>=</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>oldMeta</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOldSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>oldMeta</color> <color=#f92672>=</color> <color=#f8f8f2>getSecondaryKeyMetadataByFieldName</color><color=#f8f8f2>(</color><color=#f8f8f2>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>oldMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Get field mutations. */</color>
      <color=#f8f8f2>Renamer</color> <color=#f8f8f2>renamer</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getRenamer</color><color=#f8f8f2>(</color><color=#f8f8f2>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Deleter</color> <color=#f8f8f2>deleter</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getDeleter</color><color=#f8f8f2>(</color><color=#f8f8f2>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addInvalidMutation</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>deleter</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Field Deleter is not allowed along with a Renamer or "</color>
                <color=#f92672>+</color> <color=#e6db74>"Converter for the same field: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Match old and new field by name, taking into account the Renamer</color>
<color=#75715e>       * mutation.  If the @SecondaryKey annotation was added or removed,</color>
<color=#75715e>       * the field will have moved from one of the two field lists to the</color>
<color=#75715e>       * other.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>renamer</color><color=#f8f8f2>.</color><color=#a6e22e>getNewName</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>;</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>nameChanged</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newToOldFieldMap</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newToOldFieldMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>newToOldFieldMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>nameChanged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>newFieldIndex</color> <color=#f92672>=</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getFieldIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>newFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>newField</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>isNewSecKeyField</color> <color=#f92672>=</color> <color=#f8f8f2>isOldSecKeyField</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFieldIndex</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newField</color> <color=#f92672>=</color> <color=#f8f8f2>newFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Change the key name in incorrectlyOrderedSecKeys of the new</color>
<color=#75715e>         * format.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameChanged</color>
            <color=#f92672>&&</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
            <color=#f92672>&&</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * [#18961] If the order of the field has been changed, we will</color>
<color=#75715e>         * create a PlainFieldReader for it.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFieldIndex</color> <color=#f92672>!=</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>readerNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newFieldIndex</color> <color=#f92672>=</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getFieldIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>otherNewFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFieldIndex</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newField</color> <color=#f92672>=</color> <color=#f8f8f2>otherNewFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>isNewSecKeyField</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>isOldSecKeyField</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>readerNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Remove the key in incorrectlyOrderedSecKeys of the new</color>
<color=#75715e>         * format.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Apply field Deleter and continue. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addInvalidMutation</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>deleter</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Field Deleter is not allowed when the persistent "</color>
                  <color=#f92672>+</color> <color=#e6db74>"field is still present: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* A SkipFieldReader can read multiple sequential fields. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SkipFieldReader</color>
            <color=#f92672>&&</color> <color=#f8f8f2>currentReader</color><color=#f8f8f2>.</color><color=#a6e22e>acceptField</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>currentReader</color><color=#f8f8f2>.</color><color=#a6e22e>addField</color><color=#f8f8f2>(</color><color=#f8f8f2>oldField</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>currentReader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SkipFieldReader</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>fieldReaders</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>readerNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOldSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>oldToNewKeyMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newField</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addMissingMutation</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#e6db74>"Field is not present or not persistent: "</color> <color=#f92672>+</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The old field corresponds to a known new field, and no Deleter</color>
<color=#75715e>       * mutation applies.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>newFieldsMatched</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Get and process secondary key metadata changes. */</color>
      <color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>newMeta</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOldSecKeyField</color> <color=#f92672>&&</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newMeta</color> <color=#f92672>=</color> <color=#f8f8f2>getSecondaryKeyMetadataByFieldName</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>clsMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>(),</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>newMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>/* Validate metadata changes. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkSecKeyMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>,</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>,</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Check for a renamed key and save the old-to-new mapping for</color>
<color=#75715e>         * use in renaming the secondary database and for key</color>
<color=#75715e>         * extraction.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>oldKeyName</color> <color=#f92672>=</color> <color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>newKeyName</color> <color=#f92672>=</color> <color=#f8f8f2>newMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldKeyName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newKeyName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>oldToNewKeyMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOldSecKeyField</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>oldToNewKeyMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>oldToNewKeyMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyName</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Apply field Converter and continue. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOldSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addInvalidMutation</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>converter</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Field Converter is not allowed for secondary key "</color> <color=#f92672>+</color> <color=#e6db74>"fields: "</color> <color=#f92672>+</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>currentReader</color> <color=#f92672>=</color>
              <color=#66d9ef>new</color> <color=#f8f8f2>ConvertFieldReader</color><color=#f8f8f2>(</color><color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>fieldReaders</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>readerNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Evolve the declared version of the field format and all versions</color>
<color=#75715e>       * more recent, and the formats for all of their subclasses.  While</color>
<color=#75715e>       * we're at it, check to see if all possible classes are converted.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>allClassesConverted</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFieldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>formatVersion</color> <color=#f92672>=</color> <color=#f8f8f2>oldFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>();</color>
          <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>formatVersion</color> <color=#f92672>=</color> <color=#f8f8f2>formatVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getPreviousVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>formatVersion</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>formatVersion</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>formatVersion</color><color=#f8f8f2>.</color><color=#a6e22e>isNew</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>isClassConverted</color><color=#f8f8f2>(</color><color=#f8f8f2>formatVersion</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>allClassesConverted</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>subclassFormats</color> <color=#f92672>=</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>getSubclassFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>formatVersion</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subclassFormats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format2</color> <color=#f8f8f2>:</color> <color=#f8f8f2>subclassFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>format2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>format2</color><color=#f8f8f2>.</color><color=#a6e22e>isNew</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>isClassConverted</color><color=#f8f8f2>(</color><color=#f8f8f2>format2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>allClassesConverted</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatVersion</color> <color=#f92672>==</color> <color=#f8f8f2>oldFieldFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check for compatible field types and apply a field widener if</color>
<color=#75715e>       * needed.  If no widener is needed, fall through and apply a</color>
<color=#75715e>       * PlainFieldReader.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>oldLatestFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>newFieldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>newField</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>())</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Formats are identical.  Fall through. */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allClassesConverted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* All old classes will be converted.  Fall through. */</color>
        <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>WidenerInput</color><color=#f8f8f2>.</color><color=#a6e22e>isWideningSupported</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>isOldSecKeyField</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Apply field widener and continue. */</color>
        <color=#f8f8f2>currentReader</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>WidenFieldReader</color><color=#f8f8f2>(</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fieldReaders</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>readerNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>refWidened</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>()</color>
            <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>()</color>
            <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>()</color>
            <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>isClassConverted</color><color=#f8f8f2>(</color><color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Class</color> <color=#f8f8f2>oldCls</color> <color=#f92672>=</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getExistingType</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>Class</color> <color=#f8f8f2>newCls</color> <color=#f92672>=</color> <color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getExistingType</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newCls</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>oldCls</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>refWidened</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>refWidened</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* A reference type has been widened.  Fall through. */</color>
          <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Types are not compatible. */</color>
          <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addMissingMutation</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Old field type: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>oldLatestFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" is not compatible with the new type: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>newFieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" for field: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>evolveFailure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>continue</color> <color=#f8f8f2>fieldLoop</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Old to new field conversion is not needed or is automatic.  Read</color>
<color=#75715e>       * fields as if no evolution is needed.  A PlainFieldReader can</color>
<color=#75715e>       * read multiple sequential fields.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PlainFieldReader</color>
          <color=#f92672>&&</color> <color=#f8f8f2>currentReader</color><color=#f8f8f2>.</color><color=#a6e22e>acceptField</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentReader</color><color=#f8f8f2>.</color><color=#a6e22e>addField</color><color=#f8f8f2>(</color><color=#f8f8f2>oldField</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentReader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PlainFieldReader</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fieldReaders</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If there are new fields, then the old fields must be read using a</color>
<color=#75715e>     * reader, even if the old field list is empty.  Using the accessor</color>
<color=#75715e>     * directly will read fields in the wrong order and will read fields</color>
<color=#75715e>     * that were moved between lists (when adding and dropping</color>
<color=#75715e>     * @SecondaryKey).  [#15524]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFieldsMatched</color> <color=#f92672><</color> <color=#f8f8f2>newFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>localEvolveNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>readerNeeded</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evolveFailure</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>FieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_FAILURE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readerNeeded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldReaders</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getDoNothingFieldReader</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldReaders</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>fieldReaders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MultiFieldReader</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldReaders</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localEvolveNeeded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>FieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>EVOLVE_NEEDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Base class for all FieldReader subclasses. A FieldReader reads one or more fields in the old</color>
<color=#75715e>   * format data, and may call the new format Accessor to set the field values.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FieldReader</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>EVOLVE_NEEDED</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PlainFieldReader</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>EVOLVE_FAILURE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PlainFieldReader</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>866041475399255164L</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>FieldReader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldParentFormat</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newParentFormat</color><color=#f8f8f2>,</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>isOldSecKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>acceptField</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>addField</color><color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Reads a continguous block of fields that have the same format in the old and new formats. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>PlainFieldReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1795593463439931402L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>startField</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>endField</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>secKeyField</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>int</color> <color=#f8f8f2>endOldField</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>PlainFieldReader</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>endOldField</color> <color=#f92672>=</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>startField</color> <color=#f92672>=</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>endField</color> <color=#f92672>=</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>secKeyField</color> <color=#f92672>=</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>acceptField</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>oldFieldIndex</color> <color=#f92672>==</color> <color=#f8f8f2>endOldField</color> <color=#f92672>+</color> <color=#ae81ff>1</color>
          <color=#f92672>&&</color> <color=#f8f8f2>newFieldIndex</color> <color=#f92672>==</color> <color=#f8f8f2>endField</color> <color=#f92672>+</color> <color=#ae81ff>1</color>
          <color=#f92672>&&</color> <color=#f8f8f2>secKeyField</color> <color=#f92672>==</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>addField</color><color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>endField</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>endOldField</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#f8f8f2>endField</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#f8f8f2>endField</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Skips a continguous block of fields that exist in the old format but not in the new format. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>SkipFieldReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>3060281692155253098L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>fieldFormats</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>int</color> <color=#f8f8f2>endField</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>SkipFieldReader</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>fields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>endField</color> <color=#f92672>=</color> <color=#f8f8f2>startField</color> <color=#f92672>+</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fieldFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fieldFormats</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>SkipFieldReader</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>endField</color> <color=#f92672>=</color> <color=#f8f8f2>startField</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fieldFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fieldFormats</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>oldField</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>acceptField</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>oldFieldIndex</color> <color=#f92672>==</color> <color=#f8f8f2>endField</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>addField</color><color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>oldField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>endField</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fieldFormats</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>oldField</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fieldFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>skipField</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Converts a single field using a field Converter. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ConvertFieldReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>8736410481633998710L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>oldFieldNum</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>secKeyField</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ConvertFieldReader</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>converter</color> <color=#f92672>=</color> <color=#f8f8f2>converter</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>oldFieldNum</color> <color=#f92672>=</color> <color=#f8f8f2>oldFieldIndex</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fieldNum</color> <color=#f92672>=</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>secKeyField</color> <color=#f92672>=</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldParentFormat</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newParentFormat</color><color=#f8f8f2>,</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>isOldSecKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The oldFieldNum field was added as part of a bug fix.  If not</color>
<color=#75715e>       * present in this version of the catalog, we assume it is equal to</color>
<color=#75715e>       * the new field index.  The code prior to the bug fix assumes the</color>
<color=#75715e>       * old and new fields have the same index. [#15797]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>initVersion</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>oldFieldNum</color> <color=#f92672>=</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOldSecKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>oldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldParentFormat</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldNum</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>oldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldParentFormat</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFieldNum</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>newParentFormat</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldNum</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>newParentFormat</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldNum</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Create and read the old format instance in raw mode. */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>currentRawMode</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>setRawAccess</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readKeyObject</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_STRING</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readStringObject</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>setRawAccess</color><color=#f8f8f2>(</color><color=#f8f8f2>currentRawMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Convert the raw instance to the current format. */</color>
      <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getCatalog</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>converter</color><color=#f8f8f2>.</color><color=#a6e22e>getConversion</color><color=#f8f8f2>().</color><color=#a6e22e>convert</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Use a RawSingleInput to convert and type-check the value. */</color>
      <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>rawInput</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RawSingleInput</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentRawMode</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Widens a single field using a field Converter. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>WidenFieldReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>2054520670170407282L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>fromFormatId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>toFormatId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>secKeyField</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>WidenFieldReader</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fromFormatId</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>toFormatId</color> <color=#f92672>=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fieldNum</color> <color=#f92672>=</color> <color=#f8f8f2>newFieldIndex</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>secKeyField</color> <color=#f92672>=</color> <color=#f8f8f2>isNewSecKeyField</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* The Accessor reads the field value from a WidenerInput. */</color>
      <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>widenerInput</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WidenerInput</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>fromFormatId</color><color=#f8f8f2>,</color> <color=#f8f8f2>toFormatId</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeyField</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>widenerInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>widenerInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A FieldReader composed of other FieldReaders, and that calls them in sequence. Used when more</color>
<color=#75715e>   * than one FieldReader is needed for a list of fields.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>MultiFieldReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>6035976787562441473L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldReader</color><color=#f92672>></color> <color=#f8f8f2>subReaders</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>MultiFieldReader</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldReader</color><color=#f92672>></color> <color=#f8f8f2>subReaders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>subReaders</color> <color=#f92672>=</color> <color=#f8f8f2>subReaders</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldParentFormat</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newParentFormat</color><color=#f8f8f2>,</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>isOldSecKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldReader</color> <color=#f8f8f2>reader</color> <color=#f8f8f2>:</color> <color=#f8f8f2>subReaders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldParentFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newParentFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>isOldSecKey</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldReader</color> <color=#f8f8f2>reader</color> <color=#f8f8f2>:</color> <color=#f8f8f2>subReaders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The Reader for evolving ComplexFormat instances. Reads the old format data one class (one level</color>
<color=#75715e>   * in the class hierarchy) at a time. If an Accessor is used at a given level, the Accessor is</color>
<color=#75715e>   * used for the corresponding level in the new class hierarchy (classes may be inserted/deleted</color>
<color=#75715e>   * during evolution). At each level, a FieldReader is called to evolve the secondary key and</color>
<color=#75715e>   * non-key lists of fields.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>EvolveReader</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Reader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DO_NOT_READ_ACCESSOR</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1016140948306913283L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * oldHierarchy contains the formats of the old class hierarchy in most to least derived class</color>
<color=#75715e>     * order.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>ComplexFormat</color><color=#f92672>[]</color> <color=#f8f8f2>oldHierarchy</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * newHierarchyLevels contains the corresponding level in the new hierarchy for each format in</color>
<color=#75715e>     * oldHierarchy. newHierarchyLevels is indexed by the oldHierarchy index.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>newHierarchyLevels</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>EvolveReader</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>newHierarchyLevelsList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>oldDepth</color> <color=#f92672>=</color> <color=#f8f8f2>newHierarchyLevelsList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newHierarchyLevels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>oldDepth</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newHierarchyLevelsList</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>oldDepth</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newHierarchyLevels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>newHierarchyLevelsList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>initializeReader</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormatParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>oldFormatParam</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexLatest</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>initializeIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Create newHierarchy array. */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>newDepth</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperFormat</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newDepth</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>ComplexFormat</color><color=#f92672>[]</color> <color=#f8f8f2>newHierarchy</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ComplexFormat</color><color=#f92672>[</color><color=#f8f8f2>newDepth</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newHierarchy</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>level</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#f8f8f2>newDepth</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Create oldHierarchy array and initialize FieldReaders. */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>oldDepth</color> <color=#f92672>=</color> <color=#f8f8f2>newHierarchyLevels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>oldHierarchy</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ComplexFormat</color><color=#f92672>[</color><color=#f8f8f2>oldDepth</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>oldFormat2</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>oldFormat2</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>oldFormat2</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat2</color><color=#f8f8f2>.</color><color=#a6e22e>getComplexSuper</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>oldHierarchy</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>level2</color> <color=#f92672>=</color> <color=#f8f8f2>newHierarchyLevels</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newFormat2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>level2</color> <color=#f92672>!=</color> <color=#f8f8f2>DO_NOT_READ_ACCESSOR</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>newHierarchy</color><color=#f92672>[</color><color=#f8f8f2>level2</color><color=#f92672>]</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>level</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat2</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFieldReader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>oldFormat2</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat2</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat2</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat2</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFieldReader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>oldFormat2</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFieldReader</color><color=#f8f8f2>.</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat2</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat2</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#f8f8f2>oldDepth</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readPriKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* No conversion necessary for primary keys. */</color>
      <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>readPriKey</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Use the Accessor for the new format. */</color>
      <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>objAccessor</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Read old format fields from the top-most class downward. */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>maxMinusOne</color> <color=#f92672>=</color> <color=#f8f8f2>oldHierarchy</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Read secondary key fields with the adjusted superclass level. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>maxMinusOne</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>oldHierarchy</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>secKeyFieldReader</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newLevel</color> <color=#f92672>=</color> <color=#f8f8f2>newHierarchyLevels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLevel</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newLevel</color> <color=#f92672>!=</color> <color=#f8f8f2>DO_NOT_READ_ACCESSOR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLevel</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Read non-key fields with the adjusted superclass level. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>maxMinusOne</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FieldReader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>oldHierarchy</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>nonKeyFieldReader</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newLevel</color> <color=#f92672>=</color> <color=#f8f8f2>newHierarchyLevels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>accessor</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLevel</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newLevel</color> <color=#f92672>!=</color> <color=#f8f8f2>DO_NOT_READ_ACCESSOR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>readNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Accessor</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FIELD_NUM</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLevel</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Accessor</color> <color=#a6e22e>getAccessor</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getAccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The secondary key metadata map (ClassMetadata.getSecondaryKeys) is keyed by key name, not field</color>
<color=#75715e>   * name. Key name can be different than field name when a @SecondaryKey name property is</color>
<color=#75715e>   * specified. To look up metadata by field name, we must do a linear search. Luckily, the number</color>
<color=#75715e>   * of keys per class is never very large. [#16819]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>SecondaryKeyMetadata</color> <color=#a6e22e>getSecondaryKeyMetadataByFieldName</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>SecondaryKeyMetadata</color><color=#f92672>></color> <color=#f8f8f2>secKeys</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fieldName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyMetadata</color> <color=#f8f8f2>meta</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secKeys</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>meta</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>meta</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called when opening an existing secondary database that should have a dup comparator</color>
<color=#75715e>   * configured. If true is returned, then this secondary index may have been previously opened</color>
<color=#75715e>   * without a dup comparator set, and therefore no dup comparator should be set on this database.</color>
<color=#75715e>   * If false is returned, the dup comparator should be set by the caller.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isSecKeyIncorrectlyOrdered</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incorrectlyOrderedSecKeys</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>incorrectlyOrderedSecKeys</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called when creating a new secondary database that should have a dup comparator configured. If</color>
<color=#75715e>   * true is returned, then this secondary index may have been previously opened without a dup</color>
<color=#75715e>   * comparator set; this method will update this format to indicate that the dup comparator is now</color>
<color=#75715e>   * allowed, and the caller should flush the catalog. If false is returned, the caller need not</color>
<color=#75715e>   * flush the catalog.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>setSecKeyCorrectlyOrdered</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>incorrectlyOrderedSecKeys</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>incorrectlyOrderedSecKeys</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>incorrectlyOrderedSecKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>entityMeta</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entityMeta</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>().</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>incorrectlyOrderedSecKeys</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Copy the incorrectlyOrderedSecKeys of old format to new format. Used</color>
<color=#75715e>   * during evolution.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>copyIncorrectlyOrderedSecKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>ComplexFormat</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Only copy from the latest version format. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color> <color=#f92672>=</color>
          <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
              <color=#f92672>?</color> <color=#66d9ef>null</color>
              <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>incorrectlyOrderedSecKeys</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getIncorrectlyOrderedSecKeys</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incorrectlyOrderedSecKeys</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Accessor</color> <color=#a6e22e>getAccessor</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>rawAccess</color> <color=#f92672>?</color> <color=#f8f8f2>rawAccessor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>objAccessor</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>