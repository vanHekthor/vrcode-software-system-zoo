<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.model</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.PrimaryIndex</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.StoreConfig</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Documented</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Retention</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Target</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.ElementType.FIELD</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.RetentionPolicy.RUNTIME</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Indicates a secondary key field of an entity class. The value of the secondary key field is a</color>
<color=#75715e> * unique or non-unique identifier for the entity and is accessed via a {@link</color>
<color=#75715e> * com.sleepycat.persist.SecondaryIndex}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code SecondaryKey} may appear on any number of fields in an entity class, subclasses and</color>
<color=#75715e> * superclasses. For a secondary key field in the entity class or one of its superclasses, all</color>
<color=#75715e> * entity instances will be indexed by that field (if it is non-null). For a secondary key field in</color>
<color=#75715e> * an entity subclass, only instances of that subclass will be indexed by that field (if it is</color>
<color=#75715e> * non-null).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If a secondary key field is null, the entity will not be indexed by that key. In other words,</color>
<color=#75715e> * the entity cannot be queried by that secondary key nor can the entity be found by iterating</color>
<color=#75715e> * through the secondary index.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For a given entity class and its superclasses and subclasses, no two secondary keys may have</color>
<color=#75715e> * the same name. By default, the field name identifies the secondary key and the secondary index</color>
<color=#75715e> * for a given entity class. {@link #name} may be specified to override this default.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Using {@link #relate}, instances of the entity class are related to secondary keys in a</color>
<color=#75715e> * many-to-one, one-to-many, many-to-many, or one-to-one relationship. This required property</color>
<color=#75715e> * specifies the <em>cardinality</em> of each side of the relationship.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A secondary key may optionally be used to form a relationship with instances of another entity</color>
<color=#75715e> * class using {@link #relatedEntity} and {@link #onRelatedEntityDelete}. This establishes</color>
<color=#75715e> * <em>foreign key constraints</em> for the secondary key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The secondary key field type must be a Set, Collection or array type when a <em>x-to-many</em></color>
<color=#75715e> * relationship is used or a singular type when an <em>x-to-one</em> relationship is used; see</color>
<color=#75715e> * {@link #relate}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The field type (or element type, when a Set, Collection or array type is used) of a secondary</color>
<color=#75715e> * key field must follow the same rules as for a <a href="PrimaryKey.html#keyTypes">primary key</color>
<color=#75715e> * type</a>. The <a href="PrimaryKey.html#sortOrder">key sort order</a> is also the same.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For a secondary key field with a collection type, a type parameter must be used to specify the</color>
<color=#75715e> * element type. For example {@code Collection<String>} is allowed but {@code Collection} is not.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#a6e22e>@Documented</color>
<color=#a6e22e>@Retention</color><color=#f8f8f2>(</color><color=#f8f8f2>RUNTIME</color><color=#f8f8f2>)</color>
<color=#a6e22e>@Target</color><color=#f8f8f2>(</color><color=#f8f8f2>FIELD</color><color=#f8f8f2>)</color>
<color=#66d9ef>public</color> <color=#a6e22e>@interface</color> <color=#f8f8f2>SecondaryKey</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Defines the relationship between instances of the entity class and the secondary keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The table below summarizes how to create all four variations of relationships. <div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="yes" summary=""></color>
<color=#75715e>   *     <tr><th>Relationship</th></color>
<color=#75715e>   *         <th>Field type</th></color>
<color=#75715e>   *         <th>Key type</th></color>
<color=#75715e>   *         <th>Example</th></color>
<color=#75715e>   *     </tr></color>
<color=#75715e>   *     <tr><td>{@link Relationship#ONE_TO_ONE}</td></color>
<color=#75715e>   *         <td>Singular</td></color>
<color=#75715e>   *         <td>Unique</td></color>
<color=#75715e>   *         <td>A person record with a unique social security number</color>
<color=#75715e>   *             key.</td></color>
<color=#75715e>   *     </tr></color>
<color=#75715e>   *     <tr><td>{@link Relationship#MANY_TO_ONE}</td></color>
<color=#75715e>   *         <td>Singular</td></color>
<color=#75715e>   *         <td>Duplicates</td></color>
<color=#75715e>   *         <td>A person record with a non-unique employer key.</td></color>
<color=#75715e>   *     </tr></color>
<color=#75715e>   *     <tr><td>{@link Relationship#ONE_TO_MANY}</td></color>
<color=#75715e>   *         <td>Set/Collection/array</td></color>
<color=#75715e>   *         <td>Unique</td></color>
<color=#75715e>   *         <td>A person record with multiple unique email address keys.</td></color>
<color=#75715e>   *     </tr></color>
<color=#75715e>   *     <tr><td>{@link Relationship#MANY_TO_MANY}</td></color>
<color=#75715e>   *         <td>Set/Collection/array</td></color>
<color=#75715e>   *         <td>Duplicates</td></color>
<color=#75715e>   *         <td>A person record with multiple non-unique organization</color>
<color=#75715e>   *             keys.</td></color>
<color=#75715e>   *     </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * </div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a <em>many-to-x</em> relationship, the secondary index will have non-unique keys; in</color>
<color=#75715e>   * other words, duplicates will be allowed. Conversely, for <em>one-to-x</em> relationship, the</color>
<color=#75715e>   * secondary index will have unique keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a <em>x-to-one</em> relationship, the secondary key field is singular; in other words,</color>
<color=#75715e>   * it may not be a Set, Collection or array type. Conversely, for a <em>x-to-many</em></color>
<color=#75715e>   * relationship, the secondary key field must be a Set, Collection or array type. A collection</color>
<color=#75715e>   * type is any implementation of {@link java.util.Collection}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a <em>x-to-many</em> relationship, the field type should normally be {@link</color>
<color=#75715e>   * java.util.Set} (or a subtype of this interface). This accurately expresses the fact that an</color>
<color=#75715e>   * Entity may not have two identical secondary keys. For flexibility, a {@link</color>
<color=#75715e>   * java.util.Collection} (or a subtype of this interface) or an array type may also be used. In</color>
<color=#75715e>   * that case, any duplicate key values in the Collection or array are ignored.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the Relationship.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Relationship</color> <color=#a6e22e>relate</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the entity to which this entity is related, for establishing foreign key constraints.</color>
<color=#75715e>   * Values of this secondary key will be constrained to the set of primary key values for the given</color>
<color=#75715e>   * entity class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The given class must be an entity class. This class is called the <em>related entity</em> or</color>
<color=#75715e>   * <em>foreign entity</em>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a related entity class is specified, a check (foreign key constraint) is made every</color>
<color=#75715e>   * time a new secondary key value is stored for this entity, and every time a related entity is</color>
<color=#75715e>   * deleted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Whenever a new secondary key value is stored for this entity, it is checked to ensure it</color>
<color=#75715e>   * exists as a primary key value of the related entity. If it does not, an exception is thrown by</color>
<color=#75715e>   * the {@link PrimaryIndex} {@code put} method.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   * On BDB JE, a {@link com.sleepycat.je.ForeignConstraintException} will be thrown.</color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Whenever a related entity is deleted and its primary key value exists as a secondary key</color>
<color=#75715e>   * value for this entity, the action is taken that is specified using the {@link</color>
<color=#75715e>   * #onRelatedEntityDelete} property.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Together, these two checks guarantee that a secondary key value for this entity will always</color>
<color=#75715e>   * exist as a primary key value for the related entity. Note, however, that a transactional store</color>
<color=#75715e>   * must be configured to guarantee this to be true in the face of a crash; see {@link</color>
<color=#75715e>   * StoreConfig#setTransactional}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the related entity class, or void.class if none is specified.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Class</color> <color=#a6e22e>relatedEntity</color><color=#f8f8f2>()</color> <color=#66d9ef>default</color> <color=#66d9ef>void</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the action to take when a related entity is deleted having a primary key value that</color>
<color=#75715e>   * exists as a secondary key value for this entity.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>Note:</em> This property only applies when {@link #relatedEntity} is specified to define</color>
<color=#75715e>   * the related entity.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default action, {@link DeleteAction#ABORT ABORT}, means that an exception is thrown in</color>
<color=#75715e>   * order to abort the current transaction.</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   * On BDB JE, a {@link com.sleepycat.je.DeleteConstraintException} is thrown.</color>
<color=#75715e>   * <!-- end JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If {@link DeleteAction#CASCADE CASCADE} is specified, then this entity will be deleted also.</color>
<color=#75715e>   * This in turn could trigger further deletions, causing a cascading effect.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If {@link DeleteAction#NULLIFY NULLIFY} is specified, then the secondary key in this entity</color>
<color=#75715e>   * is set to null and this entity is updated. If the key field type is singular, the field value</color>
<color=#75715e>   * is set to null; therefore, to specify {@code NULLIFY} for a singular key field type, a</color>
<color=#75715e>   * primitive wrapper type must be used instead of a primitive type. If the key field type is an</color>
<color=#75715e>   * array or collection type, the key is deleted from the array (the array is resized) or from the</color>
<color=#75715e>   * collection (using {@link java.util.Collection#remove Collection.remove}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the DeleteAction, or {@link DeleteAction#ABORT} if none is specified.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DeleteAction</color> <color=#a6e22e>onRelatedEntityDelete</color><color=#f8f8f2>()</color> <color=#66d9ef>default</color> <color=#f8f8f2>DeleteAction</color><color=#f8f8f2>.</color><color=#a6e22e>ABORT</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the name of the key in order to use a name that is different than the field name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is convenient when prefixes or suffices are used on field names. For example:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre class="code"></color>
<color=#75715e>   *  class Person {</color>
<color=#75715e>   *      {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Person.class, name="parentSsn")}</color>
<color=#75715e>   *      String m_parentSsn;</color>
<color=#75715e>   *  }</pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>It can also be used to uniquely name a key when multiple secondary keys for a single entity</color>
<color=#75715e>   * class have the same field name. For example, an entity class and its subclass may both have a</color>
<color=#75715e>   * field named 'date', and both fields are used as secondary keys. The {@code name} property can</color>
<color=#75715e>   * be specified for one or both fields to give each key a unique name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the key name that overrides the field name, or empty string if none is specified.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>name</color><color=#f8f8f2>()</color> <color=#66d9ef>default</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>