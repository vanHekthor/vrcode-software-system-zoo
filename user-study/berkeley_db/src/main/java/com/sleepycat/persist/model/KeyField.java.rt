<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.model</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Documented</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Retention</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Target</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.ElementType.FIELD</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.RetentionPolicy.RUNTIME</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Indicates the sorting position of a key field in a composite key class when the {@code</color>
<color=#75715e> * Comparable} interface is not implemented. The {@code KeyField} integer value specifies the sort</color>
<color=#75715e> * order of this field within the set of fields in the composite key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If the field type of a {@link PrimaryKey} or {@link SecondaryKey} is a composite key class</color>
<color=#75715e> * containing more than one key field, then a {@code KeyField} annotation must be present on each</color>
<color=#75715e> * non-transient instance field of the composite key class. The {@code KeyField} value must be a</color>
<color=#75715e> * number between one and the number of non-transient instance fields declared in the composite key</color>
<color=#75715e> * class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that a composite key class is a flat container for one or more simple type fields. All</color>
<color=#75715e> * non-transient instance fields in the composite key class are key fields, and its superclass must</color>
<color=#75715e> * be {@code Object}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  {@literal @Entity}</color>
<color=#75715e> *  class Animal {</color>
<color=#75715e> *      {@literal @PrimaryKey}</color>
<color=#75715e> *      Classification classification;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Classification {</color>
<color=#75715e> *      {@literal @KeyField(1) String kingdom;}</color>
<color=#75715e> *      {@literal @KeyField(2) String phylum;}</color>
<color=#75715e> *      {@literal @KeyField(3) String clazz;}</color>
<color=#75715e> *      {@literal @KeyField(4) String order;}</color>
<color=#75715e> *      {@literal @KeyField(5) String family;}</color>
<color=#75715e> *      {@literal @KeyField(6) String genus;}</color>
<color=#75715e> *      {@literal @KeyField(7) String species;}</color>
<color=#75715e> *      {@literal @KeyField(8) String subspecies;}</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>This causes entities to be sorted first by {@code kingdom}, then by {@code phylum} within</color>
<color=#75715e> * {@code kingdom}, and so on.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The fields in a composite key class may not be null.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><a name="comparable"><strong>Custom Sort Order</strong></a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To override the default sort order, a composite key class may implement the {@link Comparable}</color>
<color=#75715e> * interface. This allows overriding the sort order and is therefore useful even when there is only</color>
<color=#75715e> * one key field in the composite key class. For example, the following class sorts Strings using a</color>
<color=#75715e> * Canadian collator:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  import java.text.Collator;</color>
<color=#75715e> *  import java.util.Locale;</color>
<color=#75715e> *</color>
<color=#75715e> *  {@literal @Entity}</color>
<color=#75715e> *  class Animal {</color>
<color=#75715e> *      ...</color>
<color=#75715e> *      {@literal @SecondaryKey(relate=ONE_TO_ONE)}</color>
<color=#75715e> *      CollatedString canadianName;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  {@literal class CollatedString implements Comparable<CollatedString>} {</color>
<color=#75715e> *</color>
<color=#75715e> *      static Collator collator = Collator.getInstance(Locale.CANADA);</color>
<color=#75715e> *</color>
<color=#75715e> *      {@literal @KeyField(1)}</color>
<color=#75715e> *      String value;</color>
<color=#75715e> *</color>
<color=#75715e> *      CollatedString(String value) { this.value = value; }</color>
<color=#75715e> *</color>
<color=#75715e> *      private CollatedString() {}</color>
<color=#75715e> *</color>
<color=#75715e> *      public int compareTo(CollatedString o) {</color>
<color=#75715e> *          return collator.compare(value, o.value);</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Several important rules should be considered when implementing a custom comparison method.</color>
<color=#75715e> * Failure to follow these rules may result in the primary or secondary index becoming unusable; in</color>
<color=#75715e> * other words, the store will not be able to function.</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>The comparison method must always return the same result, given the same inputs. The</color>
<color=#75715e> *       behavior of the comparison method must not change over time.</color>
<color=#75715e> *   <li>A corollary to the first rule is that the behavior of the comparison method must not be</color>
<color=#75715e> *       dependent on state which may change over time. For example, if the above collation method</color>
<color=#75715e> *       used the default Java locale, and the default locale is changed, then the sort order will</color>
<color=#75715e> *       change.</color>
<color=#75715e> *   <li>The comparison method must not assume that it is called after the store has been opened.</color>
<color=#75715e> *       With Berkeley DB Java Edition, the comparison method is called during database recovery,</color>
<color=#75715e> *       which occurs in the {@link Environment} constructor.</color>
<color=#75715e> *   <li>The comparison method must not assume that it will only be called with keys that are</color>
<color=#75715e> *       currently present in the database. The comparison method will occasionally be called with</color>
<color=#75715e> *       deleted keys or with keys for records that were not part of a committed transaction.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#a6e22e>@Documented</color>
<color=#a6e22e>@Retention</color><color=#f8f8f2>(</color><color=#f8f8f2>RUNTIME</color><color=#f8f8f2>)</color>
<color=#a6e22e>@Target</color><color=#f8f8f2>(</color><color=#f8f8f2>FIELD</color><color=#f8f8f2>)</color>
<color=#66d9ef>public</color> <color=#a6e22e>@interface</color> <color=#f8f8f2>KeyField</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>int</color> <color=#a6e22e>value</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>