<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.evolve</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.EntityModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawObject</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawType</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Converts an old version of an object value to conform to the current class or field definition.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@code Conversion} interface is implemented by the user. A {@code Conversion} instance is</color>
<color=#75715e> * passed to the {@link Converter#Converter} constructor.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@code Conversion} interface extends {@link Serializable} and the {@code Conversion}</color>
<color=#75715e> * instance is serialized for storage using standard Java serialization. Normally, the {@code</color>
<color=#75715e> * Conversion} class should only have transient fields that are initialized in the {@link</color>
<color=#75715e> * #initialize} method. While non-transient fields are allowed, care must be taken to only include</color>
<color=#75715e> * fields that are serializable and will not pull in large amounts of data.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When a class conversion is specified, two special considerations apply:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>A class conversion is only applied when to instances of that class. The conversion will not</color>
<color=#75715e> *       be applied when the class when it appears as a superclass of the instance's class. In this</color>
<color=#75715e> *       case, a conversion for the instance's class must also be specified.</color>
<color=#75715e> *   <li>Although field renaming (as well as all other changes) is handled by the conversion method,</color>
<color=#75715e> *       a field Renamer is still needed when a secondary key field is renamed and field Deleter is</color>
<color=#75715e> *       still needed when a secondary key field is deleted. This is necessary for evolution of the</color>
<color=#75715e> *       metadata; specifically, if the key name changes the database must be renamed and if the key</color>
<color=#75715e> *       field is deleted the secondary database must be deleted.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@code Conversion} class must implement the standard equals method. See {@link #equals}</color>
<color=#75715e> * for more information.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Conversions of simple types are generally simple. For example, a {@code String} field that</color>
<color=#75715e> * contains only integer values can be easily converted to an {@code int} field:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  // The old class.  Version 0 is implied.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Address {</color>
<color=#75715e> *      String zipCode;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new class.  A new version number must be assigned.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent(version=1)}</color>
<color=#75715e> *  class Address {</color>
<color=#75715e> *      int zipCode;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The conversion class.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  class MyConversion1 implements Conversion {</color>
<color=#75715e> *</color>
<color=#75715e> *      public void initialize(EntityModel model) {</color>
<color=#75715e> *          // No initialization needed.</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      public Object convert(Object fromValue) {</color>
<color=#75715e> *          return Integer.valueOf((String) fromValue);</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      {@code @Override}</color>
<color=#75715e> *      public boolean equals(Object o) {</color>
<color=#75715e> *          return o instanceof MyConversion1;</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // Create a field converter mutation.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  Converter converter = new Converter(Address.class.getName(), 0,</color>
<color=#75715e> *                                      "zipCode", new MyConversion1());</color>
<color=#75715e> *</color>
<color=#75715e> *  // Configure the converter as described {@link Mutations here}.</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A conversion may perform arbitrary transformations on an object. For example, a conversion may</color>
<color=#75715e> * transform a single String address field into an Address object containing four fields for street,</color>
<color=#75715e> * city, state and zip code.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  // The old class.  Version 0 is implied.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Entity}</color>
<color=#75715e> *  class Person {</color>
<color=#75715e> *      String address;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new class.  A new version number must be assigned.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Entity(version=1)}</color>
<color=#75715e> *  class Person {</color>
<color=#75715e> *      Address address;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new address class.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Address {</color>
<color=#75715e> *      String street;</color>
<color=#75715e> *      String city;</color>
<color=#75715e> *      String state;</color>
<color=#75715e> *      int zipCode;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  class MyConversion2 implements Conversion {</color>
<color=#75715e> *      private transient RawType addressType;</color>
<color=#75715e> *</color>
<color=#75715e> *      public void initialize(EntityModel model) {</color>
<color=#75715e> *          addressType = model.getRawType(Address.class.getName());</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      public Object convert(Object fromValue) {</color>
<color=#75715e> *</color>
<color=#75715e> *          // Parse the old address and populate the new address fields</color>
<color=#75715e> *          //</color>
<color=#75715e> *          String oldAddress = (String) fromValue;</color>
<color=#75715e> *          {@literal Map<String, Object> addressValues = new HashMap<String, Object>();}</color>
<color=#75715e> *          addressValues.put("street", parseStreet(oldAddress));</color>
<color=#75715e> *          addressValues.put("city", parseCity(oldAddress));</color>
<color=#75715e> *          addressValues.put("state", parseState(oldAddress));</color>
<color=#75715e> *          addressValues.put("zipCode", parseZipCode(oldAddress));</color>
<color=#75715e> *</color>
<color=#75715e> *          // Return new raw Address object</color>
<color=#75715e> *          //</color>
<color=#75715e> *          return new RawObject(addressType, addressValues, null);</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      {@code @Override}</color>
<color=#75715e> *      public boolean equals(Object o) {</color>
<color=#75715e> *          return o instanceof MyConversion2;</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      private String parseStreet(String oldAddress) { ... }</color>
<color=#75715e> *      private String parseCity(String oldAddress) { ... }</color>
<color=#75715e> *      private String parseState(String oldAddress) { ... }</color>
<color=#75715e> *      private Integer parseZipCode(String oldAddress) { ... }</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // Create a field converter mutation.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  Converter converter = new Converter(Person.class.getName(), 0,</color>
<color=#75715e> *                                      "address", new MyConversion2());</color>
<color=#75715e> *</color>
<color=#75715e> *  // Configure the converter as described {@link Mutations here}.</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that when a conversion returns a {@link RawObject}, it must return it with a {@link</color>
<color=#75715e> * RawType} that is current as defined by the current class definitions. The proper types can be</color>
<color=#75715e> * obtained from the {@link EntityModel} in the conversion's {@link #initialize initialize} method.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A variation on the example above is where several fields in a class (street, city, state and</color>
<color=#75715e> * zipCode) are converted to a single field (address). In this case a class converter rather than a</color>
<color=#75715e> * field converter is used.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  // The old class.  Version 0 is implied.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Entity}</color>
<color=#75715e> *  class Person {</color>
<color=#75715e> *      String street;</color>
<color=#75715e> *      String city;</color>
<color=#75715e> *      String state;</color>
<color=#75715e> *      int zipCode;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new class.  A new version number must be assigned.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Entity(version=1)}</color>
<color=#75715e> *  class Person {</color>
<color=#75715e> *      Address address;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new address class.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Address {</color>
<color=#75715e> *      String street;</color>
<color=#75715e> *      String city;</color>
<color=#75715e> *      String state;</color>
<color=#75715e> *      int zipCode;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  class MyConversion3 implements Conversion {</color>
<color=#75715e> *      private transient RawType newPersonType;</color>
<color=#75715e> *      private transient RawType addressType;</color>
<color=#75715e> *</color>
<color=#75715e> *      public void initialize(EntityModel model) {</color>
<color=#75715e> *          newPersonType = model.getRawType(Person.class.getName());</color>
<color=#75715e> *          addressType = model.getRawType(Address.class.getName());</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      public Object convert(Object fromValue) {</color>
<color=#75715e> *</color>
<color=#75715e> *          // Get field value maps for old and new objects.</color>
<color=#75715e> *          //</color>
<color=#75715e> *          RawObject person = (RawObject) fromValue;</color>
<color=#75715e> *          {@literal Map<String, Object> personValues = person.getValues();}</color>
<color=#75715e> *          {@literal Map<String, Object> addressValues = new HashMap<String, Object>();}</color>
<color=#75715e> *          RawObject address = new RawObject(addressType, addressValues, null);</color>
<color=#75715e> *</color>
<color=#75715e> *          // Remove the old address fields and insert the new one.</color>
<color=#75715e> *          //</color>
<color=#75715e> *          addressValues.put("street", personValues.remove("street"));</color>
<color=#75715e> *          addressValues.put("city", personValues.remove("city"));</color>
<color=#75715e> *          addressValues.put("state", personValues.remove("state"));</color>
<color=#75715e> *          addressValues.put("zipCode", personValues.remove("zipCode"));</color>
<color=#75715e> *          personValues.put("address", address);</color>
<color=#75715e> *</color>
<color=#75715e> *          return new RawObject(newPersonType, personValues, person.getSuper());</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      {@code @Override}</color>
<color=#75715e> *      public boolean equals(Object o) {</color>
<color=#75715e> *          return o instanceof MyConversion3;</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // Create a class converter mutation.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  Converter converter = new Converter(Person.class.getName(), 0,</color>
<color=#75715e> *                                      new MyConversion3());</color>
<color=#75715e> *</color>
<color=#75715e> *  // Configure the converter as described {@link Mutations here}.</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A conversion can also handle changes to class hierarchies. For example, if a "name" field</color>
<color=#75715e> * originally declared in class A is moved to its superclass B, a conversion can move the field</color>
<color=#75715e> * value accordingly:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  // The old classes.  Version 0 is implied.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class A extends B {</color>
<color=#75715e> *      String name;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  abstract class B {</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new classes.  A new version number must be assigned.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent(version=1)}</color>
<color=#75715e> *  class A extends B {</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *  {@literal @Persistent(version=1)}</color>
<color=#75715e> *  abstract class B {</color>
<color=#75715e> *      String name;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  class MyConversion4 implements Conversion {</color>
<color=#75715e> *      private transient RawType newAType;</color>
<color=#75715e> *      private transient RawType newBType;</color>
<color=#75715e> *</color>
<color=#75715e> *      public void initialize(EntityModel model) {</color>
<color=#75715e> *          newAType = model.getRawType(A.class.getName());</color>
<color=#75715e> *          newBType = model.getRawType(B.class.getName());</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      public Object convert(Object fromValue) {</color>
<color=#75715e> *          RawObject oldA = (RawObject) fromValue;</color>
<color=#75715e> *          RawObject oldB = oldA.getSuper();</color>
<color=#75715e> *          {@literal Map<String, Object> aValues = oldA.getValues();}</color>
<color=#75715e> *          {@literal Map<String, Object> bValues = oldB.getValues();}</color>
<color=#75715e> *          bValues.put("name", aValues.remove("name"));</color>
<color=#75715e> *          RawObject newB = new RawObject(newBType, bValues, oldB.getSuper());</color>
<color=#75715e> *          RawObject newA = new RawObject(newAType, aValues, newB);</color>
<color=#75715e> *          return newA;</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      {@code @Override}</color>
<color=#75715e> *      public boolean equals(Object o) {</color>
<color=#75715e> *          return o instanceof MyConversion4;</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // Create a class converter mutation.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  Converter converter = new Converter(A.class.getName(), 0,</color>
<color=#75715e> *                                      new MyConversion4());</color>
<color=#75715e> *</color>
<color=#75715e> *  // Configure the converter as described {@link Mutations here}.</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A conversion may return an instance of a different class entirely, as long as it conforms to</color>
<color=#75715e> * current class definitions and is the type expected in the given context (a subtype of the old</color>
<color=#75715e> * type, or a type compatible with the new field type). For example, a field that is used to</color>
<color=#75715e> * discriminate between two types of objects could be removed and replaced by two new subclasses:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  // The old class.  Version 0 is implied.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Pet {</color>
<color=#75715e> *      boolean isCatNotDog;</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // The new classes.  A new version number must be assigned to the Pet class.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  {@literal @Persistent(version=1)}</color>
<color=#75715e> *  class Pet {</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Cat extends Pet {</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Dog extends Pet {</color>
<color=#75715e> *      ...</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  class MyConversion5 implements Conversion {</color>
<color=#75715e> *      private transient RawType newPetType;</color>
<color=#75715e> *      private transient RawType dogType;</color>
<color=#75715e> *      private transient RawType catType;</color>
<color=#75715e> *</color>
<color=#75715e> *      public void initialize(EntityModel model) {</color>
<color=#75715e> *          newPetType = model.getRawType(Pet.class.getName());</color>
<color=#75715e> *          dogType = model.getRawType(Dog.class.getName());</color>
<color=#75715e> *          catType = model.getRawType(Cat.class.getName());</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      public Object convert(Object fromValue) {</color>
<color=#75715e> *          RawObject pet = (RawObject) fromValue;</color>
<color=#75715e> *          {@literal Map<String, Object> petValues = pet.getValues();}</color>
<color=#75715e> *          Boolean isCat = (Boolean) petValues.remove("isCatNotDog");</color>
<color=#75715e> *          RawObject newPet = new RawObject(newPetType, petValues,</color>
<color=#75715e> *                                           pet.getSuper());</color>
<color=#75715e> *          RawType newSubType = isCat ? catType : dogType;</color>
<color=#75715e> *          return new RawObject(newSubType, Collections.emptyMap(), newPet);</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      {@code @Override}</color>
<color=#75715e> *      public boolean equals(Object o) {</color>
<color=#75715e> *          return o instanceof MyConversion5;</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  // Create a class converter mutation.</color>
<color=#75715e> *  //</color>
<color=#75715e> *  Converter converter = new Converter(Pet.class.getName(), 0,</color>
<color=#75715e> *                                      new MyConversion5());</color>
<color=#75715e> *</color>
<color=#75715e> *  // Configure the converter as described {@link Mutations here}.</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The primary limitation of a conversion is that it may access at most a single entity instance</color>
<color=#75715e> * at one time. Conversions involving multiple entities at once may be made by performing a <a</color>
<color=#75715e> * href="package-summary.html#storeConversion">store conversion</a>.</color>
<color=#75715e> *</color>
<color=#75715e> * @see com.sleepycat.persist.evolve Class Evolution</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>Conversion</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initializes the conversion, allowing it to obtain raw type information from the entity model.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param model the EntityModel.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts an old version of an object value to conform to the current class or field definition.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If a {@link RuntimeException} is thrown by this method, it will be thrown to the original</color>
<color=#75715e>   * caller. Similarly, a {@link IllegalArgumentException} will be thrown to the original caller if</color>
<color=#75715e>   * the object returned by this method does not conform to current class definitions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The class of the input and output object may be one of the simple types or {@link</color>
<color=#75715e>   * RawObject}. For primitive types, the primitive wrapper class is used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fromValue the object value being converted. The type of this value is defined by the old</color>
<color=#75715e>   *     class version that is being converted.</color>
<color=#75715e>   * @return the converted object. The type of this value must conform to a current class</color>
<color=#75715e>   *     definition. If this is a class conversion, it must be the current version of the class. If</color>
<color=#75715e>   *     this is a field conversion, it must be of a type compatible with the current declared type</color>
<color=#75715e>   *     of the field.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>convert</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>fromValue</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The standard {@code equals} method that must be implemented by conversion class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When mutations are specified when opening a store, the specified and previously stored</color>
<color=#75715e>   * mutations are compared for equality. If they are equal, there is no need to replace the</color>
<color=#75715e>   * existing mutations in the stored catalog. To accurately determine equality, the conversion</color>
<color=#75715e>   * class must implement the {@code equals} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the {@code equals} method is not explicitly implemented by the conversion class or a</color>
<color=#75715e>   * superclass other than {@code Object}, {@code IllegalArgumentException} will be thrown when the</color>
<color=#75715e>   * store is opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Normally whenever {@code equals} is implemented the {@code hashCode} method should also be</color>
<color=#75715e>   * implemented to support hash sets and maps. However, hash sets and maps containing <code></color>
<color=#75715e>   * Conversion</code> objects are not used by the DPL and therefore the DPL does not require {@code</color>
<color=#75715e>   * hashCode} to be implemented.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>other</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>