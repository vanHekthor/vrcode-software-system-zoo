<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.EntityModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.PersistentProxy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawObject</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Array</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.IdentityHashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Format for types proxied by a PersistentProxy.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ProxiedFormat</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1000032651995478768L</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>transient</color> <color=#f8f8f2>String</color> <color=#f8f8f2>proxyClassName</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>ProxiedFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>proxiedType</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>proxyClassName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>proxiedType</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>proxyClassName</color> <color=#f92672>=</color> <color=#f8f8f2>proxyClassName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the proxy class name. The proxyClassName field is non-null for a constructed object and</color>
<color=#75715e>   * null for a de-serialized object. Whenever the proxyClassName field is null (for a de-serialized</color>
<color=#75715e>   * object), the proxyFormat will be non-null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>getProxyClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proxyClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>proxyClassName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>proxyFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * In the future if we implement container proxies, which support nested references to the</color>
<color=#75715e>   * container, then we will return false if this is a container proxy. [#15815]</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>areNestedRefsProhibited</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>collectRelatedFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Collect the proxy format. */</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>proxyClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>proxyClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>initVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Set the proxy format for a new (never initialized) format. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proxyFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>proxyClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>proxyFormat</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>proxyClassName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Make the linkage from proxy format to proxied format. */</color>
    <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>setProxiedFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>newArray</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getReader</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Note that the read object will not be a PersistentProxy if</color>
<color=#75715e>       * a class converter mutation is used.  In this case, the reader</color>
<color=#75715e>       * will be ConverterReader. ConverterReader.readObject</color>
<color=#75715e>       * will call ProxiedFormat.convertRawObject, which will call</color>
<color=#75715e>       * PersistentProxy.convertProxy to convert the proxy. So we do not</color>
<color=#75715e>       * need another call to the convertProxy method.  [#19312]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Object</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>),</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>PersistentProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>convertProxy</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getReader</color><color=#f8f8f2>().</color><color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Else, do nothing here -- newInstance reads the value. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>PersistentProxy</color> <color=#f8f8f2>proxy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>PersistentProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>proxy</color><color=#f8f8f2>.</color><color=#a6e22e>initializeProxy</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>proxy</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>convertRawObject</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawObject</color> <color=#f8f8f2>rawObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>IdentityHashMap</color> <color=#f8f8f2>converted</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>PersistentProxy</color> <color=#f8f8f2>proxy</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>PersistentProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>convertRawObject</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>converted</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Object</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>proxy</color><color=#f8f8f2>.</color><color=#a6e22e>convertProxy</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>converted</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>rawObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>o</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>skipContents</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>skipContents</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copySecMultiKey</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>keyFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color> <color=#f8f8f2>results</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>copyElements</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>results</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>evolve</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evolver</color> <color=#f8f8f2>evolver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormatParam</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ProxiedFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A workaround for reading the BigDecimal data stored by</color>
<color=#75715e>       * BigDecimal proxy before je4.1.</color>
<color=#75715e>       *</color>
<color=#75715e>       * The BigDecimal proxy has a proxied format for BigDecimal, which</color>
<color=#75715e>       * is a built-in SimpleType. We will evolve this ProxiedFormat of</color>
<color=#75715e>       * BigDecimal to the SimpleFormat. In other words, the conversion</color>
<color=#75715e>       * from a BigDecimal proxied format to a BigDecimal SimpleFormat is</color>
<color=#75715e>       * allowed, and the old format can be used as the reader of the old</color>
<color=#75715e>       * data.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFormatParam</color><color=#f8f8f2>.</color><color=#a6e22e>allowEvolveFromProxy</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>useEvolvedFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addEvolveError</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#e6db74>"A proxied class may not be changed to a different type"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ProxiedFormat</color> <color=#f8f8f2>newFormat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ProxiedFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>newFormatParam</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>proxyFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>newProxyFormat</color> <color=#f92672>=</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>newProxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getProxyClassName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>addEvolveError</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color>
          <color=#e6db74>"The proxy class for this type has been changed from: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>newProxyFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" to: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getProxyClassName</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newProxyFormat</color> <color=#f92672>!=</color> <color=#f8f8f2>proxyFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>useEvolvedFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evolver</color><color=#f8f8f2>.</color><color=#a6e22e>useOldFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>