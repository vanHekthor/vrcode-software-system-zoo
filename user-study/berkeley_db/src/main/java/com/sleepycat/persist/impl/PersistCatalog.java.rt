<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.IntegerBinding</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicaWriteException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.DatabaseNamer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.StoreExistsException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.StoreNotFoundException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Converter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.IncompatibleClassException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Mutations</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Renamer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawObject</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.RuntimeExceptionWrapper</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Modifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The catalog of class formats for a store, along with its associated model and mutations.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>PersistCatalog</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Catalog</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_TXN_RETRIES</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Key to Data record in the catalog database. In the JE 3.0.12 beta version the formatList record</color>
<color=#75715e>   * is stored under this key and is converted to a Data object when it is read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>DATA_KEY</color> <color=#f92672>=</color> <color=#f8f8f2>getIntBytes</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Key to a JE 3.0.12 beta version mutations record in the catalog database. This record is no</color>
<color=#75715e>   * longer used because mutations are stored in the Data record and is deleted when the beta</color>
<color=#75715e>   * version is detected.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>BETA_MUTATIONS_KEY</color> <color=#f92672>=</color> <color=#f8f8f2>getIntBytes</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>2</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getIntBytes</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>IntegerBinding</color><color=#f8f8f2>.</color><color=#a6e22e>intToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>4</color> <color=#f92672>&&</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>().</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used by unit tests. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expectNoClassChanges</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>unevolvedFormatsEncountered</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The object stored under DATA_KEY in the catalog database. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Data</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>7515058069137413261L</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>formatList</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>version</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A list of all formats indexed by formatId. Element zero is unused and null, since IDs start at</color>
<color=#75715e>   * one; this avoids adjusting the ID to index the list. Some elements are null to account for</color>
<color=#75715e>   * predefined IDs that are not used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This field, like formatMap, is volatile because it is reassigned when dynamically adding new</color>
<color=#75715e>   * formats. See {@link #addNewFormat}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>formatList</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A map of the current/live formats in formatList, indexed by class name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This field, like formatList, is volatile because it is reassigned when dynamically adding</color>
<color=#75715e>   * new formats. See {@link #addNewFormat}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A map of the latest formats (includes deleted formats) in formatList, indexed by class name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This field, like formatMap, is volatile because it is reassigned when dynamically adding new</color>
<color=#75715e>   * formats. See {@link #addNewFormat}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>latestFormatMap</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A temporary map of proxied class name to proxy class name. Used during catalog creation, and</color>
<color=#75715e>   * then set to null. This map is used to force proxy formats to be created prior to proxied</color>
<color=#75715e>   * formats. [#14665]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>proxyClassMap</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StoredModel</color> <color=#f8f8f2>storedModel</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>openCount</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If a Replica is upgraded, local in-memory evolution may take place prior to the Master being</color>
<color=#75715e>   * upgraded. In that case, the size of the formatList will be greater than nStoredFormats. In this</color>
<color=#75715e>   * case, the readOnly state field will be set to true. We must be sure not to write the metadata</color>
<color=#75715e>   * in this state. [#16655]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>nStoredFormats</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The Store is normally present but may be null in unit tests (for example, BindingTest). */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Store</color> <color=#f8f8f2>store</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The Evolver and catalog Data are non-null during catalog initialization, and null otherwise.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Evolver</color> <color=#f8f8f2>initEvolver</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Data</color> <color=#f8f8f2>initData</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a new catalog, opening the database and reading it from a given catalog database if it</color>
<color=#75715e>   * already exists. All predefined formats and formats for the given model are added. For modified</color>
<color=#75715e>   * classes, old formats are defined based on the rules for compatible class changes and the given</color>
<color=#75715e>   * mutations. If any format is changed or added, and the database is not read-only, write the</color>
<color=#75715e>   * initialized catalog to the database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>PersistCatalog</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutationsParam</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Store</color> <color=#f8f8f2>store</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color>
          <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>env</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccess</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>store</color> <color=#f92672>=</color> <color=#f8f8f2>store</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transactional</color> <color=#f92672>=</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>();</color>

    <color=#75715e>/* store may be null for testing. */</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>fileAndDbNames</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>store</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>parseDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>Store</color><color=#f8f8f2>.</color><color=#a6e22e>parseDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseNamer</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use a null (auto-commit) transaction for opening the database, so</color>
<color=#75715e>     * that the database is opened even if a ReplicaWriteException occurs</color>
<color=#75715e>     * when attempting to evolve the metadata.  We will close the database</color>
<color=#75715e>     * if another exception occurs in the finally statement below.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>openDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*txn*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileAndDbNames</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>dbNameMsg</color> <color=#f92672>=</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getDbNameMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>fileAndDbNames</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getExclusiveCreate</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>StoreExistsException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Catalog DB already exists and ExclusiveCreate=true, "</color> <color=#f92672>+</color> <color=#f8f8f2>dbNameMsg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowCreate</color><color=#f8f8f2>();</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>StoreNotFoundException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Catalog DB does not exist and AllowCreate=false, "</color> <color=#f92672>+</color> <color=#f8f8f2>dbNameMsg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>openCount</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>initAndRetry</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>mutationsParam</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a new catalog when a Replica refresh occurs. Uses some information from the old catalog</color>
<color=#75715e>   * directly in the new catalog, but all formats are created from scratch and class evolution is</color>
<color=#75715e>   * attempted.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>PersistCatalog</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>store</color> <color=#f92672>=</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>store</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>env</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>rawAccess</color> <color=#f92672>=</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccess</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>openCount</color> <color=#f92672>=</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>openCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>transactional</color> <color=#f92672>=</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>transactional</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>initAndRetry</color><color=#f8f8f2>(</color><color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>model</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>mutations</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initAndRetry</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutationsParam</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transactional</color> <color=#f92672>&&</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>getThreadTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>beginTransaction</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getAutoCommitTxnConfig</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>mutationsParam</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * It is very unlikely that two threads opening the same</color>
<color=#75715e>         * EntityStore will cause a lock conflict.  However, because we</color>
<color=#75715e>         * read-modify-update the catalog record,</color>
<color=#75715e>         * LockPreemptedException must be handled in a replicated JE</color>
<color=#75715e>         * environment.  Since LockPreemptedException is a</color>
<color=#75715e>         * LockConfictException, it is simplest to retry when any</color>
<color=#75715e>         * LockConfictException occurs.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>MAX_TXN_RETRIES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the catalog is read-only we abort rather than commit,</color>
<color=#75715e>         * because a ReplicaWriteException may have occurred.</color>
<color=#75715e>         * ReplicaWriteException invalidates the transaction, and there</color>
<color=#75715e>         * are no writes to commit anyway. [#16655]</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>commit</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutationsParam</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>initData</color> <color=#f92672>=</color> <color=#f8f8f2>readData</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>mutations</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mutations</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mutations</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Mutations</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * When the beta version is detected, force a re-write of the</color>
<color=#75715e>       * catalog and disallow class changes.  This brings the catalog up</color>
<color=#75715e>       * to date so that evolution can proceed correctly from then on.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>betaVersion</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>==</color> <color=#f8f8f2>BETA_VERSION</color><color=#f8f8f2>);</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>needWrite</color> <color=#f92672>=</color> <color=#f8f8f2>betaVersion</color><color=#f8f8f2>;</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>disallowClassChanges</color> <color=#f92672>=</color> <color=#f8f8f2>betaVersion</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Store the given mutations if they are different from the stored</color>
<color=#75715e>       * mutations, and force evolution to apply the new mutations.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>forceEvolution</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mutationsParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>mutationsParam</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>mutationsParam</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>needWrite</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>forceEvolution</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>envClassLoader</color> <color=#f92672>=</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Get the existing format list, or copy it from SimpleCatalog. */</color>
      <color=#f8f8f2>formatList</color> <color=#f92672>=</color> <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatList</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>formatList</color> <color=#f92672>=</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getAllSimpleFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>envClassLoader</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Special cases: Object and Number are predefined but are not</color>
<color=#75715e>         * simple types.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NonPersistentFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_OBJECT</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_OBJECT</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NonPersistentFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>Number</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_NUMBER</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_NUMBER</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Pick up any new predefined simple types. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>addMissingSimpleFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>envClassLoader</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>needWrite</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>nStoredFormats</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Initialize transient catalog field before further use. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>initCatalog</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Special handling for JE 3.0.12 beta formats. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>betaVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>formatMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>migrateFromBeta</color><color=#f8f8f2>(</color><color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If we should not use the current model, initialize the stored</color>
<color=#75715e>       * model and return.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>formatMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>latestFormatMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>isCurrentVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>latestFormatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>modelParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>model</color> <color=#f92672>=</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>storedModel</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>StoredModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>storedModel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StoredModel</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>model</color> <color=#f92672>=</color> <color=#f8f8f2>storedModel</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>ModelInternal</color><color=#f8f8f2>.</color><color=#a6e22e>setClassLoader</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#f8f8f2>envClassLoader</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>initializeIfNeeded</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>initModelAndMutations</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We are opening a store that uses the current model. Default to</color>
<color=#75715e>       * the AnnotationModel if no model is specified.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>modelParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>model</color> <color=#f92672>=</color> <color=#f8f8f2>modelParam</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>model</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationModel</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>ModelInternal</color><color=#f8f8f2>.</color><color=#a6e22e>setClassLoader</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#f8f8f2>envClassLoader</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>storedModel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Add all predefined (simple) formats to the format map.  The</color>
<color=#75715e>       * current version of other formats will be added below.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_PREDEFINED</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Format</color> <color=#f8f8f2>simpleFormat</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>simpleFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>simpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>simpleFormat</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Known classes are those explicitly registered by the user via</color>
<color=#75715e>       * the model, plus the predefined proxy classes.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>knownClasses</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>.</color><color=#a6e22e>getKnownClasses</color><color=#f8f8f2>());</color>
      <color=#75715e>/* Also adds the special classes, i.e., enum or array. [#19377] */</color>
      <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>.</color><color=#a6e22e>getKnownSpecialClasses</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>addPredefinedProxies</color><color=#f8f8f2>(</color><color=#f8f8f2>knownClasses</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Create a temporary map of proxied class name to proxy class</color>
<color=#75715e>       * name, using all known formats and classes.  This map is used to</color>
<color=#75715e>       * force proxy formats to be created prior to proxied formats.</color>
<color=#75715e>       * [#14665]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>proxyClassMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>isPredefined</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>oldName</color> <color=#f92672>=</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Renamer</color> <color=#f8f8f2>renamer</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getRenamer</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>renamer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>renamer</color><color=#f8f8f2>.</color><color=#a6e22e>getNewName</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>addProxiedClass</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isKnownClass*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color> <color=#f8f8f2>:</color> <color=#f8f8f2>knownClasses</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>addProxiedClass</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*isKnownClass*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Add known formats from the model and the predefined proxies.</color>
<color=#75715e>       * In general, classes will not be present in an AnnotationModel</color>
<color=#75715e>       * until an instance is stored, in which case an old format exists.</color>
<color=#75715e>       * However, registered proxy classes are an exception and must be</color>
<color=#75715e>       * added in advance.  And the user may choose to register new</color>
<color=#75715e>       * classes in advance.  The more formats we define in advance, the</color>
<color=#75715e>       * less times we have to write to the catalog database.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color> <color=#f8f8f2>:</color> <color=#f8f8f2>knownClasses</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Perform class evolution for all old formats, and throw an</color>
<color=#75715e>       * exception that contains the messages for all of the errors in</color>
<color=#75715e>       * mutations or in the definition of new classes.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>initEvolver</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>Evolver</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>storePrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>,</color> <color=#f8f8f2>forceEvolution</color><color=#f8f8f2>,</color> <color=#f8f8f2>disallowClassChanges</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>isPredefined</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>evolveFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>addNonEntityFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>finishEvolution</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>errors</color> <color=#f92672>=</color> <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>getErrors</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errors</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IncompatibleClassException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Add the new formats remaining.  New formats that are equal to</color>
<color=#75715e>       * old formats were removed from the newFormats map above.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>addFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Initialize all formats. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>initializeIfNeeded</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>latestFormatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>formatsChanged</color> <color=#f92672>=</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>areFormatsChanged</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>needWrite</color> <color=#f92672>|=</color> <color=#f8f8f2>formatsChanged</color><color=#f8f8f2>;</color>

      <color=#75715e>/* For unit testing. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expectNoClassChanges</color> <color=#f92672>&&</color> <color=#f8f8f2>formatsChanged</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Unexpected changes "</color>
                <color=#f92672>+</color> <color=#e6db74>" newFormats.size="</color>
                <color=#f92672>+</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" areFormatsChanged="</color>
                <color=#f92672>+</color> <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>areFormatsChanged</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>readOnly</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>().</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Write the catalog if anything changed. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needWrite</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/* <!-- begin JE only --> */</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* <!-- end JE only --> */</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Only rename/remove databases if we are going to update</color>
<color=#75715e>           * the catalog to reflect those class changes.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>renameAndRemoveDatabases</color><color=#f8f8f2>(</color><color=#f8f8f2>store</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Note that we use the Data object that was read above,</color>
<color=#75715e>           * and the beta version determines whether to delete the</color>
<color=#75715e>           * old mutations record.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>writeData</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>initData</color><color=#f8f8f2>);</color>
          <color=#75715e>/* <!-- begin JE only --> */</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicaWriteException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>readOnly</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* <!-- end JE only --> */</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>initModelAndMutations</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Fields needed only for the duration of this ctor and which</color>
<color=#75715e>       * should be null afterwards.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>proxyClassMap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>initData</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>initEvolver</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initModelAndMutations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Give the model a reference to the catalog to fully initialize</color>
<color=#75715e>     * the model.  Only then may we initialize the Converter mutations,</color>
<color=#75715e>     * which themselves may call model methods and expect the model to</color>
<color=#75715e>     * be fully initialized.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ModelInternal</color><color=#f8f8f2>.</color><color=#a6e22e>setCatalog</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color> <color=#f8f8f2>:</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>.</color><color=#a6e22e>getConverters</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>converter</color><color=#f8f8f2>.</color><color=#a6e22e>getConversion</color><color=#f8f8f2>().</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>getEntityFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>entityFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entityFormats</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addProxiedClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isKnownClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ClassMetadata</color> <color=#f8f8f2>metadata</color> <color=#f92672>=</color> <color=#f8f8f2>model</color><color=#f8f8f2>.</color><color=#a6e22e>getClassMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>metadata</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>proxiedClassName</color> <color=#f92672>=</color> <color=#f8f8f2>metadata</color><color=#f8f8f2>.</color><color=#a6e22e>getProxiedClassName</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proxiedClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the class is a registered known class, need to check if</color>
<color=#75715e>         * registering proxy class is allowed or not. Currently, only</color>
<color=#75715e>         * SimpleType is not allowed to register a proxy class.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isKnownClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Class</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>proxiedClassName</color><color=#f8f8f2>);</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Check if the proxied class is allowed to register a</color>
<color=#75715e>             * proxy class. If not, IllegalArgumentException will</color>
<color=#75715e>             * be thrown.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>allowRegisterProxy</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                  <color=#e6db74>"Registering proxy is not allowed for "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>proxiedClassName</color>
                      <color=#f92672>+</color> <color=#e6db74>", which is a built-in simple type."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Class does not exist: "</color> <color=#f92672>+</color> <color=#f8f8f2>proxiedClassName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>proxyClassMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>proxiedClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addPredefinedProxies</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>knownClasses</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>ArrayListProxy</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>LinkedListProxy</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>HashSetProxy</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CollectionProxy</color><color=#f8f8f2>.</color><color=#a6e22e>TreeSetProxy</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>MapProxy</color><color=#f8f8f2>.</color><color=#a6e22e>HashMapProxy</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>MapProxy</color><color=#f8f8f2>.</color><color=#a6e22e>TreeMapProxy</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>knownClasses</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>MapProxy</color><color=#f8f8f2>.</color><color=#a6e22e>LinkedHashMapProxy</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map from format to a set of its superclass formats. The format for simple types,</color>
<color=#75715e>   * enums and class Object are not included. Only complex types have superclass formats as defined</color>
<color=#75715e>   * by Format.getSuperFormat.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>>></color> <color=#a6e22e>getSubclassMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>>></color> <color=#f8f8f2>subclassMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>isPredefined</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>superFormat</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperFormat</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>subclass</color> <color=#f92672>=</color> <color=#f8f8f2>subclassMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subclass</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>subclass</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
          <color=#f8f8f2>subclassMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>superFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>subclass</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>subclass</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>subclassMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the model parameter, default model or stored model. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntityModel</color> <color=#a6e22e>getResolvedModel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>model</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Increments the reference count for a catalog that is already open. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>openExisting</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>openCount</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the user opened the store read-only, or we're running in Replica upgrade mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Decrements the reference count and closes the catalog DB when it reaches zero. Returns true if</color>
<color=#75715e>   * the database was closed or false if the reference count is still non-zero and the database was</color>
<color=#75715e>   * left open.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Catalog is not open"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>openCount</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the current merged mutations. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Mutations</color> <color=#a6e22e>getMutations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method that gets the class for the given class name and calls createFormat with the</color>
<color=#75715e>   * class object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Class does not exist: "</color> <color=#f92672>+</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the given class format is not already present in the given map and a format for this class</color>
<color=#75715e>   * name does not already exist, creates an uninitialized format, adds it to the map, and also</color>
<color=#75715e>   * collects related formats in the map.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Return a new or existing format for this class. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>className</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getFormatFromMap</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getFormatFromMap</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Simple types are predefined. */</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>isSimpleType</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>className</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Although metadata is only needed for a complex type, call</color>
<color=#75715e>     * getClassMetadata for all types to support checks for illegal</color>
<color=#75715e>     * metadata on other types.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ClassMetadata</color> <color=#f8f8f2>metadata</color> <color=#f92672>=</color> <color=#f8f8f2>model</color><color=#f8f8f2>.</color><color=#a6e22e>getClassMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Create format of the appropriate type. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>proxyClassName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proxyClassMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>proxyClassName</color> <color=#f92672>=</color> <color=#f8f8f2>proxyClassMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proxyClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ProxiedFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>proxyClassName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>isArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color>
          <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>().</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>()</color>
              <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>PrimitiveArrayFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>))</color>
              <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ObjectArrayFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>isEnum</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnumFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getEnclosingClass</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getEnclosingClass</color><color=#f8f8f2>().</color><color=#a6e22e>isEnum</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the type is an anonymous class of an enum class, the format</color>
<color=#75715e>       * which represents the enum class will be created. [#18357]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnumFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getEnclosingClass</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color> <color=#f92672>||</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>isInterface</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NonPersistentFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>metadata</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Class could not be loaded or is not persistent: "</color> <color=#f92672>+</color> <color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>metadata</color><color=#f8f8f2>.</color><color=#a6e22e>getCompositeKeyFields</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
          <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>metadata</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryKey</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>metadata</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryKeys</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"A composite key class may not have primary or"</color>
                <color=#f92672>+</color> <color=#e6db74>" secondary key fields: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check for inner class before default constructor, to give a</color>
<color=#75715e>       * specific error message for each.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getEnclosingClass</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isStatic</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Inner classes not allowed: "</color> <color=#f92672>+</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaredConstructor</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"No default constructor: "</color> <color=#f92672>+</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>metadata</color><color=#f8f8f2>.</color><color=#a6e22e>getCompositeKeyFields</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CompositeKeyFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>metadata</color><color=#f8f8f2>,</color> <color=#f8f8f2>metadata</color><color=#f8f8f2>.</color><color=#a6e22e>getCompositeKeyFields</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>EntityMetadata</color> <color=#f8f8f2>entityMetadata</color> <color=#f92672>=</color> <color=#f8f8f2>model</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ComplexFormat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>metadata</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityMetadata</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Collect new format along with any related new formats. */</color>
    <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>collectRelatedFormats</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getFormatFromMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>formats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>formats</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getEnclosingClass</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getEnclosingClass</color><color=#f8f8f2>().</color><color=#a6e22e>isEnum</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the type is an anonymous class of this enum class, the format</color>
<color=#75715e>       * which represents the enum class will be returned. [#18357]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>formats</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getEnclosingClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds a format and makes it the current format for the class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>addFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds a format to the given the format collections, for use when dynamically adding formats. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>list</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>map</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Installs an existing format when no evolution is needed, i.e, when the new and old formats are</color>
<color=#75715e>   * identical.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>useExistingFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isCurrentVersion</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>oldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldFormat</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a set of all persistent (non-simple type) class names. */</color>
  <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getModelClasses</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>classes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>isModelClass</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>classes</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableSet</color><color=#f8f8f2>(</color><color=#f8f8f2>classes</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns all formats as RawTypes. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>RawType</color><color=#f92672>></color> <color=#a6e22e>getAllRawTypes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>RawType</color><color=#f92672>></color> <color=#f8f8f2>list</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>RawType</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>RawType</color> <color=#f8f8f2>type</color> <color=#f8f8f2>:</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableList</color><color=#f8f8f2>(</color><color=#f8f8f2>list</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When a format is intialized, this method is called to get the version of the serialized object</color>
<color=#75715e>   * to be initialized. See Catalog.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getInitVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>initData</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
        <color=#f92672>||</color> <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
        <color=#f92672>||</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * For new formats, use the current version.  If initData is null,</color>
<color=#75715e>       * the Catalog ctor is finished and the format must be new.  If the</color>
<color=#75715e>       * ctor is in progress, the format is new if its ID is greater than</color>
<color=#75715e>       * the ID of all pre-existing formats.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Catalog</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT_VERSION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get the version of a pre-existing format during execution of the</color>
<color=#75715e>       * Catalog ctor.  The initData field is non-null, but initEvolver</color>
<color=#75715e>       * may be null if the catalog is opened in raw mode.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>initData</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forReader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Get the version of the evolution reader for a pre-existing</color>
<color=#75715e>         * format.  Use the current version if the format changed</color>
<color=#75715e>         * during class evolution, otherwise use the stored version.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>initEvolver</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>initEvolver</color><color=#f8f8f2>.</color><color=#a6e22e>isFormatChanged</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>))</color>
            <color=#f92672>?</color> <color=#f8f8f2>Catalog</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT_VERSION</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>version</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Always used the stored version for a pre-existing format. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>initData</color><color=#f8f8f2>.</color><color=#a6e22e>version</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expectStored</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Format ID "</color> <color=#f92672>+</color> <color=#f8f8f2>formatId</color> <color=#f92672>+</color> <color=#e6db74>" is negative,"</color> <color=#f92672>+</color> <color=#e6db74>" may indicate data corruption."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * If we're attempting to read a record containing a format ID that is greater than the maximum</color>
<color=#75715e>     * known stored format, then we refresh the formats from disk, expecting that the stored formats</color>
<color=#75715e>     * have been updated by the Master node. Note that format IDs greater than nStoredFormats may</color>
<color=#75715e>     * exist in the formatList, if evolution took place on this Replica in a read-only mode. Such</color>
<color=#75715e>     * formats are never written (Replicas do not write) and cannot be used for reading an existing</color>
<color=#75715e>     * record. [#16655]</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Do not perform this check if we did not get the format ID from a stored record</color>
<color=#75715e>     * (expectStored is false). For example, this would cause an erroneous RefreshException when</color>
<color=#75715e>     * this method is called during a convertRawObject operation, which calls this method to get a</color>
<color=#75715e>     * fresh copy of a format that may not be stored. [#18690]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expectStored</color> <color=#f92672>&&</color> <color=#f8f8f2>formatId</color> <color=#f92672>>=</color> <color=#f8f8f2>nStoredFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>store</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>(</color><color=#f8f8f2>store</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Format ID "</color> <color=#f92672>+</color> <color=#f8f8f2>formatId</color> <color=#f92672>+</color> <color=#e6db74>" has null format,"</color> <color=#f92672>+</color> <color=#e6db74>" may indicate data corruption."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Currently we can't throw DeletedClassException because we should not</color>
<color=#75715e>     * do this if we're being called during a Conversion, and we don't have</color>
<color=#75715e>     * that state information available.</color>
<color=#75715e>     */</color>
    <color=#75715e>/*</color>
<color=#75715e>    if (format.isDeleted()) {</color>
<color=#75715e>        throw new DeletedClassException</color>
<color=#75715e>            ("Class " + format.getClassName() +</color>
<color=#75715e>             " was deleted with a Deleter muation, format ID " +</color>
<color=#75715e>             formatId + '.');</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a format for a given class, creating it if it does not exist.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is called for top level entity instances by PersistEntityBinding. When a new</color>
<color=#75715e>   * entity subclass format is added we call Store.checkEntitySubclassSecondaries to ensure that all</color>
<color=#75715e>   * secondary databases have been opened, before storing the entity. We do this here while not</color>
<color=#75715e>   * holding a synchronization mutex, not in addNewFormat, to avoid deadlocks.</color>
<color=#75715e>   * checkEntitySubclassSecondaries synchronizes on the Store. [#16399]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Historical note: At one time we opened / created the secondary databases rather than</color>
<color=#75715e>   * requiring the user to open them, see [#15247]. Later we found this to be problematic since a</color>
<color=#75715e>   * user txn may have locked primary records, see [#16399].</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkEntitySubclassIndexes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>model</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>addNewFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>);</color>
        <color=#75715e>/* Detect and handle new entity subclass. [#15247] */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkEntitySubclassIndexes</color> <color=#f92672>&&</color> <color=#f8f8f2>store</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Format</color> <color=#f8f8f2>entityFormat</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityFormat</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entityFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>entityFormat</color> <color=#f92672>!=</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>checkEntitySubclassSecondaries</color><color=#f8f8f2>(</color><color=#f8f8f2>entityFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Class is not persistent: "</color> <color=#f92672>+</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getLatestVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>latestFormatMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the name of an entity class to be used to form the database name. Normally this is the</color>
<color=#75715e>   * same as the class name, but in replica upgrade mode it may be an earlier version of a renamed</color>
<color=#75715e>   * class. Returns null if there is no stored version of the class. [#16655]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDatabaseClassName</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getStoredFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Similar to getDatabaseClassName but instead handles an earlier version of a renamed key.</color>
<color=#75715e>   * [#16655]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDatabaseKeyName</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getStoredFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getOldKeyName</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getStoredFormat</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#f8f8f2>nStoredFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getPreviousVersion</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Metadata needs refreshing when a Replica with stale metadata is elected master, and then a user</color>
<color=#75715e>   * write operation is attempted. [#16655]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>checkWriteInReplicaUpgradeMode</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nStoredFormats</color> <color=#f92672><</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>(</color><color=#f8f8f2>store</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#75715e>/*formatId*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicaUpgradeMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nStoredFormats</color> <color=#f92672><</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a format for a new class. Returns the format added for the given class, or throws an</color>
<color=#75715e>   * exception if the given class is not persistent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method uses a copy-on-write technique to add new formats without impacting other</color>
<color=#75715e>   * threads.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>Format</color> <color=#a6e22e>addNewFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * After synchronizing, check whether another thread has added the</color>
<color=#75715e>     * format needed.  Note that this is not the double-check technique</color>
<color=#75715e>     * because the formatMap field is volatile and is not itself checked</color>
<color=#75715e>     * for null.  (The double-check technique is known to be flawed in</color>
<color=#75715e>     * Java.)</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getFormatFromMap</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Copy the read-only format collections. */</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormatList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>formatList</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormatMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>formatMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newLatestFormatMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>latestFormatMap</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Add the new format and all related new formats. */</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormatList</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormatMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Initialize new formats using a read-only catalog because we can't</color>
<color=#75715e>     * update this catalog until after we store it (below).</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Catalog</color> <color=#f8f8f2>newFormatCatalog</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ReadOnlyCatalog</color><color=#f8f8f2>(</color><color=#f8f8f2>ModelInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>),</color> <color=#f8f8f2>newFormatList</color><color=#f8f8f2>,</color> <color=#f8f8f2>newFormatMap</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>newFormat</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>initializeIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormatCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>model</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>newLatestFormatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>newFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>newFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Write the updated catalog using auto-commit, then assign the new</color>
<color=#75715e>     * collections.  The database write must occur before the collections</color>
<color=#75715e>     * are used, since a format must be persistent before it can be</color>
<color=#75715e>     * referenced by a data record.</color>
<color=#75715e>     *</color>
<color=#75715e>     * In readOnly mode, which includes Replica upgrade mode, we should not</color>
<color=#75715e>     * attempt to write since we could be elected Master and write stale</color>
<color=#75715e>     * metadata.  If ReplicaWriteException occurs then we transition to</color>
<color=#75715e>     * Replica upgrade mode in the same manner as in the init() method.</color>
<color=#75715e>     * This can happen when no schema change is made except for one or more</color>
<color=#75715e>     * new entity classes.  The new entity class will not be detected by</color>
<color=#75715e>     * evolution (during init()) but will be detected here if the user</color>
<color=#75715e>     * calls getPrimaryIndex.  [#16655]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Data</color> <color=#f8f8f2>newData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Data</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>newData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color> <color=#f92672>=</color> <color=#f8f8f2>newFormatList</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>newData</color><color=#f8f8f2>.</color><color=#a6e22e>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>writeDataCheckStale</color><color=#f8f8f2>(</color><color=#f8f8f2>newData</color><color=#f8f8f2>);</color>
        <color=#75715e>/* <!-- begin JE only --> */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicaWriteException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readOnly</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#75715e>/* <!-- end JE only --> */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>formatList</color> <color=#f92672>=</color> <color=#f8f8f2>newFormatList</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>formatMap</color> <color=#f92672>=</color> <color=#f8f8f2>newFormatMap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>latestFormatMap</color> <color=#f92672>=</color> <color=#f8f8f2>newLatestFormatMap</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to write the catalog when a format has been changed, for example, when Store.evolve has</color>
<color=#75715e>   * updated a Format's EvolveNeeded property. Uses auto-commit.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>flush</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Data</color> <color=#f8f8f2>newData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Data</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>newData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>newData</color><color=#f8f8f2>.</color><color=#a6e22e>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>writeData</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the number of stored formats. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getNFormats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nStoredFormats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads catalog Data, converting old versions as necessary. An empty Data object is returned if</color>
<color=#75715e>   * no catalog data currently exists. Null is never returned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Data</color> <color=#a6e22e>readData</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Data</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>DATA_KEY</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>OperationStatus</color> <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>status</color> <color=#f92672>==</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ByteArrayInputStream</color> <color=#f8f8f2>bais</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ObjectInputStream</color> <color=#f8f8f2>ois</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ObjectInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>bais</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>object</color> <color=#f92672>=</color> <color=#f8f8f2>ois</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>();</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>ois</color><color=#f8f8f2>.</color><color=#a6e22e>available</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>object</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Data</color><color=#f8f8f2>)</color> <color=#f8f8f2>object</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>List</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Data</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>oldData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f8f8f2>)</color> <color=#f8f8f2>object</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>oldData</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>=</color> <color=#f8f8f2>BETA_VERSION</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Data</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>oldData</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>=</color> <color=#f8f8f2>Catalog</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT_VERSION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Metadata needs refreshing when a Replica with stale metadata is elected master, and then a user</color>
<color=#75715e>   * write operation is attempted that also requires a metadata update. [#16655]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isMetadataStale</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Data</color> <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#f8f8f2>readData</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>nStoredFormats</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Writes catalog Data after checking for stale metadata. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeDataCheckStale</color><color=#f8f8f2>(</color><color=#f8f8f2>Data</color> <color=#f8f8f2>newData</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transactional</color> <color=#f92672>&&</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>getThreadTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>beginTransaction</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getAutoCommitTxnConfig</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMetadataStale</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>(</color><color=#f8f8f2>store</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#75715e>/*formatId*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>writeData</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * A lock conflict should not occur because writes to the</color>
<color=#75715e>         * catalog DB are in synchronized methods.  However, because we</color>
<color=#75715e>         * read-modify-update the catalog record,</color>
<color=#75715e>         * LockPreemptedException must be handled in a replicated JE</color>
<color=#75715e>         * environment.  Since LockPreemptedException is a</color>
<color=#75715e>         * LockConfictException, it is simplest to retry when any</color>
<color=#75715e>         * LockConfictException occurs.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>MAX_TXN_RETRIES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the catalog is read-only we abort rather than commit,</color>
<color=#75715e>         * because a ReplicaWriteException may have occurred.</color>
<color=#75715e>         * ReplicaWriteException invalidates the transaction, and there</color>
<color=#75715e>         * are no writes to commit anyway. [#16655]</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>commit</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Writes catalog Data. Does not check for stale metadata. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeData</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Data</color> <color=#f8f8f2>newData</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Catalog data is written in the current version. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>wasBetaVersion</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>newData</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>==</color> <color=#f8f8f2>BETA_VERSION</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>newData</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>=</color> <color=#f8f8f2>CURRENT_VERSION</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>baos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ObjectOutputStream</color> <color=#f8f8f2>oos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ObjectOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>baos</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>oos</color><color=#f8f8f2>.</color><color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>newData</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>DATA_KEY</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>baos</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>());</color>
<color=#75715e>//    db.put(txn, key, data);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Delete the unused beta mutations record if we read the beta version</color>
<color=#75715e>     * record earlier.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wasBetaVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>BETA_MUTATIONS_KEY</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nStoredFormats</color> <color=#f92672>=</color> <color=#f8f8f2>newData</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRawAccess</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>convertRawObject</color><color=#f8f8f2>(</color><color=#f8f8f2>RawObject</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>IdentityHashMap</color> <color=#f8f8f2>converted</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getCatalog</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Ensure a fresh format is used, in case of Replica refresh. */</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>(),</color> <color=#66d9ef>false</color> <color=#75715e>/*expectStored*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Use the corresponding format in this catalog when the external</color>
<color=#75715e>       * raw object was created using a different catalog.  Create the</color>
<color=#75715e>       * format if it does not already exist, for example, when this</color>
<color=#75715e>       * store is empty. [#16253].</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*checkEntitySubclassIndexes*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"External raw type not found: "</color> <color=#f92672>+</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>proxiedFormat</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getProxiedFormat</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proxiedFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>proxiedFormat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converted</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>converted</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IdentityHashMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>convertRawObject</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>converted</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>ModelInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>ModelInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>