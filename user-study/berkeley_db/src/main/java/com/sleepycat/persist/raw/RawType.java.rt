<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.raw</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.ClassMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.Entity</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.EntityMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.Persistent</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The type definition for a simple or complex persistent type, or an array of persistent types.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code RawType} objects are thread-safe. Multiple threads may safely call the methods of a</color>
<color=#75715e> * shared {@code RawType} object.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>RawType</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the class name for this type in the format specified by {@link Class#getName}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this class currently exists (has not been removed or renamed) then the class name may be</color>
<color=#75715e>   * passed to {@link Class#forName} to get the current {@link Class} object. However, if this raw</color>
<color=#75715e>   * type is not the current version of the class, this type information may differ from that of the</color>
<color=#75715e>   * current {@link Class}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the class name.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the class version for this type. For simple types, zero is always returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the version.</color>
<color=#75715e>   * @see Entity#version</color>
<color=#75715e>   * @see Persistent#version</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getVersion</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the internal unique ID for this type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the ID.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getId</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this is a <a</color>
<color=#75715e>   * href="{@docRoot}/com/sleepycat/persist/model/Entity.html#simpleTypes">simple type</a>:</color>
<color=#75715e>   * primitive, primitive wrapper, BigInteger, BigDecimal, String or Date.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true is returned, {@link #isPrimitive} can be called for more information, and a raw</color>
<color=#75715e>   * value of this type is represented as a simple type object (not as a {@link RawObject}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If false is returned, this is a complex type, an array type (see {@link #isArray}), or an</color>
<color=#75715e>   * enum type, and a raw value of this type is represented as a {@link RawObject}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether this is a simple type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isSimple</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this type is a Java primitive: char, byte, short, int, long, float or double.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true is returned, this is also a simple type. In other words, primitive types are a</color>
<color=#75715e>   * subset of simple types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true is returned, a raw value of this type is represented as a non-null instance of the</color>
<color=#75715e>   * primitive type's wrapper class. For example, an <code>int</code> raw value is represented as an</color>
<color=#75715e>   * <code>Integer</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether this is a Java primitive.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isPrimitive</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this is an enum type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true is returned, a value of this type is a {@link RawObject} and the enum constant</color>
<color=#75715e>   * String is available via {@link RawObject#getEnum}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If false is returned, then this is a complex type, an array type (see {@link #isArray}), or</color>
<color=#75715e>   * a simple type (see {@link #isSimple}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether this is a enum type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isEnum</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an unmodifiable list of the names of the enum instances, or null if this is not an enum</color>
<color=#75715e>   * type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the list of enum names.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getEnumConstants</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this is an array type. Raw value arrays are represented as {@link RawObject}</color>
<color=#75715e>   * instances.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true is returned, the array component type is returned by {@link #getComponentType} and</color>
<color=#75715e>   * the number of array dimensions is returned by {@link #getDimensions}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If false is returned, then this is a complex type, an enum type (see {@link #isEnum}), or a</color>
<color=#75715e>   * simple type (see {@link #isSimple}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether this is an array type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isArray</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of array dimensions, or zero if this is not an array type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of array dimensions, or zero if this is not an array type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getDimensions</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the array component type, or null if this is not an array type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the array component type, or null if this is not an array type.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>RawType</color> <color=#a6e22e>getComponentType</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map of field name to raw field for each non-static non-transient field declared in</color>
<color=#75715e>   * this class, or null if this is not a complex type (in other words, this is a simple type or an</color>
<color=#75715e>   * array type).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a map of field name to raw field, or null.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawField</color><color=#f92672>></color> <color=#a6e22e>getFields</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the type of the superclass, or null if the superclass is Object or this is not a</color>
<color=#75715e>   * complex type (in other words, this is a simple type or an array type).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the type of the superclass, or null.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>RawType</color> <color=#a6e22e>getSuperType</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the original model class metadata used to create this class, or null if this is not a</color>
<color=#75715e>   * model class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the model class metadata, or null.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>ClassMetadata</color> <color=#a6e22e>getClassMetadata</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the original model entity metadata used to create this class, or null if this is not an</color>
<color=#75715e>   * entity class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the model entity metadata, or null.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EntityMetadata</color> <color=#a6e22e>getEntityMetadata</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this type has been deleted using a class {@code Deleter} mutation. A deleted</color>
<color=#75715e>   * type may be returned by {@link com.sleepycat.persist.model.EntityModel#getRawTypeVersion</color>
<color=#75715e>   * EntityModel.getRawTypeVersion} or {@link</color>
<color=#75715e>   * com.sleepycat.persist.model.EntityModel#getAllRawTypeVersions</color>
<color=#75715e>   * EntityModel.getAllRawTypeVersions}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether this type has been deleted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isDeleted</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Returns an XML representation of the raw type. */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>