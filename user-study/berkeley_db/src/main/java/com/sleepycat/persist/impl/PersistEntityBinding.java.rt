<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.EntityBinding</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleBase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawObject</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A persistence entity binding for a given entity class.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>PersistEntityBinding</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EntityBinding</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* See Store.refresh for an explanation of the use of volatile fields. */</color>
  <color=#66d9ef>volatile</color> <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
  <color=#66d9ef>volatile</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>PersistKeyAssigner</color> <color=#f8f8f2>keyAssigner</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a key binding for a given entity class. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>PersistEntityBinding</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>catalogParam</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>entityClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>catalog</color> <color=#f92672>=</color> <color=#f8f8f2>catalogParam</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entityFormat</color> <color=#f92672>=</color> <color=#f8f8f2>getOrCreateFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Must assign catalog field in constructor. */</color>
      <color=#f8f8f2>catalog</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>refresh</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entityFormat</color> <color=#f92672>=</color> <color=#f8f8f2>getOrCreateFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>entityFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isEntity</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Not an entity class: "</color> <color=#f92672>+</color> <color=#f8f8f2>entityClassName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccess</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>PersistKeyAssigner</color> <color=#a6e22e>getKeyAssigner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keyAssigner</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>entryToObjectInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>refresh</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entryToObjectInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method will be used in PrimaryIndex.get, where the primary key is known to DPL. This</color>
<color=#75715e>   * method will force to call readEntityWithPriKey to directly assign primary key to the</color>
<color=#75715e>   * de-serialized object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>entryToObjectWithPriKey</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Primary key cannot be null."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>entryToObjectInternal</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>refresh</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entryToObjectInternal</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is always called after reading an entity. If a refresh is needed, we detect that in</color>
<color=#75715e>   * PersistCatalog.getFormat(int).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#a6e22e>entryToObjectInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>readEntity</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates the instance, reads the entity key first to track visited entities correctly, then</color>
<color=#75715e>   * reads the data and returns the entity.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is a special case of EntityInput.readObject for a top level entity. Special treatments</color>
<color=#75715e>   * are: - The formatId must be >= 0; since this is the top level instance, it cannot refer to a</color>
<color=#75715e>   * visited object nor be a null reference. - The entity is not checked for existence in the</color>
<color=#75715e>   * visited object set; entities cannot be referenced by another entity. - Reader.readPriKey must</color>
<color=#75715e>   * be called prior to calling Reader.readObject.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readEntity</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Catalog</color> <color=#f8f8f2>useCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RecordInput</color> <color=#f8f8f2>dataInput</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>useCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>initialOffset</color> <color=#f92672>=</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferOffset</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>useCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*expectStored*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dataInput</color><color=#f8f8f2>.</color><color=#a6e22e>registerEntityFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getReader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* If priKey is null, need to deserialize the primary key. */</color>
      <color=#f8f8f2>RecordInput</color> <color=#f8f8f2>keyInput</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>useCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readPriKey</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If priKey is not null, directly assign it to the primary key</color>
<color=#75715e>       * field. [#19248]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Accessor</color> <color=#f8f8f2>accessor</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>getAccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RawObject</color> <color=#f92672>||</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>accessor</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>accessor</color> <color=#f92672>=</color>
            <color=#f8f8f2>format</color>
                <color=#f8f8f2>.</color><color=#a6e22e>getLatestVersion</color><color=#f8f8f2>()</color>
                <color=#f8f8f2>.</color><color=#a6e22e>getReader</color><color=#f8f8f2>()</color>
                <color=#f8f8f2>.</color><color=#a6e22e>getAccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RawObject</color> <color=#f92672>||</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>accessor</color><color=#f8f8f2>.</color><color=#a6e22e>setPriField</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>dataInput</color><color=#f8f8f2>.</color><color=#a6e22e>registerEntity</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>initialOffset</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entity</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entity</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToData</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>objectToDataInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>refresh</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>objectToDataInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is always called before writing an entity. If a refresh is needed, we detect that</color>
<color=#75715e>   * here.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToDataInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getValidFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Before a write, check whether a refresh is needed. [#16655] */</color>
    <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>checkWriteInReplicaUpgradeMode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>writeEntity</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the formatId and object, and returns the bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is a special case of EntityOutput.writeObject for a top level entity. Special</color>
<color=#75715e>   * treatments are: - The entity may not be null. - The entity is not checked for existence in the</color>
<color=#75715e>   * visited object set; entities cannot be referenced by another entity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>writeEntity</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RecordOutput</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RecordOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>registerEntity</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>TupleBase</color><color=#f8f8f2>.</color><color=#a6e22e>outputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToKey</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>objectToKeyInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>refresh</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>objectToKeyInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RefreshException</color> <color=#f8f8f2>e2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToKeyInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Write the primary key field as a special case since the output</color>
<color=#75715e>     * format is for a key binding, not entity data.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getValidFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>RecordOutput</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RecordOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Write the primary key and return the bytes. */</color>
    <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>writePriKey</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>TupleBase</color><color=#f8f8f2>.</color><color=#a6e22e>outputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the format for the given entity and validates it, throwing an exception if it is</color>
<color=#75715e>   * invalid for this binding.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getValidFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* A null entity is not allowed. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entity</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"An entity may not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Get the format.  getFormat throws IllegalArgumentException if the</color>
<color=#75715e>     * class is not persistent.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RawObject</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Entity must be a RawObject"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>RawObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>entity</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>(),</color> <color=#66d9ef>true</color> <color=#75715e>/*checkEntitySubclassIndexes*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check that the entity class/subclass is valid for this binding. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityFormat</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The entity class ("</color>
              <color=#f92672>+</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>") must be this entity class or a subclass of it: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility method for getting or creating a format as appropriate for bindings and key creators.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getOrCreateFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Catalog</color> <color=#f8f8f2>useCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rawAccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>useCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Not a persistent class: "</color> <color=#f92672>+</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>useCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>useCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*checkEntitySubclassIndexes*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** See Store.refresh. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>refresh</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>newCatalog</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>catalog</color> <color=#f92672>=</color> <color=#f8f8f2>newCatalog</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entityFormat</color> <color=#f92672>=</color> <color=#f8f8f2>newCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>entityFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyAssigner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>keyAssigner</color><color=#f8f8f2>.</color><color=#a6e22e>refresh</color><color=#f8f8f2>(</color><color=#f8f8f2>newCatalog</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>