<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Field binding operations implemented via reflection (ReflectionAccessor) or bytecode enhancement</color>
<color=#75715e> * (EnhancedAccessor).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Normally we read the set of all secondary key fields first and then the set of all non-key</color>
<color=#75715e> * fields, reading each set in order of field name. But when reading an old format record we must</color>
<color=#75715e> * account for the following class evolution conversions:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Convert a field: pass value thru converter</color>
<color=#75715e> *   <li>Widen a field type: pass value thru widener</color>
<color=#75715e> *   <li>Add a field: don't read the new field</color>
<color=#75715e> *   <li>Delete a field: skip the deleted field</color>
<color=#75715e> *   <li>Rename a field: read field in a different order</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To support these operations, the methods for reading fields allow reading specific ranges of</color>
<color=#75715e> * fields as well as all fields. For example, all fields up to a deleted field could be read, and</color>
<color=#75715e> * then all fields from the following field onward.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>interface</color> <color=#a6e22e>Accessor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A large field value to use instead of Integer.MAX_VALUE, to work around Java JIT compiler bug</color>
<color=#75715e>   * when doing an (X <= Integer.MAX_VALUE) as would be done in readXxxKeyFields methods.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>MAX_FIELD_NUM</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a new instance of the target class using its default constructor. */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a new one dimensional array of the given length, having the target class as its</color>
<color=#75715e>   * component type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Using a special method for a one dimensional array, which can be implemented by bytecode</color>
<color=#75715e>   * generation, is a compromise. We use reflection to create multidimensional arrays. We could in</color>
<color=#75715e>   * the future generate code to create arrays as they are encountered, if there is a need to avoid</color>
<color=#75715e>   * reflection for multidimensional arrays.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>newArray</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the primary key field is null (for a reference type) or zero (for a primitive</color>
<color=#75715e>   * integer type). Null and zero are used as an indication that the key should be assigned from a</color>
<color=#75715e>   * sequence.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isPriKeyFieldNullOrZero</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the primary key field value to the given EntityOutput.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To write a primary key with a reference type, this method must call</color>
<color=#75715e>   * EntityOutput.writeKeyObject.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object whose primary key field is to be written.</color>
<color=#75715e>   * @param output the output data to write to.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writePriKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the primary key field value from the given EntityInput.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To read a primary key with a reference type, this method must call</color>
<color=#75715e>   * EntityInput.readKeyObject.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object whose primary key field is to be read.</color>
<color=#75715e>   * @param input the input data to read from.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>readPriKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes all secondary key field values to the given EntityOutput, writing fields in super</color>
<color=#75715e>   * classes first and in name order within class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object whose secondary key fields are to be written.</color>
<color=#75715e>   *     <p>If the primary key has a reference type, this method must call</color>
<color=#75715e>   *     EntityOutput.registerPriKeyObject before writing any other fields.</color>
<color=#75715e>   * @param output the output data to write to.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a range of secondary key field values from the given EntityInput, reading fields in super</color>
<color=#75715e>   * classes first and in name order within class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the primary key has a reference type, this method must call</color>
<color=#75715e>   * EntityInput.registerPriKeyObject before reading any other fields.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To read all fields, pass -1 for superLevel, zero for startField and MAX_FIELD_NUM for</color>
<color=#75715e>   * endField. Fields from super classes are read first.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To read a specific range of fields, pass a non-negative number for superLevel and the</color>
<color=#75715e>   * specific indices of the field range to be read in the class at that level.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object whose secondary key fields are to be read.</color>
<color=#75715e>   * @param input the input data to read from.</color>
<color=#75715e>   * @param startField the starting field index in the range of fields to read. To read all fields,</color>
<color=#75715e>   *     the startField should be zero.</color>
<color=#75715e>   * @param endField the ending field index in the range of fields to read. To read all fields, the</color>
<color=#75715e>   *     endField should be MAX_FIELD_NUM.</color>
<color=#75715e>   * @param superLevel is a non-negative number to read the fields of the class that is the Nth</color>
<color=#75715e>   *     super instance; or a negative number to read fields in all classes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>readSecKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>endField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes all non-key field values to the given EntityOutput, writing fields in super classes</color>
<color=#75715e>   * first and in name order within class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object whose non-key fields are to be written.</color>
<color=#75715e>   * @param output the output data to write to.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a range of non-key field values from the given EntityInput, reading fields in super</color>
<color=#75715e>   * classes first and in name order within class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To read all fields, pass -1 for superLevel, zero for startField and MAX_FIELD_NUM for</color>
<color=#75715e>   * endField. Fields from super classes are read first.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To read a specific range of fields, pass a non-negative number for superLevel and the</color>
<color=#75715e>   * specific indices of the field range to be read in the class at that level.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object whose non-key fields are to be read.</color>
<color=#75715e>   * @param input the input data to read from.</color>
<color=#75715e>   * @param startField the starting field index in the range of fields to read. To read all fields,</color>
<color=#75715e>   *     the startField should be zero.</color>
<color=#75715e>   * @param endField the ending field index in the range of fields to read. To read all fields, the</color>
<color=#75715e>   *     endField should be MAX_FIELD_NUM.</color>
<color=#75715e>   * @param superLevel is a non-negative number to read the fields of the class that is the Nth</color>
<color=#75715e>   *     super instance; or a negative number to read fields in all classes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>readNonKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>startField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>endField</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes all composite key field values to the given EntityOutput, writing in declared field</color>
<color=#75715e>   * number order.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o the composite key object whose fields are to be written.</color>
<color=#75715e>   * @param output the output data to write to.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeCompositeKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads all composite key field values from the given EntityInput, reading in declared field</color>
<color=#75715e>   * number order.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o the composite key object whose fields are to be read.</color>
<color=#75715e>   * @param input the input data to read from.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>readCompositeKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the value of a given field, representing primitives as primitive wrapper objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object containing the key field.</color>
<color=#75715e>   * @param field is the field index.</color>
<color=#75715e>   * @param superLevel is a positive number to identify the field of the class that is the Nth super</color>
<color=#75715e>   *     instance; or zero to identify the field in this class.</color>
<color=#75715e>   * @param isSecField is true for a secondary key field or false for a non-key field.</color>
<color=#75715e>   * @return the current field value, or null for a reference type field that is null.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>field</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Changes the value of a given field, representing primitives as primitive wrapper objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object containing the key field.</color>
<color=#75715e>   * @param field is the field index.</color>
<color=#75715e>   * @param superLevel is a positive number to identify the field of the class that is the Nth super</color>
<color=#75715e>   *     instance; or zero to identify the field in this class.</color>
<color=#75715e>   * @param isSecField is true for a secondary key field or false for a non-key field.</color>
<color=#75715e>   * @param value is the new value of the field, or null to set a reference type field to null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>field</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>superLevel</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecField</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Changes the value of the primary key field, representing primitives as primitive wrapper</color>
<color=#75715e>   * objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o is the object containing the primary key field.</color>
<color=#75715e>   * @param field is the field index.</color>
<color=#75715e>   * @param superLevel is a positive number to identify the field of the class that is the Nth super</color>
<color=#75715e>   *     instance; or zero to identify the field in this class.</color>
<color=#75715e>   * @param value is the new value of the field, or null to set a reference type field to null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setPriField</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>