<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.raw</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.IncompatibleClassException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Mutations</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.impl.Store</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.EntityModel</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Closeable</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Provides access to the raw data in a store for use by general purpose tools. A <code>RawStore</color>
<color=#75715e> * </code> provides access to stored entities without using entity classes or key classes. Keys are</color>
<color=#75715e> * represented as simple type objects or, for composite keys, as {@link RawObject} instances, and</color>
<color=#75715e> * entities are represented as {@link RawObject} instances.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code RawStore} objects are thread-safe. Multiple threads may safely call the methods of a</color>
<color=#75715e> * shared {@code RawStore} object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using a {@code RawStore}, the current persistent class definitions are not used. Instead,</color>
<color=#75715e> * the previously stored metadata and class definitions are used. This has several implications:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>An {@code EntityModel} may not be specified using {@link StoreConfig#setModel}. In other</color>
<color=#75715e> *       words, the configured model must be null (the default).</color>
<color=#75715e> *   <li>When storing entities, their format will not automatically be evolved to the current class</color>
<color=#75715e> *       definition, even if the current class definition has changed.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RawStore</color>
    <color=#75715e>/* <!-- begin JE only --> */</color>
    <color=#66d9ef>implements</color> <color=#f8f8f2>Closeable</color>
<color=#75715e>/* <!-- end JE only --> */</color>
<color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Store</color> <color=#f8f8f2>store</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens an entity store for raw data access.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param env an open Berkeley DB environment.</color>
<color=#75715e>   * @param storeName the name of the entity store within the given environment.</color>
<color=#75715e>   * @param config the store configuration, or null to use default configuration properties.</color>
<color=#75715e>   * @throws StoreNotFoundException when the {@link StoreConfig#setAllowCreate AllowCreate}</color>
<color=#75715e>   *     configuration parameter is false and the store's internal catalog database does not exist.</color>
<color=#75715e>   * @throws IllegalArgumentException if the <code>Environment</code> is read-only and the <code></color>
<color=#75715e>   *     config ReadOnly</code> property is false.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>RawStore</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>StoreConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>StoreNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>store</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Store</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*rawAccess*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>StoreExistsException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen, ExclusiveCreate not used. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IncompatibleClassException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen, evolution is not performed. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens the primary index for a given entity class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the name of the entity class.</color>
<color=#75715e>   * @return the PrimaryIndex.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PrimaryIndex</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawObject</color><color=#f92672>></color> <color=#a6e22e>getPrimaryIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawObject</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens the secondary index for a given entity class and secondary key name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entityClass the name of the entity class.</color>
<color=#75715e>   * @param keyName the secondary key name.</color>
<color=#75715e>   * @return the SecondaryIndex.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryIndex</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f8f8f2>,</color> <color=#f8f8f2>RawObject</color><color=#f92672>></color> <color=#a6e22e>getSecondaryIndex</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryIndex</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>getPrimaryIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>entityClass</color><color=#f8f8f2>),</color> <color=#f8f8f2>RawObject</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the environment associated with this store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the Environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>getEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a copy of the entity store configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the StoreConfig.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>getConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the name of this store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the store name.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getStoreName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getStoreName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the last configured and stored entity model for this store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the EntityModel.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntityModel</color> <color=#a6e22e>getModel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getModel</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the set of mutations that were configured and stored previously.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the Mutations.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Mutations</color> <color=#a6e22e>getMutations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>getMutations</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes all databases and sequences that were opened by this model. No databases opened via this</color>
<color=#75715e>   * store may be in use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>