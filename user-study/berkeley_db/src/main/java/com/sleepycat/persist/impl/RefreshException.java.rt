<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Thrown and handled internally when metadata must be refreshed on a Replica.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There are several scenarios for refreshing DPL metadata:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. Read entity record on Replica that has stale in-memory metadata.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When an entity record that references new metadata (for example, a never before encountered</color>
<color=#75715e> * class) is written on the Master, the metadata is written and replicated prior to writing and</color>
<color=#75715e> * replicating the entity record. However, the Replica's in-memory cache of metadata (the</color>
<color=#75715e> * PersistCatalog object) is not synchronously updated when the metadata is replicated. When the</color>
<color=#75715e> * entity record that references the newly replicated metadata is read on the Replica, the DPL must</color>
<color=#75715e> * refresh the in-memory metadata cache by reading it from the catalog database.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that this scenario occurs even without class evolution/upgrade, for two reasons. First,</color>
<color=#75715e> * the Master does not write all metadata at once; metadata is added to the catalog incrementally as</color>
<color=#75715e> * new persistent classes are encountered. Second, even when all metadata is written intially by the</color>
<color=#75715e> * Master, the Replica may read the catalog before the Master has completed metadata updates.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Implementation: + PersistCatalog.getFormat(int) throws RefreshException when the given format</color>
<color=#75715e> * ID is not in the in-memory catalog. + The binding method that is calling getFormat catches</color>
<color=#75715e> * RefreshException, calls RefreshException.refresh to read the updated metadata, and retries the</color>
<color=#75715e> * operation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Tests: c.s.je.rep.persist.test.UpgradeTest.testIncrementalMetadataChanges</color>
<color=#75715e> * c.s.je.rep.persist.test.UpgradeTest.testUpgrade</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2. Write entity record on Master that is in Replica Upgrade Mode.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When a Replica is upgraded with new persistent classes (see evolve/package.html doc) the DPL</color>
<color=#75715e> * will evolve the existing metadata and update the in-memory metadata cache (PersistCatalog</color>
<color=#75715e> * object), but will not write the metadata; instead, it will enter Replica Upgrade Mode. In this</color>
<color=#75715e> * mode, the Replica will convert old format data to new format data as records are read, using the</color>
<color=#75715e> * in-memory evolved metadata. This allows the Replica application to perform entity read operations</color>
<color=#75715e> * with the new persistent classes, during the upgrade process.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When this Replica is elected Master, the application will begin writing entity records. Note</color>
<color=#75715e> * that the new metadata has not yet been written to the catalog database. In Replica Upgrade Mode,</color>
<color=#75715e> * the current in-memory metadata cannot be written to disk, since the catalog database may be</color>
<color=#75715e> * stale, i.e., it have been updated by the Master after the Replica's in-memory metadata was</color>
<color=#75715e> * evolved. Therefore, before the first entity record is written, the newly elected Master must read</color>
<color=#75715e> * the latest metadata, perform evolution of the metadata again, write the metadata, and then write</color>
<color=#75715e> * the entity record.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Implementation: + The catalog enters Replica Upgrade Mode when a new or evolved format is</color>
<color=#75715e> * added to the catalog, and a ReplicaWriteException occurs when attempting to write the metadata.</color>
<color=#75715e> * Replica Upgrade Mode is defined as when the number of in-memory formats is greater than the</color>
<color=#75715e> * number of stored formats. + Before an entity record is written, PersistEntityBinding.objectToData</color>
<color=#75715e> * is called to convert the entity object to record data. + objectToData calls</color>
<color=#75715e> * PersistCatalog.checkWriteInReplicaUpgradeMode, which throws RefreshExeption in Replica Upgrade</color>
<color=#75715e> * Mode. + objectToData catches RefreshException, calls RefreshException.refresh to read the updated</color>
<color=#75715e> * metadata, and retries the operation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Tests: c.s.je.rep.persist.test.UpgradeTest.testElectedMasterWithStaleMetadata</color>
<color=#75715e> * c.s.je.rep.persist.test.UpgradeTest.testRefreshAfterFirstWrite</color>
<color=#75715e> * c.s.je.rep.persist.test.UpgradeTest.testUpgrade</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3. Write metadata on Master that is in Replica Upgrade Mode.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This third scenario is more unusual than the first two. It occurs when a Replica with stale</color>
<color=#75715e> * metadata is elected Master, but is not in Replica Upgrade Mode. The new Master must refresh</color>
<color=#75715e> * metadata before writing metadata. See the test case for more information.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Implementation: + On a Master with stale metadata, the application tries to write an entity</color>
<color=#75715e> * record that refers to a class that has not been encountered before. + Before the entity record is</color>
<color=#75715e> * written, PersistEntityBinding.objectToData is called to convert the entity object to record data.</color>
<color=#75715e> * + objectToData calls PersistCatalog.addNewFormat during serialization, which attempts to write</color>
<color=#75715e> * metadata by by calling writeDataCheckStale. + writeDataCheckStale reads the existing metadata and</color>
<color=#75715e> * detects that it has changed since metadata was last read, and throws RefreshExeption. +</color>
<color=#75715e> * objectToData catches RefreshException, calls RefreshException.refresh to read the updated</color>
<color=#75715e> * metadata, and retries the operation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Tests: c.s.je.rep.persist.test.UpgradeTest.testRefreshBeforeWrite</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RefreshException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Store</color> <color=#f8f8f2>store</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>RefreshException</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Store</color> <color=#f8f8f2>store</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>PersistCatalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>store</color> <color=#f92672>=</color> <color=#f8f8f2>store</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>catalog</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method must be called to handle this exception in the binding methods, after the stack has</color>
<color=#75715e>   * unwound. The binding methods should retry the operation once after calling this method. If the</color>
<color=#75715e>   * operation fails again, then corruption rather than stale metadata is the likely cause of the</color>
<color=#75715e>   * problem, and an exception will be thrown to that effect. [#16655]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PersistCatalog</color> <color=#a6e22e>refresh</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>store</color><color=#f8f8f2>.</color><color=#a6e22e>refresh</color><color=#f8f8f2>(</color><color=#f8f8f2>catalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"formatId="</color> <color=#f92672>+</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>