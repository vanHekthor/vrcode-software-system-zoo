<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleInput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Implements EntityInput to read record key-data pairs. Extends TupleInput to implement the subset</color>
<color=#75715e> * of TupleInput methods that are defined in the EntityInput interface.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>RecordInput</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TupleInput</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EntityInput</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* Initial size of visited map. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VISITED_INIT_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>50</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Offset to indicate that the visited object is stored in the primary key</color>
<color=#75715e>   * byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>PRI_KEY_VISITED_OFFSET</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used by RecordOutput to prevent illegal nested references. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>PROHIBIT_REF_OFFSET</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used by RecordInput to prevent illegal nested references. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>PROHIBIT_REF_OBJECT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f8f8f2>();</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>PROHIBIT_NESTED_REF_MSG</color> <color=#f92672>=</color>
      <color=#e6db74>"Cannot embed a reference to a proxied object in the proxy; for "</color>
          <color=#f92672>+</color> <color=#e6db74>"example, a collection may not be an element of the collection "</color>
          <color=#f92672>+</color> <color=#e6db74>"because collections are proxied"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>visited</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priKeyEntry</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>priKeyFormatId</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>newStringFormat</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a new input with a empty/null visited map. */</color>
  <color=#f8f8f2>RecordInput</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Catalog</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priKeyEntry</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>priKeyFormatId</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>catalog</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccess</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyEntry</color> <color=#f92672>=</color> <color=#f8f8f2>priKeyEntry</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyFormatId</color> <color=#f92672>=</color> <color=#f8f8f2>priKeyFormatId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>visited</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>VISITED_INIT_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Copy contructor where a new offset can be specified. */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>RecordInput</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>other</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>catalog</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccess</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyEntry</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyFormatId</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>buf</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>offset</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>visited</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>visited</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Copy contructor where a DatabaseEntry can be specified. */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>RecordInput</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color> <color=#f8f8f2>other</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>catalog</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>rawAccess</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyEntry</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>priKeyFormatId</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>visited</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>visited</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#getCatalog */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Catalog</color> <color=#a6e22e>getCatalog</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#isRawAccess */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRawAccess</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#setRawAccess */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>setRawAccess</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>rawAccessParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>original</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>rawAccess</color> <color=#f92672>=</color> <color=#f8f8f2>rawAccessParam</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>original</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#readObject */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readObject</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Save the current offset before reading the format ID. */</color>
    <color=#f8f8f2>Integer</color> <color=#f8f8f2>visitedOffset</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>RecordInput</color> <color=#f8f8f2>useInput</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>readPackedInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Object</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/* For a zero format ID, return a null instance. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672>==</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_NULL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* For a negative format ID, lookup an already visited instance. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>visited</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#f92672>==</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>.</color><color=#a6e22e>PROHIBIT_REF_OBJECT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color><color=#f8f8f2>.</color><color=#a6e22e>PROHIBIT_NESTED_REF_MSG</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Return a previously visited object. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * When reading starts from a non-zero offset, we may have to</color>
<color=#75715e>         * go back in the stream and read the referenced object.  This</color>
<color=#75715e>         * happens when reading secondary key fields.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>visitedOffset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>==</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>.</color><color=#a6e22e>PRI_KEY_VISITED_OFFSET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>priKeyEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>priKeyFormatId</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>useInput</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyEntry</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>priKeyFormatId</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>useInput</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>useInput</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Add a visted object slot that prohibits nested references to this</color>
<color=#75715e>     * object during the call to Reader.newInstance below.  The newInstance</color>
<color=#75715e>     * method is allowed to read nested fields (in which case</color>
<color=#75715e>     * Reader.readObject further below does nothing) under certain</color>
<color=#75715e>     * conditions, but under these conditions we do not support nested</color>
<color=#75715e>     * references to the parent object. [#15815]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>visited</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>visitedOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>.</color><color=#a6e22e>PROHIBIT_REF_OBJECT</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Create the object using the format indicated. */</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*expectStored*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getReader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>useInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set the newly created object in the map of visited objects.  This</color>
<color=#75715e>     * must be done before calling Reader.readObject, which allows the</color>
<color=#75715e>     * object to contain a reference to itself.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>visited</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>visitedOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>o</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Finish reading the object.  Then replace it in the visited map in</color>
<color=#75715e>     * case a converted object is returned by readObject.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Object</color> <color=#f8f8f2>o2</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>useInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#f92672>!=</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>visited</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>visitedOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>o2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>o2</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#readKeyObject */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readKeyObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Create and read the object using the given key format. */</color>
    <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getReader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Object</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawAccess</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#readStringObject */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readStringObject</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>newStringFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>readObject</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called when copying secondary keys, for an input that is positioned on the secondary key field.</color>
<color=#75715e>   * Handles references to previously occurring objects, returning a different RecordInput than this</color>
<color=#75715e>   * one if appropriate.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>KeyLocation</color> <color=#a6e22e>getKeyLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>fieldFormat</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RecordInput</color> <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_STRING</color> <color=#f92672>&&</color> <color=#f8f8f2>newStringFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * In new JE version, we do not store format ID for String data,</color>
<color=#75715e>       * So we have to read the real String data to see if the String</color>
<color=#75715e>       * data is null or not. [#19247]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getStringByteLength</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>strKey</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readString</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>skipFast</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>strKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* String key field is null. */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fieldFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672>==</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_NULL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Key field is null. */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>==</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>.</color><color=#a6e22e>PRI_KEY_VISITED_OFFSET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>priKeyEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>priKeyFormatId</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyEntry</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>priKeyFormatId</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RecordInput</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>fieldFormat</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*expectStored*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Key field is non-null. */</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>KeyLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>fieldFormat</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#registerPriKeyObject */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerPriKeyObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * PRI_KEY_VISITED_OFFSET is used as the visited offset to indicate</color>
<color=#75715e>     * that the visited object is stored in the primary key byte array.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>visited</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color><color=#f8f8f2>.</color><color=#a6e22e>PRI_KEY_VISITED_OFFSET</color><color=#f8f8f2>,</color> <color=#f8f8f2>o</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#registerPriKeyObject */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerPriStringKeyObject</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * In JE 5.0 and later, String is treated as a primitive type, so a</color>
<color=#75715e>     * String object does not need to be registered. But in earlier</color>
<color=#75715e>     * versions, Strings are treated as any other object and must be</color>
<color=#75715e>     * registered. [#19247]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>newStringFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>visited</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>RecordInput</color><color=#f8f8f2>.</color><color=#a6e22e>PRI_KEY_VISITED_OFFSET</color><color=#f8f8f2>,</color> <color=#f8f8f2>o</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Registers the top level entity before reading it, to allow nested fields to reference their</color>
<color=#75715e>   * parent entity. [#17525]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerEntity</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>initialOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>visited</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>initialOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>entity</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Registers the entity format before reading it, so that old-format String fields can be read</color>
<color=#75715e>   * properly. [#19247]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerEntityFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>newStringFormat</color> <color=#f92672>=</color> <color=#f8f8f2>entityFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getNewStringFormat</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EntityInput#skipField */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>skipField</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>declaredFormat</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>declaredFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>declaredFormat</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>declaredFormat</color><color=#f8f8f2>.</color><color=#a6e22e>skipContents</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>declaredFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f8f8f2>declaredFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_STRING</color>
        <color=#f92672>&&</color> <color=#f8f8f2>newStringFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * In the new JE version, we treat String as primitive, and will</color>
<color=#75715e>       * not store format ID for String data. [#19247]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>declaredFormat</color><color=#f8f8f2>.</color><color=#a6e22e>skipContents</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>formatId</color> <color=#f92672>=</color> <color=#f8f8f2>readPackedInt</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatId</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>catalog</color><color=#f8f8f2>.</color><color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*expectStored*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>skipContents</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readArrayLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readPackedInt</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readEnumConstant</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readPackedInt</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>