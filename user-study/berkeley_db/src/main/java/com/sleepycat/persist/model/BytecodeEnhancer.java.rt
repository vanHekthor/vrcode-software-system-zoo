<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.model</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.asm.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.math.BigDecimal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.math.BigInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.asm.Opcodes.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An ASM ClassVisitor that examines a class, throws NotPersistentException if it is not persistent,</color>
<color=#75715e> * or enhances it if it is persistent. A class is persistent if it contains the @Entity</color>
<color=#75715e> * or @Persistent annotations. A resulting enhanced class implements the</color>
<color=#75715e> * com.sleepycat.persist.impl.Enhanced interface.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>NotPersistentException is thrown to abort the transformation in order to avoid making two</color>
<color=#75715e> * passes over the class file (one to look for the annotations and another to enhance the bytecode)</color>
<color=#75715e> * or outputing a class that isn't enhanced. By aborting the transformation as soon as we detect</color>
<color=#75715e> * that the annotations are missing, we make only one partial pass for a non-persistent class.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>BytecodeEnhancer</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Thrown when we determine that a class is not persistent. */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"serial"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>NotPersistentException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** A static instance is used to avoid fillInStaceTrace overhead. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>NotPersistentException</color> <color=#f8f8f2>NOT_PERSISTENT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NotPersistentException</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>PRIMITIVE_WRAPPERS</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BOOLEAN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>CHAR</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>superclassName</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isPersistent</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAbstract</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasDefaultConstructor</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isCompositeKey</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>staticBlockMethod</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>BytecodeEnhancer</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>parentVisitor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>ASM4</color><color=#f8f8f2>,</color> <color=#f8f8f2>parentVisitor</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>secKeyFields</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nonKeyFields</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>version</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>sig</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>superName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>className</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>superclassName</color> <color=#f92672>=</color> <color=#f8f8f2>superName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENHANCED</color> <color=#f92672>=</color> <color=#e6db74>"com/sleepycat/persist/impl/Enhanced"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>containsString</color><color=#f8f8f2>(</color><color=#f8f8f2>interfaces</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENHANCED</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>abort</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>interfaces</color> <color=#f92672>=</color> <color=#f8f8f2>appendString</color><color=#f8f8f2>(</color><color=#f8f8f2>interfaces</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENHANCED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>isAbstract</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ACC_ABSTRACT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>hasPersistentSuperclass</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>superName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>superName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"java/lang/Object"</color><color=#f8f8f2>));</color>
    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>version</color><color=#f8f8f2>,</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>sig</color><color=#f8f8f2>,</color> <color=#f8f8f2>superName</color><color=#f8f8f2>,</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitSource</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>visitSource</color><color=#f8f8f2>(</color><color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>debug</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"Lcom/sleepycat/persist/model/Entity;"</color><color=#f8f8f2>)</color>
        <color=#f92672>||</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"Lcom/sleepycat/persist/model/Persistent;"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>isPersistent</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>FieldVisitor</color> <color=#a6e22e>visitField</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>sig</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isPersistent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>abort</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>FieldVisitor</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>visitField</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>sig</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ACC_STATIC</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ACC_TRANSIENT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>MethodVisitor</color> <color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>sig</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isPersistent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>abort</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"<init>"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#e6db74>"()V"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>hasDefaultConstructor</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"<clinit>"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>staticBlockMethod</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>staticBlockMethod</color> <color=#f92672>=</color> <color=#e6db74>"bdbExistingStaticBlock"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>ACC_PRIVATE</color> <color=#f92672>+</color> <color=#f8f8f2>ACC_STATIC</color><color=#f8f8f2>,</color> <color=#f8f8f2>staticBlockMethod</color><color=#f8f8f2>,</color> <color=#e6db74>"()V"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>sig</color><color=#f8f8f2>,</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isPersistent</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>hasDefaultConstructor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>abort</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Generate new code at the end of the class. */</color>
    <color=#f8f8f2>sortFields</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbNewInstance</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbNewArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbIsPriKeyFieldNullOrZero</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbWritePriKeyField</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbReadPriKeyField</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbWriteSecKeyFields</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbReadSecKeyFields</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbWriteNonKeyFields</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbReadNonKeyFields</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbWriteCompositeKeyFields</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbReadCompositeKeyFields</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbGetField</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbSetField</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genBdbSetPriField</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genStaticBlock</color><color=#f8f8f2>();</color>
    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>sortFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>    System.out.println("AllFields: " + nonKeyFields);</color>
<color=#75715e>    //*/</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>isCompositeKey</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>order</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isCompositeKey</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isCompositeKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>,</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>f1</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>f2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>f1</color><color=#f8f8f2>.</color><color=#a6e22e>order</color><color=#f8f8f2>.</color><color=#a6e22e>value</color> <color=#f92672>-</color> <color=#f8f8f2>f2</color><color=#f8f8f2>.</color><color=#a6e22e>order</color><color=#f8f8f2>.</color><color=#a6e22e>value</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>isTransient</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>isPriKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>priKeyField</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>isSecKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>cmp</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>f1</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>f2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>f1</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>f2</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>};</color>
      <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>secKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>cmp</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>cmp</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/*</color>
<color=#75715e>    System.out.println("PriKey: " + priKeyField);</color>
<color=#75715e>    System.out.println("SecKeys: " + secKeyFields);</color>
<color=#75715e>    System.out.println("NonKeys: " + nonKeyFields);</color>
<color=#75715e>    //*/</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Outputs code in a static block to register the prototype instance:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>static { EnhancedAccessor.registerClass(TheClassName, new TheClass()); // or for an abstract</color>
<color=#75715e>   * class: EnhancedAccessor.registerClass(TheClassName, null); }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genStaticBlock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color> <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>ACC_STATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"<clinit>"</color><color=#f8f8f2>,</color> <color=#e6db74>"()V"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>staticBlockMethod</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>staticBlockMethod</color><color=#f8f8f2>,</color> <color=#e6db74>"()V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>.</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'/'</color><color=#f8f8f2>,</color> <color=#e6db74>'.'</color><color=#f8f8f2>));</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isAbstract</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ACONST_NULL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>NEW</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DUP</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#e6db74>"<init>"</color><color=#f8f8f2>,</color> <color=#e6db74>"()V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color>
        <color=#e6db74>"com/sleepycat/persist/impl/EnhancedAccessor"</color><color=#f8f8f2>,</color>
        <color=#e6db74>"registerClass"</color><color=#f8f8f2>,</color>
        <color=#e6db74>"(Ljava/lang/String;Lcom/sleepycat/persist/impl/Enhanced;)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** public Object bdbNewInstance() { return new TheClass(); // or if abstract: return null; } */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbNewInstance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbNewInstance"</color><color=#f8f8f2>,</color> <color=#e6db74>"()Ljava/lang/Object;"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isAbstract</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ACONST_NULL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ARETURN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>NEW</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DUP</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#e6db74>"<init>"</color><color=#f8f8f2>,</color> <color=#e6db74>"()V"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ARETURN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public Object bdbNewArray(int len) { return new TheClass[len]; // or if abstract: return null;</color>
<color=#75715e>   * }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbNewArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbNewArray"</color><color=#f8f8f2>,</color> <color=#e6db74>"(I)Ljava/lang/Object;"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isAbstract</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ACONST_NULL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ARETURN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ANEWARRAY</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ARETURN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public boolean bdbIsPriKeyFieldNullOrZero() { return theField == null; // or zero or false, as</color>
<color=#75715e>   * appropriate // or if no primary key but has superclass: return</color>
<color=#75715e>   * super.bdbIsPriKeyFieldNullOrZero(); }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbIsPriKeyFieldNullOrZero</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color> <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbIsPriKeyFieldNullOrZero"</color><color=#f8f8f2>,</color> <color=#e6db74>"()Z"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>l0</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFNONNULL</color><color=#f8f8f2>,</color> <color=#f8f8f2>l0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>genBeforeCompareToZero</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFNE</color><color=#f8f8f2>,</color> <color=#f8f8f2>l0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>l1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GOTO</color><color=#f8f8f2>,</color> <color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>superclassName</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbIsPriKeyFieldNullOrZero"</color><color=#f8f8f2>,</color> <color=#e6db74>"()Z"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IRETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbWritePriKeyField(EntityOutput output, Format format) {</color>
<color=#75715e>   * output.writeKeyObject(theField, format); // or output.writeInt(theField); // and other simple</color>
<color=#75715e>   * types // or if no primary key but has superclass: return super.bdbWritePriKeyField(output,</color>
<color=#75715e>   * format); }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbWritePriKeyField</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbWritePriKeyField"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityOutput;"</color> <color=#f92672>+</color> <color=#e6db74>"Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>genWriteSimpleKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* For a non-simple type, call EntityOutput.writeKeyObject. */</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeKeyObject"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Ljava/lang/Object;"</color> <color=#f92672>+</color> <color=#e6db74>"Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>superclassName</color><color=#f8f8f2>,</color>
          <color=#e6db74>"bdbWritePriKeyField"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityOutput;"</color> <color=#f92672>+</color> <color=#e6db74>"Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbReadPriKeyField(EntityInput input, Format format) { theField = (TheFieldClass)</color>
<color=#75715e>   * input.readKeyObject(format); // or theField = input.readInt(); // and other simple types // or</color>
<color=#75715e>   * if no primary key but has superclass: super.bdbReadPriKeyField(input, format); }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbReadPriKeyField</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbReadPriKeyField"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityInput;"</color> <color=#f92672>+</color> <color=#e6db74>"Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>genReadSimpleKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* For a non-simple type, call EntityInput.readKeyObject. */</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"readKeyObject"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/Format;)"</color> <color=#f92672>+</color> <color=#e6db74>"Ljava/lang/Object;"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTypeInstName</color><color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>PUTFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>superclassName</color><color=#f8f8f2>,</color>
          <color=#e6db74>"bdbReadPriKeyField"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityInput;"</color> <color=#f92672>+</color> <color=#e6db74>"Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbWriteSecKeyFields(EntityOutput output) {</color>
<color=#75715e>   * output.registerPriKeyObject(priKeyField); // if an object</color>
<color=#75715e>   * super.bdbWriteSecKeyFields(EntityOutput output); // if has super output.writeInt(secKeyField1);</color>
<color=#75715e>   * output.writeObject(secKeyField2, null); // etc }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbWriteSecKeyFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbWriteSecKeyFields"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityOutput;)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * In JE 5.0, String is treated as primitive type, so String does</color>
<color=#75715e>     * not need to be registered. [#19247]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>isString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genRegisterPrimaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>superclassName</color><color=#f8f8f2>,</color>
          <color=#e6db74>"bdbWriteSecKeyFields"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityOutput;)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genWriteField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbReadSecKeyFields(EntityInput input, int startField, int endField, int</color>
<color=#75715e>   * superLevel) { input.registerPriKeyObject(priKeyField); // if an object // if has super: if</color>
<color=#75715e>   * (superLevel != 0) { super.bdbReadSecKeyFields(..., superLevel - 1); } if (superLevel <= 0) {</color>
<color=#75715e>   * switch (startField) { case 0: secKeyField1 = input.readInt(); if (endField == 0) break; case 1:</color>
<color=#75715e>   * secKeyField2 = (String) input.readObject(); if (endField == 1) break; case 2: secKeyField3 =</color>
<color=#75715e>   * input.readInt(); } } }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbReadSecKeyFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbReadSecKeyFields"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityInput;III)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>isString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genRegisterPrimaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>isString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genRegisterPrimaryStringKey</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>genReadSuperKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>genReadFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** output.registerPriKeyObject(priKeyField); // or input.registerPriKeyObject(priKeyField); */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genRegisterPrimaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>entityInputOrOutputClass</color> <color=#f92672>=</color>
        <color=#f8f8f2>input</color>
            <color=#f92672>?</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color>
            <color=#f8f8f2>:</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityInputOrOutputClass</color><color=#f8f8f2>,</color> <color=#e6db74>"registerPriKeyObject"</color><color=#f8f8f2>,</color> <color=#e6db74>"(Ljava/lang/Object;)V"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** input.registerPriStringKeyObject(priKeyField); */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genRegisterPrimaryStringKey</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>entityInputOrOutputClass</color> <color=#f92672>=</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>entityInputOrOutputClass</color><color=#f8f8f2>,</color>
        <color=#e6db74>"registerPriStringKeyObject"</color><color=#f8f8f2>,</color>
        <color=#e6db74>"(Ljava/lang/Object;)V"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbWriteNonKeyFields(EntityOutput output) { // like bdbWriteSecKeyFields but does</color>
<color=#75715e>   * not call registerPriKeyObject }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbWriteNonKeyFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbWriteNonKeyFields"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityOutput;)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isCompositeKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>superclassName</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbWriteNonKeyFields"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityOutput;)V"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f8f8f2>:</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>genWriteField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbReadNonKeyFields(EntityInput input, int startField, int endField, int</color>
<color=#75715e>   * superLevel) { // like bdbReadSecKeyFields but does not call registerPriKeyObject }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbReadNonKeyFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbReadNonKeyFields"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityInput;III)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isCompositeKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genReadSuperKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>genReadFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbWriteCompositeKeyFields(EntityOutput output, Format[] formats) {</color>
<color=#75715e>   * output.writeInt(compositeKeyField1); output.writeKeyObject(compositeKeyField2, formats[1]); //</color>
<color=#75715e>   * etc }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbWriteCompositeKeyFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbWriteCompositeKeyFields"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityOutput;"</color> <color=#f92672>+</color> <color=#e6db74>"[Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isCompositeKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>genWriteSimpleKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* For a non-simple type, call writeKeyObject. */</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>BIPUSH</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>AALOAD</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
              <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
              <color=#e6db74>"writeKeyObject"</color><color=#f8f8f2>,</color>
              <color=#e6db74>"(Ljava/lang/Object;"</color> <color=#f92672>+</color> <color=#e6db74>"Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbReadCompositeKeyFields(EntityInput input, Format[] formats) { compositeKeyField1</color>
<color=#75715e>   * = input.readInt(); compositeKeyField2 = input.readKeyObject(formats[1]); }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbReadCompositeKeyFields</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color>
            <color=#e6db74>"bdbReadCompositeKeyFields"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityInput;"</color> <color=#f92672>+</color> <color=#e6db74>"[Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isCompositeKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#75715e>/* Ignore non-simple (illegal) types for composite key. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>genReadSimpleKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* For a non-simple type, call readKeyObject. */</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>BIPUSH</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>AALOAD</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
              <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color>
              <color=#e6db74>"readKeyObject"</color><color=#f8f8f2>,</color>
              <color=#e6db74>"(Lcom/sleepycat/persist/impl/Format;)"</color> <color=#f92672>+</color> <color=#e6db74>"Ljava/lang/Object;"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTypeInstName</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>PUTFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** output.writeInt(field); // and other primitives // or output.writeObject(field, null); */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genWriteField</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>isString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * In JE 5.0, we treat String as primitive, and will not store</color>
<color=#75715e>       * format ID for String data. [#19247]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"writeString"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Ljava/lang/String;)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>POP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>||</color> <color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ACONST_NULL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"writeObject"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Ljava/lang/Object;Lcom/sleepycat/persist/impl/Format;)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genWritePrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Generates writing of a simple type key field, or returns false if the key field is not a simple</color>
<color=#75715e>   * type (i.e., it is a composite key type).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>output.writeInt(theField); // and other primitives // or</color>
<color=#75715e>   * output.writeInt(theField.intValue()); // and other simple types // or returns false</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>genWriteSimpleKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>genWritePrimitiveField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>fieldClassName</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSimpleRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>Integer</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genUnwrapPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>genWritePrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Date</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/util/Date"</color><color=#f8f8f2>,</color> <color=#e6db74>"getTime"</color><color=#f8f8f2>,</color> <color=#e6db74>"()J"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>genWritePrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"writeString"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Ljava/lang/String;)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>POP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"writeBigInteger"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Ljava/math/BigInteger;)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>POP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"writeSortedBigDecimal"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Ljava/math/BigDecimal;)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>POP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>genWritePrimitiveField</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>||</color> <color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>genWritePrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** // if has super: if (superLevel != 0) { super.bdbReadXxxKeyFields(..., superLevel - 1); } */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genReadSuperKeyFields</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>areSecKeyFields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFEQ</color><color=#f8f8f2>,</color> <color=#f8f8f2>next</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ISUB</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>areSecKeyFields</color> <color=#f92672>?</color> <color=#e6db74>"bdbReadSecKeyFields"</color> <color=#f8f8f2>:</color> <color=#e6db74>"bdbReadNonKeyFields"</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>superclassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#e6db74>"(Lcom/sleepycat/persist/impl/EntityInput;III)V"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>next</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbReadXxxKeyFields(EntityInput input, int startField, int endField, int</color>
<color=#75715e>   * superLevel) { // ... if (superLevel <= 0) { switch (startField) { case 0: keyField1 =</color>
<color=#75715e>   * input.readInt(); if (endField == 0) break; case 1: keyField2 = (String) input.readObject(); if</color>
<color=#75715e>   * (endField == 1) break; case 2: keyField3 = input.readInt(); } }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genReadFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>fields</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nFields</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nFields</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>pastSwitch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFGT</color><color=#f8f8f2>,</color> <color=#f8f8f2>pastSwitch</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>nFields</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTableSwitchInsn</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nFields</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pastSwitch</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>genReadField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Label</color> <color=#f8f8f2>nextCase</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFNE</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextCase</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_1</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
              <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_2</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
              <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_3</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
              <color=#66d9ef>case</color> <color=#ae81ff>4</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_4</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
              <color=#66d9ef>case</color> <color=#ae81ff>5</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_5</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
              <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>BIPUSH</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IF_ICMPNE</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextCase</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GOTO</color><color=#f8f8f2>,</color> <color=#f8f8f2>pastSwitch</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>pastSwitch</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * field = input.readInt(); // and other primitives // or field = (FieldClass) input.readObject();</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genReadField</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>isString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * In JE 5.0, we treat String as primitive, and will not store</color>
<color=#75715e>       * format ID for String data. [#19247]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"readStringObject"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"()Ljava/lang/Object;"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTypeInstName</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"readObject"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"()Ljava/lang/Object;"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTypeInstName</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>genReadPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>PUTFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Generates reading of a simple type key field, or returns false if the key field is not a simple</color>
<color=#75715e>   * type (i.e., it is a composite key type).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>field = input.readInt(); // and other primitives // or field =</color>
<color=#75715e>   * Integer.valueOf(input.readInt()); // and other simple types // or returns false</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>genReadSimpleKeyField</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>genReadPrimitiveField</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>fieldClassName</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSimpleRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Integer</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>genReadPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>genWrapPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Date</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Date is a special case because we use NEW instead of valueOf. */</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>NEW</color><color=#f8f8f2>,</color> <color=#e6db74>"java/util/Date"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DUP</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>genReadPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/util/Date"</color><color=#f8f8f2>,</color> <color=#e6db74>"<init>"</color><color=#f8f8f2>,</color> <color=#e6db74>"(J)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"readString"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"()Ljava/lang/String;"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"readBigInteger"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"()Ljava/math/BigInteger;"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"readSortedBigDecimal"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"()Ljava/math/BigDecimal;"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldClassName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>PUTFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>genReadPrimitiveField</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>||</color> <color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>genReadPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>PUTFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public Object bdbGetField(Object o, int field, int superLevel, boolean isSecField) { if</color>
<color=#75715e>   * (superLevel > 0) { // if has superclass: return super.bdbGetField (o, field, superLevel - 1,</color>
<color=#75715e>   * isSecField); } else if (isSecField) { switch (field) { case 0: return Integer.valueOf(f2); case</color>
<color=#75715e>   * 1: return f3; case 2: return f4; } } else { switch (field) { case 0: return</color>
<color=#75715e>   * Integer.valueOf(f5); case 1: return f6; case 2: return f7; } } return null; }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbGetField</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbGetField"</color><color=#f8f8f2>,</color> <color=#e6db74>"(Ljava/lang/Object;IIZ)Ljava/lang/Object;"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Label</color> <color=#f8f8f2>l0</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFLE</color><color=#f8f8f2>,</color> <color=#f8f8f2>l0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Label</color> <color=#f8f8f2>l1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ISUB</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbGetField"</color><color=#f8f8f2>,</color> <color=#e6db74>"(Ljava/lang/Object;IIZ)Ljava/lang/Object;"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ARETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GOTO</color><color=#f8f8f2>,</color> <color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Label</color> <color=#f8f8f2>l2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFEQ</color><color=#f8f8f2>,</color> <color=#f8f8f2>l2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>genGetFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>genGetFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ACONST_NULL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ARETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * mv.visitVarInsn(ILOAD, 2); Label l0 = new Label(); Label l1 = new Label(); Label l2 = new</color>
<color=#75715e>   * Label(); mv.visitTableSwitchInsn(0, 2, TheDefLabel, new Label[] { l0, l1, l2 });</color>
<color=#75715e>   * mv.visitLabel(l0); mv.visitVarInsn(ALOAD, 0); mv.visitFieldInsn(GETFIELD, TheClassName, "f2",</color>
<color=#75715e>   * "I"); mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf",</color>
<color=#75715e>   * "(I)Ljava/lang/Integer;"); mv.visitInsn(ARETURN); mv.visitLabel(l1); mv.visitVarInsn(ALOAD, 0);</color>
<color=#75715e>   * mv.visitFieldInsn(GETFIELD, TheClassName, "f3", "Ljava/lang/String;"); mv.visitInsn(ARETURN);</color>
<color=#75715e>   * mv.visitLabel(l2); mv.visitVarInsn(ALOAD, 0); mv.visitFieldInsn(GETFIELD, TheClassName, "f4",</color>
<color=#75715e>   * "Ljava/lang/String;"); mv.visitInsn(ARETURN);</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genGetFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>fields</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>defaultLabel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nFields</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nFields</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GOTO</color><color=#f8f8f2>,</color> <color=#f8f8f2>defaultLabel</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>nFields</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTableSwitchInsn</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nFields</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>defaultLabel</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GETFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>genWrapPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ARETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbSetField(Object o, int field, int superLevel, boolean isSecField, Object value)</color>
<color=#75715e>   * { if (superLevel > 0) { // if has superclass: super.bdbSetField (o, field, superLevel - 1,</color>
<color=#75715e>   * isSecField, value); } else if (isSecField) { switch (field) { case 0: f2 = ((Integer)</color>
<color=#75715e>   * value).intValue(); case 1: f3 = (String) value; case 2: f4 = (String) value; } } else { switch</color>
<color=#75715e>   * (field) { case 0: f5 = ((Integer) value).intValue(); case 1: f6 = (String) value; case 2: f7 =</color>
<color=#75715e>   * (String) value; } } }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbSetField</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbSetField"</color><color=#f8f8f2>,</color> <color=#e6db74>"(Ljava/lang/Object;IIZLjava/lang/Object;)V"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Label</color> <color=#f8f8f2>l0</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFLE</color><color=#f8f8f2>,</color> <color=#f8f8f2>l0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ICONST_1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ISUB</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbSetField"</color><color=#f8f8f2>,</color> <color=#e6db74>"(Ljava/lang/Object;IIZLjava/lang/Object;)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Label</color> <color=#f8f8f2>l2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>IFEQ</color><color=#f8f8f2>,</color> <color=#f8f8f2>l2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Label</color> <color=#f8f8f2>l1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>genSetFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>genSetFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonKeyFields</color><color=#f8f8f2>,</color> <color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>6</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public void bdbSetPriField(Object o, Object value) { if (priKeyField != null) { thisField =</color>
<color=#75715e>   * (TheFieldClass) value; } else if (super != null) { // if has superclass:</color>
<color=#75715e>   * super.bdbSetPriField(o, value) } }</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genBdbSetPriField</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ACC_PUBLIC</color><color=#f8f8f2>,</color> <color=#e6db74>"bdbSetPriField"</color><color=#f8f8f2>,</color> <color=#e6db74>"(Ljava/lang/Object;Ljava/lang/Object;)V"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTypeInstName</color><color=#f8f8f2>(</color><color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getPrimitiveWrapperClass</color><color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>).</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>,</color> <color=#e6db74>'/'</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>genUnwrapPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>PUTFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKeyField</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPersistentSuperclass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>INVOKESPECIAL</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>superclassName</color><color=#f8f8f2>,</color>
          <color=#e6db74>"bdbSetPriField"</color><color=#f8f8f2>,</color>
          <color=#e6db74>"(Ljava/lang/Object;Ljava/lang/Object;)V"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * mv.visitVarInsn(ILOAD, 2); Label l0 = new Label(); Label l1 = new Label(); Label l2 = new</color>
<color=#75715e>   * Label(); mv.visitTableSwitchInsn(0, 2, TheDefLabel, new Label[] { l0, l1, l2 });</color>
<color=#75715e>   * mv.visitLabel(l0); mv.visitVarInsn(ALOAD, 0); mv.visitVarInsn(ALOAD, 5);</color>
<color=#75715e>   * mv.visitTypeInsn(CHECKCAST, "java/lang/Integer"); mv.visitMethodInsn(INVOKEVIRTUAL,</color>
<color=#75715e>   * "java/lang/Integer", "intValue", "()I"); mv.visitFieldInsn(PUTFIELD, TheClassName, "f2", "I");</color>
<color=#75715e>   * mv.visitLabel(l1); mv.visitVarInsn(ALOAD, 0); mv.visitVarInsn(ALOAD, 5);</color>
<color=#75715e>   * mv.visitTypeInsn(CHECKCAST, "java/lang/String"); mv.visitFieldInsn(PUTFIELD, TheClassName,</color>
<color=#75715e>   * "f3", "Ljava/lang/String;"); mv.visitLabel(l2); mv.visitVarInsn(ALOAD, 0);</color>
<color=#75715e>   * mv.visitVarInsn(ALOAD, 5); mv.visitTypeInsn(CHECKCAST, "java/lang/String");</color>
<color=#75715e>   * mv.visitFieldInsn(PUTFIELD, TheClassName, "f4", "Ljava/lang/String;");</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genSetFieldSwitch</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>FieldInfo</color><color=#f92672>></color> <color=#f8f8f2>fields</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>defaultLabel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nFields</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nFields</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>GOTO</color><color=#f8f8f2>,</color> <color=#f8f8f2>defaultLabel</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>nFields</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ILOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTableSwitchInsn</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nFields</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>defaultLabel</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FieldInfo</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>fields</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ALOAD</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTypeInstName</color><color=#f8f8f2>(</color><color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>CHECKCAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getPrimitiveWrapperClass</color><color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>).</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>,</color> <color=#e6db74>'/'</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>genUnwrapPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>sort</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>PUTFIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>RETURN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genWritePrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BOOLEAN</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeBoolean"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(Z)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>CHAR</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeChar"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(I)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeByte"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(I)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeShort"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(I)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeInt"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(I)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeLong"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(J)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeSortedFloat"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(F)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"com/sleepycat/persist/impl/EntityOutput"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"writeSortedDouble"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"(D)Lcom/sleepycat/bind/tuple/TupleOutput;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* The write methods always return 'this' and we always discard it. */</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>POP</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genReadPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BOOLEAN</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readBoolean"</color><color=#f8f8f2>,</color> <color=#e6db74>"()Z"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>CHAR</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readChar"</color><color=#f8f8f2>,</color> <color=#e6db74>"()C"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readByte"</color><color=#f8f8f2>,</color> <color=#e6db74>"()B"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readShort"</color><color=#f8f8f2>,</color> <color=#e6db74>"()S"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readInt"</color><color=#f8f8f2>,</color> <color=#e6db74>"()I"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readLong"</color><color=#f8f8f2>,</color> <color=#e6db74>"()J"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readSortedFloat"</color><color=#f8f8f2>,</color> <color=#e6db74>"()F"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#e6db74>"com/sleepycat/persist/impl/EntityInput"</color><color=#f8f8f2>,</color> <color=#e6db74>"readSortedDouble"</color><color=#f8f8f2>,</color> <color=#e6db74>"()D"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genWrapPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BOOLEAN</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Boolean"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(Z)Ljava/lang/Boolean;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>CHAR</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Character"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(C)Ljava/lang/Character;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Byte"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(B)Ljava/lang/Byte;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Short"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(S)Ljava/lang/Short;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Integer"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(I)Ljava/lang/Integer;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Long"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(J)Ljava/lang/Long;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Float"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(F)Ljava/lang/Float;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKESTATIC</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Double"</color><color=#f8f8f2>,</color> <color=#e6db74>"valueOf"</color><color=#f8f8f2>,</color> <color=#e6db74>"(D)Ljava/lang/Double;"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>genUnwrapPrimitive</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BOOLEAN</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Boolean"</color><color=#f8f8f2>,</color> <color=#e6db74>"booleanValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()Z"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>CHAR</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Character"</color><color=#f8f8f2>,</color> <color=#e6db74>"charValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()C"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Byte"</color><color=#f8f8f2>,</color> <color=#e6db74>"byteValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()B"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Short"</color><color=#f8f8f2>,</color> <color=#e6db74>"shortValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()S"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Integer"</color><color=#f8f8f2>,</color> <color=#e6db74>"intValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()I"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Long"</color><color=#f8f8f2>,</color> <color=#e6db74>"longValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()J"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Float"</color><color=#f8f8f2>,</color> <color=#e6db74>"floatValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()F"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>INVOKEVIRTUAL</color><color=#f8f8f2>,</color> <color=#e6db74>"java/lang/Double"</color><color=#f8f8f2>,</color> <color=#e6db74>"doubleValue"</color><color=#f8f8f2>,</color> <color=#e6db74>"()D"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the type name for a visitTypeInsn operand, which is the internal name for an object</color>
<color=#75715e>   * type and the descriptor for an array type. Must not be called for a non-reference type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getTypeInstName</color><color=#f8f8f2>(</color><color=#f8f8f2>Type</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Call this method before comparing a non-reference operand to zero as an int, for example, with</color>
<color=#75715e>   * IFNE, IFEQ, IFLT, etc. If the operand is a long, float or double, this method will compare it</color>
<color=#75715e>   * to zero and leave the result as an int operand.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>genBeforeCompareToZero</color><color=#f8f8f2>(</color><color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>LCONST_0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>LCMP</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>FCONST_0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>FCMPL</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DCONST_0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DCMPL</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the given class is a primitive wrapper, Date or String. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSimpleRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>)</color>
        <color=#f92672>||</color> <color=#f8f8f2>className</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>())</color>
        <color=#f92672>||</color> <color=#f8f8f2>className</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>())</color>
        <color=#f92672>||</color> <color=#f8f8f2>className</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Date</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>())</color>
        <color=#f92672>||</color> <color=#f8f8f2>className</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the wrapper class for a primitive. */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getPrimitiveWrapperClass</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>primitiveSort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>PRIMITIVE_WRAPPERS</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>primitiveSort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>primitiveSort</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the given type is an object or array. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRefType</color><color=#f8f8f2>(</color><color=#f8f8f2>Type</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sort</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>||</color> <color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether a string array contains a given string. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>containsString</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>s</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>t</color> <color=#f8f8f2>:</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Appends a string to a string array. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>appendString</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>s</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>a2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>len</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a2</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>a2</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>s</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>a2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>s</color><color=#f8f8f2>};</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Aborts the enhancement process when we determine that enhancement is unnecessary or not</color>
<color=#75715e>   * possible.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>NotPersistentException</color> <color=#a6e22e>abort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>NOT_PERSISTENT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FieldInfo</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FieldVisitor</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>FieldVisitor</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Type</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>OrderInfo</color> <color=#f8f8f2>order</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>isPriKey</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecKey</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>isTransient</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>isString</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>FieldInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>FieldVisitor</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isTransient</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>ASM4</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>isTransient</color> <color=#f92672>=</color> <color=#f8f8f2>isTransient</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isString</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"Lcom/sleepycat/persist/model/KeyField;"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>order</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OrderInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>order</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"Lcom/sleepycat/persist/model/PrimaryKey;"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isPriKey</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"Lcom/sleepycat/persist/model/SecondaryKey;"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isSecKey</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"Lcom/sleepycat/persist/model/NotPersistent;"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isTransient</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"Lcom/sleepycat/persist/model/NotTransient;"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isTransient</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attr</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isPriKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#e6db74>"PrimaryKey"</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isSecKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#e6db74>"SecondaryKey"</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>order</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#e6db74>"CompositeKeyField "</color> <color=#f92672>+</color> <color=#f8f8f2>order</color><color=#f8f8f2>.</color><color=#a6e22e>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#e6db74>"NonKeyField"</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#e6db74>"["</color> <color=#f92672>+</color> <color=#f8f8f2>label</color> <color=#f92672>+</color> <color=#e6db74>' '</color> <color=#f92672>+</color> <color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>' '</color> <color=#f92672>+</color> <color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#e6db74>']'</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>OrderInfo</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AnnotationInfo</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>OrderInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"value"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>AnnotationInfo</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>AnnotationInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>ASM4</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visitArray</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnum</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnum</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>