<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawObject</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.IdentityHashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Catalog operation interface used by format classes.</color>
<color=#75715e> *</color>
<color=#75715e> * @see PersistCatalog</color>
<color=#75715e> * @see SimpleCatalog</color>
<color=#75715e> * @see ReadOnlyCatalog</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>interface</color> <color=#a6e22e>Catalog</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The catalog version is returned by getInitVersion and is the version of</color>
<color=#75715e>   * the serialized format classes loaded from the stored catalog.  When a</color>
<color=#75715e>   * field is added, for example, the version can be checked to determine how</color>
<color=#75715e>   * to initialize the field in Format.initialize.</color>
<color=#75715e>   *</color>
<color=#75715e>   * -1: The version is considered to be -1 when reading the beta version of</color>
<color=#75715e>   * the catalog data.  At this point no version field was stored, but we can</color>
<color=#75715e>   * distinguish the beta stored format.  See PersistCatalog.</color>
<color=#75715e>   *</color>
<color=#75715e>   * 0: The first released version of the catalog data, after beta.  At this</color>
<color=#75715e>   * point no version field was stored, but it is initialized to zero when</color>
<color=#75715e>   * the PersistCatalog.Data object is de-serialized.</color>
<color=#75715e>   *</color>
<color=#75715e>   * 1: Add the ComplexFormat.ConvertFieldReader.oldFieldNum field. [#15797]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>BETA_VERSION</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>CURRENT_VERSION</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** See above. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getInitVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReader</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a format for a given ID, or throws an exception. This method is used when reading an</color>
<color=#75715e>   * object from the byte array format.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param expectStored is true if reading a record from a database, and therefore the format ID is</color>
<color=#75715e>   *     expected to be stored also. If the format ID is not stored, a RefreshException is thrown.</color>
<color=#75715e>   * @throws IllegalStateException if the formatId does not correspond to a persistent class. This</color>
<color=#75715e>   *     is an internal consistency error.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expectStored</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a format for a given class, or throws an exception. This method is used when writing an</color>
<color=#75715e>   * object that was passed in by the user.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param checkEntitySubclassIndexes is true if we're expecting this format to be an entity</color>
<color=#75715e>   *     subclass and therefore subclass secondary indexes should be opened.</color>
<color=#75715e>   * @throws IllegalArgumentException if the class is not persistent. This is a user error.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkEntitySubclassIndexes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a format by class name. Unlike {@link #getFormat(Class,boolean)}, the format will not</color>
<color=#75715e>   * be created if it is not already known.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>);</color>

  <color=#75715e>/** @see PersistCatalog#createFormat */</color>
  <color=#f8f8f2>Format</color> <color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>

  <color=#75715e>/** @see PersistCatalog#createFormat */</color>
  <color=#f8f8f2>Format</color> <color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>);</color>

  <color=#75715e>/** @see PersistCatalog#isRawAccess */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isRawAccess</color><color=#f8f8f2>();</color>

  <color=#75715e>/** @see PersistCatalog#convertRawObject */</color>
  <color=#f8f8f2>Object</color> <color=#a6e22e>convertRawObject</color><color=#f8f8f2>(</color><color=#f8f8f2>RawObject</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>IdentityHashMap</color> <color=#f8f8f2>converted</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>RefreshException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see PersistCatalog#resolveClass */</color>
  <color=#f8f8f2>Class</color> <color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ClassNotFoundException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @see PersistCatalog#resolveKeyClass */</color>
  <color=#f8f8f2>Class</color> <color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>