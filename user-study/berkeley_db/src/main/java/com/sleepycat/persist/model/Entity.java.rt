<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.model</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.EntityStore</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.PrimaryIndex</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.SecondaryIndex</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.IncompatibleClassException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Mutations</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Documented</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Retention</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.annotation.Target</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.ElementType.TYPE</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>java.lang.annotation.RetentionPolicy.RUNTIME</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Indicates a persistent entity class. For each entity class, a {@link PrimaryIndex} can be used to</color>
<color=#75715e> * store and access instances of that class. Optionally, one or more {@link SecondaryIndex} objects</color>
<color=#75715e> * may be used to access entity instances by secondary key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><strong>Entity Subclasses and Superclasses</strong></color>
<color=#75715e> *</color>
<color=#75715e> * <p>An entity class may have any number of subclasses and superclasses; however, none of these may</color>
<color=#75715e> * themselves be entity classes (annotated with {@code Entity}).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Entity superclasses (which must be annotated with {@code Persistent}, not {@code Entity}) are</color>
<color=#75715e> * used to share common definitions among entity classes. Fields in an entity superclass may be</color>
<color=#75715e> * defined as primary or secondary keys. For example, the following {@code BaseClass} defines the</color>
<color=#75715e> * primary key for any number of entity classes, using a single sequence to assign primary key</color>
<color=#75715e> * values that will be unique across all entity classes that use it. The entity class {@code Pet}</color>
<color=#75715e> * extends the base class, implicitly defining a primary index</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class BaseClass {</color>
<color=#75715e> *      {@literal @PrimaryKey(sequence="ID")}</color>
<color=#75715e> *      long id;</color>
<color=#75715e> *  }</color>
<color=#75715e> *</color>
<color=#75715e> *  {@literal @Entity}</color>
<color=#75715e> *  class Pet extends BaseClass {</color>
<color=#75715e> *      {@literal @SecondaryKey(relate=ONE_TO_ONE)}</color>
<color=#75715e> *      String name;</color>
<color=#75715e> *      float height;</color>
<color=#75715e> *      float weight;</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Entity subclasses (which must be annotated with {@code Persistent}, not {@code Entity}) are</color>
<color=#75715e> * used to provide polymorphism within a single {@code PrimaryIndex}. Instances of the entity class</color>
<color=#75715e> * and its subclasses are stored in the same {@code PrimaryIndex}. For example, the entity class</color>
<color=#75715e> * {@code Pet} defines a primary index that will contain instances of it and its subclasses,</color>
<color=#75715e> * including {@code Cat} which is defined below.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Fields in an entity subclass may be defined as secondary keys, and such secondary keys can</color>
<color=#75715e> * only be used to query instances of the subclass. For example, although the primary key ({@code</color>
<color=#75715e> * id}) and secondary key ({@code name}) can be used to retrieve any {@code Pet} instance, the</color>
<color=#75715e> * entity subclass {@code Cat} defines a secondary key ({@code finickyness}) that only applies to</color>
<color=#75715e> * {@code Cat} instances. Querying by this key will never retrieve a {@code Dog} instance, if such a</color>
<color=#75715e> * subclass existed, because a {@code Dog} instance will never contain a {@code finickyness} key.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class Cat extends Pet {</color>
<color=#75715e> *      {@literal @SecondaryKey(relate=MANY_TO_ONE)}</color>
<color=#75715e> *      int finickyness;</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>WARNING:</em> Entity subclasses that define secondary keys must be registered prior to</color>
<color=#75715e> * storing an instance of the class. This can be done in two ways:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>The {@link EntityModel#registerClass registerClass} method may be called to register the</color>
<color=#75715e> *       subclass before opening the entity store.</color>
<color=#75715e> *   <li>The {@link EntityStore#getSubclassIndex getSubclassIndex} method may be called to</color>
<color=#75715e> *       implicitly register the subclass after opening the entity store.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p><strong>Persistent Fields and Types</strong></color>
<color=#75715e> *</color>
<color=#75715e> * <p>All non-transient instance fields of an entity class, as well as its superclasses and</color>
<color=#75715e> * subclasses, are persistent. {@code static} and {@code transient} fields are not persistent. The</color>
<color=#75715e> * persistent fields of a class may be {@code private}, package-private (default access), {@code</color>
<color=#75715e> * protected} or {@code public}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>It is worthwhile to note the reasons that object persistence is defined in terms of fields</color>
<color=#75715e> * rather than properties (getters and setters). This allows business methods (getters and setters)</color>
<color=#75715e> * to be defined independently of the persistent state of an object; for example, a setter method</color>
<color=#75715e> * may perform validation that could not be performed if it were called during object</color>
<color=#75715e> * deserialization. Similarly, this allows public methods to evolve somewhat independently of the</color>
<color=#75715e> * (typically non-public) persistent fields.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><a name="simpleTypes"><strong>Simple Types</strong></a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Persistent types are divided into simple types, enum types, complex types, and array types.</color>
<color=#75715e> * Simple types and enum types are single valued, while array types may contain multiple elements</color>
<color=#75715e> * and complex types may contain one or more named fields.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Simple types include:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Java primitive types: {@code boolean, char, byte, short, int, long, float, double}</color>
<color=#75715e> *   <li>The wrapper classes for Java primitive types</color>
<color=#75715e> *   <li>{@link java.math.BigDecimal}</color>
<color=#75715e> *   <li>{@link java.math.BigInteger}</color>
<color=#75715e> *   <li>{@link String}</color>
<color=#75715e> *   <li>{@link java.util.Date}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When null values are required (for optional key fields, for example), primitive wrapper</color>
<color=#75715e> * classes must be used instead of primitive types.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Simple types, enum types and array types do not require annotations to make them persistent.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><a name="proxyTypes"><strong>Complex and Proxy Types</strong></a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Complex persistent classes must be annotated with {@link Entity} or {@link Persistent}, or</color>
<color=#75715e> * must be proxied by a persistent proxy class (described below). This includes entity classes,</color>
<color=#75715e> * subclasses and superclasses, and all other complex classes referenced via fields of these</color>
<color=#75715e> * classes.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>All complex persistent classes must have a default constructor. The default constructor may be</color>
<color=#75715e> * {@code private}, package-private (default access), {@code protected}, or {@code public}. Other</color>
<color=#75715e> * constructors are allowed but are not used by the persistence mechanism.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>It is sometimes desirable to store instances of a type that is externally defined and cannot</color>
<color=#75715e> * be annotated or does not have a default constructor; for example, a class defined in the Java</color>
<color=#75715e> * standard libraries or a 3rd party library. In this case, a {@link PersistentProxy} class may be</color>
<color=#75715e> * used to represent the stored values for the externally defined type. The proxy class itself must</color>
<color=#75715e> * be annotated with {@link Persistent} like other persistent classes, and the {@link</color>
<color=#75715e> * Persistent#proxyFor} property must be specified.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For convenience, built-in proxy classes are included for several common classes (listed below)</color>
<color=#75715e> * in the Java library. If you wish, you may define your own {@link PersistentProxy} to override</color>
<color=#75715e> * these built-in proxies.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link java.util.HashSet}</color>
<color=#75715e> *   <li>{@link java.util.TreeSet}</color>
<color=#75715e> *   <li>{@link java.util.HashMap}</color>
<color=#75715e> *   <li>{@link java.util.TreeMap}</color>
<color=#75715e> *   <li>{@link java.util.ArrayList}</color>
<color=#75715e> *   <li>{@link java.util.LinkedList}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Complex persistent types should in general be application-defined classes. This gives the</color>
<color=#75715e> * application control over the persistent state and its evolution over time.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><strong>Other Type Restrictions</strong></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Entity classes and subclasses may not be used in field declarations for persistent types.</color>
<color=#75715e> * Fields of entity classes and subclasses must be simple types or non-entity persistent types</color>
<color=#75715e> * (annotated with {@link Persistent} not with {@link Entity}).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Entity classes, subclasses and superclasses may be {@code abstract} and may implement</color>
<color=#75715e> * arbitrary interfaces. Interfaces do not need to be annotated with {@link Persistent} in order to</color>
<color=#75715e> * be used in a persistent class, since interfaces do not contain instance fields.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Persistent instances of static nested classes are allowed, but the nested class must be</color>
<color=#75715e> * annotated with {@link Persistent} or {@link Entity}. Inner classes (non-static nested classes,</color>
<color=#75715e> * including anonymous classes) are not currently allowed as persistent types.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Arrays of simple and persistent complex types are allowed as fields of persistent types.</color>
<color=#75715e> * Arrays may be multidimensional. However, an array may not be stored as a top level instance in a</color>
<color=#75715e> * primary index. Only instances of entity classes and subclasses may be top level instances in a</color>
<color=#75715e> * primary index.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><strong>Embedded Objects</strong></color>
<color=#75715e> *</color>
<color=#75715e> * <p>As stated above, the embedded (or member) non-transient non-static fields of an entity class</color>
<color=#75715e> * are themselves persistent and are stored along with their parent entity object. This allows</color>
<color=#75715e> * embedded objects to be stored in an entity to an arbitrary depth.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There is no arbitrary limit to the nesting depth of embedded objects within an entity;</color>
<color=#75715e> * however, there is a practical limit. When an entity is marshalled, each level of nesting is</color>
<color=#75715e> * implemented internally via recursive method calls. If the nesting depth is large enough, a {@code</color>
<color=#75715e> * StackOverflowError} can occur. In practice, this has been observed with a nesting depth of</color>
<color=#75715e> * 12,000, using the default Java stack size.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This restriction on the nesting depth of embedded objects does not apply to cyclic references,</color>
<color=#75715e> * since these are handled specially as described below.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><strong>Object Graphs</strong></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When an entity instance is stored, the graph of objects referenced via its fields is stored</color>
<color=#75715e> * and retrieved as a graph. In other words, if a single instance is referenced by two or more</color>
<color=#75715e> * fields when the entity is stored, the same will be true when the entity is retrieved.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When a reference to a particular object is stored as a member field inside that object or one</color>
<color=#75715e> * of its embedded objects, this is called a cyclic reference. Because multiple references to a</color>
<color=#75715e> * single object are stored as such, cycles are also represented correctly and do not cause infinite</color>
<color=#75715e> * recursion or infinite processing loops. If an entity containing a cyclic reference is stored, the</color>
<color=#75715e> * cyclic reference will be present when the entity is retrieved.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the stored object graph is restricted in scope to a single entity instance. This is</color>
<color=#75715e> * because each entity instance is stored separately. If two entities have a reference to the same</color>
<color=#75715e> * object when stored, they will refer to two separate instances when the entities are retrieved.</color>
<color=#75715e> *</color>
<color=#75715e> * @see Persistent</color>
<color=#75715e> * @see PrimaryKey</color>
<color=#75715e> * @see SecondaryKey</color>
<color=#75715e> * @see KeyField</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#a6e22e>@Documented</color>
<color=#a6e22e>@Retention</color><color=#f8f8f2>(</color><color=#f8f8f2>RUNTIME</color><color=#f8f8f2>)</color>
<color=#a6e22e>@Target</color><color=#f8f8f2>(</color><color=#f8f8f2>TYPE</color><color=#f8f8f2>)</color>
<color=#66d9ef>public</color> <color=#a6e22e>@interface</color> <color=#f8f8f2>Entity</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Identifies a new version of a class when an incompatible class change has been made. Prior</color>
<color=#75715e>   * versions of a class are referred to by version number to perform class evolution and conversion</color>
<color=#75715e>   * using {@link Mutations}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The first version of a class is version zero, if {@link #version} is not specified. When an</color>
<color=#75715e>   * incompatible class change is made, a version number must be assigned using {@link #version}</color>
<color=#75715e>   * that is higher than the previous version number for the class. If this is not done, an {@link</color>
<color=#75715e>   * IncompatibleClassException} will be thrown when the store is opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the version.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>version</color><color=#f8f8f2>()</color> <color=#66d9ef>default</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>