<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawObject</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.ClassResolver</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A static catalog containing simple types only. Once created, this catalog is immutable.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For bindings accessed by a PersistComparator during recovery, the SimpleCatalog provides</color>
<color=#75715e> * formats for all simple types. To reduce redundant format objects, the SimpleCatalog's formats are</color>
<color=#75715e> * copied when creating a regular PersistCatalog.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class also contains utility methods for dealing with primitives.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SimpleCatalog</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Catalog</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>></color> <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>keywordToPrimitive</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"boolean"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"char"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"byte"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"short"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"int"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"long"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"float"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"double"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Class</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>></color> <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Class</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>SimpleCatalog</color> <color=#f8f8f2>instance</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>

  <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSimpleType</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>instance</color><color=#f8f8f2>.</color><color=#a6e22e>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>Class</color> <color=#a6e22e>primitiveToWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cls</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cls</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cls</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>ClassResolver</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cls</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cls</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>ClassResolver</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Key class not found: "</color> <color=#f92672>+</color> <color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cls</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>keyClassName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>keywordToPrimitive</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cls</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cls</color> <color=#f92672>=</color> <color=#f8f8f2>primitiveTypeToWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>className</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#a6e22e>getAllSimpleFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>(</color><color=#f8f8f2>loader</color><color=#f8f8f2>).</color><color=#a6e22e>formatList</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addMissingSimpleFormats</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>copyToList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>anyCopied</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>SimpleCatalog</color> <color=#f8f8f2>tempCatalog</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_PREDEFINED</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>thisFormat</color> <color=#f92672>=</color> <color=#f8f8f2>instance</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Format</color> <color=#f8f8f2>otherFormat</color> <color=#f92672>=</color> <color=#f8f8f2>copyToList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisFormat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>otherFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>thisFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getWrapperFormat</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tempCatalog</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>tempCatalog</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>(</color><color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>copyToList</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>tempCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>anyCopied</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>anyCopied</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>SimpleFormat</color><color=#f92672>></color> <color=#f8f8f2>formatList</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>SimpleFormat</color><color=#f92672>></color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>classLoader</color> <color=#f92672>=</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Reserve slots for all predefined IDs, so that that next ID assigned</color>
<color=#75715e>     * will be Format.ID_PREDEFINED plus one.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>initCapacity</color> <color=#f92672>=</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_PREDEFINED</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>formatList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>SimpleFormat</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>initCapacity</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>formatMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>SimpleFormat</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>initCapacity</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_PREDEFINED</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Initialize all predefined formats.  */</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BOOL</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FBool</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BOOL_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FBool</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BYTE</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FByte</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BYTE_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FByte</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_SHORT</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FShort</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_SHORT_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FShort</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_INT</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FInt</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_INT_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FInt</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_LONG</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FLong</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_LONG_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FLong</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_FLOAT</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FFloat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_FLOAT_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FFloat</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DOUBLE</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FDouble</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DOUBLE_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FDouble</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_CHAR</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FChar</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_CHAR_W</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FChar</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_STRING</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FString</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BIGINT</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FBigInt</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BIGDEC</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FBigDec</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>setFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DATE</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleFormat</color><color=#f8f8f2>.</color><color=#a6e22e>FDate</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>

    <color=#75715e>/* Tell primitives about their wrapper class. */</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BOOL</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BOOL_W</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BYTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_BYTE_W</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_SHORT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_SHORT_W</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_INT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_INT_W</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_LONG</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_LONG_W</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_FLOAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_FLOAT_W</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DOUBLE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DOUBLE_W</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_CHAR</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f8f8f2>.</color><color=#a6e22e>ID_CHAR_W</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets a format for which space in the formatList has been preallocated, and makes it the current</color>
<color=#75715e>   * format for the class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setFormat</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>SimpleFormat</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>initializeIfNeeded</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*model*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>getClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Tells a primitive format about the format for its corresponding primitive wrapper class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setWrapper</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>primitiveId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>wrapperId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>SimpleFormat</color> <color=#f8f8f2>primitiveFormat</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>primitiveId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>SimpleFormat</color> <color=#f8f8f2>wrapperFormat</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>wrapperId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>primitiveFormat</color><color=#f8f8f2>.</color><color=#a6e22e>setWrapperFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>wrapperFormat</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getInitVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Catalog</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT_VERSION</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expectStored</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>formatList</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>formatId</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Not a simple type: "</color> <color=#f92672>+</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchElementException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Not a simple type: "</color> <color=#f92672>+</color> <color=#f8f8f2>formatId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>cls</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkEntitySubclassIndexes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Format</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Not a simple type: "</color> <color=#f92672>+</color> <color=#f8f8f2>cls</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>formatMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Format</color> <color=#a6e22e>createFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Format</color><color=#f92672>></color> <color=#f8f8f2>newFormats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRawAccess</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>convertRawObject</color><color=#f8f8f2>(</color><color=#f8f8f2>RawObject</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>IdentityHashMap</color> <color=#f8f8f2>converted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>clsName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>SimpleCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>resolveKeyClass</color><color=#f8f8f2>(</color><color=#f8f8f2>clsName</color><color=#f8f8f2>,</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Registering proxy is not allowed for SimpleType. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>allowRegisterProxy</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>isSimpleType</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>