<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist.model</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Converter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawStore</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Implemented by a proxy class to represent the persistent state of a (non-persistent) proxied</color>
<color=#75715e> * class. Normally classes that are outside the scope of the developer's control must be proxied</color>
<color=#75715e> * since they cannot be annotated, and because it is desirable to insulate the stored format from</color>
<color=#75715e> * changes to the instance fields of the proxied class. This is useful for classes in the standard</color>
<color=#75715e> * Java libraries, for example.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code PersistentProxy} objects are not required to be thread-safe. A single thread will</color>
<color=#75715e> * create and call the methods of a given {@code PersistentProxy} object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There are three requirements for a proxy class:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>It must implement the <code>PersistentProxy</code> interface.</color>
<color=#75715e> *   <li>It must be specified as a persistent proxy class in the entity model. When using the {@link</color>
<color=#75715e> *       AnnotationModel}, a proxy class is indicated by the {@link Persistent} annotation with the</color>
<color=#75715e> *       {@link Persistent#proxyFor} property.</color>
<color=#75715e> *   <li>It must be explicitly registered by calling {@link EntityModel#registerClass} before</color>
<color=#75715e> *       opening the store.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>In order to serialize an instance of the proxied class before it is stored, an instance of the</color>
<color=#75715e> * proxy class is created. The proxied instance is then passed to the proxy's {@link</color>
<color=#75715e> * #initializeProxy initializeProxy} method. When this method returns, the proxy instance contains</color>
<color=#75715e> * the state of the proxied instance. The proxy instance is then serialized and stored in the same</color>
<color=#75715e> * way as for any persistent object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When an instance of the proxy object is deserialized after it is retrieved from storage, its</color>
<color=#75715e> * {@link #convertProxy} method is called. The instance of the proxied class returned by this method</color>
<color=#75715e> * is then returned as a field in the persistent instance.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  import java.util.Locale;</color>
<color=#75715e> *</color>
<color=#75715e> *  {@literal @Persistent(proxyFor=Locale.class)}</color>
<color=#75715e> *  class LocaleProxy implements {@literal PersistentProxy<Locale>} {</color>
<color=#75715e> *</color>
<color=#75715e> *      String language;</color>
<color=#75715e> *      String country;</color>
<color=#75715e> *      String variant;</color>
<color=#75715e> *</color>
<color=#75715e> *      private LocaleProxy() {}</color>
<color=#75715e> *</color>
<color=#75715e> *      public void initializeProxy(Locale object) {</color>
<color=#75715e> *          language = object.getLanguage();</color>
<color=#75715e> *          country = object.getCountry();</color>
<color=#75715e> *          variant = object.getVariant();</color>
<color=#75715e> *      }</color>
<color=#75715e> *</color>
<color=#75715e> *      public Locale convertProxy() {</color>
<color=#75715e> *          return new Locale(language, country, variant);</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The above definition allows the {@code Locale} class to be used in any persistent class, for</color>
<color=#75715e> * example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class LocalizedText {</color>
<color=#75715e> *      String text;</color>
<color=#75715e> *      Locale locale;</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A proxied class may not be used as a superclass for a persistent class or entity class. For</color>
<color=#75715e> * example, the following is not allowed.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  {@literal @Persistent}</color>
<color=#75715e> *  class LocalizedText extends Locale { // NOT ALLOWED</color>
<color=#75715e> *      String text;</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A proxy for proxied class P does not handle instances of subclasses of P. To proxy a subclass</color>
<color=#75715e> * of P, a separate proxy class is needed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Several <a href="Entity.html#proxyTypes">built in proxy types</a> are used implicitly. An</color>
<color=#75715e> * application defined proxy will be used instead of a built-in proxy, if both exist for the same</color>
<color=#75715e> * proxied class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>With respect to class evolution, a proxy instance is no different than any other persistent</color>
<color=#75715e> * instance. When using a {@link RawStore} or {@link Converter}, only the raw data of the proxy</color>
<color=#75715e> * instance will be visible. Raw data for the proxied instance never exists.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Currently a proxied object may not contain a reference to itself. For simple proxied objects</color>
<color=#75715e> * such as the Locale class shown above, this naturally won't occur. But for proxied objects that</color>
<color=#75715e> * are containers -- the built-in Collection and Map classes for example -- this can occur if the</color>
<color=#75715e> * container is added as an element of itself. This should be avoided. If an attempt to store such</color>
<color=#75715e> * an object is made, an {@code IllegalArgumentException} will be thrown.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that a proxy class may not be a subclass of an entity class.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>PersistentProxy</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Copies the state of a given proxied class instance to this proxy instance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param object the proxied class instance.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>initializeProxy</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>object</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a new proxied class instance to which the state of this proxy instance has been copied.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the new proxied class instance.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>T</color> <color=#a6e22e>convertProxy</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>