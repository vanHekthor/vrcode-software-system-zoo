<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.IncompatibleClassException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.evolve.Mutations</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.AnnotationModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.EntityModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.raw.RawStore</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Configuration properties used with an {@link EntityStore} or {@link RawStore}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code StoreConfig} objects are thread-safe. Multiple threads may safely call the methods of a</color>
<color=#75715e> * shared {@code StoreConfig} object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>See the <a href="package-summary.html#example">package summary example</a> for an example of</color>
<color=#75715e> * using a {@code StoreConfig}.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>StoreConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The default store configuration containing properties as if the configuration were constructed</color>
<color=#75715e>   * and not modified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>StoreConfig</color> <color=#f8f8f2>DEFAULT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StoreConfig</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exclusiveCreate</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>replicated</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deferredWrite</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>temporary</color><color=#f8f8f2>;</color>
  <color=#75715e>/* <!-- end JE only --> */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>secondaryBulkLoad</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseNamer</color> <color=#f8f8f2>databaseNamer</color> <color=#f92672>=</color> <color=#f8f8f2>DatabaseNamer</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates an entity store configuration object with default properties. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>StoreConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a shallow copy of the configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the clone.</color>
<color=#75715e>   * @deprecated As of JE 4.0.13, replaced by {@link StoreConfig#clone()}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>cloneConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>StoreConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>cannotHappen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a shallow copy of the configuration. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>StoreConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>cannotHappen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies whether creation of a new store is allowed. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is false and the internal store metadata database does not exist, {@link</color>
<color=#75715e>   * DatabaseException} will be thrown when the store is opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param allowCreate whether creation of a new store is allowed.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setAllowCreate</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setAllowCreateVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>allowCreate</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param allowCreate whether creation of a new store is allowed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAllowCreateVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowCreate</color> <color=#f92672>=</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether creation of a new store is allowed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether creation of a new store is allowed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowCreate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies whether opening an existing store is prohibited. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is true and the internal store metadata database already exists, {@link</color>
<color=#75715e>   * DatabaseException} will be thrown when the store is opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param exclusiveCreate whether opening an existing store is prohibited.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setExclusiveCreate</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>exclusiveCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setExclusiveCreateVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>exclusiveCreate</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param exclusiveCreate whether opening an existing store is prohibited.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setExclusiveCreateVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>exclusiveCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>exclusiveCreate</color> <color=#f92672>=</color> <color=#f8f8f2>exclusiveCreate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether opening an existing store is prohibited.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether opening an existing store is prohibited.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getExclusiveCreate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>exclusiveCreate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the transactional configuration property. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This property is true to open all store indices for transactional access. True may not be</color>
<color=#75715e>   * specified if the environment is not also transactional.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param transactional whether the store is transactional.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setTransactionalVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>transactional</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param transactional whether the store is transactional.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransactionalVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transactional</color> <color=#f92672>=</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the transactional configuration property.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether the store is transactional.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getTransactional</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the read-only configuration property. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This property is true to open all store indices for read-only access, or false to open them</color>
<color=#75715e>   * for read-write access. False may not be specified if the environment is read-only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param readOnly whether the store is read-only.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setReadOnly</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setReadOnlyVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>readOnly</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param readOnly whether the store is read-only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReadOnlyVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>readOnly</color> <color=#f92672>=</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the read-only configuration property.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether the store is read-only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#75715e>/**</color>
<color=#75715e>   * Configures a store to be replicated or non-replicated, in a replicated Environment. By default</color>
<color=#75715e>   * this property is true, meaning that by default a store is replicated in a replicated</color>
<color=#75715e>   * Environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In a non-replicated Environment, this property is ignored. All stores are non-replicated in</color>
<color=#75715e>   * a non-replicated Environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param replicated whether the store is replicated.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   * @see <a href="../je/rep/ReplicatedEnvironment.html#nonRepDbs">Non-replicated Databases in a</color>
<color=#75715e>   *     Replicated Environment</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setReplicated</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>replicated</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setReplicatedVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>replicated</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param replicated whether the store is replicated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReplicatedVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>replicated</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>replicated</color> <color=#f92672>=</color> <color=#f8f8f2>replicated</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the replicated property for the store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method returns true by default. However, in a non-replicated Environment, this property</color>
<color=#75715e>   * is ignored. All stores are non-replicated in a non-replicated Environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether the store is replicated.</color>
<color=#75715e>   * @see #setReplicated</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReplicated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicated</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the deferred-write configuration property. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This property is true to open all store index databases for deferred-write access. True may</color>
<color=#75715e>   * not be specified if the store is transactional.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Deferred write stores avoid disk I/O and are not guaranteed to be persistent until {@link</color>
<color=#75715e>   * EntityStore#sync} or {@link Environment#sync} is called or the store is closed normally. This</color>
<color=#75715e>   * mode is particularly geared toward stores that frequently modify and delete data records. See</color>
<color=#75715e>   * the Getting Started Guide, Database chapter for a full description of the mode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param deferredWrite whether the store is deferred-write.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   * @see #setTransactional</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setDeferredWrite</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>deferredWrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setDeferredWriteVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>deferredWrite</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param deferredWrite whether the store is deferred-write.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDeferredWriteVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>deferredWrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>deferredWrite</color> <color=#f92672>=</color> <color=#f8f8f2>deferredWrite</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the deferred-write configuration property.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether the store is deferred-write.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDeferredWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>deferredWrite</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the temporary configuration property. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This property is true to open all store databases as temporary databases. True may not be</color>
<color=#75715e>   * specified if the store is transactional.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Temporary stores avoid disk I/O and are not persistent -- they are deleted when the store is</color>
<color=#75715e>   * closed or after a crash. This mode is particularly geared toward in-memory stores. See the</color>
<color=#75715e>   * Getting Started Guide, Database chapter for a full description of the mode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param temporary whether the store is temporary.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   * @see #setTransactional</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setTemporary</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>temporary</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setTemporaryVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>temporary</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param temporary whether the store is temporary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTemporaryVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>temporary</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>temporary</color> <color=#f92672>=</color> <color=#f8f8f2>temporary</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the temporary configuration property.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether the store is temporary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getTemporary</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>temporary</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the bulk-load-secondaries configuration property. By default this property is false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This property is true to cause the initial creation of secondary indices to be performed as</color>
<color=#75715e>   * a bulk load. If this property is true and {@link EntityStore#getSecondaryIndex</color>
<color=#75715e>   * EntityStore.getSecondaryIndex} has never been called for a secondary index, that secondary</color>
<color=#75715e>   * index will not be created or written as records are written to the primary index. In addition,</color>
<color=#75715e>   * if that secondary index defines a foreign key constraint, the constraint will not be enforced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The secondary index will be populated later when the {@code getSecondaryIndex} method is</color>
<color=#75715e>   * called for the first time for that index, or when the store is closed and re-opened with this</color>
<color=#75715e>   * property set to false and the primary index is obtained. In either case, the secondary index is</color>
<color=#75715e>   * populated by reading through the entire primary index and adding records to the secondary index</color>
<color=#75715e>   * as needed. While populating the secondary, foreign key constraints will be enforced and an</color>
<color=#75715e>   * exception is thrown if a constraint is violated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When loading a primary index along with secondary indexes from a large input data set,</color>
<color=#75715e>   * configuring a bulk load of the secondary indexes is sometimes more performant than updating the</color>
<color=#75715e>   * secondary indexes each time the primary index is updated. The absence of foreign key</color>
<color=#75715e>   * constraints during the load also provides more flexibility.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param secondaryBulkLoad whether bulk-load-secondaries is used.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setSecondaryBulkLoad</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>secondaryBulkLoad</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setSecondaryBulkLoadVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>secondaryBulkLoad</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param secondaryBulkLoad whether bulk-load-secondaries is used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSecondaryBulkLoadVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>secondaryBulkLoad</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>secondaryBulkLoad</color> <color=#f92672>=</color> <color=#f8f8f2>secondaryBulkLoad</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the bulk-load-secondaries configuration property.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether bulk-load-secondaries is used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSecondaryBulkLoad</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>secondaryBulkLoad</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the entity model that defines entity classes and index keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If null is specified or this method is not called, an {@link AnnotationModel} instance is</color>
<color=#75715e>   * used by default.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param model the EntityModel.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setModel</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setModelVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>model</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param model the EntityModel.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setModelVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>EntityModel</color> <color=#f8f8f2>model</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>model</color> <color=#f92672>=</color> <color=#f8f8f2>model</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the entity model that defines entity classes and index keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the EntityModel.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntityModel</color> <color=#a6e22e>getModel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>model</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures mutations for performing lazy evolution of stored instances. Existing mutations for</color>
<color=#75715e>   * this store are not cleared, so the mutations required are only those changes that have been</color>
<color=#75715e>   * made since the store was last opened. Some new mutations may override existing specifications,</color>
<color=#75715e>   * and some may be supplemental.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If null is specified and the store already exists, the previously specified mutations are</color>
<color=#75715e>   * used. The mutations are stored persistently in serialized form.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Mutations must be available to handle all changes to classes that are incompatible with the</color>
<color=#75715e>   * class definitions known to this store. See {@link Mutations} and {@link</color>
<color=#75715e>   * com.sleepycat.persist.evolve Class Evolution} for more information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If an incompatible class change has been made and mutations are not available for handling</color>
<color=#75715e>   * the change, {@link IncompatibleClassException} will be thrown when creating an {@link</color>
<color=#75715e>   * EntityStore}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param mutations the Mutations.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setMutations</color><color=#f8f8f2>(</color><color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setMutationsVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>mutations</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param mutations the Mutations.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMutationsVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>Mutations</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>mutations</color> <color=#f92672>=</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the configured mutations for performing lazy evolution of stored instances.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the Mutations.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Mutations</color> <color=#a6e22e>getMutations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mutations</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     Specifies the object reponsible for naming of files and databases.</color>
<color=#75715e>   *     <p>By default this property is {@link DatabaseNamer#DEFAULT}.</color>
<color=#75715e>   * @param databaseNamer the DatabaseNamer.</color>
<color=#75715e>   * @return 'this'.</color>
<color=#75715e>   * @throws NullPointerException if a null parameter value is passed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StoreConfig</color> <color=#a6e22e>setDatabaseNamer</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseNamer</color> <color=#f8f8f2>databaseNamer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setDatabaseNamerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseNamer</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     The void return setter for use by Bean editors.</color>
<color=#75715e>   * @param databaseNamer the DatabaseNamer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDatabaseNamerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseNamer</color> <color=#f8f8f2>databaseNamer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseNamer</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseNamer</color> <color=#f92672>=</color> <color=#f8f8f2>databaseNamer</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     Returns the object reponsible for naming of files and databases.</color>
<color=#75715e>   * @return the DatabaseNamer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseNamer</color> <color=#a6e22e>getDatabaseNamer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseNamer</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>