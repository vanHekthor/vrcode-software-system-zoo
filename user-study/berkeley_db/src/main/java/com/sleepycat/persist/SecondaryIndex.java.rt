<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.persist</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.EntityBinding</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.EntryBinding</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.collections.StoredSortedMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.compat.DbCompat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.DeleteAction</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.Relationship</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.persist.model.SecondaryKey</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.SortedMap</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The secondary index for an entity class and a secondary key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code SecondaryIndex} objects are thread-safe. Multiple threads may safely call the methods</color>
<color=#75715e> * of a shared {@code SecondaryIndex} object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code SecondaryIndex} implements {@link EntityIndex} to map the secondary key type (SK) to</color>
<color=#75715e> * the entity type (E). In other words, entities are accessed by secondary key values.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link SecondaryKey} annotation may be used to define a secondary key as shown in the</color>
<color=#75715e> * following example.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE)}</color>
<color=#75715e> *     String department;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Before obtaining a {@code SecondaryIndex}, the {@link PrimaryIndex} must be obtained for the</color>
<color=#75715e> * entity class. To obtain the {@code SecondaryIndex} call {@link EntityStore#getSecondaryIndex</color>
<color=#75715e> * EntityStore.getSecondaryIndex}, passing the primary index, the secondary key class and the</color>
<color=#75715e> * secondary key name. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * EntityStore store = new EntityStore(...);</color>
<color=#75715e> *</color>
<color=#75715e> * {@code PrimaryIndex<Long, Employee>} primaryIndex =</color>
<color=#75715e> *     store.getPrimaryIndex(Long.class, Employee.class);</color>
<color=#75715e> *</color>
<color=#75715e> * {@code SecondaryIndex<String, Long, Employee>} secondaryIndex =</color>
<color=#75715e> *     store.getSecondaryIndex(primaryIndex, String.class, "department");</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Since {@code SecondaryIndex} implements the {@link EntityIndex} interface, it shares the</color>
<color=#75715e> * common index methods for retrieving and deleting entities, opening cursors and using</color>
<color=#75715e> * transactions. See {@link EntityIndex} for more information on these topics.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code SecondaryIndex} does <em>not</em> provide methods for inserting and updating entities.</color>
<color=#75715e> * That must be done using the {@link PrimaryIndex}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that a {@code SecondaryIndex} has three type parameters {@code <SK, PK, E>} or in the</color>
<color=#75715e> * example {@code <String, Long, Employee>} while a {@link PrimaryIndex} has only two type</color>
<color=#75715e> * parameters {@code <PK, E>} or {@code <Long, Employee>}. This is because a {@code SecondaryIndex}</color>
<color=#75715e> * has an extra level of mapping: It maps from secondary key to primary key, and then from primary</color>
<color=#75715e> * key to entity. For example, consider this entity: <div></color>
<color=#75715e> *</color>
<color=#75715e> * <table class="code" border="1" summary=""></color>
<color=#75715e> *   <tr><th>ID</th><th>Department</th><th>Name</th></tr></color>
<color=#75715e> *   <tr><td>1</td><td>Engineering</td><td>Jane Smith</td></tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * </div></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link PrimaryIndex} maps from id directly to the entity, or from primary key 1 to the</color>
<color=#75715e> * "Jane Smith" entity in the example. The {@code SecondaryIndex} maps from department to id, or</color>
<color=#75715e> * from secondary key "Engineering" to primary key 1 in the example, and then uses the {@code</color>
<color=#75715e> * PrimaryIndex} to map from the primary key to the entity.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because of this extra type parameter and extra level of mapping, a {@code SecondaryIndex} can</color>
<color=#75715e> * provide more than one mapping, or view, of the entities in the primary index. The main mapping of</color>
<color=#75715e> * a {@code SecondaryIndex} is to map from secondary key (SK) to entity (E), or in the example, from</color>
<color=#75715e> * the String department key to the Employee entity. The {@code SecondaryIndex} itself, by</color>
<color=#75715e> * implementing {@code EntityIndex<SK, E>}, provides this mapping.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The second mapping provided by {@code SecondaryIndex} is from secondary key (SK) to primary</color>
<color=#75715e> * key (PK), or in the example, from the String department key to the Long id key. The {@link</color>
<color=#75715e> * #keysIndex} method provides this mapping. When accessing the keys index, the primary key is</color>
<color=#75715e> * returned rather than the entity. When only the primary key is needed and not the entire entity,</color>
<color=#75715e> * using the keys index is less expensive than using the secondary index because the primary index</color>
<color=#75715e> * does not have to be accessed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The third mapping provided by {@code SecondaryIndex} is from primary key (PK) to entity (E),</color>
<color=#75715e> * for the subset of entities having a given secondary key (SK). This mapping is provided by the</color>
<color=#75715e> * {@link #subIndex} method. A sub-index is convenient when you are interested in working with the</color>
<color=#75715e> * subset of entities having a particular secondary key value, for example, all employees in a given</color>
<color=#75715e> * department.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>All three mappings, along with the mapping provided by the {@link PrimaryIndex}, are shown</color>
<color=#75715e> * using example data in the {@link EntityIndex} interface documentation. See {@link EntityIndex}</color>
<color=#75715e> * for more information.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that when using an index, keys and values are stored and retrieved by value not by</color>
<color=#75715e> * reference. In other words, if an entity object is stored and then retrieved, or retrieved twice,</color>
<color=#75715e> * each object will be a separate instance. For example, in the code below the assertion will always</color>
<color=#75715e> * fail.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * MyKey key = ...;</color>
<color=#75715e> * MyEntity entity1 = index.get(key);</color>
<color=#75715e> * MyEntity entity2 = index.get(key);</color>
<color=#75715e> * assert entity1 == entity2; // always fails!</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>One-to-One Relationships</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A {@link Relationship#ONE_TO_ONE ONE_TO_ONE} relationship, although less common than other</color>
<color=#75715e> * types of relationships, is the simplest type of relationship. A single entity is related to a</color>
<color=#75715e> * single secondary key value. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=ONE_TO_ONE)}</color>
<color=#75715e> *     String ssn;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@code SecondaryIndex<String, Long, Employee>} employeeBySsn =</color>
<color=#75715e> *     store.getSecondaryIndex(primaryIndex, String.class, "ssn");</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>With a {@link Relationship#ONE_TO_ONE ONE_TO_ONE} relationship, the secondary key must be</color>
<color=#75715e> * unique; in other words, no two entities may have the same secondary key value. If an attempt is</color>
<color=#75715e> * made to store an entity having the same secondary key value as another existing entity, a {@link</color>
<color=#75715e> * DatabaseException} will be thrown.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because the secondary key is unique, it is useful to lookup entities by secondary key using</color>
<color=#75715e> * {@link EntityIndex#get}. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Employee employee = employeeBySsn.get(mySsn);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Many-to-One Relationships</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A {@link Relationship#MANY_TO_ONE MANY_TO_ONE} relationship is the most common type of</color>
<color=#75715e> * relationship. One or more entities is related to a single secondary key value. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE)}</color>
<color=#75715e> *     String department;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@code SecondaryIndex<String, Long, Employee>} employeeByDepartment =</color>
<color=#75715e> *     store.getSecondaryIndex(primaryIndex, String.class, "department");</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>With a {@link Relationship#MANY_TO_ONE MANY_TO_ONE} relationship, the secondary key is not</color>
<color=#75715e> * required to be unique; in other words, more than one entity may have the same secondary key</color>
<color=#75715e> * value. In this example, more than one employee may belong to the same department.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The most convenient way to access the employees in a given department is by using a sub-index.</color>
<color=#75715e> * For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityIndex<Long, Entity>} subIndex = employeeByDepartment.subIndex(myDept);</color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = subIndex.entities();</color>
<color=#75715e> * try {</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         // Do something with the entity...</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>One-to-Many Relationships</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>In a {@link Relationship#ONE_TO_MANY ONE_TO_MANY} relationship, a single entity is related to</color>
<color=#75715e> * one or more secondary key values. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=ONE_TO_MANY)}</color>
<color=#75715e> *     {@literal Set<String> emailAddresses = new HashSet<String>;}</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@code SecondaryIndex<String, Long, Employee>} employeeByEmail =</color>
<color=#75715e> *     store.getSecondaryIndex(primaryIndex, String.class, "emailAddresses");</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>With a {@link Relationship#ONE_TO_MANY ONE_TO_MANY} relationship, the secondary key must be</color>
<color=#75715e> * unique; in other words, no two entities may have the same secondary key value. In this example,</color>
<color=#75715e> * no two employees may have the same email address. If an attempt is made to store an entity having</color>
<color=#75715e> * the same secondary key value as another existing entity, a {@link DatabaseException} will be</color>
<color=#75715e> * thrown.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because the secondary key is unique, it is useful to lookup entities by secondary key using</color>
<color=#75715e> * {@link EntityIndex#get}. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Employee employee = employeeByEmail.get(myEmailAddress);</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The secondary key field for a {@link Relationship#ONE_TO_MANY ONE_TO_MANY} relationship must</color>
<color=#75715e> * be an array or collection type. To access the email addresses of an employee, simply access the</color>
<color=#75715e> * collection field directly. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Employee employee = primaryIndex.get(1); // Get the entity by primary key</color>
<color=#75715e> * employee.emailAddresses.add(myNewEmail); // Add an email address</color>
<color=#75715e> * primaryIndex.putNoReturn(1, employee);   // Update the entity</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Many-to-Many Relationships</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>In a {@link Relationship#MANY_TO_MANY MANY_TO_MANY} relationship, one or more entities is</color>
<color=#75715e> * related to one or more secondary key values. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_MANY)}</color>
<color=#75715e> *     {@literal Set<String> organizations = new HashSet<String>;}</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@code SecondaryIndex<String, Long, Employee>} employeeByOrganization =</color>
<color=#75715e> *     store.getSecondaryIndex(primaryIndex, String.class, "organizations");</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>With a {@link Relationship#MANY_TO_MANY MANY_TO_MANY} relationship, the secondary key is not</color>
<color=#75715e> * required to be unique; in other words, more than one entity may have the same secondary key</color>
<color=#75715e> * value. In this example, more than one employee may belong to the same organization.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The most convenient way to access the employees in a given organization is by using a</color>
<color=#75715e> * sub-index. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code EntityIndex<Long, Entity>} subIndex = employeeByOrganization.subIndex(myOrg);</color>
<color=#75715e> * {@code EntityCursor<Employee>} cursor = subIndex.entities();</color>
<color=#75715e> * try {</color>
<color=#75715e> *     for (Employee entity : cursor) {</color>
<color=#75715e> *         // Do something with the entity...</color>
<color=#75715e> *     }</color>
<color=#75715e> * } finally {</color>
<color=#75715e> *     cursor.close();</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The secondary key field for a {@link Relationship#MANY_TO_MANY MANY_TO_MANY} relationship must</color>
<color=#75715e> * be an array or collection type. To access the organizations of an employee, simply access the</color>
<color=#75715e> * collection field directly. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Employee employee = primaryIndex.get(1); // Get the entity by primary key</color>
<color=#75715e> * employee.organizations.remove(myOldOrg); // Remove an organization</color>
<color=#75715e> * primaryIndex.putNoReturn(1, employee);   // Update the entity</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Foreign Key Constraints for Related Entities</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>In all the examples above the secondary key is treated only as a simple value, such as a</color>
<color=#75715e> * {@code String} department field. In many cases, that is sufficient. But in other cases, you may</color>
<color=#75715e> * wish to constrain the secondary keys of one entity class to be valid primary keys of another</color>
<color=#75715e> * entity class. For example, a Department entity may also be defined:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Department {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     String missionStatement;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Department() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>You may wish to constrain the department field values of the Employee class in the examples</color>
<color=#75715e> * above to be valid primary keys of the Department entity class. In other words, you may wish to</color>
<color=#75715e> * ensure that the department field of an Employee will always refer to a valid Department entity.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>You can implement this constraint yourself by validating the department field before you store</color>
<color=#75715e> * an Employee. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@code PrimaryIndex<String, Department>} departmentIndex =</color>
<color=#75715e> *     store.getPrimaryIndex(String.class, Department.class);</color>
<color=#75715e> *</color>
<color=#75715e> * void storeEmployee(Employee employee) throws DatabaseException {</color>
<color=#75715e> *     if (departmentIndex.contains(employee.department)) {</color>
<color=#75715e> *         primaryIndex.putNoReturn(employee);</color>
<color=#75715e> *     } else {</color>
<color=#75715e> *         throw new IllegalArgumentException("Department does not exist: " +</color>
<color=#75715e> *                                            employee.department);</color>
<color=#75715e> *     }</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Or, instead you could define the Employee department field as a foreign key, and this</color>
<color=#75715e> * validation will be done for you when you attempt to store the Employee entity. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Department.class)}</color>
<color=#75715e> *     String department;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@code relatedEntity=Department.class} above defines the department field as a foreign key</color>
<color=#75715e> * that refers to a Department entity. Whenever a Employee entity is stored, its department field</color>
<color=#75715e> * value will be checked to ensure that a Department entity exists with that value as its primary</color>
<color=#75715e> * key. If no such Department entity exists, then a {@link DatabaseException} is thrown, causing the</color>
<color=#75715e> * transaction to be aborted (assuming that transactions are used).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This begs the question: What happens when a Department entity is deleted while one or more</color>
<color=#75715e> * Employee entities have department fields that refer to the deleted department's primary key? If</color>
<color=#75715e> * the department were allowed to be deleted, the foreign key constraint for the Employee department</color>
<color=#75715e> * field would be violated, because the Employee department field would refer to a department that</color>
<color=#75715e> * does not exist.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>By default, when this situation arises the system does not allow the department to be deleted.</color>
<color=#75715e> * Instead, a {@link DatabaseException} is thrown, causing the transaction to be aborted. In this</color>
<color=#75715e> * case, in order to delete a department, the department field of all Employee entities must first</color>
<color=#75715e> * be updated to refer to a different existing department, or set to null. This is the</color>
<color=#75715e> * responsibility of the application.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There are two additional ways of handling deletion of a Department entity. These alternatives</color>
<color=#75715e> * are configured using the {@link SecondaryKey#onRelatedEntityDelete} annotation property. Setting</color>
<color=#75715e> * this property to {@link DeleteAction#NULLIFY} causes the Employee department field to be</color>
<color=#75715e> * automatically set to null when the department they refer to is deleted. This may or may not be</color>
<color=#75715e> * desirable, depending on application policies. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@code @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Department.class,</color>
<color=#75715e> *                                       onRelatedEntityDelete=NULLIFY)}</color>
<color=#75715e> *     String department;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link DeleteAction#CASCADE} value, on the other hand, causes the Employee entities to be</color>
<color=#75715e> * automatically deleted when the department they refer to is deleted. This is probably not</color>
<color=#75715e> * desirable in this particular example, but is useful for parent-child relationships. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Order {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     String description;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Order() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class OrderItem {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@code @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Order.class,</color>
<color=#75715e> *                                       onRelatedEntityDelete=CASCADE)}</color>
<color=#75715e> *     long orderId;</color>
<color=#75715e> *</color>
<color=#75715e> *     String description;</color>
<color=#75715e> *</color>
<color=#75715e> *     private OrderItem() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The OrderItem orderId field refers to its "parent" Order entity. When an Order entity is</color>
<color=#75715e> * deleted, it may be useful to automatically delete its "child" OrderItem entities.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For more information, see {@link SecondaryKey#onRelatedEntityDelete}.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3>One-to-Many versus Many-to-One for Related Entities</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When there is a conceptual Many-to-One relationship such as Employee to Department as</color>
<color=#75715e> * illustrated in the examples above, the relationship may be implemented either as Many-to-One in</color>
<color=#75715e> * the Employee class or as One-to-Many in the Department class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Here is the Many-to-One approach.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Department.class)}</color>
<color=#75715e> *     String department;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Department {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     String missionStatement;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Department() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>And here is the One-to-Many approach.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Department {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     String missionStatement;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=ONE_TO_MANY, relatedEntity=Employee.class)}</color>
<color=#75715e> *     {@literal Set<Long> employees = new HashSet<Long>;}</color>
<color=#75715e> *</color>
<color=#75715e> *     private Department() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Which approach is best? The Many-to-One approach better handles large number of entities on</color>
<color=#75715e> * the to-Many side of the relationship because it doesn't store a collection of keys as an entity</color>
<color=#75715e> * field. With Many-to-One a Btree is used to store the collection of keys and the Btree can easily</color>
<color=#75715e> * handle very large numbers of keys. With One-to-Many, each time a related key is added or removed</color>
<color=#75715e> * the entity on the One side of the relationship, along with the complete collection of related</color>
<color=#75715e> * keys, must be updated. Therefore, if large numbers of keys may be stored per relationship,</color>
<color=#75715e> * Many-to-One is recommended.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If the number of entities per relationship is not a concern, then you may wish to choose the</color>
<color=#75715e> * approach that is most natural in your application data model. For example, if you think of a</color>
<color=#75715e> * Department as containing employees and you wish to modify the Department object each time an</color>
<color=#75715e> * employee is added or removed, then you may wish to store a collection of Employee keys in the</color>
<color=#75715e> * Department object (One-to-Many).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that if you have a One-to-Many relationship and there is no related entity, then you</color>
<color=#75715e> * don't have a choice -- you have to use One-to-Many because there is no entity on the to-Many side</color>
<color=#75715e> * of the relationship where a Many-to-One key could be defined. An example is the Employee to email</color>
<color=#75715e> * addresses relationship discussed above:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=ONE_TO_MANY)}</color>
<color=#75715e> *     {@literal Set<String> emailAddresses = new HashSet<String>;}</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>For sake of argument imagine that each employee has thousands of email addresses and employees</color>
<color=#75715e> * frequently add and remove email addresses. To avoid the potential performance problems associated</color>
<color=#75715e> * with updating the Employee entity every time an email address is added or removed, you could</color>
<color=#75715e> * create an EmployeeEmailAddress entity and use a Many-to-One relationship as shown below:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class EmployeeEmailAddress {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String emailAddress;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Employee.class)}</color>
<color=#75715e> *     long employeeId;</color>
<color=#75715e> *</color>
<color=#75715e> *     private EmployeeEmailAddress() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Key Placement with Many-to-Many for Related Entities</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>As discussed in the section above, one drawback of a to-Many relationship (One-to-Many was</color>
<color=#75715e> * discussed above and Many-to-Many is discussed here) is that it requires storing a collection of</color>
<color=#75715e> * keys in an entity. Each time a key is added or removed, the containing entity must be updated.</color>
<color=#75715e> * This has potential performance problems when there are large numbers of entities on the to-Many</color>
<color=#75715e> * side of the relationship, in other words, when there are large numbers of keys in each secondary</color>
<color=#75715e> * key field collection.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If you have a Many-to-Many relationship with a reasonably small number of entities on one side</color>
<color=#75715e> * of the relationship and a large number of entities on the other side, you can avoid the potential</color>
<color=#75715e> * performance problems by defining the secondary key field on the side with a small number of</color>
<color=#75715e> * entities.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example, in an Employee-to-Organization relationship, the number of organizations per</color>
<color=#75715e> * employee will normally be reasonably small but the number of employees per organization may be</color>
<color=#75715e> * very large. Therefore, to avoid potential performance problems, the secondary key field should be</color>
<color=#75715e> * defined in the Employee class as shown below.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Employee {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_MANY, relatedEntity=Organization.class)}</color>
<color=#75715e> *     {@literal Set<String> organizations = new HashSet<String>;}</color>
<color=#75715e> *</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Employee() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Organization {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String name;</color>
<color=#75715e> *</color>
<color=#75715e> *     String description;</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If instead a {@code Set<Long> members} key had been defined in the Organization class, this</color>
<color=#75715e> * set could potentially have a large number of elements and performance problems could result.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Many-to-Many Versus a Relationship Entity</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If you have a Many-to-Many relationship with a large number of entities on <em>both</em> sides</color>
<color=#75715e> * of the relationship, you can avoid the potential performance problems by using a <em>relationship</color>
<color=#75715e> * entity</em>. A relationship entity defines the relationship between two other entities using two</color>
<color=#75715e> * Many-to-One relationships.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Imagine a relationship between cars and trucks indicating whenever a particular truck was</color>
<color=#75715e> * passed on the road by a particular car. A given car may pass a large number of trucks and a given</color>
<color=#75715e> * truck may be passed by a large number of cars. First look at a Many-to-Many relationship between</color>
<color=#75715e> * these two entities:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Car {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String licenseNumber;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_MANY, relatedEntity=Truck.class)}</color>
<color=#75715e> *     {@literal Set<String> trucksPassed = new HashSet<String>;}</color>
<color=#75715e> *</color>
<color=#75715e> *     String color;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Car() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Truck {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String licenseNumber;</color>
<color=#75715e> *</color>
<color=#75715e> *     int tons;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Truck() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>With the Many-to-Many approach above, the {@code trucksPassed} set could potentially have a</color>
<color=#75715e> * large number of elements and performance problems could result.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To apply the relationship entity approach we define a new entity class named CarPassedTruck</color>
<color=#75715e> * representing a single truck passed by a single car. We remove the secondary key from the Car</color>
<color=#75715e> * class and use two secondary keys in the CarPassedTruck class instead.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Car {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String licenseNumber;</color>
<color=#75715e> *</color>
<color=#75715e> *     String color;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Car() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class Truck {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     String licenseNumber;</color>
<color=#75715e> *</color>
<color=#75715e> *     int tons;</color>
<color=#75715e> *</color>
<color=#75715e> *     private Truck() {}</color>
<color=#75715e> * }</color>
<color=#75715e> *</color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class CarPassedTruck {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Car.class)}</color>
<color=#75715e> *     String carLicense;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Truck.class)}</color>
<color=#75715e> *     String truckLicense;</color>
<color=#75715e> *</color>
<color=#75715e> *     private CarPassedTruck() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The CarPassedTruck entity can be used to access the relationship by car license or by truck</color>
<color=#75715e> * license.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>You may use the relationship entity approach because of the potential performance problems</color>
<color=#75715e> * mentioned above. Or, you may choose to use this approach in order to store other information</color>
<color=#75715e> * about the relationship. For example, if for each car that passes a truck you wish to record how</color>
<color=#75715e> * much faster the car was going than the truck, then a relationship entity is the logical place to</color>
<color=#75715e> * store that property. In the example below the speedDifference property is added to the</color>
<color=#75715e> * CarPassedTruck class.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * {@literal @Entity}</color>
<color=#75715e> * class CarPassedTruck {</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @PrimaryKey}</color>
<color=#75715e> *     long id;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Car.class)}</color>
<color=#75715e> *     String carLicense;</color>
<color=#75715e> *</color>
<color=#75715e> *     {@literal @SecondaryKey(relate=MANY_TO_ONE, relatedEntity=Truck.class)}</color>
<color=#75715e> *     String truckLicense;</color>
<color=#75715e> *</color>
<color=#75715e> *     int speedDifference;</color>
<color=#75715e> *</color>
<color=#75715e> *     private CarPassedTruck() {}</color>
<color=#75715e> * }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Be aware that the relationship entity approach adds overhead compared to Many-to-Many. There</color>
<color=#75715e> * is one additional entity and one additional secondary key. These factors should be weighed</color>
<color=#75715e> * against its advantages and the relevant application access patterns should be considered.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SecondaryIndex</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>BasicIndex</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>keysDb</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>PrimaryIndex</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>priIndex</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EntityBinding</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>entityBinding</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EntityIndex</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f92672>></color> <color=#f8f8f2>keysIndex</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a secondary index without using an <code>EntityStore</code>. When using an {@link</color>
<color=#75715e>   * EntityStore}, call {@link EntityStore#getSecondaryIndex getSecondaryIndex} instead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This constructor is not normally needed and is provided for applications that wish to use</color>
<color=#75715e>   * custom bindings along with the Direct Persistence Layer. Normally, {@link</color>
<color=#75715e>   * EntityStore#getSecondaryIndex getSecondaryIndex} is used instead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param database the secondary database used for all access other than via a {@link #keysIndex}.</color>
<color=#75715e>   * @param keysDatabase another handle on the secondary database, opened without association to the</color>
<color=#75715e>   *     primary, and used only for access via a {@link #keysIndex}. If this argument is null and</color>
<color=#75715e>   *     the {@link #keysIndex} method is called, then the keys database will be opened</color>
<color=#75715e>   *     automatically; however, the user is then responsible for closing the keys database. To get</color>
<color=#75715e>   *     the keys database in order to close it, call {@link #getKeysDatabase}.</color>
<color=#75715e>   * @param primaryIndex the primary index associated with this secondary index.</color>
<color=#75715e>   * @param secondaryKeyClass the class of the secondary key.</color>
<color=#75715e>   * @param secondaryKeyBinding the binding to be used for secondary keys.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SecondaryIndex</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Database</color> <color=#f8f8f2>keysDatabase</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>PrimaryIndex</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f92672>></color> <color=#f8f8f2>secondaryKeyClass</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EntryBinding</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f92672>></color> <color=#f8f8f2>secondaryKeyBinding</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>secondaryKeyClass</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>secondaryKeyBinding</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>EntityValueAdapter</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityClass</color><color=#f8f8f2>(),</color> <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityBinding</color><color=#f8f8f2>(),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>secDb</color> <color=#f92672>=</color> <color=#f8f8f2>database</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>keysDb</color> <color=#f92672>=</color> <color=#f8f8f2>keysDatabase</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>priIndex</color> <color=#f92672>=</color> <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entityBinding</color> <color=#f92672>=</color> <color=#f8f8f2>primaryIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getEntityBinding</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the underlying secondary database for this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the secondary database.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the underlying secondary database that is not associated with the primary database and</color>
<color=#75715e>   * is used for the {@link #keysIndex}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the keys database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getKeysDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keysDb</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the primary index associated with this secondary index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the primary index.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PrimaryIndex</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>getPrimaryIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>priIndex</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the secondary key class for this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f92672>></color> <color=#a6e22e>getKeyClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keyClass</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the secondary key binding for the index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the key binding.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntryBinding</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f92672>></color> <color=#a6e22e>getKeyBinding</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keyBinding</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a read-only keys index that maps secondary key to primary key. When accessing the keys</color>
<color=#75715e>   * index, the primary key is returned rather than the entity. When only the primary key is needed</color>
<color=#75715e>   * and not the entire entity, using the keys index is less expensive than using the secondary</color>
<color=#75715e>   * index because the primary index does not have to be accessed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note the following in the unusual case that you are <em>not</em> using an <code>EntityStore</color>
<color=#75715e>   * </code>: This method will open the keys database, a second database handle for the secondary</color>
<color=#75715e>   * database, if it is not already open. In this case, if you are <em>not</em> using an <code></color>
<color=#75715e>   * EntityStore</code>, then you are responsible for closing the database returned by {@link</color>
<color=#75715e>   * #getKeysDatabase} before closing the environment. If you <em>are</em> using an <code></color>
<color=#75715e>   * EntityStore</code>, the keys database will be closed automatically by {@link</color>
<color=#75715e>   * EntityStore#close}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the keys index.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>EntityIndex</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f92672>></color> <color=#a6e22e>keysIndex</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keysIndex</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keysDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setReadOnly</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setAllowCreate</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setExclusiveCreate</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>keysDb</color> <color=#f92672>=</color>
            <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>openDatabase</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>(),</color>
                <color=#66d9ef>null</color> <color=#75715e>/*txn*/</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseFile</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseName</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keysDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Could not open existing DB, file: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseFile</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>)</color>
                  <color=#f92672>+</color> <color=#e6db74>" name: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>keysIndex</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>KeysIndex</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>PK</color><color=#f92672>></color><color=#f8f8f2>(</color>
              <color=#f8f8f2>keysDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyBinding</color><color=#f8f8f2>,</color> <color=#f8f8f2>priIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyClass</color><color=#f8f8f2>(),</color> <color=#f8f8f2>priIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyBinding</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keysIndex</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an index that maps primary key to entity for the subset of entities having a given</color>
<color=#75715e>   * secondary key (duplicates). A sub-index is convenient when you are interested in working with</color>
<color=#75715e>   * the subset of entities having a particular secondary key value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When using a {@link Relationship#MANY_TO_ONE MANY_TO_ONE} or {@link</color>
<color=#75715e>   * Relationship#MANY_TO_MANY MANY_TO_MANY} secondary key, the sub-index represents the left (MANY)</color>
<color=#75715e>   * side of a relationship.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key that identifies the entities in the sub-index.</color>
<color=#75715e>   * @return the sub-index.</color>
<color=#75715e>   * @throws DatabaseException the base class for all BDB exceptions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntityIndex</color><color=#f92672><</color><color=#f8f8f2>PK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>subIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>SK</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SubIndex</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityBinding</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Of the EntityIndex methods only get()/map()/sortedMap() are implemented</color>
<color=#75715e>   * here.  All other methods are implemented by BasicIndex.</color>
<color=#75715e>   */</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>E</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>SK</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>E</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>SK</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* <!-- begin JE only --> */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbCompat</color><color=#f8f8f2>.</color><color=#a6e22e>IS_JE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EntityResult</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>value</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* <!-- end JE only --> */</color>

    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pkeyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>keyBinding</color><color=#f8f8f2>.</color><color=#a6e22e>objectToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>OperationStatus</color> <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>pkeyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>status</color> <color=#f92672>==</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>entityBinding</color><color=#f8f8f2>.</color><color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>pkeyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EntityResult</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>SK</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkGetType</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pkeyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>keyBinding</color><color=#f8f8f2>.</color><color=#a6e22e>objectToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>pkeyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>EntityResult</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>entityBinding</color><color=#f8f8f2>.</color><color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>pkeyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>),</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
  <color=#75715e>/* <!-- end JE only --> */</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>map</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sortedMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>SK</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>sortedMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>map</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StoredSortedMap</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyBinding</color><color=#f8f8f2>,</color> <color=#f8f8f2>entityBinding</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   *</color>
<color=#75715e>   * <!-- begin JE only --></color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   *     <!-- end JE only --></color>
<color=#75715e>   *     For internal use only.</color>
<color=#75715e>   *     <p>Used for obtaining the auto-commit txn config from the store, which overrides this</color>
<color=#75715e>   *     method to return it.</color>
<color=#75715e>   */</color>
  <color=#75715e>/* <!-- begin JE only --> */</color>
  <color=#66d9ef>protected</color>
  <color=#75715e>/* <!-- end JE only --> */</color>
  <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>getAutoCommitTransactionConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isUpdateAllowed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>