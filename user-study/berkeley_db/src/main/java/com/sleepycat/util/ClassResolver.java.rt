<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectStreamClass</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Implements policies for loading user-supplied classes. The {@link #resolveClass} method should be</color>
<color=#75715e> * used to load all user-supplied classes, and the {@link Stream} class should be used as a</color>
<color=#75715e> * replacement for ObjectInputStream to deserialize instances of user-supplied classes.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The ClassLoader specified as a param should be the one configured using</color>
<color=#75715e> * EnvironmentConfig.setClassLoader. This loader is used, if non-null. If the loader param is null,</color>
<color=#75715e> * but a non-null thread-context loader is available, the latter is used. If the loader param and</color>
<color=#75715e> * thread-context loader are both null, or if they fail to load a class by throwing</color>
<color=#75715e> * ClassNotFoundException, then the default Java mechanisms for determining the class loader are</color>
<color=#75715e> * used.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ClassResolver</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A specialized ObjectInputStream that supports use of a user-specified ClassLoader.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the loader param and thread-context loader are both null, of if they throw</color>
<color=#75715e>   * ClassNotFoundException, then ObjectInputStream.resolveClass is called, which has its own</color>
<color=#75715e>   * special rules for class loading.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Stream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ObjectInputStream</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Stream</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>classLoader</color> <color=#f92672>=</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>ObjectStreamClass</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>classLoader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#66d9ef>false</color> <color=#75715e>/*initialize*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>threadLoader</color> <color=#f92672>=</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getContextClassLoader</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadLoader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#66d9ef>false</color> <color=#75715e>/*initialize*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadLoader</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>firstException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A specialized Class.forName method that supports use of a user-specified ClassLoader.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the loader param and thread-context loader are both null, of if they throw</color>
<color=#75715e>   * ClassNotFoundException, then Class.forName is called and the "current loader" (the one used to</color>
<color=#75715e>   * load JE) will be used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param className the class name.</color>
<color=#75715e>   * @param classLoader the ClassLoader.</color>
<color=#75715e>   * @return the Class.</color>
<color=#75715e>   * @throws ClassNotFoundException if the class is not found.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Class</color> <color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>classLoader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*initialize*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>threadLoader</color> <color=#f92672>=</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getContextClassLoader</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadLoader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*initialize*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadLoader</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>firstException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>