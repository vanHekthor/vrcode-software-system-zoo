<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.util</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Static methods for reading and writing packed integers.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Most applications should use the classes in the {@link com.sleepycat.bind.tuple} package</color>
<color=#75715e> * rather than using this class directly.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="../bind/tuple/package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>PackedInteger</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** The maximum number of bytes needed to store an int value (5). */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_LENGTH</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The maximum number of bytes needed to store a long value (9). */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_LONG_LENGTH</color> <color=#f92672>=</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a packed integer at the given buffer offset and returns it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the integer that was read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>byteLen</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>+</color> <color=#ae81ff>119</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a packed long integer at the given buffer offset and returns it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the long integer that was read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>byteLen</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>7</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                  <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFFL</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>+</color> <color=#ae81ff>119</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be read by {@link #readInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Because the length is stored in the first byte, this method may be called with only the</color>
<color=#75715e>   * first byte of the packed integer in the given buffer. This method only accesses one byte at the</color>
<color=#75715e>   * given offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the number of bytes that would be read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getReadIntLength</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f92672>-</color><color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be read by {@link #readLong}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Because the length is stored in the first byte, this method may be called with only the</color>
<color=#75715e>   * first byte of the packed integer in the given buffer. This method only accesses one byte at the</color>
<color=#75715e>   * given offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the number of bytes that would be read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getReadLongLength</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The length is stored in the same way for int and long. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getReadIntLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a packed integer starting at the given buffer offset and returns the next offset to be</color>
<color=#75715e>   * written.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to write to.</color>
<color=#75715e>   * @param offset the offset in the buffer at which to start writing.</color>
<color=#75715e>   * @param value the integer to be written.</color>
<color=#75715e>   * @return the offset past the bytes written.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>offset</color><color=#f92672>++</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF00</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>120</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>120</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF0000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>121</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>122</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>122</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>123</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>123</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a packed long integer starting at the given buffer offset and returns the next offset to</color>
<color=#75715e>   * be written.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to write to.</color>
<color=#75715e>   * @param offset the offset in the buffer at which to start writing.</color>
<color=#75715e>   * @param value the long integer to be written.</color>
<color=#75715e>   * @return the offset past the bytes written.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>offset</color><color=#f92672>++</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFFFF00L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>120</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>120</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFF0000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>121</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFF000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>122</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>122</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFF00000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>123</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>123</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>32</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF0000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>124</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>124</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>40</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>125</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>125</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>48</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>126</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>126</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>56</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>127</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>127</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be written by {@link #writeInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the integer to be written.</color>
<color=#75715e>   * @return the number of bytes that would be used to write the given integer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getWriteIntLength</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF00</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF0000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be written by {@link #writeLong}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the long integer to be written.</color>
<color=#75715e>   * @return the number of bytes that would be used to write the given long integer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getWriteLongLength</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFFFF00L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFF0000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFF000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFF00000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF0000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted packed integer at the given buffer offset and returns it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the integer that was read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>readSortedInt</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>byteLen</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The first byte of the buf stores the length of the value part. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
    <color=#75715e>/* Adjust the byteLen to the real length of the value part. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672><</color> <color=#ae81ff>0x08</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#ae81ff>0x08</color> <color=#f92672>-</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>></color> <color=#ae81ff>0xf7</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>0xf7</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>127</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The following bytes on the buf store the value as a big endian</color>
<color=#75715e>     * integer. We extract the significant bytes from the buf and put them</color>
<color=#75715e>     * into the value in big endian order.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>negative</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * After get the adjusted value, we have to adjust it back to the</color>
<color=#75715e>     * original value.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>negative</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>-=</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>+=</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted packed long integer at the given buffer offset and returns it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the long integer that was read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>readSortedLong</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>byteLen</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The first byte of the buf stores the length of the value part. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
    <color=#75715e>/* Adjust the byteLen to the real length of the value part. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672><</color> <color=#ae81ff>0x08</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#ae81ff>0x08</color> <color=#f92672>-</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>></color> <color=#ae81ff>0xf7</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>0xf7</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>127</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The following bytes on the buf store the value as a big endian</color>
<color=#75715e>     * integer. We extract the significant bytes from the buf and put them</color>
<color=#75715e>     * into the value in big endian order.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>negative</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>7</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * After obtaining the adjusted value, we have to adjust it back to the</color>
<color=#75715e>     * original value.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>negative</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>-=</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>+=</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be read by {@link #readSortedInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Because the length is stored in the first byte, this method may be called with only the</color>
<color=#75715e>   * first byte of the packed integer in the given buffer. This method only accesses one byte at the</color>
<color=#75715e>   * given offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the number of bytes that would be read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getReadSortedIntLength</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The first byte of the buf stores the length of the value part. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672><</color> <color=#ae81ff>0x08</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>0x08</color> <color=#f92672>-</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>></color> <color=#ae81ff>0xf7</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>0xf7</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be read by {@link #readSortedLong}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Because the length is stored in the first byte, this method may be called with only the</color>
<color=#75715e>   * first byte of the packed integer in the given buffer. This method only accesses one byte at the</color>
<color=#75715e>   * given offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading.</color>
<color=#75715e>   * @return the number of bytes that would be read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getReadSortedLongLength</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The length is stored in the same way for int and long. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getReadSortedIntLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a packed sorted integer starting at the given buffer offset and returns the next offset</color>
<color=#75715e>   * to be written.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to write to.</color>
<color=#75715e>   * @param offset the offset in the buffer at which to start writing.</color>
<color=#75715e>   * @param value the integer to be written.</color>
<color=#75715e>   * @return the offset past the bytes written.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>writeSortedInt</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Values in the inclusive range [-119,120] are stored in a single</color>
<color=#75715e>     * byte. For values outside that range, the first byte stores the</color>
<color=#75715e>     * number of additional bytes. The additional bytes store</color>
<color=#75715e>     * (value + 119 for negative and value - 121 for positive) as an</color>
<color=#75715e>     * unsigned big endian integer.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>offset</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the value < -119, then first adjust the value by adding 119.</color>
<color=#75715e>       * Then the adjusted value is stored as an unsigned big endian</color>
<color=#75715e>       * integer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>value</color> <color=#f92672>+=</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Store the adjusted value as an unsigned big endian integer.</color>
<color=#75715e>       * For an negative integer, from left to right, the first</color>
<color=#75715e>       * significant byte is the byte which is not equal to 0xFF. Also</color>
<color=#75715e>       * please note that, because the adjusted value is stored in big</color>
<color=#75715e>       * endian integer, we extract the significant byte from left to</color>
<color=#75715e>       * right.</color>
<color=#75715e>       *</color>
<color=#75715e>       * In the left to right order, if the first byte of the adjusted</color>
<color=#75715e>       * value is a significant byte, it will be stored in the 2nd byte</color>
<color=#75715e>       * of the buf. Then we will look at the 2nd byte of the adjusted</color>
<color=#75715e>       * value to see if this byte is the significant byte, if yes, this</color>
<color=#75715e>       * byte will be stored in the 3rd byte of the buf, and the like.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00FFFFFF</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x0000FFFF</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x000000FF</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * valueLen is the length of the value part stored in buf. Because</color>
<color=#75715e>       * the first byte of buf is used to stored the length, we need</color>
<color=#75715e>       * to subtract one.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>valueLen</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>-</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The first byte stores the number of additional bytes. Here we</color>
<color=#75715e>       * store the result of 0x08 - valueLen, rather than directly store</color>
<color=#75715e>       * valueLen. The reason is to implement natural sort order for</color>
<color=#75715e>       * byte-by-byte comparison.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0x08</color> <color=#f92672>-</color> <color=#f8f8f2>valueLen</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>120</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the value > 120, then first adjust the value by subtracting</color>
<color=#75715e>       * 121. Then the adjusted value is stored as an unsigned big endian</color>
<color=#75715e>       * integer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>value</color> <color=#f92672>-=</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Store the adjusted value as an unsigned big endian integer.</color>
<color=#75715e>       * For a positive integer, from left to right, the first</color>
<color=#75715e>       * significant byte is the byte which is not equal to 0x00.</color>
<color=#75715e>       *</color>
<color=#75715e>       * In the left to right order, if the first byte of the adjusted</color>
<color=#75715e>       * value is a significant byte, it will be stored in the 2nd byte</color>
<color=#75715e>       * of the buf. Then we will look at the 2nd byte of the adjusted</color>
<color=#75715e>       * value to see if this byte is the significant byte, if yes, this</color>
<color=#75715e>       * byte will be stored in the 3rd byte of the buf, and the like.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF0000</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF00</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * valueLen is the length of the value part stored in buf. Because</color>
<color=#75715e>       * the first byte of buf is used to stored the length, we need to</color>
<color=#75715e>       * subtract one.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>valueLen</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>-</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The first byte stores the number of additional bytes. Here we</color>
<color=#75715e>       * store the result of 0xF7 + valueLen, rather than directly store</color>
<color=#75715e>       * valueLen. The reason is to implement natural sort order for</color>
<color=#75715e>       * byte-by-byte comparison.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0xF7</color> <color=#f92672>+</color> <color=#f8f8f2>valueLen</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If -119 <= value <= 120, only one byte is needed to store the</color>
<color=#75715e>       * value. The stored value is the original value plus 127.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>+</color> <color=#ae81ff>127</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a packed sorted long integer starting at the given buffer offset and returns the next</color>
<color=#75715e>   * offset to be written.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer to write to.</color>
<color=#75715e>   * @param offset the offset in the buffer at which to start writing.</color>
<color=#75715e>   * @param value the long integer to be written.</color>
<color=#75715e>   * @return the offset past the bytes written.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>writeSortedLong</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Values in the inclusive range [-119,120] are stored in a single</color>
<color=#75715e>     * byte. For values outside that range, the first byte stores the</color>
<color=#75715e>     * number of additional bytes. The additional bytes store</color>
<color=#75715e>     * (value + 119 for negative and value - 121 for positive) as an</color>
<color=#75715e>     * unsigned big endian integer.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>offset</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the value < -119, then first adjust the value by adding 119.</color>
<color=#75715e>       * Then the adjusted value is stored as an unsigned big endian</color>
<color=#75715e>       * integer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>value</color> <color=#f92672>+=</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Store the adjusted value as an unsigned big endian integer.</color>
<color=#75715e>       * For an negative integer, from left to right, the first</color>
<color=#75715e>       * significant byte is the byte which is not equal to 0xFF. Also</color>
<color=#75715e>       * please note that, because the adjusted value is stored in big</color>
<color=#75715e>       * endian integer, we extract the significant byte from left to</color>
<color=#75715e>       * right.</color>
<color=#75715e>       *</color>
<color=#75715e>       * In the left to right order, if the first byte of the adjusted</color>
<color=#75715e>       * value is a significant byte, it will be stored in the 2nd byte</color>
<color=#75715e>       * of the buf. Then we will look at the 2nd byte of the adjusted</color>
<color=#75715e>       * value to see if this byte is the significant byte, if yes, this</color>
<color=#75715e>       * byte will be stored in the 3rd byte of the buf, and the like.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00FFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>56</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x0000FFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>48</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x000000FFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>40</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00000000FFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>32</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x0000000000FFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x000000000000FFFFL</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00000000000000FFL</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * valueLen is the length of the value part stored in buf. Because</color>
<color=#75715e>       * the first byte of buf is used to stored the length, so we need</color>
<color=#75715e>       * to minus one.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>valueLen</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>-</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The first byte stores the number of additional bytes. Here we</color>
<color=#75715e>       * store the result of 0x08 - valueLen, rather than directly store</color>
<color=#75715e>       * valueLen. The reason is to implement nature sort order for</color>
<color=#75715e>       * byte-by-byte comparison.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0x08</color> <color=#f92672>-</color> <color=#f8f8f2>valueLen</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>120</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the value > 120, then first adjust the value by subtracting</color>
<color=#75715e>       * 119. Then the adjusted value is stored as an unsigned big endian</color>
<color=#75715e>       * integer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>value</color> <color=#f92672>-=</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Store the adjusted value as an unsigned big endian integer.</color>
<color=#75715e>       * For a positive integer, from left to right, the first</color>
<color=#75715e>       * significant byte is the byte which is not equal to 0x00.</color>
<color=#75715e>       *</color>
<color=#75715e>       * In the left to right order, if the first byte of the adjusted</color>
<color=#75715e>       * value is a significant byte, it will be stored in the 2nd byte</color>
<color=#75715e>       * of the buf. Then we will look at the 2nd byte of the adjusted</color>
<color=#75715e>       * value to see if this byte is the significant byte, if yes, this</color>
<color=#75715e>       * byte will be stored in the 3rd byte of the buf, and the like.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>56</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>48</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF0000000000L</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>40</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFF00000000L</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>32</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFF000000L</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFF0000L</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFFFF00L</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * valueLen is the length of the value part stored in buf. Because</color>
<color=#75715e>       * the first byte of buf is used to stored the length, so we need</color>
<color=#75715e>       * to minus one.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>valueLen</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>-</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The first byte stores the number of additional bytes. Here we</color>
<color=#75715e>       * store the result of 0xF7 + valueLen, rather than directly store</color>
<color=#75715e>       * valueLen. The reason is to implement nature sort order for</color>
<color=#75715e>       * byte-by-byte comparison.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0xF7</color> <color=#f92672>+</color> <color=#f8f8f2>valueLen</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If -119 <= value <= 120, only one byte is needed to store the</color>
<color=#75715e>       * value. The stored value is the original value adds 127.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>+</color> <color=#ae81ff>127</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be written by {@link #writeSortedInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the integer to be written.</color>
<color=#75715e>   * @return the number of bytes that would be used to write the given integer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getWriteSortedIntLength</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Adjust the value. */</color>
      <color=#f8f8f2>value</color> <color=#f92672>+=</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Find the left most significant byte of the adjusted value, and</color>
<color=#75715e>       * return the length accordingly.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x000000FF</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x0000FFFF</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00FFFFFF</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>120</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Adjust the value. */</color>
      <color=#f8f8f2>value</color> <color=#f92672>-=</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Find the left most significant byte of the adjusted value, and</color>
<color=#75715e>       * return the length accordingly.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF00</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF0000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If -119 <= value <= 120, only one byte is needed to store the</color>
<color=#75715e>       * value.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes that would be written by {@link #writeSortedLong}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the long integer to be written.</color>
<color=#75715e>   * @return the number of bytes that would be used to write the given long integer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getWriteSortedLongLength</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Adjust the value. */</color>
      <color=#f8f8f2>value</color> <color=#f92672>+=</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Find the left most significant byte of the adjusted value, and</color>
<color=#75715e>       * return the length accordingly.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00000000000000FFL</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x000000000000FFFFL</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x0000000000FFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00000000FFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x000000FFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x0000FFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>|</color> <color=#ae81ff>0x00FFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>120</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Adjust the value. */</color>
      <color=#f8f8f2>value</color> <color=#f92672>-=</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Find the left most significant byte of the adjusted value, and</color>
<color=#75715e>       * return the length accordingly.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFFFF00L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFFFF0000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFFF000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFF00000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF0000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00000000000000L</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If -119 <= value <= 120, only one byte is needed to store the</color>
<color=#75715e>       * value.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* <!-- begin JE only --> */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Reads a reverse-packed integer ending at the given buffer offset and returns it.</color>
<color=#75715e>   *     <p>To get the length of a reverse-packed integer before reading, call {@link</color>
<color=#75715e>   *     #getReadIntLength} passing the offset to the last byte.</color>
<color=#75715e>   * @param buf the buffer to read from.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start reading, which is the index of the last</color>
<color=#75715e>   *     byte of the integer in the buffer.</color>
<color=#75715e>   * @return the integer that was read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>readReverseInt</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>byteLen</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>value</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>+</color> <color=#ae81ff>119</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Writes a reverse-packed integer starting at the given buffer offset and returns the</color>
<color=#75715e>   *     next offset to be written.</color>
<color=#75715e>   *     <p>To get the length of a reverse-packed integer before writing, call {@link</color>
<color=#75715e>   *     #getWriteIntLength}.</color>
<color=#75715e>   * @param buf the buffer to write to.</color>
<color=#75715e>   * @param off the offset in the buffer at which to start writing, which will be the index of the</color>
<color=#75715e>   *     first byte of the integer in the buffer.</color>
<color=#75715e>   * @param value the integer to be written.</color>
<color=#75715e>   * @return the offset past the bytes written.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>writeReverseInt</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>negative</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nextOff</color> <color=#f92672>=</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>getWriteIntLength</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>></color> <color=#ae81ff>119</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>negative</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>-</color> <color=#ae81ff>119</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>byte1Off</color> <color=#f92672>=</color> <color=#f8f8f2>nextOff</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>byte1Off</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF00</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>120</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>120</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nextOff</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF0000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>121</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>121</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nextOff</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>122</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>122</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nextOff</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f92672>[--</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>byte1Off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>negative</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f92672>-</color><color=#ae81ff>123</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>123</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nextOff</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* <!-- end JE only --> */</color>
<color=#f8f8f2>}</color>