<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A replacement for ByteArrayInputStream that does not synchronize every byte read.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class extends {@link InputStream} and its <code>read()</code> methods allow it to be used</color>
<color=#75715e> * as a standard input stream. In addition, it provides <code>readFast()</code> methods that are not</color>
<color=#75715e> * declared to throw <code>IOException</code>. <code>IOException</code> is never thrown by this</color>
<color=#75715e> * class.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>FastInputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>mark</color><color=#f8f8f2>;</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an input stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer the data to read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FastInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an input stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer the data to read.</color>
<color=#75715e>   * @param offset the byte offset at which to begin reading.</color>
<color=#75715e>   * @param length the number of bytes to read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FastInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- begin ByteArrayInputStream compatible methods ---</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>available</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>markSupported</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>mark</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>readLimit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>mark</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>mark</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>myCount</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>myCount</color> <color=#f92672>+</color> <color=#f8f8f2>off</color> <color=#f92672>></color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>myCount</color> <color=#f92672>=</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>skipFast</color><color=#f8f8f2>(</color><color=#f8f8f2>myCount</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>myCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>(</color><color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>(</color><color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- end ByteArrayInputStream compatible methods ---</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Equivalent to <code>skip()</code> but takes an int parameter instead of a long, and does not</color>
<color=#75715e>   * check whether the count given is larger than the number of remaining bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param count the number of bytes to skip.</color>
<color=#75715e>   * @see #skip(long)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>skipFast</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Equivalent to <code>read()</code> but does not throw <code>IOException</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the next byte of data, or -1 if at the end of the stream.</color>
<color=#75715e>   * @see #read()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readFast</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>off</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Equivalent to <code>read(byte[])</code> but does not throw <code>IOException</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param toBuf the buffer into which the data is read.</color>
<color=#75715e>   * @return the number of bytes read, or -1 if at the end of the stream.</color>
<color=#75715e>   * @see #read(byte[])</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readFast</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>(</color><color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Equivalent to <code>read(byte[],int,int)</code> but does not throw <code>IOException</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param toBuf the buffer into which the data is read.</color>
<color=#75715e>   * @param offset the start offset in array at which the data is written.</color>
<color=#75715e>   * @param length the maximum number of bytes to read.</color>
<color=#75715e>   * @return the number of bytes read, or -1 if at the end of the stream.</color>
<color=#75715e>   * @see #read(byte[],int,int)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readFast</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>avail</color> <color=#f92672>=</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>avail</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>></color> <color=#f8f8f2>avail</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>avail</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the underlying data being read.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the underlying data.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getBufferBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the offset at which data is being read from the buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the offset at which data is being read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getBufferOffset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the end of the buffer being read.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the end of the buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getBufferLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>