<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.UnsupportedEncodingException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A replacement for ByteArrayOutputStream that does not synchronize every byte read.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class extends {@link OutputStream} and its <code>write()</code> methods allow it to be</color>
<color=#75715e> * used as a standard output stream. In addition, it provides <code>writeFast()</code> methods that</color>
<color=#75715e> * are not declared to throw <code>IOException</code>. <code>IOException</code> is never thrown by</color>
<color=#75715e> * this class.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>FastOutputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The default initial size of the buffer if no initialSize parameter is specified. This constant</color>
<color=#75715e>   * is 100 bytes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_INIT_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The default amount that the buffer is increased when it is full. This constant is zero, which</color>
<color=#75715e>   * means to double the current buffer size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_BUMP_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>bumpLen</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * We can return the same byte[] for 0 length arrays.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ZERO_LENGTH_BYTE_ARRAY</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates an output stream with default sizes. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FastOutputStream</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>initBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>DEFAULT_INIT_SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEFAULT_BUMP_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an output stream with a default bump size and a given initial size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param initialSize the initial size of the buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FastOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>initialSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>initBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>initialSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEFAULT_BUMP_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an output stream with a given bump size and initial size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param initialSize the initial size of the buffer.</color>
<color=#75715e>   * @param bumpSize the amount to increment the buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FastOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>initialSize</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bumpSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>initBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>initialSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>bumpSize</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an output stream with a given initial buffer and a default bump size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer the initial buffer; will be owned by this object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FastOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>bumpLen</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_BUMP_SIZE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an output stream with a given initial buffer and a given bump size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer the initial buffer; will be owned by this object.</color>
<color=#75715e>   * @param bumpSize the amount to increment the buffer. If zero (the default), the current buffer</color>
<color=#75715e>   *     size will be doubled when the buffer is full.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FastOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bumpSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>bumpLen</color> <color=#f92672>=</color> <color=#f8f8f2>bumpSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initBuffer</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>bufferSize</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bumplength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>bufferSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bumpLen</color> <color=#f92672>=</color> <color=#f8f8f2>bumplength</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- begin ByteArrayOutputStream compatible methods ---</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>fromBuf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>fromBuf</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>fromBuf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>fromBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>encoding</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>UnsupportedEncodingException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>encoding</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>toByteArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>toBuf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- end ByteArrayOutputStream compatible methods ---</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Equivalent to <code>write(int)</code> but does not throw <code>IOException</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b the byte to write.</color>
<color=#75715e>   * @see #write(int)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFast</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>></color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>bump</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Equivalent to <code>write(byte[])</code> but does not throw <code>IOException</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fromBuf the buffer to write.</color>
<color=#75715e>   * @see #write(byte[])</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFast</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>fromBuf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>needed</color> <color=#f92672>=</color> <color=#f8f8f2>len</color> <color=#f92672>+</color> <color=#f8f8f2>fromBuf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needed</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>bump</color><color=#f8f8f2>(</color><color=#f8f8f2>needed</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>fromBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>fromBuf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>len</color> <color=#f92672>+=</color> <color=#f8f8f2>fromBuf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Equivalent to <code>write(byte[],int,int)</code> but does not throw <code>IOException</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fromBuf the buffer to write.</color>
<color=#75715e>   * @param offset the start offset in the buffer.</color>
<color=#75715e>   * @param length the number of bytes to write.</color>
<color=#75715e>   * @see #write(byte[],int,int)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFast</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>fromBuf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>needed</color> <color=#f92672>=</color> <color=#f8f8f2>len</color> <color=#f92672>+</color> <color=#f8f8f2>length</color> <color=#f92672>-</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needed</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>bump</color><color=#f8f8f2>(</color><color=#f8f8f2>needed</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>fromBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>len</color> <color=#f92672>+=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the buffer owned by this object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getBufferBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the offset of the internal buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return always zero currently.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getBufferOffset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the length used in the internal buffer, i.e., the offset at which data will be written</color>
<color=#75715e>   * next.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the buffer length.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getBufferLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ensure that at least the given number of bytes are available in the internal buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param sizeNeeded the number of bytes desired.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>makeSpace</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>sizeNeeded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>needed</color> <color=#f92672>=</color> <color=#f8f8f2>len</color> <color=#f92672>+</color> <color=#f8f8f2>sizeNeeded</color> <color=#f92672>-</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needed</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>bump</color><color=#f8f8f2>(</color><color=#f8f8f2>needed</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Skip the given number of bytes in the buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param sizeAdded number of bytes to skip.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>sizeAdded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>len</color> <color=#f92672>+=</color> <color=#f8f8f2>sizeAdded</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>bump</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>needed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Double the buffer if the bumpLen is zero. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>bump</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpLen</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>bumpLen</color> <color=#f8f8f2>:</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>toBuf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#f8f8f2>needed</color> <color=#f92672>+</color> <color=#f8f8f2>bump</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>toBuf</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>