<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.util</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Unwraps nested exceptions by calling the {@link ExceptionWrapper#getCause()} method for</color>
<color=#75715e> * exceptions that implement the {@link ExceptionWrapper} interface. Does not currently support the</color>
<color=#75715e> * Java 1.4 <code>Throwable.getCause()</code> method.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ExceptionUnwrapper</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Unwraps an Exception and returns the underlying Exception, or throws an Error if the underlying</color>
<color=#75715e>   * Throwable is an Error.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param e is the Exception to unwrap.</color>
<color=#75715e>   * @return the underlying Exception.</color>
<color=#75715e>   * @throws Error if the underlying Throwable is an Error.</color>
<color=#75715e>   * @throws IllegalArgumentException if the underlying Throwable is not an Exception or an Error.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Exception</color> <color=#a6e22e>unwrap</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>unwrapAny</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Error</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color><color=#f8f8f2>)</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Not Exception or Error: "</color> <color=#f92672>+</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Unwraps an Exception and returns the underlying Throwable.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param e is the Exception to unwrap.</color>
<color=#75715e>   * @return the underlying Throwable.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Throwable</color> <color=#a6e22e>unwrapAny</color><color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ExceptionWrapper</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Throwable</color> <color=#f8f8f2>e2</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>ExceptionWrapper</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>).</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e2</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>e2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>