<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.util</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * UTF operations with more flexibility than is provided by DataInput and DataOutput.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>UtfOps</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>EMPTY_BYTES</color> <color=#f92672>=</color> <color=#f8f8f2>{};</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EMPTY_STRING</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a null terminated UTF string, not including the terminator.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param bytes the data containing the UTF string.</color>
<color=#75715e>   * @param offset the beginning of the string the measure.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if no zero terminator is found.</color>
<color=#75715e>   * @return the number of bytes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getZeroTerminatedByteLength</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>len</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of the UTF string that would be created by converting the given</color>
<color=#75715e>   * characters to UTF.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars the characters that would be converted.</color>
<color=#75715e>   * @return the byte length of the equivalent UTF data.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getByteLength</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of the UTF string that would be created by converting the given</color>
<color=#75715e>   * characters to UTF.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars the characters that would be converted.</color>
<color=#75715e>   * @param offset the first character to be converted.</color>
<color=#75715e>   * @param length the number of characters to be converted.</color>
<color=#75715e>   * @return the byte length of the equivalent UTF data.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getByteLength</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>length</color> <color=#f92672>+=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>=</color> <color=#ae81ff>0x0001</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#ae81ff>0x007F</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>len</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>0x07FF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>len</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>len</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of characters represented by the given UTF string.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param bytes the UTF string.</color>
<color=#75715e>   * @return the number of characters.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if a UTF character sequence at the end of the data is not</color>
<color=#75715e>   *     complete.</color>
<color=#75715e>   * @throws IllegalArgumentException if an illegal UTF sequence is encountered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getCharLength</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getCharLength</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of characters represented by the given UTF string.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param bytes the data containing the UTF string.</color>
<color=#75715e>   * @param offset the first byte to be converted.</color>
<color=#75715e>   * @param length the number of byte to be converted.</color>
<color=#75715e>   * @return the number of characters.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if a UTF character sequence at the end of the data is not</color>
<color=#75715e>   *     complete.</color>
<color=#75715e>   * @throws IllegalArgumentException if an illegal UTF sequence is encountered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getCharLength</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>charCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>length</color> <color=#f92672>+=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>((</color><color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>4</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>5</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>6</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>7</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>offset</color><color=#f92672>++</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>12</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>13</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>offset</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>14</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>offset</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>charCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>charCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts byte arrays into character arrays.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param bytes the source byte data to convert</color>
<color=#75715e>   * @param byteOffset the offset into the byte array at which to start the conversion</color>
<color=#75715e>   * @param chars the destination array</color>
<color=#75715e>   * @param charOffset the offset into chars at which to begin the copy</color>
<color=#75715e>   * @param len the amount of information to copy into chars</color>
<color=#75715e>   * @param isByteLen if true then len is a measure of bytes, otherwise len is a measure of</color>
<color=#75715e>   *     characters</color>
<color=#75715e>   * @return the byte offset after converting the bytes.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if a UTF character sequence at the end of the data is not</color>
<color=#75715e>   *     complete.</color>
<color=#75715e>   * @throws IllegalArgumentException if an illegal UTF sequence is encountered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>bytesToChars</color><color=#f8f8f2>(</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>byteOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>charOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isByteLen</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>char1</color><color=#f8f8f2>,</color> <color=#f8f8f2>char2</color><color=#f8f8f2>,</color> <color=#f8f8f2>char3</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>len</color> <color=#f92672>+=</color> <color=#f8f8f2>isByteLen</color> <color=#f92672>?</color> <color=#f8f8f2>byteOffset</color> <color=#f8f8f2>:</color> <color=#f8f8f2>charOffset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>isByteLen</color> <color=#f92672>?</color> <color=#f8f8f2>byteOffset</color> <color=#f8f8f2>:</color> <color=#f8f8f2>charOffset</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>char1</color> <color=#f92672>=</color> <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>((</color><color=#f8f8f2>char1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>4</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>5</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>6</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>7</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>charOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>char1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>12</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>13</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>char2</color> <color=#f92672>=</color> <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>char2</color> <color=#f92672>&</color> <color=#ae81ff>0xC0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>charOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>char1</color> <color=#f92672>&</color> <color=#ae81ff>0x1F</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>char2</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>14</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>char2</color> <color=#f92672>=</color> <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>char3</color> <color=#f92672>=</color> <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>char2</color> <color=#f92672>&</color> <color=#ae81ff>0xC0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>char3</color> <color=#f92672>&</color> <color=#ae81ff>0xC0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>))</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>charOffset</color><color=#f92672>++]</color> <color=#f92672>=</color>
              <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>char1</color> <color=#f92672>&</color> <color=#ae81ff>0x0F</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>char2</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>char3</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>byteOffset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts character arrays into byte arrays.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars the source character data to convert</color>
<color=#75715e>   * @param charOffset the offset into the character array at which to start the conversion</color>
<color=#75715e>   * @param bytes the destination array</color>
<color=#75715e>   * @param byteOffset the offset into bytes at which to begin the copy</color>
<color=#75715e>   * @param charLength the length of characters to copy into bytes</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>charsToBytes</color><color=#f8f8f2>(</color>
      <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>charOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>byteOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>charLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>charLength</color> <color=#f92672>+=</color> <color=#f8f8f2>charOffset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>charOffset</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>charLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>=</color> <color=#ae81ff>0x0001</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#ae81ff>0x007F</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>0x07FF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0xE0</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x0F</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0xC0</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x1F</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>byteOffset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts byte arrays into strings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param bytes the source byte data to convert</color>
<color=#75715e>   * @param offset the offset into the byte array at which to start the conversion</color>
<color=#75715e>   * @param length the number of bytes to be converted.</color>
<color=#75715e>   * @return the string.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if a UTF character sequence at the end of the data is not</color>
<color=#75715e>   *     complete.</color>
<color=#75715e>   * @throws IllegalArgumentException if an illegal UTF sequence is encountered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>bytesToString</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>EMPTY_STRING</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>charLen</color> <color=#f92672>=</color> <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>getCharLength</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>charLen</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>bytesToChars</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>charLen</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts strings to byte arrays.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param string the string to convert.</color>
<color=#75715e>   * @return the UTF byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>stringToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>string</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>EMPTY_BYTES</color><color=#f8f8f2>;</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>getByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>charsToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>