<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.serial</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.FastOutputStream</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A base class for serial bindings creators that provides control over the allocation of the output</color>
<color=#75715e> * buffer.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Serial bindings append data to a {@link FastOutputStream} instance. This object has a byte</color>
<color=#75715e> * array buffer that is resized when it is full. The reallocation of this buffer can be a</color>
<color=#75715e> * performance factor for some applications using large objects. To manage this issue, the {@link</color>
<color=#75715e> * #setSerialBufferSize} method may be used to control the initial size of the buffer, and the</color>
<color=#75715e> * {@link #getSerialOutput} method may be overridden by subclasses to take over creation of the</color>
<color=#75715e> * FastOutputStream object.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="SerialBinding.html#evolution">Class Evolution</a></color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SerialBase</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>outputBufferSize</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initializes the initial output buffer size to zero.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unless {@link #setSerialBufferSize} is called, the default {@link</color>
<color=#75715e>   * FastOutputStream#DEFAULT_INIT_SIZE} size will be used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SerialBase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>outputBufferSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the initial byte size of the output buffer that is allocated by the default implementation</color>
<color=#75715e>   * of {@link #getSerialOutput}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is zero (the default), the default {@link</color>
<color=#75715e>   * FastOutputStream#DEFAULT_INIT_SIZE} size is used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param byteSize the initial byte size of the output buffer, or zero to use the default size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSerialBufferSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>byteSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>outputBufferSize</color> <color=#f92672>=</color> <color=#f8f8f2>byteSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the initial byte size of the output buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the initial byte size of the output buffer.</color>
<color=#75715e>   * @see #setSerialBufferSize</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSerialBufferSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>outputBufferSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an empty SerialOutput instance that will be used by the serial binding or key creator.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default implementation of this method creates a new SerialOutput with an initial buffer</color>
<color=#75715e>   * size that can be changed using the {@link #setSerialBufferSize} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be overridden to return a FastOutputStream instance. For example, an</color>
<color=#75715e>   * instance per thread could be created and returned by this method. If a FastOutputStream</color>
<color=#75715e>   * instance is reused, be sure to call its {@link FastOutputStream#reset} method before each use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param object is the object to be written to the serial output, and may be used by subclasses</color>
<color=#75715e>   *     to determine the size of the output buffer.</color>
<color=#75715e>   * @return an empty FastOutputStream instance.</color>
<color=#75715e>   * @see #setSerialBufferSize</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>FastOutputStream</color> <color=#a6e22e>getSerialOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>object</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>byteSize</color> <color=#f92672>=</color> <color=#f8f8f2>getSerialBufferSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteSize</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FastOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>byteSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FastOutputStream</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>