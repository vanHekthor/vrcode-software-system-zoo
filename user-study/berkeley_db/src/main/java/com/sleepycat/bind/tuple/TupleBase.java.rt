<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.tuple</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A base class for tuple bindings and tuple key creators that provides control over the allocation</color>
<color=#75715e> * of the output buffer.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Tuple bindings and key creators append data to a {@link TupleOutput} instance, which is also a</color>
<color=#75715e> * {@link com.sleepycat.util.FastOutputStream} instance. This object has a byte array buffer that is</color>
<color=#75715e> * resized when it is full. The reallocation of this buffer can be a performance factor for some</color>
<color=#75715e> * applications using large objects. To manage this issue, the {@link #setTupleBufferSize} method</color>
<color=#75715e> * may be used to control the initial size of the buffer, and the {@link #getTupleOutput} method may</color>
<color=#75715e> * be overridden by subclasses to take over creation of the TupleOutput object.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TupleBase</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>outputBufferSize</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initializes the initial output buffer size to zero.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unless {@link #setTupleBufferSize} is called, the default {@link</color>
<color=#75715e>   * com.sleepycat.util.FastOutputStream#DEFAULT_INIT_SIZE} size will be used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleBase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>outputBufferSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the initial byte size of the output buffer that is allocated by the default implementation</color>
<color=#75715e>   * of {@link #getTupleOutput}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is zero (the default), the default {@link</color>
<color=#75715e>   * com.sleepycat.util.FastOutputStream#DEFAULT_INIT_SIZE} size is used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param byteSize the initial byte size of the output buffer, or zero to use the default size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTupleBufferSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>byteSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>outputBufferSize</color> <color=#f92672>=</color> <color=#f8f8f2>byteSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the initial byte size of the output buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the initial byte size of the output buffer.</color>
<color=#75715e>   * @see #setTupleBufferSize</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTupleBufferSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>outputBufferSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an empty TupleOutput instance that will be used by the tuple binding or key creator.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default implementation of this method creates a new TupleOutput with an initial buffer</color>
<color=#75715e>   * size that can be changed using the {@link #setTupleBufferSize} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be overridden to return a TupleOutput instance. For example, an instance per</color>
<color=#75715e>   * thread could be created and returned by this method. If a TupleOutput instance is reused, be</color>
<color=#75715e>   * sure to call its {@link com.sleepycat.util.FastOutputStream#reset} method before each use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param object is the object to be written to the tuple output, and may be used by subclasses to</color>
<color=#75715e>   *     determine the size of the output buffer.</color>
<color=#75715e>   * @return an empty TupleOutput instance.</color>
<color=#75715e>   * @see #setTupleBufferSize</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>getTupleOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>object</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>byteSize</color> <color=#f92672>=</color> <color=#f8f8f2>getTupleBufferSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteSize</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TupleOutput</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>byteSize</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TupleOutput</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility method to set the data in a entry buffer to the data in a tuple output object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param output is the source tuple output object.</color>
<color=#75715e>   * @param entry is the destination entry buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>outputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferLength</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility method to set the data in a entry buffer to the data in a tuple input object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param input is the source tuple input object.</color>
<color=#75715e>   * @param entry is the destination entry buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>inputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferLength</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility method to create a new tuple input object for reading the data from a given buffer. If</color>
<color=#75715e>   * an existing input is reused, it is reset before returning it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entry is the source entry buffer.</color>
<color=#75715e>   * @return the new tuple input object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>TupleInput</color> <color=#a6e22e>entryToInput</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TupleInput</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility method for use by bindings to create a tuple output object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a new tuple output object.</color>
<color=#75715e>   * @deprecated replaced by {@link #getTupleOutput}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>newOutput</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TupleOutput</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility method for use by bindings to create a tuple output object with a specific starting</color>
<color=#75715e>   * size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer is the byte array to use as the buffer.</color>
<color=#75715e>   * @return a new tuple output object.</color>
<color=#75715e>   * @deprecated replaced by {@link #getTupleOutput}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>newOutput</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TupleOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>