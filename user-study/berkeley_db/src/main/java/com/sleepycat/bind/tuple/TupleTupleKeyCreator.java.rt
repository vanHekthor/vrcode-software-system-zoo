<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.tuple</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ForeignKeyNullifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.SecondaryDatabase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.SecondaryKeyCreator</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An abstract key creator that uses a tuple key and a tuple data entry. This class takes care of</color>
<color=#75715e> * converting the key and data entry to/from {@link TupleInput} and {@link TupleOutput} objects. The</color>
<color=#75715e> * following abstract method must be implemented by a concrete subclass to create the index key</color>
<color=#75715e> * using these objects</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #createSecondaryKey(TupleInput,TupleInput,TupleOutput)}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If {@link com.sleepycat.je.ForeignKeyDeleteAction#NULLIFY} was specified when opening the</color>
<color=#75715e> * secondary database, the following method must be overridden to nullify the foreign index key. If</color>
<color=#75715e> * NULLIFY was not specified, this method need not be overridden.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #nullifyForeignKey(TupleInput,TupleOutput)}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If {@link com.sleepycat.je.ForeignKeyDeleteAction#NULLIFY} was specified when creating the</color>
<color=#75715e> * secondary, this method is called when the entity for this foreign key is deleted. If NULLIFY was</color>
<color=#75715e> * not specified, this method will not be called and may always return false.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>TupleTupleKeyCreator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>TupleBase</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color>
    <color=#66d9ef>implements</color> <color=#f8f8f2>SecondaryKeyCreator</color><color=#f8f8f2>,</color> <color=#f8f8f2>ForeignKeyNullifier</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Creates a tuple-tuple key creator. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleTupleKeyCreator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>primaryKeyEntry</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>indexKeyEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#f8f8f2>getTupleOutput</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>primaryKeyInput</color> <color=#f92672>=</color> <color=#f8f8f2>entryToInput</color><color=#f8f8f2>(</color><color=#f8f8f2>primaryKeyEntry</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>dataInput</color> <color=#f92672>=</color> <color=#f8f8f2>entryToInput</color><color=#f8f8f2>(</color><color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>createSecondaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>primaryKeyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>outputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>indexKeyEntry</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#f8f8f2>getTupleOutput</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>entryToInput</color><color=#f8f8f2>(</color><color=#f8f8f2>dataEntry</color><color=#f8f8f2>),</color> <color=#f8f8f2>output</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>outputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates the index key from primary key tuple and data tuple.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param primaryKeyInput is the {@link TupleInput} for the primary key entry.</color>
<color=#75715e>   * @param dataInput is the {@link TupleInput} for the data entry.</color>
<color=#75715e>   * @param indexKeyOutput is the destination index key tuple.</color>
<color=#75715e>   * @return true if a key was created, or false to indicate that the key is not present.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>primaryKeyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>indexKeyOutput</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Clears the index key in the tuple data entry. The dataInput should be read and then written to</color>
<color=#75715e>   * the dataOutput, clearing the index key in the process.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The secondary key should be output or removed by this method such that {@link</color>
<color=#75715e>   * #createSecondaryKey} will return false. Other fields in the data object should remain</color>
<color=#75715e>   * unchanged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dataInput is the {@link TupleInput} for the data entry.</color>
<color=#75715e>   * @param dataOutput is the destination {@link TupleOutput}.</color>
<color=#75715e>   * @return true if the key was cleared, or false to indicate that the key is not present and no</color>
<color=#75715e>   *     change is necessary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleInput</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>dataOutput</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>