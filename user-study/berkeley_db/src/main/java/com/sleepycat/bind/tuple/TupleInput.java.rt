<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.tuple</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.FastInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.PackedInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.UtfOps</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.math.BigDecimal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.math.BigInteger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An <code>InputStream</code> with <code>DataInput</code>-like methods for reading tuple fields. It</color>
<color=#75715e> * is used by <code>TupleBinding</code>.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class has many methods that have the same signatures as methods in the {@link</color>
<color=#75715e> * java.io.DataInput} interface. The reason this class does not implement {@link java.io.DataInput}</color>
<color=#75715e> * is because it would break the interface contract for those methods because of data format</color>
<color=#75715e> * differences.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="package-summary.html#formats">Tuple Formats</a></color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TupleInput</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FastInputStream</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple input object for reading a byte array of tuple data. A reference to the byte</color>
<color=#75715e>   * array will be kept by this object (it will not be copied) and therefore the byte array should</color>
<color=#75715e>   * not be modified while this object is in use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer is the byte array to be read and should contain data in tuple format.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleInput</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple input object for reading a byte array of tuple data at a given offset for a</color>
<color=#75715e>   * given length. A reference to the byte array will be kept by this object (it will not be copied)</color>
<color=#75715e>   * and therefore the byte array should not be modified while this object is in use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer is the byte array to be read and should contain data in tuple format.</color>
<color=#75715e>   * @param offset is the byte offset at which to begin reading.</color>
<color=#75715e>   * @param length is the number of bytes to be read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleInput</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple input object from the data contained in a tuple output object. A reference to</color>
<color=#75715e>   * the tuple output's byte array will be kept by this object (it will not be copied) and therefore</color>
<color=#75715e>   * the tuple output object should not be modified while this object is in use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param output is the tuple output object containing the data to be read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleInput</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferLength</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- begin DataInput compatible methods ---</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a null-terminated UTF string from the data buffer and converts the data from UTF to</color>
<color=#75715e>   * Unicode. Reads values that were written using {@link TupleOutput#writeString(String)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the converted string.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if no null terminating byte is found in the buffer.</color>
<color=#75715e>   * @throws IllegalArgumentException malformed UTF data is encountered.</color>
<color=#75715e>   * @see <a href="package-summary.html#stringFormats">String Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#a6e22e>readString</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>myBuf</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>myOff</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>available</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>2</color>
        <color=#f92672>&&</color> <color=#f8f8f2>myBuf</color><color=#f92672>[</color><color=#f8f8f2>myOff</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>TupleOutput</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_STRING_UTF_VALUE</color>
        <color=#f92672>&&</color> <color=#f8f8f2>myBuf</color><color=#f92672>[</color><color=#f8f8f2>myOff</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>byteLen</color> <color=#f92672>=</color> <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>getZeroTerminatedByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>myBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>myOff</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>byteLen</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>bytesToString</color><color=#f8f8f2>(</color><color=#f8f8f2>myBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>myOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>byteLen</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a char (two byte) unsigned value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeChar}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#a6e22e>readChar</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a boolean (one byte) unsigned value from the buffer and returns true if it is non-zero</color>
<color=#75715e>   * and false if it is zero. Reads values that were written using {@link TupleOutput#writeBoolean}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>readBoolean</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed byte (one byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeByte}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#a6e22e>readByte</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedByte</color><color=#f8f8f2>()</color> <color=#f92672>^</color> <color=#ae81ff>0x80</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed short (two byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeShort}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#a6e22e>readShort</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>()</color> <color=#f92672>^</color> <color=#ae81ff>0x8000</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed int (four byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readInt</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedInt</color><color=#f8f8f2>()</color> <color=#f92672>^</color> <color=#ae81ff>0x80000000</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed long (eight byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeLong}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>readLong</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>readUnsignedLong</color><color=#f8f8f2>()</color> <color=#f92672>^</color> <color=#ae81ff>0x8000000000000000L</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsorted float (four byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeFloat}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#a6e22e>readFloat</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>intBitsToFloat</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>readUnsignedInt</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsorted double (eight byte) value from the buffer. Reads values that were written</color>
<color=#75715e>   * using {@link TupleOutput#writeDouble}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>readDouble</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>longBitsToDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedLong</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted float (four byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeSortedFloat}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#a6e22e>readSortedFloat</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>readUnsignedInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>val</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0x80000000</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xffffffff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>intBitsToFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted double (eight byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeSortedDouble}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>readSortedDouble</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedLong</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>val</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0x8000000000000000L</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xffffffffffffffffL</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>longBitsToDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsigned byte (one byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeUnsignedByte}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readUnsignedByte</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsigned short (two byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeUnsignedShort}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c1</color> <color=#f92672>|</color> <color=#f8f8f2>c2</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>c1</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>c2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- end DataInput compatible methods ---</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsigned int (four byte) value from the buffer. Reads values that were written using</color>
<color=#75715e>   * {@link TupleOutput#writeUnsignedInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c3</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c4</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c1</color> <color=#f92672>|</color> <color=#f8f8f2>c2</color> <color=#f92672>|</color> <color=#f8f8f2>c3</color> <color=#f92672>|</color> <color=#f8f8f2>c4</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>c1</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c2</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c3</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>c4</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is private since an unsigned long cannot be treated as such in Java, nor converted</color>
<color=#75715e>   * to a BigInteger of the same value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>readUnsignedLong</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c3</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c4</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c5</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c6</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c7</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>c8</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c1</color> <color=#f92672>|</color> <color=#f8f8f2>c2</color> <color=#f92672>|</color> <color=#f8f8f2>c3</color> <color=#f92672>|</color> <color=#f8f8f2>c4</color> <color=#f92672>|</color> <color=#f8f8f2>c5</color> <color=#f92672>|</color> <color=#f8f8f2>c6</color> <color=#f92672>|</color> <color=#f8f8f2>c7</color> <color=#f92672>|</color> <color=#f8f8f2>c8</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>c1</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c2</color> <color=#f92672><<</color> <color=#ae81ff>48</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c3</color> <color=#f92672><<</color> <color=#ae81ff>40</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c4</color> <color=#f92672><<</color> <color=#ae81ff>32</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c5</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c6</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c7</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>c8</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the specified number of bytes from the buffer, converting each unsigned byte value to a</color>
<color=#75715e>   * character of the resulting string. Reads values that were written using {@link</color>
<color=#75715e>   * TupleOutput#writeBytes}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param length is the number of bytes to be read.</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#a6e22e>readBytes</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the specified number of characters from the buffer, converting each two byte unsigned</color>
<color=#75715e>   * value to a character of the resulting string. Reads values that were written using {@link</color>
<color=#75715e>   * TupleOutput#writeChars}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param length is the number of characters to be read.</color>
<color=#75715e>   * @return the value read from the buffer.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#a6e22e>readChars</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>readChar</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the specified number of bytes from the buffer, converting each unsigned byte value to a</color>
<color=#75715e>   * character of the resulting array. Reads values that were written using {@link</color>
<color=#75715e>   * TupleOutput#writeBytes}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars is the array to receive the data and whose length is used to determine the number</color>
<color=#75715e>   *     of bytes to be read.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readBytes</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>readFast</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the specified number of characters from the buffer, converting each two byte unsigned</color>
<color=#75715e>   * value to a character of the resulting array. Reads values that were written using {@link</color>
<color=#75715e>   * TupleOutput#writeChars}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars is the array to receive the data and whose length is used to determine the number</color>
<color=#75715e>   *     of characters to be read.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if not enough bytes are available in the buffer.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readChars</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readChar</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the specified number of UTF characters string from the data buffer and converts the data</color>
<color=#75715e>   * from UTF to Unicode. Reads values that were written using {@link</color>
<color=#75715e>   * TupleOutput#writeString(char[])}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param length is the number of characters to be read.</color>
<color=#75715e>   * @return the converted string.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if no null terminating byte is found in the buffer.</color>
<color=#75715e>   * @throws IllegalArgumentException malformed UTF data is encountered.</color>
<color=#75715e>   * @see <a href="package-summary.html#stringFormats">String Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#a6e22e>readString</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>readString</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the specified number of UTF characters string from the data buffer and converts the data</color>
<color=#75715e>   * from UTF to Unicode. Reads values that were written using {@link</color>
<color=#75715e>   * TupleOutput#writeString(char[])}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars is the array to receive the data and whose length is used to determine the number</color>
<color=#75715e>   *     of characters to be read.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if no null terminating byte is found in the buffer.</color>
<color=#75715e>   * @throws IllegalArgumentException malformed UTF data is encountered.</color>
<color=#75715e>   * @see <a href="package-summary.html#stringFormats">String Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>readString</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>bytesToChars</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a null-terminated UTF string in the data buffer, including the</color>
<color=#75715e>   * terminator. Used with string values that were written using {@link</color>
<color=#75715e>   * TupleOutput#writeString(String)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if no null terminating byte is found in the buffer.</color>
<color=#75715e>   * @throws IllegalArgumentException malformed UTF data is encountered.</color>
<color=#75715e>   * @see <a href="package-summary.html#stringFormats">String Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getStringByteLength</color><color=#f8f8f2>()</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>available</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>2</color> <color=#f92672>&&</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>TupleOutput</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_STRING_UTF_VALUE</color> <color=#f92672>&&</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>getZeroTerminatedByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsorted packed integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the int value.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readPackedInt</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadIntLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a packed integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getPackedIntByteLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadIntLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsorted packed long integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the long value.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>readPackedLong</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadLongLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a packed long integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getPackedLongByteLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadLongLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted packed integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the int value.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>readSortedPackedInt</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadSortedIntLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>readSortedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a sorted packed integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getSortedPackedIntByteLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadSortedIntLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted packed long integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the long value.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>readSortedPackedLong</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadSortedLongLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>readSortedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a sorted packed long integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getSortedPackedLongByteLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>getReadSortedLongLength</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a {@code BigInteger}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the non-null BigInteger value.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BigInteger</color> <color=#a6e22e>readBigInteger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>a</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>readFast</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BigInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a {@code BigInteger}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getBigIntegerByteLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>saveOff</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>saveOff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>len</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsorted {@code BigDecimal}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the non-null BigDecimal value.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BigDecimal</color> <color=#a6e22e>readBigDecimal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#f8f8f2>readPackedInt</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>readPackedInt</color><color=#f8f8f2>();</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>readFast</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>BigInteger</color> <color=#f8f8f2>unscaledVal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BigInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>unscaledVal</color><color=#f8f8f2>,</color> <color=#f8f8f2>scale</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of an unsorted {@code BigDecimal}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getBigDecimalByteLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* First get the length of the scale. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>scaleLen</color> <color=#f92672>=</color> <color=#f8f8f2>getPackedIntByteLength</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>saveOff</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>scaleLen</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Then get the length of the value which store the length of the</color>
<color=#75715e>     * following bytes.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>lenOfUnscaleValLen</color> <color=#f92672>=</color> <color=#f8f8f2>getPackedIntByteLength</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Finally get the length of the following bytes. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>unscaledValLen</color> <color=#f92672>=</color> <color=#f8f8f2>readPackedInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>saveOff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>scaleLen</color> <color=#f92672>+</color> <color=#f8f8f2>lenOfUnscaleValLen</color> <color=#f92672>+</color> <color=#f8f8f2>unscaledValLen</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted {@code BigDecimal}, with support for correct default sorting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the non-null BigDecimal value.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BigDecimal</color> <color=#a6e22e>readSortedBigDecimal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Get the sign of the BigDecimal. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sign</color> <color=#f92672>=</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Get the exponent of the BigDecimal. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>exponent</color> <color=#f92672>=</color> <color=#f8f8f2>readSortedPackedInt</color><color=#f8f8f2>();</color>

    <color=#75715e>/*Get the normalized BigDecimal. */</color>
    <color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>normalizedVal</color> <color=#f92672>=</color> <color=#f8f8f2>readSortedNormalizedBigDecimal</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * After getting the normalized BigDecimal, we need to scale the value</color>
<color=#75715e>     * with the exponent.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>normalizedVal</color><color=#f8f8f2>.</color><color=#a6e22e>scaleByPowerOfTen</color><color=#f8f8f2>(</color><color=#f8f8f2>exponent</color> <color=#f92672>*</color> <color=#f8f8f2>sign</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a sorted {@code BigDecimal} in normalized format with a single digit to the left of the</color>
<color=#75715e>   * decimal point.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>BigDecimal</color> <color=#a6e22e>readSortedNormalizedBigDecimal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>valStr</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#ae81ff>32</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f8f8f2>readSortedPackedInt</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sign</color> <color=#f92672>=</color> <color=#f8f8f2>subVal</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Read through the buf, until we meet the terminator byte. */</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>subVal</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Adjust the sub-value back to the original. */</color>
      <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f8f8f2>subVal</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>subVal</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>subVal</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupDigits</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>subVal</color><color=#f8f8f2>));</color>

      <color=#75715e>/*</color>
<color=#75715e>       * subVal < 100000000 means some leading zeros have been removed,</color>
<color=#75715e>       * we have to add them back.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#ae81ff>9</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>insertLen</color> <color=#f92672>=</color> <color=#ae81ff>9</color> <color=#f92672>-</color> <color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>insertLen</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>valStr</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"0"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>valStr</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>groupDigits</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f8f8f2>readSortedPackedInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>BigInteger</color> <color=#f8f8f2>digitsVal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BigInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>valStr</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sign</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>digitsVal</color> <color=#f92672>=</color> <color=#f8f8f2>digitsVal</color><color=#f8f8f2>.</color><color=#a6e22e>negate</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* The normalized decimal has 1 digits in the int part. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#f8f8f2>valStr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Since we may pad trailing zeros for serialization, when doing</color>
<color=#75715e>     * de-serialization, we need to delete the trailing zeros.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>digitsVal</color><color=#f8f8f2>,</color> <color=#f8f8f2>scale</color><color=#f8f8f2>).</color><color=#a6e22e>stripTrailingZeros</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of a sorted {@code BigDecimal}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getSortedBigDecimalByteLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Save the original position, and read past the sigh byte. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>saveOff</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Get the length of the exponent. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>getSortedPackedIntByteLength</color><color=#f8f8f2>();</color> <color=#75715e>/* the exponent */</color>

    <color=#75715e>/* Skip to the digit part. */</color>
    <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Travel through the following SortedPackedIntegers, until we meet the</color>
<color=#75715e>     * terminator byte.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f8f8f2>readSortedPackedInt</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>subVal</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f8f8f2>readSortedPackedInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * off is the value of end offset, while saveOff is the beginning</color>
<color=#75715e>     * offset.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>off</color> <color=#f92672>-</color> <color=#f8f8f2>saveOff</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>saveOff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>