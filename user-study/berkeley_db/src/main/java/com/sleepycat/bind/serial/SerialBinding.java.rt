<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.serial</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.EntryBinding</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.FastInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.FastOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.RuntimeExceptionWrapper</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A concrete <code>EntryBinding</code> that treats a key or data entry as a serialized object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This binding stores objects in serialized object format. The deserialized objects are returned</color>
<color=#75715e> * by the binding, and their <code>Class</code> must implement the <code>Serializable</code></color>
<color=#75715e> * interface.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For key bindings, a tuple binding is usually a better choice than a serial binding. A tuple</color>
<color=#75715e> * binding gives a reasonable sort order, and works with comparators in all cases -- see below.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>WARNING:</em> SerialBinding should not be used with Berkeley DB Java Edition for key</color>
<color=#75715e> * bindings, when a custom comparator is used. In JE, comparators are instantiated and called</color>
<color=#75715e> * internally at times when databases are not accessible. Because serial bindings depend on the</color>
<color=#75715e> * class catalog database, a serial binding cannot be used during these times. An attempt to use a</color>
<color=#75715e> * serial binding with a custom comparator will result in a NullPointerException during environment</color>
<color=#75715e> * open or close.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><a name="evolution"><strong>Class Evolution</strong></a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code SerialBinding} and other classes in this package use standard Java serialization and</color>
<color=#75715e> * all rules of Java serialization apply. This includes the rules for class evolution. Once an</color>
<color=#75715e> * instance of a class is stored, the class must maintain its {@code serialVersionUID} and follow</color>
<color=#75715e> * the rules defined in the Java specification. To use a new incompatible version of a class, a</color>
<color=#75715e> * different {@link ClassCatalog} must be used or the class catalog database must be truncated.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If more advanced class evolution features are required, consider using the {@link</color>
<color=#75715e> * com.sleepycat.persist.evolve Direct Persistence Layer}.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SerialBinding</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>SerialBase</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EntryBinding</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>baseClass</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a serial binding.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classCatalog is the catalog to hold shared class information and for a database should</color>
<color=#75715e>   *     be a {@link StoredClassCatalog}.</color>
<color=#75715e>   * @param baseClass is the base class for serialized objects stored using this binding -- all</color>
<color=#75715e>   *     objects using this binding must be an instance of this class. Note that if this parameter</color>
<color=#75715e>   *     is non-null, then this binding will not support serialization of null values.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SerialBinding</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>baseClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>classCatalog</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"classCatalog must be non-null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>classCatalog</color> <color=#f92672>=</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>baseClass</color> <color=#f92672>=</color> <color=#f8f8f2>baseClass</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the base class for this binding.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the base class for this binding.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>getBaseClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>baseClass</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the class loader to be used during deserialization, or null if a default class loader</color>
<color=#75715e>   * should be used. The default implementation of this method returns {@link</color>
<color=#75715e>   * ClassCatalog#getClassLoader()}, if it returns a non-null value. If {@link</color>
<color=#75715e>   * ClassCatalog#getClassLoader()} returns null, then <code></color>
<color=#75715e>   * Thread.currentThread().getContextClassLoader()</code> is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be overridden to return a dynamically determined class loader. For example,</color>
<color=#75715e>   * <code>getBaseClass().getClassLoader()</code> could be called to use the class loader for the</color>
<color=#75715e>   * base class, assuming that a base class has been specified.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this method returns null, a default class loader will be used as determined by the <code></color>
<color=#75715e>   * java.io.ObjectInputStream.resolveClass</code> method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the ClassLoader or null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ClassLoader</color> <color=#a6e22e>getClassLoader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color> <color=#f92672>=</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>loader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>loader</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getContextClassLoader</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Deserialize an object from an entry buffer. May only be called for data that was serialized</color>
<color=#75715e>   * using {@link #objectToEntry}, since the fixed serialization header is assumed to not be</color>
<color=#75715e>   * included in the input data. {@link SerialInput} is used to deserialize the object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entry is the input serialized entry.</color>
<color=#75715e>   * @return the output deserialized object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>E</color> <color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hdr</color> <color=#f92672>=</color> <color=#f8f8f2>SerialOutput</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamHeader</color><color=#f8f8f2>();</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bufWithHeader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>length</color> <color=#f92672>+</color> <color=#f8f8f2>hdr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>hdr</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bufWithHeader</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>hdr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>bufWithHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>hdr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>SerialInput</color> <color=#f8f8f2>jin</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>SerialInput</color><color=#f8f8f2>(</color>
              <color=#66d9ef>new</color> <color=#f8f8f2>FastInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>bufWithHeader</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bufWithHeader</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>),</color>
              <color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>getClassLoader</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>jin</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Serialize an object into an entry buffer. The fixed serialization header is not included in the</color>
<color=#75715e>   * output data to save space, and therefore to deserialize the data the complementary {@link</color>
<color=#75715e>   * #entryToObject} method must be used. {@link SerialOutput} is used to serialize the object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method sets the DatabaseEntry offset property to a non-zero value and the</color>
<color=#75715e>   * size property to a value less than the length of the byte array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param object is the input deserialized object.</color>
<color=#75715e>   * @param entry is the output serialized entry.</color>
<color=#75715e>   * @throws IllegalArgumentException if the object is not an instance of the base class for this</color>
<color=#75715e>   *     binding, including if the object is null and a non-null base class was specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>object</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>baseClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>baseClass</color><color=#f8f8f2>.</color><color=#a6e22e>isInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>((</color><color=#f8f8f2>object</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#e6db74>"Data object class ("</color> <color=#f92672>+</color> <color=#f8f8f2>object</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>')'</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#e6db74>"Null value"</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" is not an instance of binding's base class ("</color>
              <color=#f92672>+</color> <color=#f8f8f2>baseClass</color>
              <color=#f92672>+</color> <color=#e6db74>')'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>FastOutputStream</color> <color=#f8f8f2>fo</color> <color=#f92672>=</color> <color=#f8f8f2>getSerialOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>SerialOutput</color> <color=#f8f8f2>jos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SerialOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>fo</color><color=#f8f8f2>,</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>jos</color><color=#f8f8f2>.</color><color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hdr</color> <color=#f92672>=</color> <color=#f8f8f2>SerialOutput</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamHeader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>fo</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>hdr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>fo</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferLength</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>hdr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>