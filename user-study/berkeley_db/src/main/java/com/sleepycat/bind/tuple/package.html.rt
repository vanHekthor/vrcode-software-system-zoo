<color=#f8f8f2><</color><color=#f92672>html</color><color=#f8f8f2>></color>
<color=#f8f8f2><</color><color=#f92672>body</color><color=#f8f8f2>></color>
Bindings that use sequences of primitive fields, or tuples.

<color=#75715e><!-- begin JE only --></color>
For a general discussion of bindings, see the
<color=#f8f8f2><</color><color=#f92672>a</color> <color=#a6e22e>href</color><color=#f92672>=</color><color=#e6db74>"{@docRoot}/../GettingStartedGuide/bindAPI.html"</color>
   <color=#a6e22e>target</color><color=#f92672>=</color><color=#e6db74>"_top"</color><color=#f8f8f2>></color>Getting Started Guide<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></color>.
<color=#75715e><!-- end JE only --></color>

<color=#f8f8f2><</color><color=#f92672>h2</color><color=#f8f8f2>><</color><color=#f92672>a</color> <color=#a6e22e>name</color><color=#f92672>=</color><color=#e6db74>"formats"</color><color=#f8f8f2>></color>Tuple Formats<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></</color><color=#f92672>h2</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The serialization format for tuple bindings are designed for compactness,
    serialization speed and proper default sorting.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>When a format is used for database keys, it is important to use default
    sorting for best performance. Although a custom comparator may be specified
    for a {@link com.sleepycat.je.DatabaseConfig#setBtreeComparator database} or
    {@link <color=#f8f8f2><</color><color=#f92672>a</color>
            <color=#a6e22e>href</color><color=#f92672>=</color><color=#e6db74>"{@docRoot}/com/sleepycat/persist/model/KeyField.html#comparable"</color><color=#f8f8f2>></color>entity
        index<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></color>}, custom comparators often reduce performance because comparators are
    called very frequently during Btree operations.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>For proper default sorting, the byte array of the stored format must be
    designed so that a byte-by-byte unsigned comparison results in the natural sort
    order, as defined by the {@link java.lang.Comparable#compareTo} method of the
    data type. For example, the natural sort order for integers is the standard
    mathematical definition, and is implemented by {@code Integer.compareTo},
    {@code Long.compareTo}, etc. This is called <color=#f8f8f2><</color><color=#f92672>em</color><color=#f8f8f2>></color>default natural
        sorting<color=#f8f8f2></</color><color=#f92672>em</color><color=#f8f8f2>></color>.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Although most tuple formats provide default natural sorting, not all of them
    do. Certain formats do not provide default natural sorting for historical
    reasons (see the discussion of packed integer and float formats below.) Other
    formats sacrifice default natural sorting for other performance factors (see
    the discussion of BigDecimal formats below.)<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#75715e><!-- begin JE only --></color>
<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Another performance factor has to do with amount of memory used by keys in
    the Btree. Keys are stored in their serialized form in the Btree. If keys are
    small (currently 16 bytes or less), Btree memory can be optimized. Optimized
    memory storage is based on the maximum size of all keys in a single Btree
    node. A single Btree node holds N adjacent key values, where N is 128 by
    default and can be {@link com.sleepycat.je.DatabaseConfig#setNodeMaxEntries
    configured} for each database or index.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>
<color=#75715e><!-- end JE only --></color>

<color=#f8f8f2><</color><color=#f92672>h3</color><color=#f8f8f2>><</color><color=#f92672>a</color> <color=#a6e22e>name</color><color=#f92672>=</color><color=#e6db74>"stringFormats"</color><color=#f8f8f2>></color>String Formats<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></</color><color=#f92672>h3</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>All {@code String} formats support default natural sorting.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Strings are stored as a byte array of UTF encoded characters, either where
    the length must be known by the application, or the byte array is
    zero-terminated. The UTF encoding is described below.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>
<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Null strings are UTF encoded as { 0xFF }, which is not allowed in a
        standard UTF encoding. This allows null strings, as distinct from empty or
        zero length strings, to be represented. Using default sorting, null strings
        will be ordered last.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Zero (0x0000) character values are UTF encoded as non-zero values, and
        therefore embedded zeros in the string are supported. The sequence { 0xC0,
        0x80 } is used to encode a zero character. This UTF encoding is the same one
        used by the native Java UTF libraries and is called
        <color=#f8f8f2><</color><color=#f92672>a</color> <color=#a6e22e>href</color><color=#f92672>=</color><color=#e6db74>"http://download.oracle.com/javase/6/docs/api/java/io/DataInput.html#modified-utf-8"</color><color=#f8f8f2>></color>Modified UTF-8<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></color>.
        However, this encoding of zero does impact the lexicographical ordering, and
        zeros will not be sorted first (the natural order) or last.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>For all character values other than zero, the standard UTF encoding is
        used, and the default sorting is the same as the Unicode lexicographical
        character ordering.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Binding classes and methods are provided for zero-terminated and
    known-length {@code String} values.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>
<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for zero-terminated {@code String}
        values.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.StringBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for zero-terminated and known-length {@code
        String} values.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeString(String)}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readString}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#getStringByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeString(char[])}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readString(char[])}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readString(int)}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>h3</color><color=#f8f8f2>><</color><color=#f92672>a</color> <color=#a6e22e>name</color><color=#f92672>=</color><color=#e6db74>"integerFormats"</color><color=#f8f8f2>></color>Integer Formats<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></</color><color=#f92672>h3</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>h4</color><color=#f8f8f2>></color>Fixed Size Integer Formats<color=#f8f8f2></</color><color=#f92672>h4</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>All fixed size integer formats support default natural sorting.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The size of the stored value depends on the type, and ranges (as one would
    expect) from 1 byte for type {@code byte} and class {@code Byte}, to 8 bytes for
    type {@code long} and class {@code Long}.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Signed numbers are stored in the buffer in MSB (most significant byte first)
    order with their sign bit (high-order bit) inverted to cause negative numbers
    to be sorted first when comparing values as unsigned byte arrays, as done in a
    database.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for signed, fixed size integers.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.ByteBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.ShortBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.IntegerBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.LongBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for signed, fixed size integers.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeByte}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readByte}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeShort}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readShort}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeLong}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readLong}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Unsigned numbers, including characters, are stored in MSB order with no
    change to their sign bit. Arrays of characters and unsigned bytes may also be
    stored and may be treated as {@code String} values. For booleans, {@code true}
    is stored as the unsigned byte value one and {@code false} as the unsigned byte
    value zero.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for characters and booleans.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.BooleanBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.CharacterBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for unsigned, fixed size integers, characters
        and booleans.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeBoolean}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readBoolean}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeChar}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readChar}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeUnsignedByte}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readUnsignedByte}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeUnsignedShort}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readUnsignedShort}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeUnsignedInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readUnsignedInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for character arrays and unsigned byte arrays
        that may be treated as {@code String} values.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeChars(String)}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readChars(int)}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeChars(char[])}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readChars(char[])}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeBytes(String)}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readBytes(int)}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeBytes(char[])}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readBytes(char[])}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>h4</color><color=#f8f8f2>></color>Packed Integer Formats<color=#f8f8f2></</color><color=#f92672>h4</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The packed integer format stores integers with small absolute values in a
    single byte. The size increases as the absolute value increases, up to a
    maximum of 5 bytes for {@code int} values and 9 bytes for {@code long}
    values.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The packed integer format can be used for integer values between {@link
    java.lang.Long#MIN_VALUE} and {@link java.lang.Long#MAX_VALUE}. However,
    different bindings and methods are provided for type {@code int} and {@code
    long}, to avoid unsafe casting from {@code long} to {@code int} when {@code
    int} values are used.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Because the same packed format is used for {@code int} and {@code long}
    values, stored {@code int} values may be expanded to {@code long} values
    without introducing a format incompatibility. In other words, you can treat
    previously stored packed {@code int} values as packed {@code long} values.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Packed integer formats come in two varieties: those that support default
    natural sorting and those that don't. The formats of the two varieties are
    incompatible. For new applications, the format that supports default natural
    sorting should normally be used. There is no performance advantage to using
    the unsorted format.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The format with support for default natural sorting stores values in the
    inclusive range [-119,120] in a single byte.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>
<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for packed integers with default natural
        sorting.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.SortedPackedIntegerBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.SortedPackedLongBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for packed integers with default natural
        sorting.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeSortedPackedInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readSortedPackedInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#getSortedPackedIntByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeSortedPackedLong}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readSortedPackedLong}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#getSortedPackedLongByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The unsorted packed integer format is an older, legacy format that is used
    internally and supported for compatibility. It stores values in the inclusive
    range [-119,119] in a single byte. Because default natural sorting is not
    supported, this format should not be used for keys. However, it so happens
    that packed integers in the inclusive range [0,630] are sorted correctly by
    default, and this may be useful for some applications.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>
<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for legacy, unsorted packed integers.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.PackedIntegerBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.PackedLongBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for legacy, unsorted packed integers.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writePackedInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readPackedInt}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#getPackedIntByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writePackedLong}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readPackedLong}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#getPackedLongByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>h4</color><color=#f8f8f2>></color>BigInteger Formats<color=#f8f8f2></</color><color=#f92672>h4</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>All {@code BigInteger} formats support default natural sorting.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>{@code BigInteger} values are variable length and are stored as signed
    values with a preceding byte length. The length has the same sign as the
    value, in order to support default natural sorting.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The length is stored as a 2-byte (short), fixed size, signed integer.
    Supported values are therefore limited to those with a byte array ({@link
    java.math.BigInteger#toByteArray}) representation with a size of 0x7fff bytes
    or less. The maximum {@code BigInteger} value is (2<color=#f8f8f2><</color><color=#f92672>sup</color><color=#f8f8f2>></color>0x3fff7<color=#f8f8f2></</color><color=#f92672>sup</color><color=#f8f8f2>></color> - 1) and
    the minimum value is (-2<color=#f8f8f2><</color><color=#f92672>sup</color><color=#f8f8f2>></color>0x3fff7<color=#f8f8f2></</color><color=#f92672>sup</color><color=#f8f8f2>></color>).<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for {@code BigInteger} values.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.BigIntegerBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for {@code BigInteger} values.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeBigInteger}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readBigInteger}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#getBigIntegerByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>h3</color><color=#f8f8f2>><</color><color=#f92672>a</color> <color=#a6e22e>name</color><color=#f92672>=</color><color=#e6db74>"floatFormats"</color><color=#f8f8f2>></color>Floating Point Formats<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></</color><color=#f92672>h3</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Floats and doubles are stored in a fixed size, 4 and 8 byte format,
    respectively. Floats and doubles are stored using two different
    representations: a representation with default natural sorting, and an
    unsorted, integer-bit (IEEE 754) representation. For new applications, the
    format that supports default natural sorting should normally be used. There is
    no performance advantage to using the unsorted format.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>For {@code float} values, <color=#f8f8f2><</color><color=#f92672>code</color><color=#f8f8f2>></color>Float.floatToIntBits<color=#f8f8f2></</color><color=#f92672>code</color><color=#f8f8f2>></color> and the following
    bit manipulations are used to convert the signed float value to a
    representation that is sorted correctly by default.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>
<color=#f8f8f2><</color><color=#f92672>pre</color><color=#f8f8f2>></color>
 int intVal = Float.floatToIntBits(val);
 intVal ^= (intVal <color=#f8f8f2>&lt;</color> 0) ? 0xffffffff : 0x80000000;
<color=#f8f8f2></</color><color=#f92672>pre</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>For {@code double} values, <color=#f8f8f2><</color><color=#f92672>code</color><color=#f8f8f2>></color>Float.doubleToLongBits<color=#f8f8f2></</color><color=#f92672>code</color><color=#f8f8f2>></color> and the
    following bit manipulations are used to convert the signed double value to a
    representation that is sorted correctly by default.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>
<color=#f8f8f2><</color><color=#f92672>pre</color><color=#f8f8f2>></color>
 long longVal = Double.doubleToLongBits(val);
 longVal ^= (longVal <color=#f8f8f2>&lt;</color> 0) ? 0xffffffffffffffffL : 0x8000000000000000L;
<color=#f8f8f2></</color><color=#f92672>pre</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>In both cases, the resulting {@code int} or {@code long} value is stored as
    an unsigned value.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for {@code float} and {@code double} values
        with default natural sorting.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.SortedFloatBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.SortedDoubleBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for {@code float} and {@code double} values
        with default natural sorting.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeSortedFloat}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readSortedFloat}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeSortedDouble}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readSortedDouble}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>The unsorted floating point format is an older, legacy format that is
    supported for compatibility. With this format, only zero and positive values
    have default natural sorting; negative values do not.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for legacy, unsorted {@code float} and {@code
        double} values.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.FloatBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.DoubleBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for legacy, unsorted {@code float} and {@code
        double} values.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeFloat}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readFloat}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeDouble}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readDouble}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>h3</color><color=#f8f8f2>><</color><color=#f92672>a</color> <color=#a6e22e>name</color><color=#f92672>=</color><color=#e6db74>"bigDecimalFormats"</color><color=#f8f8f2>></color>BigDecimal Formats<color=#f8f8f2></</color><color=#f92672>a</color><color=#f8f8f2>></</color><color=#f92672>h3</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>{@code BigDecimal} values are stored using two different, variable length
    representations: a representation that supports default natural sorting, and an
    unsorted representation. Differences between the two formats are:
<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>The {@code BigDecimal} format with default natural sorting should normally
        be used for database keys.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Default natural sorting <color=#f8f8f2><</color><color=#f92672>em</color><color=#f8f8f2>></color>is<color=#f8f8f2></</color><color=#f92672>em</color><color=#f8f8f2>></color> supported.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>The stored value is around 3 bytes larger than the unsorted format,
            more or less, and is a minimum of 8 bytes.
        <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>More computation is required for serialization than the unsorted
            format.
        <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Trailing zeros after the decimal place are stripped, meaning that
            precision is not preserved.
        <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>The unsorted {@code BigDecimal} format should normally be used for non-key
        values.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Default natural sorting is <color=#f8f8f2><</color><color=#f92672>em</color><color=#f8f8f2>></color>not<color=#f8f8f2></</color><color=#f92672>em</color><color=#f8f8f2>></color> supported.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>The stored value is around 3 bytes smaller than the sorted format, more
            or less, and is a minimum of 3 bytes.
        <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Less computation is required for serialization than the sorted
            format.
        <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Trailing zeros after the decimal place are preserved, meaning that
            precision is preserved.
        <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>p</color><color=#f8f8f2>></color>Both formats store the scale or exponent separately from the unscaled value,
    and the stored size does not increase proportionally as the absolute value of
    the scale or exponent increases.<color=#f8f8f2></</color><color=#f92672>p</color><color=#f8f8f2>></color>

<color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for {@code BigDecimal} values with default
        natural sorting.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.SortedBigDecimalBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for {@code BigDecimal} values with default
        natural sorting.
    <color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeSortedBigDecimal}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#getSortedBigDecimalMaxByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readSortedBigDecimal}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#getSortedBigDecimalByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Single-value binding classes for unsorted {@code BigDecimal} values.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.BigDecimalBinding}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>Multi-value binding methods for unsorted {@code BigDecimal} values.<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2><</color><color=#f92672>ul</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#writeBigDecimal}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleOutput#getBigDecimalMaxByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#readBigDecimal}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
        <color=#f8f8f2><</color><color=#f92672>li</color><color=#f8f8f2>></color>{@link com.sleepycat.bind.tuple.TupleInput#getBigDecimalByteLength}<color=#f8f8f2></</color><color=#f92672>li</color><color=#f8f8f2>></color>
    <color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>ul</color><color=#f8f8f2>></color>

<color=#f8f8f2></</color><color=#f92672>body</color><color=#f8f8f2>></color>
<color=#f8f8f2></</color><color=#f92672>html</color><color=#f8f8f2>></color>