<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.serial</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.EntityBinding</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleBase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleInput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleOutput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An abstract <code>EntityBinding</code> that treats an entity's key entry as a tuple and its data</color>
<color=#75715e> * entry as a serialized object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class takes care of serializing and deserializing the data entry, and converting the key</color>
<color=#75715e> * entry to/from {@link TupleInput} and {@link TupleOutput} objects. Its three abstract methods must</color>
<color=#75715e> * be implemented by a concrete subclass to convert these objects to/from an entity object.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #entryToObject(TupleInput,Object)}</color>
<color=#75715e> *   <li>{@link #objectToKey(Object,TupleOutput)}</color>
<color=#75715e> *   <li>{@link #objectToData(Object)}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="SerialBinding.html#evolution">Class Evolution</a></color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>TupleSerialBinding</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>TupleBase</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EntityBinding</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>protected</color> <color=#f8f8f2>SerialBinding</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple-serial entity binding.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classCatalog is the catalog to hold shared class information and for a database should</color>
<color=#75715e>   *     be a {@link StoredClassCatalog}.</color>
<color=#75715e>   * @param baseClass is the base class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleSerialBinding</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color> <color=#f8f8f2>baseClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>SerialBinding</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>baseClass</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple-serial entity binding.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dataBinding is the data binding.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleSerialBinding</color><color=#f8f8f2>(</color><color=#f8f8f2>SerialBinding</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dataBinding</color> <color=#f92672>=</color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>E</color> <color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>entryToInput</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>),</color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>.</color><color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToKey</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>object</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#f8f8f2>getTupleOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>objectToKey</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>outputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToData</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>object</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>D</color> <color=#f8f8f2>dataObject</color> <color=#f92672>=</color> <color=#f8f8f2>objectToData</color><color=#f8f8f2>(</color><color=#f8f8f2>object</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dataBinding</color><color=#f8f8f2>.</color><color=#a6e22e>objectToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>dataObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs an entity object from {@link TupleInput} key entry and deserialized data entry</color>
<color=#75715e>   * objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param keyInput is the {@link TupleInput} key entry object.</color>
<color=#75715e>   * @param dataInput is the deserialized data entry object.</color>
<color=#75715e>   * @return the entity object constructed from the key and data.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>E</color> <color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleInput</color> <color=#f8f8f2>keyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>D</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Extracts a key tuple from an entity object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param object is the entity object.</color>
<color=#75715e>   * @param keyOutput is the {@link TupleOutput} to which the key should be written.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>objectToKey</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>object</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>keyOutput</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Extracts a data object from an entity object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param object is the entity object.</color>
<color=#75715e>   * @return the deserialized data object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>D</color> <color=#a6e22e>objectToData</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>object</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>