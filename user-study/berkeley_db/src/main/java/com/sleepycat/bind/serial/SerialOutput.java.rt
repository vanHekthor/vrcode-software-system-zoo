<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.serial</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.RuntimeExceptionWrapper</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A specialized <code>ObjectOutputStream</code> that stores class description information in a</color>
<color=#75715e> * <code>ClassCatalog</code>. It is used by <code>SerialBinding</code>.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class is used instead of an {@link ObjectOutputStream}, which it extends, to write a</color>
<color=#75715e> * compact object stream. For writing objects to a database normally one of the serial binding</color>
<color=#75715e> * classes is used. {@link SerialOutput} is used when an {@link ObjectOutputStream} is needed along</color>
<color=#75715e> * with compact storage. A {@link ClassCatalog} must be supplied, however, to stored shared class</color>
<color=#75715e> * descriptions.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link ClassCatalog} is used to store class definitions rather than embedding these into</color>
<color=#75715e> * the stream. Instead, a class format identifier is embedded into the stream. This identifier is</color>
<color=#75715e> * then used by {@link SerialInput} to load the class format to deserialize the object.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="SerialBinding.html#evolution">Class Evolution</a></color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SerialOutput</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ObjectOutputStream</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Serialization version constants. Instead of hardcoding these we get them</color>
<color=#75715e>   * by creating a SerialOutput, which itself guarantees that we'll always</color>
<color=#75715e>   * use a PROTOCOL_VERSION_2 header.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>STREAM_HEADER</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>baos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>SerialOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>baos</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>STREAM_HEADER</color> <color=#f92672>=</color> <color=#f8f8f2>baos</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a serial output stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param out is the output stream to which the compact serialized objects will be written.</color>
<color=#75715e>   * @param classCatalog is the catalog to which the class descriptions for the serialized objects</color>
<color=#75715e>   *     will be written.</color>
<color=#75715e>   * @throws IOException if an I/O error occurs while writing stream header.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SerialOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>classCatalog</color> <color=#f92672>=</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>;</color>

    <color=#75715e>/* guarantee that we'll always use the same serialization format */</color>

    <color=#f8f8f2>useProtocolVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>ObjectStreamConstants</color><color=#f8f8f2>.</color><color=#a6e22e>PROTOCOL_VERSION_2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>writeClassDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>ObjectStreamClass</color> <color=#f8f8f2>classdesc</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getClassID</color><color=#f8f8f2>(</color><color=#f8f8f2>classdesc</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>writeByte</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not throw IOException from here since ObjectOutputStream</color>
<color=#75715e>       * will write the exception to the stream, which causes another</color>
<color=#75715e>       * call here, etc.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the fixed stream header used for all serialized streams in PROTOCOL_VERSION_2 format.</color>
<color=#75715e>   * To save space this header can be removed and serialized streams before storage and inserted</color>
<color=#75715e>   * before deserializing. {@link SerialOutput} always uses PROTOCOL_VERSION_2 serialization format</color>
<color=#75715e>   * to guarantee that this header is fixed. {@link SerialBinding} removes this header from</color>
<color=#75715e>   * serialized streams automatically.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the fixed stream header.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getStreamHeader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>STREAM_HEADER</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>