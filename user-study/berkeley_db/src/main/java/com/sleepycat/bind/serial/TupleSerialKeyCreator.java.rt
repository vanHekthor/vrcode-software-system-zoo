<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.serial</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleBase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleInput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleOutput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ForeignKeyNullifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.SecondaryDatabase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.SecondaryKeyCreator</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A abstract key creator that uses a tuple key and a serial data entry. This class takes care of</color>
<color=#75715e> * serializing and deserializing the data entry, and converting the key entry to/from {@link</color>
<color=#75715e> * TupleInput} and {@link TupleOutput} objects. The following abstract method must be implemented by</color>
<color=#75715e> * a concrete subclass to create the index key using these objects</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #createSecondaryKey(TupleInput,Object,TupleOutput)}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If {@link com.sleepycat.je.ForeignKeyDeleteAction#NULLIFY} was specified when opening the</color>
<color=#75715e> * secondary database, the following method must be overridden to nullify the foreign index key. If</color>
<color=#75715e> * NULLIFY was not specified, this method need not be overridden.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #nullifyForeignKey(Object)}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="SerialBinding.html#evolution">Class Evolution</a></color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>TupleSerialKeyCreator</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>TupleBase</color>
    <color=#66d9ef>implements</color> <color=#f8f8f2>SecondaryKeyCreator</color><color=#f8f8f2>,</color> <color=#f8f8f2>ForeignKeyNullifier</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>protected</color> <color=#f8f8f2>SerialBinding</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple-serial key creator.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classCatalog is the catalog to hold shared class information and for a database should</color>
<color=#75715e>   *     be a {@link StoredClassCatalog}.</color>
<color=#75715e>   * @param dataClass is the data base class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleSerialKeyCreator</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color> <color=#f8f8f2>dataClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>SerialBinding</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataClass</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple-serial key creator.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dataBinding is the data binding.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleSerialKeyCreator</color><color=#f8f8f2>(</color><color=#f8f8f2>SerialBinding</color><color=#f92672><</color><color=#f8f8f2>D</color><color=#f92672>></color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dataBinding</color> <color=#f92672>=</color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>primaryKeyEntry</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>indexKeyEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#f8f8f2>getTupleOutput</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>primaryKeyInput</color> <color=#f92672>=</color> <color=#f8f8f2>entryToInput</color><color=#f8f8f2>(</color><color=#f8f8f2>primaryKeyEntry</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>D</color> <color=#f8f8f2>dataInput</color> <color=#f92672>=</color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>.</color><color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>createSecondaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>primaryKeyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>outputToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>indexKeyEntry</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>D</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>dataBinding</color><color=#f8f8f2>.</color><color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dataBinding</color><color=#f8f8f2>.</color><color=#a6e22e>objectToEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates the index key entry from primary key tuple entry and deserialized data entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param primaryKeyInput is the {@link TupleInput} for the primary key entry, or null if no</color>
<color=#75715e>   *     primary key entry is used to construct the index key.</color>
<color=#75715e>   * @param dataInput is the deserialized data entry, or null if no data entry is used to construct</color>
<color=#75715e>   *     the index key.</color>
<color=#75715e>   * @param indexKeyOutput is the destination index key tuple. For index keys which are optionally</color>
<color=#75715e>   *     present, no tuple entry should be output to indicate that the key is not present or null.</color>
<color=#75715e>   * @return true if a key was created, or false to indicate that the key is not present.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>primaryKeyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>D</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>indexKeyOutput</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Clears the index key in the deserialized data entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On entry the data parameter contains the index key to be cleared. It should be changed by</color>
<color=#75715e>   * this method such that {@link #createSecondaryKey} will return false. Other fields in the data</color>
<color=#75715e>   * object should remain unchanged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data is the source and destination deserialized data entry.</color>
<color=#75715e>   * @return the destination data object, or null to indicate that the key is not present and no</color>
<color=#75715e>   *     change is necessary. The data returned may be the same object passed as the data parameter</color>
<color=#75715e>   *     or a newly created object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>D</color> <color=#a6e22e>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>D</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>