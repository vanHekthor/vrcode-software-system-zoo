<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.serial</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.ClassResolver</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.RuntimeExceptionWrapper</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectStreamClass</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A specialized <code>ObjectInputStream</code> that gets class description information from a</color>
<color=#75715e> * <code>ClassCatalog</code>. It is used by <code>SerialBinding</code>.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class is used instead of an {@link ObjectInputStream}, which it extends, to read an</color>
<color=#75715e> * object stream written by the {@link SerialOutput} class. For reading objects from a database</color>
<color=#75715e> * normally one of the serial binding classes is used. {@link SerialInput} is used when an {@link</color>
<color=#75715e> * ObjectInputStream} is needed along with compact storage. A {@link ClassCatalog} must be supplied,</color>
<color=#75715e> * however, to stored shared class descriptions.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="SerialBinding.html#evolution">Class Evolution</a></color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SerialInput</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ClassResolver</color><color=#f8f8f2>.</color><color=#a6e22e>Stream</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a serial input stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param in is the input stream from which compact serialized objects will be read.</color>
<color=#75715e>   * @param classCatalog is the catalog containing the class descriptions for the serialized</color>
<color=#75715e>   *     objects.</color>
<color=#75715e>   * @throws IOException if an I/O error occurs while reading stream header.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SerialInput</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a serial input stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param in is the input stream from which compact serialized objects will be read.</color>
<color=#75715e>   * @param classCatalog is the catalog containing the class descriptions for the serialized</color>
<color=#75715e>   *     objects.</color>
<color=#75715e>   * @param classLoader is the class loader to use, or null if a default class loader should be</color>
<color=#75715e>   *     used.</color>
<color=#75715e>   * @throws IOException if an I/O error occurs while reading stream header.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SerialInput</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassCatalog</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>classCatalog</color> <color=#f92672>=</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>ObjectStreamClass</color> <color=#a6e22e>readClassDescriptor</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>();</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>classCatalog</color><color=#f8f8f2>.</color><color=#a6e22e>getClassFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not throw IOException from here since ObjectOutputStream</color>
<color=#75715e>       * will write the exception to the stream, which causes another</color>
<color=#75715e>       * call here, etc.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>.</color><color=#a6e22e>wrapIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>