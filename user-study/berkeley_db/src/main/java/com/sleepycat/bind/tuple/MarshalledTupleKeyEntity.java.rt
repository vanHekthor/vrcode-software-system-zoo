<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.tuple</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A marshalling interface implemented by entity classes that represent keys as tuples. Since <code></color>
<color=#75715e> * MarshalledTupleKeyEntity</code> objects are instantiated using Java deserialization, no</color>
<color=#75715e> * particular constructor is required by classes that implement this interface.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that a marshalled tuple key extractor is somewhat less efficient than a non-marshalled</color>
<color=#75715e> * key tuple extractor because more conversions are needed. A marshalled key extractor must convert</color>
<color=#75715e> * the entry to an object in order to extract the key fields, while an unmarshalled key extractor</color>
<color=#75715e> * does not.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> * @see TupleTupleMarshalledBinding</color>
<color=#75715e> * @see com.sleepycat.bind.serial.TupleSerialMarshalledBinding</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>MarshalledTupleKeyEntity</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Extracts the entity's primary key and writes it to the key output.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param keyOutput is the output tuple.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>marshalPrimaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>keyOutput</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Completes construction of the entity by setting its primary key from the stored primary key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param keyInput is the input tuple.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>unmarshalPrimaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleInput</color> <color=#f8f8f2>keyInput</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Extracts the entity's secondary key and writes it to the key output.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param keyName identifies the secondary key.</color>
<color=#75715e>   * @param keyOutput is the output tuple.</color>
<color=#75715e>   * @return true if a key was created, or false to indicate that the key is not present.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>marshalSecondaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>keyOutput</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Clears the entity's secondary key fields for the given key name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The specified index key should be changed by this method such that {@link</color>
<color=#75715e>   * #marshalSecondaryKey} for the same key name will return false. Other fields in the data object</color>
<color=#75715e>   * should remain unchanged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If {@link com.sleepycat.je.ForeignKeyDeleteAction#NULLIFY} was specified when opening the</color>
<color=#75715e>   * secondary database, this method is called when the entity for this foreign key is deleted. If</color>
<color=#75715e>   * NULLIFY was not specified, this method will not be called and may always return false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param keyName identifies the secondary key.</color>
<color=#75715e>   * @return true if the key was cleared, or false to indicate that the key is not present and no</color>
<color=#75715e>   *     change is necessary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>