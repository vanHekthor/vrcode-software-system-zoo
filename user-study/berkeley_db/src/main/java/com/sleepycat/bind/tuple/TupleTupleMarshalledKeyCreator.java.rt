<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.tuple</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A concrete key creator that works in conjunction with a {@link TupleTupleMarshalledBinding}. This</color>
<color=#75715e> * key creator works by calling the methods of the {@link MarshalledTupleKeyEntity} interface to</color>
<color=#75715e> * create and clear the index key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that a marshalled tuple key creator is somewhat less efficient than a non-marshalled key</color>
<color=#75715e> * tuple creator because more conversions are needed. A marshalled key creator must convert the</color>
<color=#75715e> * entry to an object in order to create the key, while an unmarshalled key creator does not.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TupleTupleMarshalledKeyCreator</color><color=#f92672><</color>
        <color=#f8f8f2>E</color> <color=#66d9ef>extends</color> <color=#f8f8f2>MarshalledTupleEntry</color> <color=#f92672>&</color> <color=#f8f8f2>MarshalledTupleKeyEntity</color><color=#f92672>></color>
    <color=#66d9ef>extends</color> <color=#f8f8f2>TupleTupleKeyCreator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleTupleMarshalledBinding</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>binding</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple-tuple marshalled key creator.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param binding is the binding used for the tuple-tuple entity.</color>
<color=#75715e>   * @param keyName is the key name passed to the {@link</color>
<color=#75715e>   *     MarshalledTupleKeyEntity#marshalSecondaryKey} method to identify the index key.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleTupleMarshalledKeyCreator</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleTupleMarshalledBinding</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>binding</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>binding</color> <color=#f92672>=</color> <color=#f8f8f2>binding</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keyName</color> <color=#f92672>=</color> <color=#f8f8f2>keyName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>primaryKeyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleInput</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>indexKeyOutput</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The primary key is unmarshalled before marshalling the index key, to</color>
<color=#75715e>     * account for cases where the index key includes fields taken from the</color>
<color=#75715e>     * primary key.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>E</color> <color=#f8f8f2>entity</color> <color=#f92672>=</color> <color=#f8f8f2>binding</color><color=#f8f8f2>.</color><color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>primaryKeyInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entity</color><color=#f8f8f2>.</color><color=#a6e22e>marshalSecondaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>,</color> <color=#f8f8f2>indexKeyOutput</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// javadoc is inherited</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleInput</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>dataOutput</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>E</color> <color=#f8f8f2>entity</color> <color=#f92672>=</color> <color=#f8f8f2>binding</color><color=#f8f8f2>.</color><color=#a6e22e>entryToObject</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataInput</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>.</color><color=#a6e22e>nullifyForeignKey</color><color=#f8f8f2>(</color><color=#f8f8f2>keyName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>binding</color><color=#f8f8f2>.</color><color=#a6e22e>objectToData</color><color=#f8f8f2>(</color><color=#f8f8f2>entity</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataOutput</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>