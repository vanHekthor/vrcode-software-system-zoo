<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.bind.tuple</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.FastOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.PackedInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.UtfOps</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.math.BigDecimal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.math.BigInteger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An <code>OutputStream</code> with <code>DataOutput</code>-like methods for writing tuple fields.</color>
<color=#75715e> * It is used by <code>TupleBinding</code>.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class has many methods that have the same signatures as methods in the {@link</color>
<color=#75715e> * java.io.DataOutput} interface. The reason this class does not implement {@link</color>
<color=#75715e> * java.io.DataOutput} is because it would break the interface contract for those methods because of</color>
<color=#75715e> * data format differences.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="package-summary.html#formats">Tuple Formats</a></color>
<color=#75715e> * @author Mark Hayes</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TupleOutput</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FastOutputStream</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * We represent a null string as a single FF UTF character, which cannot occur in a UTF encoded</color>
<color=#75715e>   * string.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>NULL_STRING_UTF_VALUE</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Creates a tuple output object for writing a byte array of tuple data. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleOutput</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a tuple output object for writing a byte array of tuple data, using a given buffer. A</color>
<color=#75715e>   * new buffer will be allocated only if the number of bytes needed is greater than the length of</color>
<color=#75715e>   * this buffer. A reference to the byte array will be kept by this object and therefore the byte</color>
<color=#75715e>   * array should not be modified while this object is in use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buffer is the byte array to use as the buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TupleOutput</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- begin DataOutput compatible methods ---</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the specified bytes to the buffer, converting each character to an unsigned byte value.</color>
<color=#75715e>   * Writes values that can be read using {@link TupleInput#readBytes}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the string containing the values to be written. Only characters with values below</color>
<color=#75715e>   *     0x100 may be written using this method, since the high-order 8 bits of all characters are</color>
<color=#75715e>   *     discarded.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @throws NullPointerException if the val parameter is null.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the specified characters to the buffer, converting each character to a two byte unsigned</color>
<color=#75715e>   * value. Writes values that can be read using {@link TupleInput#readChars}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the string containing the characters to be written.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @throws NullPointerException if the val parameter is null.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeChars</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeChars</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the specified characters to the buffer, converting each character to UTF format, and</color>
<color=#75715e>   * adding a null terminator byte. Writes values that can be read using {@link</color>
<color=#75715e>   * TupleInput#readString()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the string containing the characters to be written.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#stringFormats">String Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeString</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>writeString</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>NULL_STRING_UTF_VALUE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a char (two byte) unsigned value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readChar}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeChar</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a boolean (one byte) unsigned value to the buffer, writing one if the value is true and</color>
<color=#75715e>   * zero if it is false. Writes values that can be read using {@link TupleInput#readBoolean}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an signed byte (one byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readByte}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeByte</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeUnsignedByte</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>^</color> <color=#ae81ff>0x80</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an signed short (two byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readShort}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>^</color> <color=#ae81ff>0x8000</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an signed int (four byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeUnsignedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>^</color> <color=#ae81ff>0x80000000</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an signed long (eight byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readLong}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeUnsignedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>^</color> <color=#ae81ff>0x8000000000000000L</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsorted float (four byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readFloat}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeFloat</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeUnsignedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>floatToIntBits</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>));</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsorted double (eight byte) value to the buffer. Writes values that can be read</color>
<color=#75715e>   * using {@link TupleInput#readDouble}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeDouble</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeUnsignedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>doubleToLongBits</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>));</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a sorted float (four byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readSortedFloat}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedFloat</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>floatToIntBits</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>intVal</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>intVal</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0xffffffff</color> <color=#f8f8f2>:</color> <color=#ae81ff>0x80000000</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>writeUnsignedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>intVal</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a sorted double (eight byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readSortedDouble}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#floatFormats">Floating Point Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedDouble</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>longVal</color> <color=#f92672>=</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>doubleToLongBits</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>longVal</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>longVal</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0xffffffffffffffffL</color> <color=#f8f8f2>:</color> <color=#ae81ff>0x8000000000000000L</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>writeUnsignedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>longVal</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// --- end DataOutput compatible methods ---</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the specified bytes to the buffer, converting each character to an unsigned byte value.</color>
<color=#75715e>   * Writes values that can be read using {@link TupleInput#readBytes}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars is the array of values to be written. Only characters with values below 0x100 may</color>
<color=#75715e>   *     be written using this method, since the high-order 8 bits of all characters are discarded.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @throws NullPointerException if the chars parameter is null.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeBytes</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the specified characters to the buffer, converting each character to a two byte unsigned</color>
<color=#75715e>   * value. Writes values that can be read using {@link TupleInput#readChars}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars is the array of characters to be written.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @throws NullPointerException if the chars parameter is null.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeChars</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes the specified characters to the buffer, converting each character to UTF format. Writes</color>
<color=#75715e>   * values that can be read using {@link TupleInput#readString(int)} or {@link</color>
<color=#75715e>   * TupleInput#readString(char[])}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chars is the array of characters to be written.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @throws NullPointerException if the chars parameter is null.</color>
<color=#75715e>   * @see <a href="package-summary.html#stringFormats">String Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeString</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>utfLength</color> <color=#f92672>=</color> <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>getByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>makeSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>utfLength</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>UtfOps</color><color=#f8f8f2>.</color><color=#a6e22e>charsToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getBufferLength</color><color=#f8f8f2>(),</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>addSize</color><color=#f8f8f2>(</color><color=#f8f8f2>utfLength</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsigned byte (one byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readUnsignedByte}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeUnsignedByte</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsigned short (two byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readUnsignedShort}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeUnsignedShort</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsigned int (four byte) value to the buffer. Writes values that can be read using</color>
<color=#75715e>   * {@link TupleInput#readUnsignedInt}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeUnsignedInt</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is private since an unsigned long cannot be treated as such in Java, nor converted</color>
<color=#75715e>   * to a BigInteger of the same value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeUnsignedLong</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>56</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>48</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>40</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>32</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsorted packed integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>makeSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_LENGTH</color><color=#f8f8f2>);</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>oldLen</color> <color=#f92672>=</color> <color=#f8f8f2>getBufferLength</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newLen</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>addSize</color><color=#f8f8f2>(</color><color=#f8f8f2>newLen</color> <color=#f92672>-</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsorted packed long integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>makeSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_LONG_LENGTH</color><color=#f8f8f2>);</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>oldLen</color> <color=#f92672>=</color> <color=#f8f8f2>getBufferLength</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newLen</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>addSize</color><color=#f8f8f2>(</color><color=#f8f8f2>newLen</color> <color=#f92672>-</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a sorted packed integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedPackedInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>makeSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_LENGTH</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>oldLen</color> <color=#f92672>=</color> <color=#f8f8f2>getBufferLength</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newLen</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>writeSortedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>addSize</color><color=#f8f8f2>(</color><color=#f8f8f2>newLen</color> <color=#f92672>-</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a sorted packed long integer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedPackedLong</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>makeSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_LONG_LENGTH</color><color=#f8f8f2>);</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>oldLen</color> <color=#f92672>=</color> <color=#f8f8f2>getBufferLength</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newLen</color> <color=#f92672>=</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>writeSortedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>getBufferBytes</color><color=#f8f8f2>(),</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>addSize</color><color=#f8f8f2>(</color><color=#f8f8f2>newLen</color> <color=#f92672>-</color> <color=#f8f8f2>oldLen</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a {@code BigInteger}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @throws NullPointerException if val is null.</color>
<color=#75715e>   * @throws IllegalArgumentException if the byte array representation of val is larger than 0x7fff</color>
<color=#75715e>   *     bytes.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeBigInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"BigInteger byte array is larger than 0x7fff bytes"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>firstByte</color> <color=#f92672>=</color> <color=#f8f8f2>a</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>writeShort</color><color=#f8f8f2>((</color><color=#f8f8f2>firstByte</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>writeByte</color><color=#f8f8f2>(</color><color=#f8f8f2>firstByte</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the exact byte length that would would be output for a given {@code BigInteger} value</color>
<color=#75715e>   * if {@link TupleOutput#writeBigInteger} were called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val the BigInteger</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#integerFormats">Integer Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getBigIntegerByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>2</color> <color=#75715e>/* length bytes */</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>bitLength</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#75715e>/* sign bit */</color> <color=#f92672>+</color> <color=#ae81ff>7</color> <color=#75715e>/* round up */</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes an unsorted {@code BigDecimal}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @throws NullPointerException if val is null.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeBigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The byte format for a BigDecimal value is:</color>
<color=#75715e>     *     Byte 0 ~ L:   The scale part written as a PackedInteger.</color>
<color=#75715e>     *     Byte L+1 ~ M: The length of the unscaled value written as a</color>
<color=#75715e>     *                   PackedInteger.</color>
<color=#75715e>     *     Byte M+1 ~ N: The BigDecimal.toByteArray array, written</color>
<color=#75715e>     *                   without modification.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Get the scale and the unscaled value of this BigDecimal.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>BigInteger</color> <color=#f8f8f2>unscaledVal</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>unscaledValue</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Store the scale. */</color>
    <color=#f8f8f2>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>scale</color><color=#f8f8f2>);</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>unscaledVal</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Store the length of the following bytes. */</color>
    <color=#f8f8f2>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Store the bytes of the BigDecimal, without modification. */</color>
    <color=#f8f8f2>writeFast</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the maximum byte length that would be output for a given {@code BigDecimal} value if</color>
<color=#75715e>   * {@link TupleOutput#writeBigDecimal} were called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val the BigDecimal.</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getBigDecimalMaxByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>BigInteger</color> <color=#f8f8f2>unscaledVal</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>unscaledValue</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_LENGTH</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#f8f8f2>unscaledVal</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>().</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a sorted {@code BigDecimal}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val is the value to write to the buffer.</color>
<color=#75715e>   * @return this tuple output object.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedBigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We have several options for the serialization of sorted BigDecimal.</color>
<color=#75715e>     * The reason for choosing this method is that it is simpler and more</color>
<color=#75715e>     * compact, and in some cases, comparison time will be less.  For other</color>
<color=#75715e>     * methods and detailed discussion, please refer to [#18379].</color>
<color=#75715e>     *</color>
<color=#75715e>     * First, we need to do the normalization, which means we normalize a</color>
<color=#75715e>     * given BigDecimal into two parts: decimal part and the exponent part.</color>
<color=#75715e>     * The decimal part contains one integer (non zero). For example,</color>
<color=#75715e>     *      1234.56 will be normalized to 1.23456E3;</color>
<color=#75715e>     *      123.4E100 will be normalized to 1.234E102;</color>
<color=#75715e>     *      -123.4E-100 will be normalized to -1.234E-98.</color>
<color=#75715e>     *</color>
<color=#75715e>     * After the normalization, the byte format is:</color>
<color=#75715e>     *     Byte 0: sign (-1 represents negative, 0 represents zero, and 1</color>
<color=#75715e>     *             represents positive).</color>
<color=#75715e>     *     Byte 1 ~ 5: the exponent with sign, and written as a</color>
<color=#75715e>     *                 SortedPackedInteger value.</color>
<color=#75715e>     *     Byte 6 ~ N: the normalized decimal part with sign.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Get the scale and the unscaled value of this BigDecimal..</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>valNoTrailZeros</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>stripTrailingZeros</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#f8f8f2>valNoTrailZeros</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>BigInteger</color> <color=#f8f8f2>unscaledVal</color> <color=#f92672>=</color> <color=#f8f8f2>valNoTrailZeros</color><color=#f8f8f2>.</color><color=#a6e22e>unscaledValue</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sign</color> <color=#f92672>=</color> <color=#f8f8f2>valNoTrailZeros</color><color=#f8f8f2>.</color><color=#a6e22e>signum</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Then do the normalization. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>unscaledValStr</color> <color=#f92672>=</color> <color=#f8f8f2>unscaledVal</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>normalizedScale</color> <color=#f92672>=</color> <color=#f8f8f2>unscaledValStr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>normalizedVal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>unscaledVal</color><color=#f8f8f2>,</color> <color=#f8f8f2>normalizedScale</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>exponent</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>normalizedScale</color> <color=#f92672>-</color> <color=#f8f8f2>scale</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>sign</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Start serializing each part. */</color>
    <color=#f8f8f2>writeByte</color><color=#f8f8f2>(</color><color=#f8f8f2>sign</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>writeSortedPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>exponent</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>writeSortedNormalizedBigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>normalizedVal</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Writes a normalized {@code BigDecimal}. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>TupleOutput</color> <color=#a6e22e>writeSortedNormalizedBigDecimal</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The byte format for a sorted normalized {@code BigDecimal} value is:</color>
<color=#75715e>     *     Byte 0 ~ N: Store all digits with sign. Each 9 digits is</color>
<color=#75715e>     *                 regarded as one integer, and written as a</color>
<color=#75715e>     *                 SortedPackedInteger value.  If there are not enough</color>
<color=#75715e>     *                 9 digits, pad trailing zeros. Since we may pad</color>
<color=#75715e>     *                 trailing zeros for serialization, when doing</color>
<color=#75715e>     *                 de-serialization, we need to delete the trailing</color>
<color=#75715e>     *                 zeros. In order to designate a special value as the</color>
<color=#75715e>     *                 terminator byte, we set</color>
<color=#75715e>     *                     val = (val < 0) ? (val - 1) : val.</color>
<color=#75715e>     *     Byte N + 1: Terminator byte. The terminator byte is -1, and</color>
<color=#75715e>     *                 written as a SortedPackedInteger value.</color>
<color=#75715e>     */</color>

    <color=#75715e>/* get the precision, scale and sign of the BigDecimal. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>precision</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>precision</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>sign</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>signum</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Start the serialization of the whole digits. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>digitsStr</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>().</color><color=#a6e22e>toPlainString</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The default capacity of a StringBuilder is 16 chars, which is</color>
<color=#75715e>     * enough to hold a group of digits having 9 digits.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>groupDigits</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>digitsStr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>char</color> <color=#f8f8f2>digit</color> <color=#f92672>=</color> <color=#f8f8f2>digitsStr</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Ignore the decimal. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>digit</color> <color=#f92672>!=</color> <color=#e6db74>'.'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>digit</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * For the last group of the digits, if there are not 9 digits, pad</color>
<color=#75715e>       * trailing zeros.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>digitsStr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#ae81ff>9</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>insertLen</color> <color=#f92672>=</color> <color=#ae81ff>9</color> <color=#f92672>-</color> <color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>insertLen</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"0"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Group every 9 digits as an Integer. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>9</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sign</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>subVal</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Reset the sub-value, so the value -1 will be designated as</color>
<color=#75715e>         * the terminator byte.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>subVal</color> <color=#f92672>=</color> <color=#f8f8f2>subVal</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>subVal</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>subVal</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>writeSortedPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>subVal</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>groupDigits</color><color=#f8f8f2>.</color><color=#a6e22e>setLength</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Write the terminator byte. */</color>
    <color=#f8f8f2>writeSortedPackedInt</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the maximum byte length that would be output for a given {@code BigDecimal} value if</color>
<color=#75715e>   * {@link TupleOutput#writeSortedBigDecimal} were called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param val the BigDecimal.</color>
<color=#75715e>   * @return the byte length.</color>
<color=#75715e>   * @see <a href="package-summary.html#bigDecimalFormats">BigDecimal Formats</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getSortedBigDecimalMaxByteLength</color><color=#f8f8f2>(</color><color=#f8f8f2>BigDecimal</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>digitsStr</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>stripTrailingZeros</color><color=#f8f8f2>().</color><color=#a6e22e>unscaledValue</color><color=#f8f8f2>().</color><color=#a6e22e>abs</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numOfGroups</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>digitsStr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>8</color> <color=#75715e>/* round up */</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#ae81ff>1</color> <color=#75715e>/* sign */</color>
        <color=#f92672>+</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_LENGTH</color> <color=#75715e>/* exponent */</color>
        <color=#f92672>+</color> <color=#f8f8f2>PackedInteger</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_LENGTH</color> <color=#f92672>*</color> <color=#f8f8f2>numOfGroups</color> <color=#75715e>/* all the digits */</color>
        <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>/* terminator byte */</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>