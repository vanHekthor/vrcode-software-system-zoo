<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.elections</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.IntConfigParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentFailureReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.QuorumPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.MaxRetriesException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.Proposal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Protocol.Value</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Utils.FutureTrackingCompService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepNodeImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.MessageExchange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.ElectionQuorum</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.FeederManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.RepNode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ReplicationFormatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThread</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThreadFactory</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.CountDownLatch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.ExecutorService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.Executors</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicBoolean</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.locks.ReentrantLock</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams.ELECTIONS_REBROADCAST_PERIOD</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Represents the environment in which elections are run on behalf of a node. There is exactly one</color>
<color=#75715e> * instance of an Elections for each node. Elections are initiated via this class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>One of the primary goals of this interface is to keep Elections as free standing as possible,</color>
<color=#75715e> * so that we can change how elections are held, or aspects of the election infrastructure with</color>
<color=#75715e> * minimal impact on replication. For example, elections currently used tcp for communication of</color>
<color=#75715e> * election messages but may want to switch over to udp. Such a change should be confined to just</color>
<color=#75715e> * the Elections module. Other changes might include changes to the strategy used to suggest Values</color>
<color=#75715e> * and the weight associated with a suggested Value.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following are the principal points of interaction between Elections and Replication:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1) The initiation of elections via the initiateElections() method.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2) The suggestion of nodes as masters and the ranking of the suggestion. This is done via the</color>
<color=#75715e> * Acceptor.SuggestionGenerator interface. An instance of this interface is supplied when the</color>
<color=#75715e> * Elections class is instantiated. Note that the implementation must also initiate a freeze of</color>
<color=#75715e> * VLSNs to ensure that the ranking does not change as the election progresses. The VLSN can make</color>
<color=#75715e> * progress when the node is informed via its Listener that an election with a higher Proposal</color>
<color=#75715e> * number (than the one in the Propose request) has finished.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3) Obtaining the result of an election initiated in step 1. This is done via the</color>
<color=#75715e> * Learner.Listener interface. An instance of this class is supplied when the Election class is</color>
<color=#75715e> * first instantiated.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Elections</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* Describes all nodes of the group. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>repGroup</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A unique identifier for this election agent. It's used by all the</color>
<color=#75715e>   * agents that comprise Elections.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A repNode is kept for error propagation if this election belongs to a</color>
<color=#75715e>   * replicated environment. Elections are dependent on the RepNode to track</color>
<color=#75715e>   * the number of members currently in a group and to deal with changing</color>
<color=#75715e>   * quorum requirements when a node is acting as a Primary.</color>
<color=#75715e>   * Note that repNode may be null if the creator of this Elections object</color>
<color=#75715e>   * does not initiate an election and if the node can never be a master.</color>
<color=#75715e>   * The Arbiter uses it this way.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ElectionsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Shutdown can only be executed once. The shutdown field protects against</color>
<color=#75715e>   * multiple invocations.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicBoolean</color> <color=#f8f8f2>shutdown</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#75715e>/* The three agents involved in the elections run by this class. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Proposer</color> <color=#f8f8f2>proposer</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Acceptor</color> <color=#f8f8f2>acceptor</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Learner</color> <color=#f8f8f2>learner</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The thread pool used to manage the threads used by the Proposer. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ExecutorService</color> <color=#f8f8f2>pool</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Components of the agents. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>SuggestionGenerator</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>Listener</color> <color=#f8f8f2>listener</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The protocol used to run the elections. All three agents use this</color>
<color=#75715e>   * instance of the protocol</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The thread used to run the proposer during the current election. It's</color>
<color=#75715e>   * volatile to ensure that shutdown can perform an unsynchronized access</color>
<color=#75715e>   * to the iv even if an election is in progress.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>ElectionThread</color> <color=#f8f8f2>electionThread</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The listener used to indicate completion of an election. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ElectionListener</color> <color=#f8f8f2>electionListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The timer task that re-broadcasts election results from a master. It's null in unit tests. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RebroadcastTask</color> <color=#f8f8f2>rebroadcastTask</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The number of elections that were held. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nElections</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an instance of Elections. There should be just one instance per node. Note that the</color>
<color=#75715e>   * creation does not result in the election threads being started, that is, the instance does not</color>
<color=#75715e>   * participate in elections. This call is typically followed up with a call to startLearner that</color>
<color=#75715e>   * lets it both learn about and supply elections results, and, if applicable, by a subsequent call</color>
<color=#75715e>   * to participate to let it vote in elections. The RepNode parameter is null when the Elections</color>
<color=#75715e>   * object is used by the Arbiter. The Arbiter is a Learner and Acceptor. It will never initiate an</color>
<color=#75715e>   * election (the RepNode must be non-null) and never become Master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config elections configuration</color>
<color=#75715e>   * @param listener the Listener invoked when results are available</color>
<color=#75715e>   * @param suggestionGenerator used by the Acceptor</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Elections</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ElectionsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>Listener</color> <color=#f8f8f2>listener</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>SuggestionGenerator</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>config</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>rebroadcastPeriod</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>ELECTIONS_REBROADCAST_PERIOD</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>rebroadcastTask</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RebroadcastTask</color><color=#f8f8f2>(</color><color=#f8f8f2>rebroadcastPeriod</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerFormatterNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>rebroadcastTask</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>channelFactory</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>().</color><color=#a6e22e>getChannelFactory</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>formatter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>protocol</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>TimebasedProposalGenerator</color><color=#f8f8f2>.</color><color=#a6e22e>getParser</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>MasterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getParser</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>suggestionGenerator</color> <color=#f92672>=</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>listener</color> <color=#f92672>=</color> <color=#f8f8f2>listener</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>pool</color> <color=#f92672>=</color>
        <color=#f8f8f2>Executors</color><color=#f8f8f2>.</color><color=#a6e22e>newCachedThreadPool</color><color=#f8f8f2>(</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>StoppableThreadFactory</color><color=#f8f8f2>(</color><color=#e6db74>"JE Elections Factory "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* The thread pool used to allocate threads used during elections. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ExecutorService</color> <color=#a6e22e>getThreadPool</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>pool</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ElectionQuorum</color> <color=#a6e22e>getElectionQuorum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getElectionQuorum</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>RepNode</color> <color=#a6e22e>getRepNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get repImpl for Proposer to set up loggers. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>RepImpl</color> <color=#a6e22e>getRepImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Starts a Learner agent. Note that the underlying Protocol instance it uses must have a current</color>
<color=#75715e>   * picture of the replication group otherwise it will reject messages from nodes that it does not</color>
<color=#75715e>   * think are currently part of the replication group.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>startLearner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>// repNode used for thread name but can be null here</color>
    <color=#f8f8f2>learner</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>learner</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>learner</color><color=#f8f8f2>.</color><color=#a6e22e>addListener</color><color=#f8f8f2>(</color><color=#f8f8f2>listener</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>electionListener</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ElectionListener</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>learner</color><color=#f8f8f2>.</color><color=#a6e22e>addListener</color><color=#f8f8f2>(</color><color=#f8f8f2>electionListener</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rebroadcastTask</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repNode</color>
          <color=#f8f8f2>.</color><color=#a6e22e>getTimer</color><color=#f8f8f2>()</color>
          <color=#f8f8f2>.</color><color=#a6e22e>schedule</color><color=#f8f8f2>(</color><color=#f8f8f2>rebroadcastTask</color><color=#f8f8f2>,</color> <color=#f8f8f2>rebroadcastTask</color><color=#f8f8f2>.</color><color=#a6e22e>getPeriod</color><color=#f8f8f2>(),</color> <color=#f8f8f2>rebroadcastTask</color><color=#f8f8f2>.</color><color=#a6e22e>getPeriod</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Permits the Election agent to start participating in elections held by the replication group,</color>
<color=#75715e>   * or initiate elections on behalf of this node. Participation in elections is initiated only</color>
<color=#75715e>   * after a node has current information about group membership.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>participate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>proposer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RankingProposer</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>startAcceptor</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>startAcceptor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>acceptor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Acceptor</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Acceptor associated with this node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the Acceptor</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Acceptor</color> <color=#a6e22e>getAcceptor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>acceptor</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a current set of acceptor sockets. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#a6e22e>getAcceptorSockets</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repGroup</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"No rep group was configured"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getAllAcceptorSockets</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Protocol</color> <color=#a6e22e>getProtocol</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Learner associated with this node</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the Learner</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Learner</color> <color=#a6e22e>getLearner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>learner</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of elections that have been held. Used for testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return total elections initiated by this node.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getElectionCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nElections</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initiates an election. Note that this may just be one of many possible elections that are in</color>
<color=#75715e>   * progress in a replication group. The method does not wait for this election to complete, but</color>
<color=#75715e>   * instead returns as soon as any election result (including one initiated by some other Proposer)</color>
<color=#75715e>   * becomes available via the Learner.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A proposal submitted as part of this election may lose out to other concurrent elections, or</color>
<color=#75715e>   * there may not be a sufficient number of Acceptor agents active or reachable to reach a quorum.</color>
<color=#75715e>   * In such cases, the election will not produce a result. That is, there will be no notification</color>
<color=#75715e>   * to the Learners. Note that only one election can be initiated at a time at a node If a new</color>
<color=#75715e>   * election is initiated while one is already in progress, then the method will wait until it</color>
<color=#75715e>   * completes before starting a new one.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The results of this and any other elections that may have been initiated concurrently by</color>
<color=#75715e>   * other nodes are made known to the Learner agents. Note that this method does not return a</color>
<color=#75715e>   * result, since the concurrent arrival of results could invalidate the result even before its</color>
<color=#75715e>   * returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newGroup the definition of the group to be used for this election</color>
<color=#75715e>   * @param quorumPolicy the policy to be used to reach a quorum.</color>
<color=#75715e>   * @param maxRetries the max number of times a proposal may be retried</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>initiateElection</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>newGroup</color><color=#f8f8f2>,</color> <color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>updateRepGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>newGroup</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nElections</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Election initiated; election #"</color> <color=#f92672>+</color> <color=#f8f8f2>nElections</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionThread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * The factor of four used below to arrive at a timeout value is a</color>
<color=#75715e>       * heuristic: A factor of two to cover any pending message exchange</color>
<color=#75715e>       * and another factor of two as a grace period. We really don't</color>
<color=#75715e>       * expect to hit this timeout in the absence of networking issues,</color>
<color=#75715e>       * hence the thread dump to understand the reason in case there's</color>
<color=#75715e>       * some bug.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>waitMs</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getReadTimeout</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
      <color=#75715e>// A past election request, wait until the election has quiesced</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Election in progress. Waiting ... for "</color> <color=#f92672>+</color> <color=#f8f8f2>waitMs</color> <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>join</color><color=#f8f8f2>(</color><color=#f8f8f2>waitMs</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Dump out threads for future analysis if it did not quit. */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Election did not finish as expected."</color> <color=#f92672>+</color> <color=#e6db74>" resorting to shutdown"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fullThreadDump</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>getSavedShutdownException</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>UNEXPECTED_EXCEPTION</color><color=#f8f8f2>,</color> <color=#f8f8f2>exception</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>countDownLatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// Watch for any election results from this point forward</color>
      <color=#f8f8f2>countDownLatch</color> <color=#f92672>=</color> <color=#f8f8f2>electionListener</color><color=#f8f8f2>.</color><color=#a6e22e>setLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>RetryPredicate</color> <color=#f8f8f2>retryPredicate</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RetryPredicate</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>,</color> <color=#f8f8f2>countDownLatch</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>electionThread</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ElectionThread</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>,</color> <color=#f8f8f2>retryPredicate</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Wait until we hear of some "new" election result */</color>
      <color=#f8f8f2>countDownLatch</color><color=#f8f8f2>.</color><color=#a6e22e>await</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>retryPredicate</color><color=#f8f8f2>.</color><color=#a6e22e>pendingRetries</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Ran out of retries -- a test situation */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Retry count exhausted: "</color> <color=#f92672>+</color> <color=#f8f8f2>retryPredicate</color><color=#f8f8f2>.</color><color=#a6e22e>maxRetries</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Note that the election thread continues to run past this point</color>
<color=#75715e>       * and may be active upon re-entry</color>
<color=#75715e>       */</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color> <color=#e6db74>"Election initiation interrupted"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Election finished. Elapsed time: "</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The standard method for requesting and election, we normally want to run elections until we</color>
<color=#75715e>   * hear of an election result. Once initiated, elections run until there is a successful</color>
<color=#75715e>   * conclusion, that is, a new master has been elected. Since a successful conclusion requires the</color>
<color=#75715e>   * participation of at least a simple majority, this may take a while if a sufficient number of</color>
<color=#75715e>   * nodes are not available.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The above method is used mainly for testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   * @see #initiateElection</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>initiateElection</color><color=#f8f8f2>(</color><color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>newGroup</color><color=#f8f8f2>,</color> <color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>initiateElection</color><color=#f8f8f2>(</color><color=#f8f8f2>newGroup</color><color=#f8f8f2>,</color> <color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Updates elections notion of the rep group, so that acceptors are aware of the current state of</color>
<color=#75715e>   * the group, even in the absence of an election conducted by the node itself.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should be invoked each time a node becomes aware of a group membership change.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newRepGroup defines the new group</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateRepGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>newRepGroup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>repGroup</color> <color=#f92672>=</color> <color=#f8f8f2>newRepGroup</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>updateNodeIds</color><color=#f8f8f2>(</color><color=#f8f8f2>newRepGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getAllElectionMemberIds</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Updates elections notion of the rep group, so that acceptors are aware of the current state of</color>
<color=#75715e>   * the group, even in the absence of an election conducted by the node itself. However this method</color>
<color=#75715e>   * does not update the members in the protocol so checks are not made for the member id.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should be invoked each time a node becomes aware of a group membership change.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newRepGroup defines the new group</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateRepGroupOnly</color><color=#f8f8f2>(</color><color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>newRepGroup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>repGroup</color> <color=#f92672>=</color> <color=#f8f8f2>newRepGroup</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Predicate to determine whether an election is currently in progress. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>electionInProgress</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionThread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>isAlive</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Statistics used during testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionInProgress</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Election in progress"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For INTERNAL TESTING ONLY. Ensures that the initiated election has reached a conclusion that</color>
<color=#75715e>   * can be tested.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>waitForElection</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionThread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>join</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shutdown all acceptor and learner agents by broadcasting a Shutdown message. It waits until</color>
<color=#75715e>   * reachable agents have acknowledged the message and the local learner and acceptor threads have</color>
<color=#75715e>   * exited.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is method is intended for use during testing only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownAcceptorsLearners</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>acceptorSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learnerSockets</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Elections being shutdown"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#f8f8f2>compService</color> <color=#f92672>=</color>
        <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>broadcastMessage</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>acceptorSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>Acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>Shutdown</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pool</color><color=#f8f8f2>);</color>
    <color=#75715e>/* The 60 seconds is just a reasonable timeout for use in tests */</color>
    <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>checkFutures</color><color=#f8f8f2>(</color><color=#f8f8f2>compService</color><color=#f8f8f2>,</color> <color=#ae81ff>60</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>SECONDS</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>compService</color> <color=#f92672>=</color>
        <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>broadcastMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>learnerSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>Shutdown</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pool</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>checkFutures</color><color=#f8f8f2>(</color><color=#f8f8f2>compService</color><color=#f8f8f2>,</color> <color=#ae81ff>60</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>SECONDS</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>learner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>learner</color><color=#f8f8f2>.</color><color=#a6e22e>join</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>acceptor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>join</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shuts down just the election support at this node. That is the Acceptor, and Learner associated</color>
<color=#75715e>   * with this Elections as well as any pending election running in its thread is terminated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Elections shutdown initiated"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>acceptor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>learner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>learner</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionThread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>electionThread</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proposer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>proposer</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rebroadcastTask</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>rebroadcastTask</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Elections shutdown completed"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to short-circuit Proposal retries if a new election has completed since the time this</color>
<color=#75715e>   * election was initiated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ElectionListener</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>Listener</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The election latch that is shared by the RetryPredicate. It's</color>
<color=#75715e>     * counted down either when some election result becomes available or</color>
<color=#75715e>     * when elections that are in progress need to be shutdown.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>electionLatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ElectionListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>electionLatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Returns a new latch to be associated with the RetryPredicate. */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>CountDownLatch</color> <color=#a6e22e>setLatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>electionLatch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CountDownLatch</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>electionLatch</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Used during shutdown only</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the latch on which elections wait</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>CountDownLatch</color> <color=#a6e22e>getElectionLatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>electionLatch</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** The Listener protocol announcing election results. */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Value</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// Free up the retry predicate if its waiting</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionLatch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>electionLatch</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Implements the retry policy */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>RetryPredicate</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Proposer</color><color=#f8f8f2>.</color><color=#a6e22e>RetryPredicate</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>pendingRetries</color><color=#f8f8f2>;</color>
    <color=#75715e>/* The latch that is activated by the Listener. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>electionLatch</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The number of time to retry an election before trying to activate</color>
<color=#75715e>     * the primary.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>primaryRetries</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BACKOFF_SLEEP_MIN</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BACKOFF_SLEEP_MAX</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>backoffSleepInterval</color> <color=#f92672>=</color> <color=#f8f8f2>BACKOFF_SLEEP_MIN</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>RetryPredicate</color><color=#f8f8f2>(</color><color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>,</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>electionLatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxRetries</color> <color=#f92672>=</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>pendingRetries</color> <color=#f92672>=</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>electionLatch</color> <color=#f92672>=</color> <color=#f8f8f2>electionLatch</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>IntConfigParam</color> <color=#f8f8f2>retriesParam</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>ELECTIONS_PRIMARY_RETRIES</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>primaryRetries</color> <color=#f92672>=</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
              <color=#f92672>?</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>retriesParam</color><color=#f8f8f2>)</color>
              <color=#f8f8f2>:</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>retriesParam</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the time to backoff before a retry. The backoff is non-linear.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the time to backoff in ms</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>backoffWaitTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>backoffSleepInterval</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>BACKOFF_SLEEP_MAX</color><color=#f8f8f2>,</color> <color=#f8f8f2>backoffSleepInterval</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>backoffSleepInterval</color> <color=#f92672>*</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Implements the protocol */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>retry</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>maxRetries</color> <color=#f92672>-</color> <color=#f8f8f2>pendingRetries</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>primaryRetries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>repNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiter</color><color=#f8f8f2>().</color><color=#a6e22e>activateArbitration</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>pendingRetries</color> <color=#f92672>=</color> <color=#f8f8f2>maxRetries</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pendingRetries</color><color=#f92672>--</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Free up the main election thread */</color>
        <color=#f8f8f2>electionLatch</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>electionLatch</color><color=#f8f8f2>.</color><color=#a6e22e>await</color><color=#f8f8f2>(</color><color=#f8f8f2>backoffWaitTime</color><color=#f8f8f2>(),</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
        <color=#75715e>/* An election completed, we can quit issuing proposals */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>electionLatch</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#75715e>/* Timed out and did not hear any election results. */</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** The number of times a retry was attempted */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>retries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxRetries</color> <color=#f92672>-</color> <color=#f8f8f2>pendingRetries</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The thread that actually runs an election. The thread exits either after it has successfully</color>
<color=#75715e>   * had its proposal accepted and after it has informed all learners, or if it gives up after some</color>
<color=#75715e>   * number of retries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>ElectionThread</color> <color=#66d9ef>extends</color> <color=#f8f8f2>StoppableThread</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Non-null on termination if a proposal was issued and accepted. */</color>
    <color=#f8f8f2>Proposer</color><color=#f8f8f2>.</color><color=#a6e22e>WinningProposal</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Non-null at termination if no proposal was accepted. */</color>
    <color=#f8f8f2>MaxRetriesException</color> <color=#f8f8f2>maxRetriesException</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RetryPredicate</color> <color=#f8f8f2>retryPredicate</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>ElectionThread</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>RetryPredicate</color> <color=#f8f8f2>retryPredicate</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>envName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"ElectionThread_"</color> <color=#f92672>+</color> <color=#f8f8f2>envName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>quorumPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>retryPredicate</color> <color=#f92672>=</color> <color=#f8f8f2>retryPredicate</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Carries out an election and informs learners of the results. Any uncaught exception will</color>
<color=#75715e>     * invalidate the environment if this is being executed on behalf of a replicated node.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Started election thread "</color> <color=#f92672>+</color> <color=#66d9ef>new</color> <color=#f8f8f2>Date</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>winningProposal</color> <color=#f92672>=</color> <color=#f8f8f2>proposer</color><color=#f8f8f2>.</color><color=#a6e22e>issueProposal</color><color=#f8f8f2>(</color><color=#f8f8f2>quorumPolicy</color><color=#f8f8f2>,</color> <color=#f8f8f2>retryPredicate</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * TODO: Consider adding an optimization to inform SECONDARY</color>
<color=#75715e>         * nodes of election results, but continuing to only wait for</color>
<color=#75715e>         * the completion of notifications to ELECTABLE nodes.  That</color>
<color=#75715e>         * change would increase the chance that SECONDARY nodes have</color>
<color=#75715e>         * up-to-date information about the master, but would avoid</color>
<color=#75715e>         * adding sensitivity to potentially longer network delays in</color>
<color=#75715e>         * communicating with secondary nodes.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>informLearners</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>repGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getAllLearnerSockets</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>winningProposal</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>pool</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>MaxRetriesException</color> <color=#f8f8f2>mre</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>maxRetriesException</color> <color=#f92672>=</color> <color=#f8f8f2>mre</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Exiting election after "</color> <color=#f92672>+</color> <color=#f8f8f2>retryPredicate</color><color=#f8f8f2>.</color><color=#a6e22e>retries</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" retries"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownNow</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Election thread interrupted"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cleanup</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Election thread exited. Group master: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>repNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                    <color=#f92672>?</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getMasterStatus</color><color=#f8f8f2>().</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>()</color>
                    <color=#f8f8f2>:</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shutdownDone</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>shutdownThread</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>initiateSoftShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>electionLatch</color> <color=#f92672>=</color> <color=#f8f8f2>electionListener</color><color=#f8f8f2>.</color><color=#a6e22e>getElectionLatch</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionLatch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Unblock any initiated elections waiting for a result as</color>
<color=#75715e>         * well as this thread.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>electionLatch</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Wait roughly for the time it would take for a read to timeout.</color>
<color=#75715e>       * since the delay in testing the latch is probably related to</color>
<color=#75715e>       * some slow network event</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getReadTimeout</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Statistics from the election. Should only be invoked after the run() method has exited.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return statistics generated by the proposer</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>winningProposal</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
          <color=#f92672>?</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>.</color><color=#a6e22e>proposerStats</color>
          <color=#f8f8f2>:</color> <color=#f8f8f2>maxRetriesException</color><color=#f8f8f2>.</color><color=#a6e22e>proposerStats</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** @see StoppableThread#getLogger */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to propagate the results of an election to any monitors. Note that monitors are informed</color>
<color=#75715e>   * of results redundantly, both from the node that concludes the election and via this</color>
<color=#75715e>   * re-propagation. The use of multiple network paths increases the likelihood that the result will</color>
<color=#75715e>   * reach the monitor via some functioning network path.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The method returns immediately after queuing the operation in the thread pool.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>asyncInformMonitors</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Value</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>monitorSockets</color> <color=#f92672>=</color> <color=#f8f8f2>repGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getAllMonitorSockets</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>monitorSockets</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Propagating election results to %d monitors\n"</color><color=#f8f8f2>,</color> <color=#f8f8f2>monitorSockets</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>InformLearners</color><color=#f8f8f2>(</color><color=#f8f8f2>monitorSockets</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Proposer</color><color=#f8f8f2>.</color><color=#a6e22e>WinningProposal</color><color=#f8f8f2>(</color><color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>)));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Provides the underpinnings of the async mechanism used to deliver election results to the</color>
<color=#75715e>   * monitors.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>InformLearners</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Runnable</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learners</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Proposer</color><color=#f8f8f2>.</color><color=#a6e22e>WinningProposal</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>InformLearners</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learners</color><color=#f8f8f2>,</color> <color=#f8f8f2>Proposer</color><color=#f8f8f2>.</color><color=#a6e22e>WinningProposal</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>learners</color> <color=#f92672>=</color> <color=#f8f8f2>learners</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>winningProposal</color> <color=#f92672>=</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>informLearners</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>learners</color><color=#f8f8f2>,</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>pool</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Task to re-inform learners of election results by re-broadcasting the results of an election</color>
<color=#75715e>   * from the master. This re-broadcast is intended to help in network partition situations. See</color>
<color=#75715e>   * [#20220] for details.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>RebroadcastTask</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TimerTask</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Lock to ensure that async executions don't overlap. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReentrantLock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReentrantLock</color><color=#f8f8f2>();</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>acquireFailCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>periodMs</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>RebroadcastTask</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>periodMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>periodMs</color> <color=#f92672>=</color> <color=#f8f8f2>periodMs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPeriod</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>periodMs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * If the node is a master, it broadcasts election results to nodes that are not currently</color>
<color=#75715e>     * connected to it via feeders.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>It's worth noting that since this is a timer task method it must be be lightweight. So the</color>
<color=#75715e>     * actual broadcast is done in an asynchronous method using a thread from the election thread</color>
<color=#75715e>     * pool.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>tryLock</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f92672>++</color><color=#f8f8f2>acquireFailCount</color> <color=#f92672>%</color> <color=#ae81ff>100</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Failed to acquire lock after "</color> <color=#f92672>+</color> <color=#f8f8f2>acquireFailCount</color> <color=#f92672>+</color> <color=#e6db74>" retries"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>acquireFailCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getMasterStatus</color><color=#f8f8f2>().</color><color=#a6e22e>isGroupMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Re-informing when the node is a master is just an</color>
<color=#75715e>         * optimization, it does not impact correctness. Further</color>
<color=#75715e>         * minimize network traffic by trying just the nodes that are</color>
<color=#75715e>         * currently disconnected.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>FeederManager</color> <color=#f8f8f2>feederManager</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>active</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>activeReplicas</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>active</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>());</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>rn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>repGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getAllLearnerMembers</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>active</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>rn</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>learners</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>rn</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketAddress</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>learners</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"informing learners:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>learners</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>())</color>
                <color=#f92672>+</color> <color=#e6db74>" active: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>active</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>()));</color>

        <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Runnable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
              <color=#a6e22e>@Override</color>
              <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>learner</color><color=#f8f8f2>.</color><color=#a6e22e>reinformLearners</color><color=#f8f8f2>(</color><color=#f8f8f2>learners</color><color=#f8f8f2>,</color> <color=#f8f8f2>pool</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color> <color=#e6db74>"Unexpected exception:"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>isHeldByCurrentThread</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>