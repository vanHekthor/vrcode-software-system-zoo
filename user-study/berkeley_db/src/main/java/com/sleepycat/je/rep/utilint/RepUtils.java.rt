<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ReplicaConsistencyPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.NoConsistencyRequiredPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationNetworkConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.TimeConsistencyPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory.ConnectOptions</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net.SimpleDataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.PropUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHookExecute</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.Socket</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.SocketChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Properties</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.CountDownLatch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.LinkedBlockingQueue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicReference</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.BinaryProtocolStatDefinition.N_MESSAGES_WRITTEN</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.BinaryProtocolStatDefinition.N_WRITE_NANOS</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RepUtils</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_PRINT_THREAD</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_PRINT_TIME</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Maps from uppercase ReplicaConsistencyPolicy name to the policy's format. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConsistencyPolicyFormat</color><color=#f92672><?>></color> <color=#f8f8f2>consistencyPolicyFormats</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConsistencyPolicyFormat</color><color=#f92672><?>></color><color=#f8f8f2>();</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>addConsistencyPolicyFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeConsistencyPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimeConsistencyPolicyFormat</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>addConsistencyPolicyFormat</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>NoConsistencyRequiredPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoConsistencyRequiredPolicyFormat</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Canonical channel instance used to indicate that this is the last</color>
<color=#75715e>   * instance of a channel in a channel queue and that the queue is</color>
<color=#75715e>   * effectively closed. This value is typically used during a soft shutdown</color>
<color=#75715e>   * of a thread to cause the thread waiting on the queue to wake up and</color>
<color=#75715e>   * take notice.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>CHANNEL_EOF_MARKER</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>CHANNEL_EOF_MARKER</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleDataChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>SocketChannel</color><color=#f8f8f2>.</color><color=#a6e22e>open</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If not null, called by openSocketChannel with the connect options before opening the socket --</color>
<color=#75715e>   * for unit testing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>ConnectOptions</color><color=#f92672>></color> <color=#f8f8f2>openSocketChannelHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Define a new ConsistencyPolicyFormat. Should only be called outside of this class to add</color>
<color=#75715e>   * support custom policies for testing. Must be called when the system is quiescent, since the map</color>
<color=#75715e>   * is unsynchronized.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name must be the first part of the policy string with a non-letter delimiter following</color>
<color=#75715e>   *     it, or must be the entire policy string.</color>
<color=#75715e>   * @param format to register.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>addConsistencyPolicyFormat</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ConsistencyPolicyFormat</color><color=#f92672><?></color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>consistencyPolicyFormats</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>Locale</color><color=#f8f8f2>.</color><color=#a6e22e>ENGLISH</color><color=#f8f8f2>),</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * ReplicaConsistencyPolicy must be stored as a String for use with ReplicationConfig and</color>
<color=#75715e>   * je.properties. ConsistencyPolicyFormat is an internal handler that formats and parses the</color>
<color=#75715e>   * string representation of the policy. Only a fixed number of string-representable policies are</color>
<color=#75715e>   * supported. Other policies that are not string-representable can only be used in</color>
<color=#75715e>   * TransactionConfig, not ReplicationConfig. For testing only, we allow defining new custom</color>
<color=#75715e>   * policies.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>ConsistencyPolicyFormat</color><color=#f92672><</color><color=#f8f8f2>T</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>String</color> <color=#a6e22e>policyToString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>T</color> <color=#f8f8f2>policy</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>T</color> <color=#a6e22e>stringToPolicy</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>string</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>TimeConsistencyPolicyFormat</color>
      <color=#66d9ef>implements</color> <color=#f8f8f2>ConsistencyPolicyFormat</color><color=#f92672><</color><color=#f8f8f2>TimeConsistencyPolicy</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>policyToString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>TimeConsistencyPolicy</color> <color=#f8f8f2>policy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>policy</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
          <color=#f92672>+</color> <color=#e6db74>"("</color>
          <color=#f92672>+</color> <color=#f8f8f2>policy</color><color=#f8f8f2>.</color><color=#a6e22e>getPermissibleLag</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>)</color>
          <color=#f92672>+</color> <color=#e6db74>" ms,"</color>
          <color=#f92672>+</color> <color=#f8f8f2>policy</color><color=#f8f8f2>.</color><color=#a6e22e>getTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>)</color>
          <color=#f92672>+</color> <color=#e6db74>" ms)"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>TimeConsistencyPolicy</color> <color=#a6e22e>stringToPolicy</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>string</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Format: (<lag>, <timeout>) */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>args</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeConsistencyPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>'('</color> <color=#f92672>||</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>')'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Incorrect property value syntax: "</color> <color=#f92672>+</color> <color=#f8f8f2>string</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>arg1</color> <color=#f92672>=</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>','</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arg1</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Incorrect property value syntax: "</color> <color=#f92672>+</color> <color=#f8f8f2>string</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>lag</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>arg1</color><color=#f8f8f2>));</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>arg2</color> <color=#f92672>=</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>')'</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arg2</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Incorrect property value syntax: "</color> <color=#f92672>+</color> <color=#f8f8f2>string</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>arg1</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>arg2</color><color=#f8f8f2>));</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimeConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>lag</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>NoConsistencyRequiredPolicyFormat</color>
      <color=#66d9ef>implements</color> <color=#f8f8f2>ConsistencyPolicyFormat</color><color=#f92672><</color><color=#f8f8f2>NoConsistencyRequiredPolicy</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>policyToString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>NoConsistencyRequiredPolicy</color> <color=#f8f8f2>policy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>NoConsistencyRequiredPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>NoConsistencyRequiredPolicy</color> <color=#a6e22e>stringToPolicy</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>string</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>NoConsistencyRequiredPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NO_CONSISTENCY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts a policy into a string suitable for use as a property value in a je.properties file or</color>
<color=#75715e>   * elsewhere.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param policy the policy being converted.</color>
<color=#75715e>   * @return the formatted string representing the policy.</color>
<color=#75715e>   * @throws IllegalArgumentException if the specific policy does not have a property value format,</color>
<color=#75715e>   *     via ReplicationConfig(Properties) ctor and setter.</color>
<color=#75715e>   * @see #getReplicaConsistencyPolicy(String)</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getPropertyString</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>policy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"rawtypes"</color><color=#f8f8f2>)</color>
    <color=#f8f8f2>ConsistencyPolicyFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>consistencyPolicyFormats</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>policy</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Policy: "</color> <color=#f92672>+</color> <color=#f8f8f2>policy</color> <color=#f92672>+</color> <color=#e6db74>" cannot be used as a property"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>policyToString</color><color=#f8f8f2>(</color><color=#f8f8f2>policy</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts a property string into a policy instance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param propertyValue the formatted string representing the policy.</color>
<color=#75715e>   * @return the policy computed from the string</color>
<color=#75715e>   * @throws IllegalArgumentException via ReplicationConfig(Properties) ctor and setter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#a6e22e>getReplicaConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>propertyValue</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>upperCasePropertyValue</color> <color=#f92672>=</color> <color=#f8f8f2>propertyValue</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>Locale</color><color=#f8f8f2>.</color><color=#a6e22e>ENGLISH</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConsistencyPolicyFormat</color><color=#f92672><?>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color>
        <color=#f8f8f2>consistencyPolicyFormats</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>upperCasePropertyValue</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>upperCasePropertyValue</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>)</color>
              <color=#f92672>&&</color> <color=#f8f8f2>upperCasePropertyValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color>
              <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isLetter</color><color=#f8f8f2>(</color><color=#f8f8f2>upperCasePropertyValue</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()))))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ConsistencyPolicyFormat</color><color=#f92672><?></color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>stringToPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>propertyValue</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Invalid consistency policy: "</color> <color=#f92672>+</color> <color=#f8f8f2>propertyValue</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Like CountDownLatch, but makes provision in the await for the await, or more specifically the</color>
<color=#75715e>   * new awaitOrException method to be exited via an exception.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ExceptionAwareCountDownLatch</color> <color=#66d9ef>extends</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* The environment that may need to be invalidated. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The exception (if any) that caused the latch to be released */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>DatabaseException</color><color=#f92672>></color> <color=#f8f8f2>terminatingException</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ExceptionAwareCountDownLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>count</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The method used to free an await, ensuring that it throws an exception at the</color>
<color=#75715e>     * awaitOrException.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param e the exception to be wrapped in a DatabaseException and thrown.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseAwait</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>terminatingException</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>prepareTerminatingException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>));</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>getCount</color><color=#f8f8f2>();</color> <color=#f8f8f2>count</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>count</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>countDown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>getCount</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Blocks, waiting for the latch to count down to zero, or until an {@code Exception} is</color>
<color=#75715e>     * provided. The exception is thrown in every thread that is waiting in this method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #releaseAwait</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>awaitOrException</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>await</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>done</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>terminatingException</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>addLocalStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>done</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>awaitOrException</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>awaitOrException</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>SECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * DO NOT use this method. Use awaitOrException instead, so that any outstanding exceptions are</color>
<color=#75715e>     * thrown.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#a6e22e>@Deprecated</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>await</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Use awaitOrException() instead of await"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Like {@code LinkedBlockingQueue}, but provides a {@code pollOrException()} method that should</color>
<color=#75715e>   * be used instead of {@code poll()}, so that callers don't have to treat exception cases</color>
<color=#75715e>   * specially.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see ExceptionAwareCountDownLatch</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"serial"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ExceptionAwareBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>LinkedBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>T</color> <color=#f8f8f2>dummyValue</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>DatabaseException</color><color=#f92672>></color> <color=#f8f8f2>terminatingException</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ExceptionAwareBlockingQueue</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>T</color> <color=#f8f8f2>dummyValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dummyValue</color> <color=#f92672>=</color> <color=#f8f8f2>dummyValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>releasePoll</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>terminatingException</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>prepareTerminatingException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>add</color><color=#f8f8f2>(</color><color=#f8f8f2>dummyValue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>T</color> <color=#a6e22e>pollOrException</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>T</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>poll</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>terminatingException</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>addLocalStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** (Use {@link #pollOrException} instead. */</color>
    <color=#a6e22e>@Override</color>
    <color=#a6e22e>@Deprecated</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>T</color> <color=#a6e22e>poll</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Use pollOrException() instead of poll()"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The terminating exception is wrapped in an EFE if it is not already a DatabaseException (which</color>
<color=#75715e>   * is unexpected). Also text is added to the message indicating it was thrown by an HA thread,</color>
<color=#75715e>   * since it will often be re-thrown in an app thread and the stack trace may be confusing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>DatabaseException</color> <color=#a6e22e>prepareTerminatingException</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>de</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>DatabaseException</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>de</color><color=#f8f8f2>.</color><color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#e6db74>"Originally thrown by HA thread: "</color> <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>de</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ideally we should wrap the exception before rethrowing in a different thread, but this confuses</color>
<color=#75715e>   * exception handlers that call getCause. So instead we add the per-thread local stack trace to</color>
<color=#75715e>   * the message.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>DatabaseException</color> <color=#a6e22e>addLocalStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>addRethrownStackTrace</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Forces a shutdown of the channel ignoring any errors that may be encountered in the process.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param namedChannel the channel to be shutdown</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>NamedChannel</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>namedChannel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>shutdownChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For SSL, shutting down the socket before shutting down the</color>
<color=#75715e>     * channel is a no-no.  That results in SSLExceptions being</color>
<color=#75715e>     * thrown due to missing close_notify alerts.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Ignore */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a socket channel with the designated properties</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param addr the remote endpoint socket address</color>
<color=#75715e>   * @param connectOpts connect options to be applied to the channel</color>
<color=#75715e>   * @return the connected channel</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>SocketChannel</color> <color=#a6e22e>openSocketChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>addr</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConnectOptions</color> <color=#f8f8f2>connectOpts</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>openSocketChannelHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>connectOpts</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SocketChannel</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#f8f8f2>SocketChannel</color><color=#f8f8f2>.</color><color=#a6e22e>open</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>configureBlocking</color><color=#f8f8f2>(</color><color=#f8f8f2>connectOpts</color><color=#f8f8f2>.</color><color=#a6e22e>getBlocking</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Socket</color> <color=#f8f8f2>socket</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>socket</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>connectOpts</color><color=#f8f8f2>.</color><color=#a6e22e>getReceiveBufferSize</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>socket</color><color=#f8f8f2>.</color><color=#a6e22e>setReceiveBufferSize</color><color=#f8f8f2>(</color><color=#f8f8f2>connectOpts</color><color=#f8f8f2>.</color><color=#a6e22e>getReceiveBufferSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>socket</color><color=#f8f8f2>.</color><color=#a6e22e>setTcpNoDelay</color><color=#f8f8f2>(</color><color=#f8f8f2>connectOpts</color><color=#f8f8f2>.</color><color=#a6e22e>getTcpNoDelay</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>socket</color><color=#f8f8f2>.</color><color=#a6e22e>setSoTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>connectOpts</color><color=#f8f8f2>.</color><color=#a6e22e>getReadTimeout</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>socket</color><color=#f8f8f2>.</color><color=#a6e22e>setReuseAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>connectOpts</color><color=#f8f8f2>.</color><color=#a6e22e>getReuseAddr</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>socket</color><color=#f8f8f2>.</color><color=#a6e22e>connect</color><color=#f8f8f2>(</color><color=#f8f8f2>addr</color><color=#f8f8f2>,</color> <color=#f8f8f2>connectOpts</color><color=#f8f8f2>.</color><color=#a6e22e>getOpenTimeout</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a Data channel with the designated properties</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param addr the remote endpoint socket address</color>
<color=#75715e>   * @param factory DataChannel factory for channel creation</color>
<color=#75715e>   * @param connectOpts connect options to be applied to the channel</color>
<color=#75715e>   * @return the connected channel</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannel</color> <color=#a6e22e>openBlockingChannel</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>addr</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>factory</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConnectOptions</color> <color=#f8f8f2>connectOpts</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>factory</color><color=#f8f8f2>.</color><color=#a6e22e>connect</color><color=#f8f8f2>(</color><color=#f8f8f2>addr</color><color=#f8f8f2>,</color> <color=#f8f8f2>connectOpts</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Chains an old outstanding exception to the tail of a new one, so it's not lost.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newt the new throwable</color>
<color=#75715e>   * @param oldt the old throwable</color>
<color=#75715e>   * @return the new throwable extended with the old cause</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Throwable</color> <color=#a6e22e>chainExceptionCause</color><color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>newt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>oldt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Don't lose the original exception */</color>
    <color=#f8f8f2>Throwable</color> <color=#f8f8f2>tail</color> <color=#f92672>=</color> <color=#f8f8f2>newt</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>tail</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tail</color> <color=#f92672>=</color> <color=#f8f8f2>tail</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>tail</color><color=#f8f8f2>.</color><color=#a6e22e>initCause</color><color=#f8f8f2>(</color><color=#f8f8f2>oldt</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newt</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>writeTimesString</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>nMessagesWritten</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_WRITTEN</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>nWriteNanos</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_WRITE_NANOS</color><color=#f8f8f2>);</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>avgWriteNanos</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nMessagesWritten</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>nWriteNanos</color> <color=#f92672>/</color> <color=#f8f8f2>nMessagesWritten</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color>
        <color=#e6db74>" write time: %, dms Avg write time: %,dus"</color><color=#f8f8f2>,</color> <color=#f8f8f2>nWriteNanos</color> <color=#f92672>/</color> <color=#ae81ff>1000000</color><color=#f8f8f2>,</color> <color=#f8f8f2>avgWriteNanos</color> <color=#f92672>/</color> <color=#ae81ff>1000</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Read replication access properties from a property file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param props a Properties object into which the properties will be stored</color>
<color=#75715e>   * @param accessPropsFile an abstract File naming a file containing property settings.</color>
<color=#75715e>   * @return the input properties object, updated with the property settings found in the file.</color>
<color=#75715e>   * @throws IllegalArgumentException if the accessPropsFile contains invalid settings.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Properties</color> <color=#a6e22e>populateNetProps</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>accessPropsFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Properties</color> <color=#f8f8f2>rawProps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>applyFileConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>accessPropsFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>rawProps</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color> <color=#75715e>// forReplication</color>

    <color=#75715e>/* filter out the properties that are not relevant */</color>
    <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>applyRepNetProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>rawProps</color><color=#f8f8f2>,</color> <color=#f8f8f2>props</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A simple debugging utility used to obtain information about the execution environment that's</color>
<color=#75715e>   * only available through some system utility, like netstat, or jps, etc. It's up to the caller to</color>
<color=#75715e>   * ensure the availability of the utility and ensure that it's on the search path.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @args the arguments to a ProcessBuilder with args[0] being the command and args[1-...] being</color>
<color=#75715e>   *     its args</color>
<color=#75715e>   * @return a string denoting the output from the command. Or a string prefixed by the word</color>
<color=#75715e>   *     EXCEPTION, if an exception was encountered, followed by the exception class name and</color>
<color=#75715e>   *     exception message.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>exec</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>...</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>bao</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>(</color><color=#ae81ff>1024</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PrintStream</color><color=#f8f8f2>(</color><color=#f8f8f2>bao</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>ProcessBuilder</color> <color=#f8f8f2>builder</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ProcessBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>redirectErrorStream</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Process</color> <color=#f8f8f2>process</color> <color=#f92672>=</color> <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#f8f8f2>process</color><color=#f8f8f2>.</color><color=#a6e22e>getInputStream</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InputStreamReader</color> <color=#f8f8f2>isr</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InputStreamReader</color><color=#f8f8f2>(</color><color=#f8f8f2>is</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>BufferedReader</color> <color=#f8f8f2>br</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedReader</color><color=#f8f8f2>(</color><color=#f8f8f2>isr</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>line</color> <color=#f92672>=</color> <color=#f8f8f2>br</color><color=#f8f8f2>.</color><color=#a6e22e>readLine</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>output</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"EXCEPTION:"</color> <color=#f92672>+</color> <color=#e6db74>" class:"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" message:"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>bao</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to create deliberate clock skews for testing purposes. Replicator</color>
<color=#75715e>   * code should use it instead of invoking System.currentTimeMillis()</color>
<color=#75715e>   * directly.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Clock</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>skewMs</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Clock</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>skewMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>skewMs</color> <color=#f92672>=</color> <color=#f8f8f2>skewMs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>skewMs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>