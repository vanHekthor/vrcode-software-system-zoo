<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Learner</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.MasterValue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Protocol</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.TimebasedProposalGenerator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.GroupService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupProtocol</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupProtocol.EnsureOK</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupProtocol.Fail</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupProtocol.GroupResponse</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupProtocol.TransferOK</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepNodeImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ReplicationFormatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher.ServiceConnectFailedException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net.DataChannelFactoryBuilder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Administrative APIs for use by applications which do not have direct access to a replicated</color>
<color=#75715e> * environment. The class supplies methods that can be used to list group members, remove members,</color>
<color=#75715e> * update network addresses, and find the current master.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Information is found and updated by querying nodes in the group. Because of that,</color>
<color=#75715e> * ReplicationGroupAdmin can only obtain information when there is at least one node alive in the</color>
<color=#75715e> * replication group.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ReplicationGroupAdmin</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Protocol</color> <color=#f8f8f2>electionsProtocol</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepGroupProtocol</color> <color=#f8f8f2>groupProtocol</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a group admin object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param groupName the name of the group to be administered</color>
<color=#75715e>   * @param helperSockets the sockets on which it can contact helper nodes in the replication group</color>
<color=#75715e>   *     to carry out admin services.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplicationGroupAdmin</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>createDefault</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden SSL deferred Constructs a group admin object.</color>
<color=#75715e>   * @param groupName the name of the group to be administered</color>
<color=#75715e>   * @param helperSockets the sockets on which it can contact helper nodes in the replication group</color>
<color=#75715e>   *     to carry out admin services.</color>
<color=#75715e>   * @param repNetConfig a network configuration to use</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplicationGroupAdmin</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>initializeFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden SSL deferred Constructs a group admin object.</color>
<color=#75715e>   * @param groupName the name of the group to be administered</color>
<color=#75715e>   * @param helperSockets the sockets on which it can contact helper nodes in the replication group</color>
<color=#75715e>   *     to carry out admin services.</color>
<color=#75715e>   * @param channelFactory the factory for channel creation</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplicationGroupAdmin</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>groupName</color> <color=#f92672>=</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channelFactory</color> <color=#f92672>=</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>electionsProtocol</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>TimebasedProposalGenerator</color><color=#f8f8f2>.</color><color=#a6e22e>getParser</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>MasterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getParser</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NOCHECK</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color> <color=#75715e>/* repImpl */</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>groupProtocol</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepGroupProtocol</color><color=#f8f8f2>(</color><color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NOCHECK</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerFixedPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>(),</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NOCHECK</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>formatter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NOCHECK</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the helper sockets being used to contact a replication group member, in order to query</color>
<color=#75715e>   * for the information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the set of helper sockets.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#a6e22e>getHelperSockets</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the helper sockets being used to contact a replication group member, in order to query for</color>
<color=#75715e>   * the information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param helperSockets the sockets on which it can contact helper nodes in the replication group</color>
<color=#75715e>   *     to carry out admin services.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setHelperSockets</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the name of the replication group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the group name.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getGroupName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the socket address associated with the node that's currently the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the socket address associated with the master</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getMasterSocket</color><color=#f8f8f2>()</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>MasterValue</color> <color=#f8f8f2>masterValue</color> <color=#f92672>=</color>
        <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>findMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>electionsProtocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>masterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>masterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the node name associated with the master</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the master node ID</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMasterNodeName</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MasterValue</color> <color=#f8f8f2>masterValue</color> <color=#f92672>=</color>
        <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>findMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>electionsProtocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>masterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Internal implementation class.</color>
<color=#75715e>   *     <p>Ensures that this monitor node is a member of the replication group, adding it to the</color>
<color=#75715e>   *     group if it isn't already.</color>
<color=#75715e>   * @param monitor the monitor node</color>
<color=#75715e>   * @return the master node that was contacted to ensure the monitor</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationNode</color> <color=#a6e22e>ensureMonitor</color><color=#f8f8f2>(</color><color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>monitor</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isMonitor</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node type must be Monitor not: "</color> <color=#f92672>+</color> <color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>MasterValue</color> <color=#f8f8f2>masterValue</color> <color=#f92672>=</color>
        <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>findMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>electionsProtocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>EnsureOK</color> <color=#f8f8f2>okResp</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>EnsureOK</color><color=#f8f8f2>)</color> <color=#f8f8f2>doMessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>groupProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>EnsureNode</color><color=#f8f8f2>(</color><color=#f8f8f2>monitor</color><color=#f8f8f2>),</color> <color=#f8f8f2>EnsureOK</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>okResp</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepNodeImpl</color><color=#f8f8f2>(</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>(</color><color=#f8f8f2>masterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>()),</color>
        <color=#f8f8f2>NodeType</color><color=#f8f8f2>.</color><color=#a6e22e>ELECTABLE</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>masterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>masterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>(),</color>
        <color=#75715e>/* JE version on monitor is not known */</color>
        <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes this node from the group, so that it is no longer a member of the group. When removed,</color>
<color=#75715e>   * it will no longer be able to connect to a master, nor can it participate in elections. If the</color>
<color=#75715e>   * node is a {@link com.sleepycat.je.rep.monitor.Monitor} it will no longer be informed of</color>
<color=#75715e>   * election results. Once removed, a node cannot be added again to the group under the same node</color>
<color=#75715e>   * name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Ideally, the node being removed should be shut down before this call is issued.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node is an active <code>Replica</code> the master will terminate its connection with</color>
<color=#75715e>   * the node and will not allow the replica to reconnect with the group, since it's no longer a</color>
<color=#75715e>   * member of the group. If the node wishes to re-join it should do so with a different node name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An active Master cannot be removed. It must first be shutdown, or transition to the <code></color>
<color=#75715e>   * Replica</code> state before it can be removed from the group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link NodeType#SECONDARY Secondary} nodes cannot be removed; they automatically leave the</color>
<color=#75715e>   * group when they are shut down or become disconnected from the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nodeName identifies the node being removed from the group</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @throws IllegalArgumentException if the type of the node is {@code SECONDARY}</color>
<color=#75715e>   * @throws MemberNotFoundException if the node denoted by <code>nodeName</code> is not a member of</color>
<color=#75715e>   *     the replication group</color>
<color=#75715e>   * @throws MasterStateException if the member being removed is currently the Master</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @see <a href="{@docRoot}/../ReplicationGuide/utilities.html#node-addremove"</color>
<color=#75715e>   *     target="_top">Adding and Removing Nodes From the Group</a></color>
<color=#75715e>   */</color>
  <color=#75715e>/*</color>
<color=#75715e>   * TODO: EXTERNAL is hidden for now. The doc need updated to include</color>
<color=#75715e>   * EXTERNAL when it becomes public.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>masterErrorMessage</color> <color=#f92672>=</color> <color=#e6db74>"Cannot remove an active master"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color> <color=#f92672>=</color> <color=#f8f8f2>groupProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>RemoveMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>checkMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterErrorMessage</color><color=#f8f8f2>,</color> <color=#75715e>/* electableOnly */</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot remove node with transient ID: "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>doMessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>OK</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden internal, for use in disaster recovery [#23447]</color>
<color=#75715e>   *     <p>Deletes this node from the group, so that it is no longer a member of the group. When</color>
<color=#75715e>   *     deleted, it will not connect to a master, or participate in elections until the environment</color>
<color=#75715e>   *     is reopened. If the node is a {@link com.sleepycat.je.rep.monitor.Monitor} it will no</color>
<color=#75715e>   *     longer be informed of election results. Unlike removed nodes, deleted nodes are completely</color>
<color=#75715e>   *     removed from the group, so they can be added again to the group under the same node name.</color>
<color=#75715e>   *     <p>The node being deleted must be shut down before this call is issued.</color>
<color=#75715e>   *     <p>If the node is an active <code>Replica</code> the master will terminate its connection</color>
<color=#75715e>   *     with the node.</color>
<color=#75715e>   *     <p>An active Master cannot be deleted. It must first be shutdown, or transition to the</color>
<color=#75715e>   *     <code>Replica</code> state before it can be deleted from the group.</color>
<color=#75715e>   *     <p>{@link NodeType#SECONDARY Secondary} and {@link NodeType#EXTERNAL External} nodes cannot</color>
<color=#75715e>   *     be deleted; they automatically leave the group when they are shut down or become</color>
<color=#75715e>   *     disconnected from the master.</color>
<color=#75715e>   * @param nodeName identifies the node being deleted from the group</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @throws MemberActiveException if the type of the node is {@code SECONDARY} or {@code EXTERNAL},</color>
<color=#75715e>   *     or if the node is active</color>
<color=#75715e>   * @throws MemberNotFoundException if the node denoted by <code>nodeName</code> is not a member of</color>
<color=#75715e>   *     the replication group</color>
<color=#75715e>   * @throws MasterStateException if the member being deleted is currently the Master</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>deleteMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemberActiveException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>masterErrorMessage</color> <color=#f92672>=</color> <color=#e6db74>"Cannot delete an active master"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color> <color=#f92672>=</color> <color=#f8f8f2>groupProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>DeleteMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>checkMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterErrorMessage</color><color=#f8f8f2>,</color> <color=#75715e>/* electableOnly */</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot delete node with transient ID: "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>doMessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>OK</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the current composition of the group from the Master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the group description</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationGroup</color> <color=#a6e22e>getGroup</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>GroupResponse</color> <color=#f8f8f2>resp</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>GroupResponse</color><color=#f8f8f2>)</color> <color=#f8f8f2>doMessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>groupProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>GroupRequest</color><color=#f8f8f2>(),</color> <color=#f8f8f2>GroupResponse</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>resp</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the {@link com.sleepycat.je.rep.NodeState state} of a replicated node and <code>state</color>
<color=#75715e>   * </code> of the application where the node is running in.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param repNode a ReplicationNode includes those information which are needed to connect to the</color>
<color=#75715e>   *     node</color>
<color=#75715e>   * @param socketConnectTimeout the timeout value for creating a socket connection with the</color>
<color=#75715e>   *     replicated node</color>
<color=#75715e>   * @return the state of the replicated node</color>
<color=#75715e>   * @throws IOException if the machine is down or no response is returned</color>
<color=#75715e>   * @throws ServiceConnectFailedException if can't connect to the service running on the replicated</color>
<color=#75715e>   *     node</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>NodeState</color> <color=#a6e22e>getNodeState</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>socketConnectTimeout</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceConnectFailedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbPing</color> <color=#f8f8f2>ping</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbPing</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>socketConnectTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ping</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the network address for a specified member of the replication group. When updating the</color>
<color=#75715e>   * address of this target replication node, the node cannot be alive. One common use case is when</color>
<color=#75715e>   * the replication member must be moved to a new host, possibly because of machine failure.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To make a network address change, take these steps:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ol></color>
<color=#75715e>   *   <li>Shutdown the node that is being updated.</color>
<color=#75715e>   *   <li>Use this method to change the hostname and port of the node.</color>
<color=#75715e>   *   <li>Start the node on the new machine, or at its new port, using the new hostname/port. If</color>
<color=#75715e>   *       the log files are available at the node, they will be reused. A network restore operation</color>
<color=#75715e>   *       may need to be initiated by the application to copy over any needed log files if no log</color>
<color=#75715e>   *       files are available, or if they have become obsolete.</color>
<color=#75715e>   * </ol></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The address of a {@link NodeType#SECONDARY} node cannot be updated with this method, since</color>
<color=#75715e>   * nodes must be members but not alive to be updated, and secondary nodes are not members when</color>
<color=#75715e>   * they are not alive. To change the address of a secondary node, restart the node with the</color>
<color=#75715e>   * updated address.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nodeName the name of the node whose address will be updated.</color>
<color=#75715e>   * @param newHostName the new host name of the node</color>
<color=#75715e>   * @param newPort the new port number of the node</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   * @throws MasterStateException if the member being updated is currently the master</color>
<color=#75715e>   * @throws MemberNotFoundException if the node denoted by <code>nodeName</code> is not a member of</color>
<color=#75715e>   *     the replication group</color>
<color=#75715e>   * @throws ReplicaStateException if the member being updated is currently alive</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @see DbResetRepGroup DbResetRepGroup, which can be used in a related but different use case to</color>
<color=#75715e>   *     copy and move a group.</color>
<color=#75715e>   */</color>
  <color=#75715e>/*</color>
<color=#75715e>   * TODO: EXTERNAL is hidden for now. The doc need updated to include</color>
<color=#75715e>   * EXTERNAL when it becomes public.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newHostName</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>ReplicaStateException</color><color=#f8f8f2>,</color> <color=#f8f8f2>UnknownMasterException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>masterErrorMessage</color> <color=#f92672>=</color> <color=#e6db74>"Can't update address for the current master."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color> <color=#f92672>=</color> <color=#f8f8f2>groupProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>UpdateAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newHostName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>checkMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterErrorMessage</color><color=#f8f8f2>,</color> <color=#75715e>/* electableOnly */</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>doMessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>OK</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Transfers the master state from the current master to one of the electable replicas supplied in</color>
<color=#75715e>   * the argument list. This method sends a request to the original master to perform the operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws MasterTransferFailureException if the master transfer operation fails</color>
<color=#75715e>   * @throws UnknownMasterException if the master was not found</color>
<color=#75715e>   * @throws IllegalArgumentException if {@code nodeNames} contains the name of a node that is not</color>
<color=#75715e>   *     electable</color>
<color=#75715e>   * @see ReplicatedEnvironment#transferMaster</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>transferMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>nodeNames</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>timeUnit</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>force</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>MasterTransferFailureException</color><color=#f8f8f2>,</color> <color=#f8f8f2>UnknownMasterException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>node</color> <color=#f8f8f2>:</color> <color=#f8f8f2>nodeNames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkMember</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* electableOnly */</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nodeNameList</color> <color=#f92672>=</color> <color=#f8f8f2>commaJoin</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeNames</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeoutMillis</color> <color=#f92672>=</color> <color=#f8f8f2>timeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>toMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>transferMaster</color> <color=#f92672>=</color>
        <color=#f8f8f2>groupProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>TransferMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeNameList</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeoutMillis</color><color=#f8f8f2>,</color> <color=#f8f8f2>force</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>TransferOK</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>TransferOK</color><color=#f8f8f2>)</color> <color=#f8f8f2>doMessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>transferMaster</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransferOK</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getWinner</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>commaJoin</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>words</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>first</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>w</color> <color=#f8f8f2>:</color> <color=#f8f8f2>words</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>','</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>first</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Check that the specified node is an appropriate target. For example,</color>
<color=#75715e>   * make sure it's a valid node in the group, and it's not the same as</color>
<color=#75715e>   * the original node.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>RepNodeImpl</color> <color=#a6e22e>checkMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>masterErrorMessage</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>electableOnly</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemberNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>group</color> <color=#f92672>=</color> <color=#f8f8f2>getGroup</color><color=#f8f8f2>().</color><color=#a6e22e>getRepGroupImpl</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getNode</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Check the membership. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
        <color=#f92672>||</color>
        <color=#75715e>/* Creation is not yet acknowledged */</color>
        <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isRemoved</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isQuorumAck</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node: "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeName</color> <color=#f92672>+</color> <color=#e6db74>" is not a member of the "</color> <color=#f92672>+</color> <color=#e6db74>"group: "</color> <color=#f92672>+</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electableOnly</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node: "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeName</color> <color=#f92672>+</color> <color=#e6db74>" must have node type"</color> <color=#f92672>+</color> <color=#e6db74>" ELECTABLE, was "</color> <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isRemoved</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isQuorumAck</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nodeName</color>
              <color=#f92672>+</color> <color=#e6db74>" is not currently a member "</color>
              <color=#f92672>+</color> <color=#e6db74>"of the group: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>groupName</color>
              <color=#f92672>+</color> <color=#e6db74>", it has been removed."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check if the node itself is the master. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterErrorMessage</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>masterAddress</color> <color=#f92672>=</color> <color=#f8f8f2>getMasterSocket</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterAddress</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketAddress</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>masterErrorMessage</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Do a message exchange with the targeted master. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ResponseMessage</color> <color=#a6e22e>doMessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>respClass</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>UnknownMasterException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Do the communication. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>masterAddress</color> <color=#f92672>=</color> <color=#f8f8f2>getMasterSocket</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>me</color> <color=#f92672>=</color>
        <color=#f8f8f2>groupProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>MessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>masterAddress</color><color=#f8f8f2>,</color> <color=#f8f8f2>GroupService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>request</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>run</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>ResponseMessage</color> <color=#f8f8f2>resp</color> <color=#f92672>=</color> <color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>getResponseMessage</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resp</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>getException</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color><color=#e6db74>"Problem communicating with master."</color><color=#f8f8f2>,</color> <color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>getException</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Returning null on success is part of the message protocol, the</color>
<color=#75715e>       * caller expects it.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>respClass</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>resp</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Fail</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>getException</color><color=#f8f8f2>(</color><color=#f8f8f2>resp</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>respClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>resp</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>respClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>getException</color><color=#f8f8f2>(</color><color=#f8f8f2>resp</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>resp</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Examines the response and generates a meaningful error exception. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseException</color> <color=#a6e22e>getException</color><color=#f8f8f2>(</color><color=#f8f8f2>ResponseMessage</color> <color=#f8f8f2>resp</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resp</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"No response to request"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resp</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Fail</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Fail</color> <color=#f8f8f2>fail</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Fail</color><color=#f8f8f2>)</color> <color=#f8f8f2>resp</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>fail</color><color=#f8f8f2>.</color><color=#a6e22e>getReason</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>MEMBER_NOT_FOUND</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>(</color><color=#f8f8f2>fail</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>IS_MASTER</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>fail</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>IS_REPLICA</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicaStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>fail</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>TRANSFER_FAIL</color><color=#f8f8f2>:</color>
          <color=#75715e>// TODO: not worth it for now, but it wouldn't be hard to</color>
          <color=#75715e>// distinguish IllegalArg. cases here</color>
          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTransferFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>fail</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>fail</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resp</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ProtocolError</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(((</color><color=#f8f8f2>ProtocolError</color><color=#f8f8f2>)</color> <color=#f8f8f2>resp</color><color=#f8f8f2>).</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Response not recognized: "</color> <color=#f92672>+</color> <color=#f8f8f2>resp</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>initializeFactory</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DataChannelFactoryBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>