<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.evictor</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.Provisional</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicBoolean</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicLong</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.evictor.EvictorStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Overview --------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The Evictor is responsible for managing the JE cache. The cache is actually a collection of</color>
<color=#75715e> * in-memory btree nodes, implemented by the com.sleepycat.je.dbi.INList class. A subset of the</color>
<color=#75715e> * nodes in te INList are candidates for eviction. This subset is tracked in one or more LRULists,</color>
<color=#75715e> * which are maintained by the Evictor. When a node is evicted, it is detached from its containing</color>
<color=#75715e> * BTree and then removed from the INList and from its containing LRUList. Once all references to an</color>
<color=#75715e> * evicted node are removed, it can be GC'd by the JVM.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The Evictor owns a pool of threads that are available to handle eviction tasks. The eviction</color>
<color=#75715e> * pool is a standard java.util.concurrent thread pool, and can be mutably configured in terms of</color>
<color=#75715e> * core threads, max threads, and keepalive times.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Eviction is carried out by three types of threads: 1. An application thread, in the course of</color>
<color=#75715e> * doing critical eviction. 2. Daemon threads, such as the cleaner or INCompressor, in the course of</color>
<color=#75715e> * doing their respective duties. 3. Eviction pool threads.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Memory consumption is tracked by the MemoryBudget. The Arbiter, which is also owned by the</color>
<color=#75715e> * Evictor, is used to query the MemoryBudget and determine whether eviction is actually needed, and</color>
<color=#75715e> * if so, how many bytes should be evicted by an evicting thread.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Multiple threads can do eviction concurrently. As a result, it's important that eviction is</color>
<color=#75715e> * both thread safe and as parallel as possible. Memory thresholds are generally accounted for in an</color>
<color=#75715e> * unsynchronized fashion, and are seen as advisory. The only point of true synchronization is</color>
<color=#75715e> * around the selection of a node for eviction. The act of eviction itself can be done concurrently.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The eviction method is not reentrant, and a simple concurrent hash map of threads is used to</color>
<color=#75715e> * prevent recursive calls.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Details on the implementation of the LRU-based eviction policy</color>
<color=#75715e> * --------------------------------------------------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>------------------ Data structures ------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>An LRU eviction policy is approximated by one or more LRULists. An LRUList is a doubly linked</color>
<color=#75715e> * list consisting of BTree nodes. If a node participates in an LRUList, then whenever it is</color>
<color=#75715e> * accessed, it moves to the "back" of the list. When eviction is needed, the evictor evicts the</color>
<color=#75715e> * nodes at the "front" of the LRULists.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>An LRUList is implemented as 2 IN references: a "front" ref pointing to the IN at the front of</color>
<color=#75715e> * the list and a "back" ref, pointing to the IN at the back of the list. In addition, each IN has</color>
<color=#75715e> * "nextLRUNode" and "prevLRUNode" refs for participating in an LRUList. This implementation works</color>
<color=#75715e> * because an IN can belong to at most 1 LRUList at a time. Furthermore, it is the responsibility of</color>
<color=#75715e> * the Evictor to know which LRUList a node belongs to at any given time (more on this below). As a</color>
<color=#75715e> * result, each LRUList can assume that a node will either not be in any list at all, or will belong</color>
<color=#75715e> * to "this" list. This way, membership of a node to an LRUList can be tested by just checking that</color>
<color=#75715e> * either the nextLRUNode or prevLRUNode field of the node is non-null.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The operations on an LRUList are:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- addBack(IN) : Insert an IN at the back of the list. Assert that the node does not belong to</color>
<color=#75715e> * an LRUList already.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- addFront(IN) : Insert an IN at the front of the list. Assert that the node does not belong</color>
<color=#75715e> * to an LRUList already.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- moveBack(IN) : Move an IN to the back of the list, if it is in the list already. Noop if the</color>
<color=#75715e> * node is not in the list.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- moveFront(IN) : Move an IN to the front of the list, if it is in the list already. Noop if</color>
<color=#75715e> * the node is not in the list.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- removeFront() : Remove the IN at the front of the list and return it to the caller. Return</color>
<color=#75715e> * null if the list is empty.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- remove(IN) : Remove the IN from the list, if it is there. Return true if the node was in the</color>
<color=#75715e> * list, false otherwise.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- contains(IN): Return true if the node is contained in the list, false otherwise.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>All of the above methods are synchronized on the LRUList object. This may create a</color>
<color=#75715e> * synchronization bottleneck. To alleviate this, the Evictor uses multiple LRULists, which taken</color>
<color=#75715e> * together comprise a logical LRU list, called an LRUSet. The number of LRULists per LRUSet</color>
<color=#75715e> * (numLRULists) is fixed and determined by a config parameter (max of 64). The LRULists are stored</color>
<color=#75715e> * in an array whose length is numLRULists.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The Evictor actually maintains 2 LRUSets: priority-1 and priority-2. Within an LRUSet, the</color>
<color=#75715e> * nodeId is used to place a node to an LRUList: a node with id N goes to the (N % numLRULists)-th</color>
<color=#75715e> * list. In addition, each node has a flag (isInPri2LRU) to identify which LRUSet it belongs to.</color>
<color=#75715e> * This way, the Evictor knows which LRUList a node should belong to, and accesses the appropriate</color>
<color=#75715e> * LRUList instance when it needs to add/remove/move a node within the LRU.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Access to the isInPri2LRU flag is synchronized via the SH/EX node latch.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When there is no off-heap cache configured, the priority-1 LRU is the "mixed" one and the</color>
<color=#75715e> * priority-2 LRU is the "dirty" one. When there is an off-heap cache configured, the priority-1 LRU</color>
<color=#75715e> * is the "normal" one and the priority-2 LRU is the "level-2" one.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Justification for the mixed and dirty LRUSets: We would like to keep dirty INs in memory as</color>
<color=#75715e> * much as possible to achieve "write absorption". Ideally, dirty INs should be logged by the</color>
<color=#75715e> * checkpointer only. So, we would like to have the option in the Evictor to chose a clean IN to</color>
<color=#75715e> * evict over a dirty IN, even if the dirty IN is colder than the clean IN. In this mode, having a</color>
<color=#75715e> * single LRUSet will not perform very well in the situation when most (or a lot) or the INs are</color>
<color=#75715e> * dirty (because each time we get a dirty IN from an LRUList, we would have to put it back to the</color>
<color=#75715e> * list and try another IN until we find a clean one, thus spending a lot of CPU time trying to</color>
<color=#75715e> * select an eviction target).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Justification for the normal and level-2 LRUSets: With an off-heap cache, if level-2 INs were</color>
<color=#75715e> * not treated specially, the main cache evictor may run out of space and (according to LRU) evict a</color>
<color=#75715e> * level 2 IN, even though the IN references off-heap BINs (which will also be evicted). The problem</color>
<color=#75715e> * is that we really don't want to evict the off-heap BINs (or their LNs) when the off-heap cache is</color>
<color=#75715e> * not full. Therefore we only evict level-2 INs with off-heap children when there are no other</color>
<color=#75715e> * nodes that can be evicted. A level-2 IN is moved to the priority-2 LRUSet when it is encountered</color>
<color=#75715e> * by the evictor in the priority-1 LRUSet.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Within each LRUSet, picking an LRUList to evict from is done in a round- robin fashion. To</color>
<color=#75715e> * this end, the Evictor maintains 2 int counters: nextPri1LRUList and nextPri2LRUList. To evict</color>
<color=#75715e> * from the priority-1 LRUSet, an evicting thread picks the (nextPri1LRUList % numLRULists)-th list,</color>
<color=#75715e> * and then increments nextPri1LRUList. Similarly, to evict from the priority-2 LRUSet, an evicting</color>
<color=#75715e> * thread picks the (nextPri2LRUList % numLRULists)-th list, and then increments nextPri2LRUList.</color>
<color=#75715e> * This does not have to be done in a synchronized way.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A new flag (called hasCachedChildren) is added to each IN to indicate whether the IN has</color>
<color=#75715e> * cached children or not. This flag is used and maintained for upper INs (UINs) only. The need for</color>
<color=#75715e> * this flag is explained below. Access to this flag is synchronized via the SH/EX node latch.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>--------------------------------------------------------------------------- LRUSet management:</color>
<color=#75715e> * adding/removing/moving INs in/out of/within the LRUSets</color>
<color=#75715e> * ---------------------------------------------------------------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>We don't want to track upper IN (UIN) nodes that have cached children. There are 2 reasons for</color>
<color=#75715e> * this: (a) we cannot evict UINs with cached children (the children must be evicted first) and (b)</color>
<color=#75715e> * UINs will normally have high access rate, and would add a lot of CPU overhead if they were</color>
<color=#75715e> * tracked.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The hasCachedChildren flag is used as a quick way to determine whether a UIN has cached</color>
<color=#75715e> * children or not.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Adding a node to the LRU. -------------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A IN N is added in an LRUSet via one of the following Evictor methods: addBack(IN),</color>
<color=#75715e> * addFront(IN), pri2AddBack(IN), or pri2AddFront(IN). The first 2 add the node to the priority-1</color>
<color=#75715e> * LRUSet and set its isInPri2LRU flag to false. The last 2 add the node to the priority-2 LRUSet</color>
<color=#75715e> * and set its isInPri2LRU flag to true.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note: DINs and DBINs are never added to the LRU.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A node N is added to the LRU in the following situations:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. N is fetched into memory from the log. Evictor.addBack(N) is called inside</color>
<color=#75715e> * IN.postfetchInit() (just before N is connected to its parent).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2. N is a brand new node created during a split, and either N is a BIN or N does not get any</color>
<color=#75715e> * cached children from its split sibling. Evictor.addFront(N) is called if N is a BIN and the</color>
<color=#75715e> * cachemode is MAKE_COLD or EVICT_BIN. Otherwise, Evictor.addBack(child) is called.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3. N is a UIN that is being split, and before the split it had cached children, but all its</color>
<color=#75715e> * cached children have now moved to its newly created sibling. Evictor.addBack(N) is called in this</color>
<color=#75715e> * case.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>4. N is a UIN that looses its last cached child (either because the child is evicted or it is</color>
<color=#75715e> * deleted). Evictor.addBack(N) is called inside IN.setTarget(), if the target is null, N is a UIN,</color>
<color=#75715e> * N's hasCachedChildren flag is true, and N after setting the target to null, N has no remaining</color>
<color=#75715e> * cached children.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>5. N is the 1st BIN in a brand new tree. In this case, Evictor.addBack(N) is called inside</color>
<color=#75715e> * Tree.findBinForInsert().</color>
<color=#75715e> *</color>
<color=#75715e> * <p>6. N is a node visited during IN.rebuildINList() and N is either a BIN or a UIN with no cached</color>
<color=#75715e> * children.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>7. An evicting thread T removes N from the LRU, but after T EX-latches N, it determines that N</color>
<color=#75715e> * is not evictable or should not be evicted, and should be put back in the LRU. T puts N back to</color>
<color=#75715e> * the LRU using one of the above 4 methods (for details, read about the eviction processing below),</color>
<color=#75715e> * but ONLY IF (a) N is still in the INList, and (b) N is not in the LRU already.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Case (b) can happen if N is a UIN and after T removed N from the LRU but before T could latch</color>
<color=#75715e> * N, another thread T1 added a child to N and removed that child. Thus, by item 4 above, T1 adds N</color>
<color=#75715e> * back to the LRU. Furthermore, since N is now back in the LRU, case (a) can now happen as well if</color>
<color=#75715e> * another thread can evict N before T latches it.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>8. When the checkpointer (or any other thread/operation) cleans a dirty IN, it must move it</color>
<color=#75715e> * from the priority-2 LRUSet (if there) to the priority-1 one. This is done via the</color>
<color=#75715e> * Evictor.moveToPri1LRU(N) method: If the isInPri2LRU flag of N is true, LRUList.remove(N) is</color>
<color=#75715e> * called to remove the node from the priority-2 LRUSet. If N was indeed in the priority-2 LRUSet</color>
<color=#75715e> * (i.e., LRUList.remove() returns true), addBack(N) is called to put it in the priority-1 LRUSet.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>By moving N to the priority-1 LRUSet only after atomically removing it from the priority-2</color>
<color=#75715e> * LRUSet and checking that it was indeed there, we prevent N from being added into the LRU if N has</color>
<color=#75715e> * been or would be removed from the LRU by a concurrently running evicting thread.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In cases 2, 3, 4, 5, 7, and 8 N is EX-latched. In case 1, the node is not latched, but it is</color>
<color=#75715e> * inaccessible by any other threads because it is not connected to its parent yet and the parent is</color>
<color=#75715e> * EX-latched (but N has already been inserted in the INList; can this create any problems ?????).</color>
<color=#75715e> * In case 6 there is only one thread running. So, in all cases it's ok to set the isInPri2LRU flag</color>
<color=#75715e> * of the node.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Question: can a thread T try to add a node N, seen as a Java obj instance, into the LRU, while</color>
<color=#75715e> * N is already there? I believe not, and LRUList addBack() and addFront() methods assert that this</color>
<color=#75715e> * cannot happen. In cases 1, 2, and 5 above N is newly created node, so it cannot be in the LRU</color>
<color=#75715e> * already. In cases 3 and 4, N is a UIN that has cached children, so it cannot be in the LRU. In</color>
<color=#75715e> * case 6 there is only 1 thread. Finally, in cases 7 and 8, T checks that N is not in the LRU</color>
<color=#75715e> * before attempting to add it (and the situation cannot change between tis check and the insertion</color>
<color=#75715e> * into the LRU because N is EX- latched).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Question: can a thread T try to add a node N, seen as a logical entity represented by its</color>
<color=#75715e> * nodeId, into the LRU, while N is already there? Specifically, (a) can two Java instances, N1 and</color>
<color=#75715e> * N2, of the same node N exist in memory at the same time, and (b) while N1 is in the LRU, can a</color>
<color=#75715e> * thread T try to add N2 in the LRU? The answer to (a) is "yes", and as far as I can think, the</color>
<color=#75715e> * answer to (b) is "no", but there is no explicit check in the code for this. Consider the</color>
<color=#75715e> * following sequence of events: Initially only N1 is in memory and in the LRU. An evicting thread</color>
<color=#75715e> * T1 removes N1 from the LRU, thread T2 adds N1 in the LRU, thread T3 removes N1 from the LRU and</color>
<color=#75715e> * actually evicts it, thread T4 fetches N from the log, thus creating instance N2 and adding N2 to</color>
<color=#75715e> * the LRU, thread T1 finally EX-latches N1 and has to decide what to do with it. The check in case</color>
<color=#75715e> * 7a above makes sure that N1 will not go back to the LRU. In fact the same check makes sure that</color>
<color=#75715e> * N1 will not be evicted (i.e., logged, if dirty). T1 will just skip N1, thus allowing it to be</color>
<color=#75715e> * GCed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Removing a node from the LRU ----------------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A node is removed from the LRU when it is selected as an eviction target by an evicting</color>
<color=#75715e> * thread. The thread chooses an LRUList list to evict from and calls removeFront() on it. The node</color>
<color=#75715e> * is not latched when it is removed from the LRU in this case. The evicting thread is going to</color>
<color=#75715e> * EX-latch the node shortly after the removal. But as explain already earlier, between the removal</color>
<color=#75715e> * and the latching, another thread may put the node back to the LRU, and as a result, another</color>
<color=#75715e> * thread may also choose the same node for eviction. The node may also be detached from the BTree,</color>
<color=#75715e> * or its database closed, or deleted.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A node may also be removing from the LRU by a non-evicting thread. This is done via the</color>
<color=#75715e> * Evictor.remove(IN) method. The method checks the node's isInDrtryLRU flag to determine which</color>
<color=#75715e> * LRUSet the node belongs to (if any) and then calls LRUList.remove(N). The node must be at least</color>
<color=#75715e> * SH latched when the method is called. The method is a noop if the node is not in the LRU. The</color>
<color=#75715e> * node may not belong to any LRUList, because it has been selected for eviction by another thread</color>
<color=#75715e> * (and thus removed from LRU), but the evicting thread has not yet latched the node. There are 3</color>
<color=#75715e> * cases (listed below) where Evictor.remove(N) is called. In the first two cases Evictor.remove(N)</color>
<color=#75715e> * is invoked from INList.removeInternal(N). This makes sure that N is removed from the LRU whenever</color>
<color=#75715e> * it it removed from the INList (to guarantee that the nodes in the LRU are always a subset of the</color>
<color=#75715e> * nodes in the INList).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. When a tree branch containing N gets detached from its tree. In this case, INList.remove(N)</color>
<color=#75715e> * is invoked inside accountForSubtreeRemoval() or accountForDeferredWriteSubtreeRemoval().</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2. When the database containing N gets deleted or truncated. In this case,</color>
<color=#75715e> * INList.iter.remove() is called in DatabaseImpl.finishDeleteProcessing().</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3. N is a UIN with no cached children (hasCachedChildren flag is false) and a new child for N</color>
<color=#75715e> * is fetched. The call to Evictor.remove(N) is done inside IN.setTarget().</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Moving a node within the LRU ----------------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A node N is moved within its containing LRUList (if any) via the Evictor moveBack(IN) and</color>
<color=#75715e> * moveFront(IN) methods. The methods check the isInPri2LRU flag of the node to determine the LRUSet</color>
<color=#75715e> * the node belongs to and then move the node to the back or to the front of the LRUList. The node</color>
<color=#75715e> * will be at least SH latched when these methods are called. Normally, the IN will be in an</color>
<color=#75715e> * LRUList. However, it may not belong to any LRUList, because it has been selected for eviction by</color>
<color=#75715e> * another thread (and thus removed from LRU), but the evicting thread has not yet EX-latched the</color>
<color=#75715e> * node. In this case, these methods are is a noop. The methods are called in the following</color>
<color=#75715e> * situations:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. N is latched with cachemode DEFAULT, KEEP_HOT, or EVICT_LN and N is a BIN or a UIN with no</color>
<color=#75715e> * cached children (the hasCachedChildren flag is used to check if the UIN has cached children, so</color>
<color=#75715e> * we don't need to iterate over all of the node's child entries). In this case, Evictor.moveBack(N)</color>
<color=#75715e> * .</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2. N is latched with cachemode MAKE_COLD or EVICT_BIN and N is a BIN. In this case,</color>
<color=#75715e> * Evictor.moveFront(N) is called.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>------------------- Eviction Processing -------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A thread can initiate eviction by invoking the Evictor.doEviction() method. This method</color>
<color=#75715e> * implements an "eviction run". An eviction run consists of a number of "eviction passes", where</color>
<color=#75715e> * each pass is given as input a maximum number of bytes to evict. An eviction pass is implemented</color>
<color=#75715e> * by the Evictor.evictBatch() method.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Inside Evictor.evictBatch(), an evicting thread T:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. Picks the priority-1 LRUset initially as the "current" LRUSet to be processed,</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2. Initializes the max number of nodes to be processed per LRUSet to the current size of the</color>
<color=#75715e> * priority-1 LRUSet,</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3. Executes the following loop:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3.1. Picks a non-empty LRUList from the current LRUSet in a round-robin fashion, as explained</color>
<color=#75715e> * earlier, and invokes LRUList.removeFront() to remove the node N at the front of the list. N</color>
<color=#75715e> * becomes the current eviction target.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3.2. If the DB node N belongs to has been deleted or closed, skips this node, i.e., leaves N</color>
<color=#75715e> * outside the LRU and goes to 3.4.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3.3. Calls ProcessTarget(N) (see below)</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3.4. If the current LRUset is the priority-1 one and the number of target nodes processed</color>
<color=#75715e> * reaches the max number allowed, the priority-2 LRUSet becomes the current one, the max number of</color>
<color=#75715e> * nodes to be processed per LRUSet is set to the current size of the priority-2 LRUSet, and the</color>
<color=#75715e> * number of nodes processed is reset to 0.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3.5. Breaks the loop if the max number of bytes to evict during this pass has been reached, or</color>
<color=#75715e> * memConsumption is less than (maxMemory - M) (where M is a config param), or the number of nodes</color>
<color=#75715e> * that have been processed in the current LRUSet reaches the max allowed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>-------------------------- The processTarget() method --------------------------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This method is called after a node N has been selected for eviction (and as result, removed</color>
<color=#75715e> * from the LRU). The method EX-latches N and determines whether it can/should really be evicted,</color>
<color=#75715e> * and if not what is the appropriate action to be taken by the evicting thread. Before returning,</color>
<color=#75715e> * the method unlatches N. Finally, it returns the number of bytes evicted (if any).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If a decision is taken to evict N or mutate it to a BINDelta, N must first be unlatched and</color>
<color=#75715e> * its parent must be searched within the tree. During this search, many things can happen to the</color>
<color=#75715e> * unlatched N, and as a result, after the parent is found and the N is relatched, processTarget()</color>
<color=#75715e> * calls itself recursively to re-consider all the possible actions for N.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Let T be an evicting thread running processTarget() to determine what to do with a target node</color>
<color=#75715e> * N. The following is the list of possible outcomes:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. SKIP - Do nothing with N if: (a) N is in the LRU. This can happen if N is a UIN and while</color>
<color=#75715e> * it is unlatched by T, other threads fetch one or more of N's children, but then all of N's</color>
<color=#75715e> * children are removed again, thus causing N to be put back to the LRU. (b) N is not in the INList.</color>
<color=#75715e> * Given than N can be put back to the LRU while it is unlatched by T, it can also be selected as an</color>
<color=#75715e> * eviction target by another thread and actually be evicted. (c) N is a UIN with cached children. N</color>
<color=#75715e> * could have acquired children after the evicting thread removed it from the LRU, but before the</color>
<color=#75715e> * evicting thread could EX-latch it. (d) N is the root of the DB naming tree or the DBmapping tree.</color>
<color=#75715e> * (e) N is dirty, but the DB is read-only. (f) N's environment used a shared cache and the</color>
<color=#75715e> * environment has been closed or invalidated. (g) If a decision was taken to evict od mutate N, but</color>
<color=#75715e> * the tree search (using N's keyId) to find N's parent, failed to find the parent, or N itself.</color>
<color=#75715e> * This can happen if during the search, N was evicted by another thread, or a branch containing N</color>
<color=#75715e> * was completely removed from the tree.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2. PUT BACK - Put N to the back of the LRUSet it last belonged to, if: (a) It is a BIN that</color>
<color=#75715e> * was last accessed with KEEP_HOT cache mode. (b) N has an entry with a NULL LSN and a null target.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3. PARTIAL EVICT - perform partial eviction on N, if none of the cases listed above is true.</color>
<color=#75715e> * Currently, partial eviction applies to BINs only and involves the eviction (stripping) of</color>
<color=#75715e> * evictable LNs. If a cached LN is not evictable, the whole BIN is not evictable as well.</color>
<color=#75715e> * Currently, only MapLNs may be non-evictable (see MapLN.isEvictable()).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>After partial eviction is performed the following outcomes are possible:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>4. STRIPPED PUT BACK - Put N to the back of the LRUSet it last belonged to, if partial</color>
<color=#75715e> * eviction did evict any bytes, and N is not a BIN in EVICT_BIN or MAKE_COLD cache mode.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>5. PUT BACK - Put N to the back of the LRUSet it last belonged to, if no bytes were stripped,</color>
<color=#75715e> * but partial eviction determined that N is not evictable.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>6. MUTATE - Mutate N to a BINDelta, if none of the above apply and N is a BIN that can be</color>
<color=#75715e> * mutated.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>7. MOVE DIRTY TO PRI-2 LRU - Move N to the front of the priority-2 LRUSet, if none of the</color>
<color=#75715e> * above apply and N is a dirty node that last belonged to the priority-1 LRUSet, and a dirty LRUSet</color>
<color=#75715e> * is used (meaning that no off-heap cache is configured).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>8. MOVE LEVEL-2 TO PRI-2 LRU - Move N to the front of the priority-2 LRUSet, if none of the</color>
<color=#75715e> * above apply and N is a level-2 node with off-heap BINs that last belonged to the priority-1</color>
<color=#75715e> * LRUSet.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>9. EVICT - Evict N is none of the above apply.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>------- TODO: -------</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. Decide what to do about assertions (keep, remove, convert to JE exceptions, convert to</color>
<color=#75715e> * DEBUG-only expensive checks).</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Evictor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EnvConfigObserver</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * If new eviction source enums are added, a new stat is created, and</color>
<color=#75715e>   * EnvironmentStats must be updated to add a getter method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * CRITICAL eviction is called by operations executed app or daemon</color>
<color=#75715e>   * threads which detect that the cache has reached its limits</color>
<color=#75715e>   * CACHE_MODE eviction is called by operations that use a specific</color>
<color=#75715e>   * Cursor.</color>
<color=#75715e>   * EVICTORThread is the eviction pool</color>
<color=#75715e>   * MANUAL is the call to Environment.evictMemory, called by recovery or</color>
<color=#75715e>   *   application code.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Using ordinal for array values! */</color>
    <color=#f8f8f2>EVICTORTHREAD</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_EVICTORTHREAD_NAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>String</color> <color=#a6e22e>getDesc</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_EVICTORTHREAD_DESC</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>MANUAL</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_MANUAL_NAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>String</color> <color=#a6e22e>getDesc</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_MANUAL_DESC</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>CRITICAL</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_CRITICAL_NAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>String</color> <color=#a6e22e>getDesc</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_CRITICAL_DESC</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>CACHEMODE</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_CACHEMODE_NAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>String</color> <color=#a6e22e>getDesc</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_CACHEMODE_DESC</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>DAEMON</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_DAEMON_NAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>String</color> <color=#a6e22e>getDesc</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>N_BYTES_EVICTED_DAEMON_DESC</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>};</color>

    <color=#66d9ef>abstract</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>();</color>

    <color=#66d9ef>abstract</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDesc</color><color=#f8f8f2>();</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>StatDefinition</color> <color=#a6e22e>getNumBytesEvictedStatDef</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatDefinition</color><color=#f8f8f2>(</color><color=#f8f8f2>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getDesc</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The purpose of EvictionDebugStats is to capture the stats of a single</color>
<color=#75715e>   * eviction run (i.e., an execution of the Evictor.doEviction() method by</color>
<color=#75715e>   * a single thread). An instance of EvictionDebugStats is created at the</color>
<color=#75715e>   * start of doEviction() and is passed around to the methods called from</color>
<color=#75715e>   * doEviction(). At the end of doEviction(), the EvictionDebugStats</color>
<color=#75715e>   * instance can be printed out (for debugging), or (TODO) the captured</color>
<color=#75715e>   * stats can be loaded to the global Evictor.stats.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>EvictionDebugStats</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>inPri1LRU</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>withParent</color><color=#f8f8f2>;</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>pri1Size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>pri2Size</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numSelectedPri1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numSelectedPri2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numPutBackPri1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numPutBackPri2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsStripped1Pri1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsStripped2Pri1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsStripped1Pri2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsStripped2Pri2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsMutatedPri1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsMutatedPri2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numUINsMoved1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numUINsMoved2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsMoved1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsMoved2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numUINsEvictedPri1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numUINsEvictedPri2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsEvictedPri1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBINsEvictedPri2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>inPri1LRU</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>withParent</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>pri1Size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>pri2Size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>numSelectedPri1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numSelectedPri2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>numPutBackPri1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numPutBackPri2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>numBINsStripped1Pri1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsStripped2Pri1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsStripped1Pri2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsStripped2Pri2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>numBINsMutatedPri1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsMutatedPri2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>numUINsMoved1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numUINsMoved2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsMoved1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsMoved2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>numUINsEvictedPri1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numUINsEvictedPri2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsEvictedPri1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINsEvictedPri2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>incNumSelected</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inPri1LRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numSelectedPri1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numSelectedPri2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>incNumPutBack</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inPri1LRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numPutBackPri1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numPutBackPri2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>incNumStripped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inPri1LRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>withParent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsStripped2Pri1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsStripped1Pri1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>withParent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsStripped2Pri2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsStripped1Pri2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>incNumMutated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inPri1LRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numBINsMutatedPri1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numBINsMutatedPri2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>incNumMoved</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>withParent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsMoved2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numUINsMoved2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsMoved1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numUINsMoved1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>incNumEvicted</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inPri1LRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsEvictedPri1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numUINsEvictedPri1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numBINsEvictedPri2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numUINsEvictedPri2</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Eviction stats PRI1: size = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pri1Size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"selected = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numSelectedPri1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"put back = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numPutBackPri1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"stripped = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsStripped1Pri1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsStripped2Pri1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"mutated = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsMutatedPri1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"moved = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsMoved1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsMoved2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" - "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numUINsMoved1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numUINsMoved2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"evicted = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsEvictedPri1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" - "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numUINsEvictedPri1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Eviction stats PRI2: size = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pri2Size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"selected = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numSelectedPri2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"put back = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numPutBackPri2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"stripped = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsStripped1Pri2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsStripped2Pri2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"mutated = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsMutatedPri2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" | "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"evicted = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINsEvictedPri2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" - "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numUINsEvictedPri2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The purpose of LRUDebugStats is to capture stats on the current state</color>
<color=#75715e>   * of an LRUSet. This is done via a call to LRUEvictor.getPri1LRUStats(),</color>
<color=#75715e>   * or LRUEvictor.getPri2LRUStats(). For now at least, these methods are</color>
<color=#75715e>   * meant to be used for debugging and unit testing only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>LRUDebugStats</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>dirtySize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numBINs</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numDirtyBINs</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numStrippedBINs</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numDirtyStrippedBINs</color><color=#f8f8f2>;</color>

    <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dirtySize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numBINs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numDirtyBINs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numStrippedBINs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>numDirtyStrippedBINs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Clean/Dirty INs = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>-</color> <color=#f8f8f2>dirtySize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>dirtySize</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" BINs = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numBINs</color> <color=#f92672>-</color> <color=#f8f8f2>numDirtyBINs</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numDirtyBINs</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" Stripped BINs = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numStrippedBINs</color> <color=#f92672>-</color> <color=#f8f8f2>numDirtyStrippedBINs</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numDirtyStrippedBINs</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * LRUList implementation</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>LRUList</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doExpensiveCheck</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>LRUList</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>id</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>id</color> <color=#f92672>=</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Make sure node is not in any LRUlist already */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"Attempting to add node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" in the LRU, but node is already in the LRU."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isDIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isDBIN</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>back</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>back</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#f8f8f2>back</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addFront</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Make sure node is not in any LRUlist already */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"Attempting to add node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" in the LRU, but node is already in the LRU."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isDIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isDBIN</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>moveBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* If the node is not in the list, don't do anything */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doExpensiveCheck</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>contains2</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#e6db74>"LRUList.moveBack(): list "</color>
                <color=#f92672>+</color> <color=#f8f8f2>id</color>
                <color=#f92672>+</color> <color=#e6db74>"does not contain node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" Thread: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" isBIN: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" inPri2LRU: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>());</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* The node is aready at the back */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>back</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* the node is at the front  */</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* the node is in the "middle" */</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color> <color=#f92672>&&</color> <color=#f8f8f2>back</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>back</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>back</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>moveFront</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* If the node is not in the list, don't do anything */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doExpensiveCheck</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>contains2</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#e6db74>"LRUList.moveFront(): list "</color>
                <color=#f92672>+</color> <color=#f8f8f2>id</color>
                <color=#f92672>+</color> <color=#e6db74>"does not contain node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" Thread: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" isBIN: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" inPri2LRU: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>());</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* the node is aready at the front */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>back</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* the node is at the back */</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>back</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>back</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* the node is in the "middle" */</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color> <color=#f92672>&&</color> <color=#f8f8f2>back</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>IN</color> <color=#a6e22e>removeFront</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>IN</color> <color=#f8f8f2>res</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>back</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>front</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>front</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>res</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>res</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f92672>--</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>res</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* If the node is not in the list, don't do anything */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doExpensiveCheck</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>contains2</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#e6db74>"LRUList.remove(): list "</color>
                <color=#f92672>+</color> <color=#f8f8f2>id</color>
                <color=#f92672>+</color> <color=#e6db74>"does not contain node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" Thread: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" isBIN: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" inPri2LRU: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>());</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>back</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>front</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>front</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* node is at the front */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* the node is at the back */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>back</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>back</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* the node is in the "middle" */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>back</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color> <color=#f92672>&&</color> <color=#f8f8f2>back</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>().</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f92672>--</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>

      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>removeINsForEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>IN</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>;</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>IN</color> <color=#f8f8f2>nextNode</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>IN</color> <color=#f8f8f2>prevNode</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>().</color><color=#a6e22e>getEnv</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>back</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextNode</color> <color=#f92672>==</color> <color=#f8f8f2>front</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevNode</color> <color=#f92672>==</color> <color=#f8f8f2>front</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f92672>--</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevNode</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* node is at the front */</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextNode</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>front</color> <color=#f92672>=</color> <color=#f8f8f2>nextNode</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>front</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>front</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>;</color>
            <color=#f92672>--</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextNode</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* the node is at the back */</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>back</color> <color=#f92672>=</color> <color=#f8f8f2>prevNode</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>back</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>back</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* the node is in the "middle" */</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>back</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color> <color=#f92672>&&</color> <color=#f8f8f2>back</color> <color=#f92672>!=</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextNode</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>prevNode</color><color=#f8f8f2>.</color><color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>nextNode</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>nextNode</color><color=#f8f8f2>.</color><color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>prevNode</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>nextNode</color><color=#f8f8f2>;</color>
            <color=#f92672>--</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextNode</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>nextNode</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains2</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>IN</color> <color=#f8f8f2>curr</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>;</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color> <color=#f92672>==</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>curr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>curr</color> <color=#f92672>=</color> <color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>IN</color><color=#f92672>></color> <color=#a6e22e>copyList</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptyList</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>IN</color><color=#f92672>></color> <color=#f8f8f2>list</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><></color><color=#f8f8f2>();</color>

      <color=#f8f8f2>IN</color> <color=#f8f8f2>curr</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>;</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>curr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>curr</color> <color=#f92672>=</color> <color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>list</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>LRUDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>front</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>back</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>IN</color> <color=#f8f8f2>curr</color> <color=#f92672>=</color> <color=#f8f8f2>front</color><color=#f8f8f2>;</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>env</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f92672>++</color><color=#f8f8f2>;</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>dirtySize</color><color=#f92672>++</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>numBINs</color><color=#f92672>++</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>numDirtyBINs</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>hasCachedChildren</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>numStrippedBINs</color><color=#f92672>++</color><color=#f8f8f2>;</color>

              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>numDirtyStrippedBINs</color><color=#f92672>++</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>curr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>curr</color> <color=#f92672>=</color> <color=#f8f8f2>curr</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** EnvInfo stores info related to the environments that share this evictor. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>EnvInfo</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>INList</color> <color=#f8f8f2>ins</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Prevent endless eviction loops under extreme resource constraints. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_BATCHES_PER_RUN</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>traceUINs</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>traceBINs</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>traceLevel</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>;</color>

  <color=#75715e>/* LRU-TODO: remove */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>collectEvictionDebugStats</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of LRULists per LRUSet. This is a configuration parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In general, using only one LRUList may create a synchronization bottleneck, because all</color>
<color=#75715e>   * LRUList methods are synchronized and are invoked with high frequency from multiple thread. To</color>
<color=#75715e>   * alleviate this bottleneck, we need the option to break a single LRUList into multiple ones</color>
<color=#75715e>   * comprising an "LRUSet" (even though this reduces the quality of the LRU approximation).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This is true when an off-heap cache is in use. If true, then the</color>
<color=#75715e>   * priority-2 LRUSet is always used for level 2 INs, and useDirtyLRUSet</color>
<color=#75715e>   * and mutateBins are both set to false.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whether to use the priority-2 LRUSet for dirty nodes or not.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When useOffHeapCache is true, useDirtyLRUSet is always false. When useOffHeapCache is false,</color>
<color=#75715e>   * useDirtyLRUSet is set via a configuration parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useDirtyLRUSet</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Whether to allow deltas when logging a dirty BIN that is being evicted.</color>
<color=#75715e>   * This is a configuration parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowBinDeltas</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Whether to mutate BINs to BIN deltas rather than evicting the full node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * When useOffHeapCache is true, mutateBins is always false. When</color>
<color=#75715e>   * useOffHeapCache is false, mutateBins is set via a configuration</color>
<color=#75715e>   * parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>mutateBins</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Access count after which we clear the DatabaseImpl cache.</color>
<color=#75715e>   * This is a configuration parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>dbCacheClearCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This is a configuration parameter. If true, eviction is done by a pool</color>
<color=#75715e>   * of evictor threads, as well as being done inline by application threads.</color>
<color=#75715e>   * Note: runEvictorThreads is needed as a distinct flag, rather than</color>
<color=#75715e>   * setting maxThreads to 0, because the ThreadPoolExecutor does not permit</color>
<color=#75715e>   * maxThreads to be 0.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>runEvictorThreads</color><color=#f8f8f2>;</color>

  <color=#75715e>/* This is a configuration parameter. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>terminateMillis</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The thread pool used to manage the background evictor threads. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ThreadPoolExecutor</color> <color=#f8f8f2>evictionPool</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Flag to help shutdown launched eviction tasks. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicBoolean</color> <color=#f8f8f2>shutdownRequested</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxPoolThreads</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>activePoolThreads</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Whether this evictor (and the memory cache) is shared by multiple</color>
<color=#75715e>   * environments</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isShared</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * In case of multiple environments sharing a cache (and this Evictor),</color>
<color=#75715e>   * firstEnvImpl references the 1st EnvironmentImpl to be created with</color>
<color=#75715e>   * the shared cache.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>EnvInfo</color><color=#f92672>></color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This is used only when this evictor is shared by multiple envs. It "points" to the next env to</color>
<color=#75715e>   * perform "special eviction" in.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>specialEvictionIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   *</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Arbiter</color> <color=#f8f8f2>arbiter</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * With an off-heap cache configured: pri1LRUSet contains nodes of any type and level. A freshly</color>
<color=#75715e>   * cached node goes into this LRUSet. A level-2 node will go to the pri2LRUSet if it is selected</color>
<color=#75715e>   * for eviction from the pri1LRUSet and it contains off-heap BINs. A node will move from the</color>
<color=#75715e>   * pri2LRUSet to the pri1LRUSet when its last off-heap BIN is evicted from the off-heap cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Without an off-heap cache configured: pri1LRUSet contains both clean and dirty nodes. A</color>
<color=#75715e>   * freshly cached node goes into this LRUSet. A dirty node will go to the pri2LRUSet if it is</color>
<color=#75715e>   * selected for eviction from the pri1LRUSet. A node will move from the pri2LRUSet to the</color>
<color=#75715e>   * pri1LRUSet when it gets logged (i.e., cleaned) by the checkpointer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LRUList</color><color=#f92672>[]</color> <color=#f8f8f2>pri1LRUSet</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LRUList</color><color=#f92672>[]</color> <color=#f8f8f2>pri2LRUSet</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * nextPri1LRUList is used to implement the traversal of the lists in the pri1LRUSet by one or</color>
<color=#75715e>   * more evicting threads. Such a thread will select for eviction the front node from the</color>
<color=#75715e>   * (nextPri1LRUList % numLRULists)-th list, and then increment nextPri1LRUList. nextPri2LRUList</color>
<color=#75715e>   * plays the same role for the priority-2 LRUSet.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nextPri1LRUList</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nextPri2LRUList</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The evictor is disabled during the 1st phase of recovery. The</color>
<color=#75715e>   * RecoveryManager enables the evictor after it finishes its 1st</color>
<color=#75715e>   * phase.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isEnabled</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Eviction calls cannot be recursive. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReentrancyGuard</color> <color=#f8f8f2>reentrancyGuard</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Stats</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of eviction tasks that were submitted to the background evictor</color>
<color=#75715e>   * pool, but were refused because all eviction threads were busy.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nThreadUnavailable</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of evictBatch() invocations. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nEvictionRuns</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of nodes selected as eviction targets. An eviction target may</color>
<color=#75715e>   * actually be evicted, or skipped, or put back to the LRU, potentially</color>
<color=#75715e>   * after partial eviction or BIN-delta mutation is done on it.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nNodesTargeted</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of nodes evicted. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nNodesEvicted</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of closed database root nodes evicted. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nRootNodesEvicted</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of dirty nodes logged and evicted. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nDirtyNodesEvicted</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of LNs evicted. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nLNsEvicted</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of BINs stripped. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nNodesStripped</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of BINs mutated to deltas. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nNodesMutated</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of target nodes put back to the LRU w/o any other action taken */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nNodesPutBack</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of target nodes skipped. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nNodesSkipped</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of target nodes moved to the priority-2 LRU */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nNodesMovedToPri2LRU</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of bytes evicted per eviction source. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color><color=#f92672>[]</color> <color=#f8f8f2>numBytesEvicted</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Tree related cache hit/miss stats. A subset of the cache misses recorded</color>
<color=#75715e>   * by the log manager, in that these only record tree node hits and misses.</color>
<color=#75715e>   * Recorded by IN.fetchIN and IN.fetchLN, but grouped with evictor stats.</color>
<color=#75715e>   * Use AtomicLongStat for multithreading safety.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nLNFetch</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nLNFetchMiss</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of times IN.fetchIN() or IN.fetchINWithNoLatch() was called</color>
<color=#75715e>   * to fetch a UIN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nUpperINFetch</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of times IN.fetchIN() or IN.fetchINWithNoLatch() was called</color>
<color=#75715e>   * to fetch a UIN and that UIN was not already cached.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nUpperINFetchMiss</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of times IN.fetchIN() or IN.fetchINWithNoLatch() was called</color>
<color=#75715e>   * to fetch a BIN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nBINFetch</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of times IN.fetchIN() or IN.fetchINWithNoLatch() was called</color>
<color=#75715e>   * to fetch a BIN and that BIN was not already cached.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nBINFetchMiss</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of times IN.fetchIN() or IN.fetchINWithNoLatch() was called</color>
<color=#75715e>   * to fetch a BIN, that BIN was not already cached, and a BIN-delta was</color>
<color=#75715e>   * fetched from disk.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nBINDeltaFetchMiss</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FloatStat</color> <color=#f8f8f2>binFetchMissRatio</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of calls to BIN.mutateToFullBIN()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nFullBINMiss</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of blind operations on BIN deltas</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>nBinDeltaBlindOps</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Stats for IN compact array representations currently in cache. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>nINSparseTarget</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>nINNoTarget</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>nINCompactKey</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of envs sharing the cache. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Debugging and unit test support. */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Number of consecutive "no-eviction" events (i.e. when evictBatch()</color>
<color=#75715e>   * returns 0). It is incremented at each "no-eviction" event and reset</color>
<color=#75715e>   * to 0 when eviction does occur. It is used to determine whether to</color>
<color=#75715e>   * log a WARNING for a "no-eviction" event: only 1 warning is logged</color>
<color=#75715e>   * per sequence of consecutive "no-eviction" events (to avoid flooding</color>
<color=#75715e>   * the logger files).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>numNoEvictionEvents</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>preEvictINHook</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>IN</color><color=#f92672>></color> <color=#f8f8f2>evictProfile</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>Evictor</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>isShared</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>firstEnvImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Do the stats definitions. */</color>
    <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>GROUP_DESC</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nEvictionRuns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_EVICTION_RUNS</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nNodesTargeted</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_NODES_TARGETED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nNodesEvicted</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_NODES_EVICTED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nRootNodesEvicted</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_ROOT_NODES_EVICTED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nDirtyNodesEvicted</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_DIRTY_NODES_EVICTED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nLNsEvicted</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_LNS_EVICTED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nNodesStripped</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_NODES_STRIPPED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nNodesMutated</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_NODES_MUTATED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nNodesPutBack</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_NODES_PUT_BACK</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nNodesSkipped</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_NODES_SKIPPED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nNodesMovedToPri2LRU</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_NODES_MOVED_TO_PRI2_LRU</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nLNFetch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LN_FETCH</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nBINFetch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_FETCH</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nUpperINFetch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>UPPER_IN_FETCH</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nLNFetchMiss</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LN_FETCH_MISS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nBINFetchMiss</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_FETCH_MISS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nBINDeltaFetchMiss</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_DELTA_FETCH_MISS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nUpperINFetchMiss</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>UPPER_IN_FETCH_MISS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nFullBINMiss</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FULL_BIN_MISS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nBinDeltaBlindOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_DELTA_BLIND_OPS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>binFetchMissRatio</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FloatStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_FETCH_MISS_RATIO</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nThreadUnavailable</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THREAD_UNAVAILABLE</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nINSparseTarget</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nINNoTarget</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nINCompactKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sharedCacheEnvs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>EVICTOR_SHARED_CACHE_ENVS</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>EnumSet</color><color=#f92672><</color><color=#f8f8f2>EvictionSource</color><color=#f92672>></color> <color=#f8f8f2>allSources</color> <color=#f92672>=</color> <color=#f8f8f2>EnumSet</color><color=#f8f8f2>.</color><color=#a6e22e>allOf</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numSources</color> <color=#f92672>=</color> <color=#f8f8f2>allSources</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>numBytesEvicted</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f92672>[</color><color=#f8f8f2>numSources</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color> <color=#f8f8f2>:</color> <color=#f8f8f2>allSources</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>source</color><color=#f8f8f2>.</color><color=#a6e22e>ordinal</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>numBytesEvicted</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBytesEvictedStatDef</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>arbiter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Arbiter</color><color=#f8f8f2>(</color><color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>reentrancyGuard</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReentrancyGuard</color><color=#f8f8f2>(</color><color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color> <color=#f92672>=</color> <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>corePoolSize</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_CORE_THREADS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>maxPoolThreads</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_MAX_THREADS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>keepAliveTime</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_KEEP_ALIVE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>terminateMillis</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_TERMINATE_TIMEOUT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbCacheClearCount</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_DB_CACHE_CLEAR_COUNT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>numLRULists</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_N_LRU_LISTS</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>pri1LRUSet</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LRUList</color><color=#f92672>[</color><color=#f8f8f2>numLRULists</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>pri2LRUSet</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LRUList</color><color=#f92672>[</color><color=#f8f8f2>numLRULists</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LRUList</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LRUList</color><color=#f8f8f2>(</color><color=#f8f8f2>numLRULists</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envInfos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>EnvInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envInfos</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_OFF_HEAP_MEMORY</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mutateBins</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>useDirtyLRUSet</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>useOffHeapCache</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mutateBins</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_MUTATE_BINS</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>useDirtyLRUSet</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_USE_DIRTY_LRU</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>useOffHeapCache</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>RejectedExecutionHandler</color> <color=#f8f8f2>rejectHandler</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RejectEvictHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>nThreadUnavailable</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>evictionPool</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ThreadPoolExecutor</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>corePoolSize</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>maxPoolThreads</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>keepAliveTime</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>ArrayBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>Runnable</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>),</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>StoppableThreadFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>isShared</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"JEEvictor"</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>rejectHandler</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>allowBinDeltas</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_ALLOW_BIN_DELTAS</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>runEvictorThreads</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_EVICTOR</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Request notification of mutable property changes. Do this after all</color>
<color=#75715e>     * fields in the evictor have been initialized, in case this is called</color>
<color=#75715e>     * quite soon.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>.</color><color=#a6e22e>addConfigObserver</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Respond to config updates. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>envConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>corePoolSize</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_CORE_THREADS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>maxPoolThreads</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_MAX_THREADS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>keepAliveTime</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_KEEP_ALIVE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>terminateMillis</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_TERMINATE_TIMEOUT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbCacheClearCount</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_DB_CACHE_CLEAR_COUNT</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>setCorePoolSize</color><color=#f8f8f2>(</color><color=#f8f8f2>corePoolSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>setMaximumPoolSize</color><color=#f8f8f2>(</color><color=#f8f8f2>maxPoolThreads</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>setKeepAliveTime</color><color=#f8f8f2>(</color><color=#f8f8f2>keepAliveTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>runEvictorThreads</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_EVICTOR</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEnabled</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>v</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>isEnabled</color> <color=#f92672>=</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ThreadPoolExecutor</color> <color=#a6e22e>getThreadPool</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>evictionPool</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Request and wait for a shutdown of all running eviction tasks. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set the shutdown flag so that outstanding eviction tasks end</color>
<color=#75715e>     * early. The call to evictionPool.shutdown is a ThreadPoolExecutor</color>
<color=#75715e>     * call, and is an orderly shutdown that waits for and in flight tasks</color>
<color=#75715e>     * to end.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>shutdownRequested</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * AwaitTermination will wait for the timeout period, or will be</color>
<color=#75715e>     * interrupted, but we don't really care which it is. The evictor</color>
<color=#75715e>     * shouldn't be interrupted, but if it is, something urgent is</color>
<color=#75715e>     * happening.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>shutdownFinished</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>shutdownFinished</color> <color=#f92672>=</color> <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>awaitTermination</color><color=#f8f8f2>(</color><color=#f8f8f2>terminateMillis</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* We've been interrupted, just give up and end. */</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>shutdownFinished</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownNow</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>requestShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>shutdownRequested</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>numEnvs</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numEnvs</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>EnvInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>env</color> <color=#f92672>==</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>EnvInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvInfo</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>env</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>ins</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>removeSharedCacheEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numEnvs</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numEnvs</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EnvInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>env</color> <color=#f92672>==</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>removeINsForEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>removeINsForEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>AssertionError</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"YYYYYYYYYY "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>);</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>numEnvs</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numEnvs</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>EnvInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>env</color> <color=#f92672>==</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Add the node to the back of the priority-1 LRUSet. The node is either EX-latched already or is</color>
<color=#75715e>   * inaccessible from other threads.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEnabled</color> <color=#f92672>&&</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>isEnabled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setInPri2LRU</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Add the node to the front of the priority-1 LRUSet. The node is either EX-latched already or is</color>
<color=#75715e>   * inaccessible from other threads.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addFront</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEnabled</color> <color=#f92672>&&</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>isEnabled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setInPri2LRU</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>addFront</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Add the node to the back of the priority-2 LRUSet.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>pri2AddBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setInPri2LRU</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Add the node to the front of the priority-2 LRUSet.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>pri2AddFront</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setInPri2LRU</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>addFront</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Move the node to the back of its containing LRUList, if any. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>moveBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchOwner</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>moveBack</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>moveBack</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Move the node to the front of its containing LRUList, if any. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>moveFront</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchOwner</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>moveFront</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>moveFront</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Remove a node from its current LRUList, if any. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchOwner</color><color=#f8f8f2>());</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>listId</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the node from the priority-2 LRUSet to the priority-1 LRUSet, if the node is indeed in the</color>
<color=#75715e>   * priority-2 LRUSet.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>moveToPri1LRU</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>listId</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setInPri2LRU</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchOwner</color><color=#f8f8f2>());</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>listId</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getUseDirtyLRUSet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useDirtyLRUSet</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getPri1LRUSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getPri2LRUSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>getPri1LRUStats</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>LRUDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>getPri2LRUStats</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>LRUDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This method is called from application threads for every cursor operation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>doCriticalEviction</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>isOverBudget</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Any time there's excessive cache usage, let the thread pool know</color>
<color=#75715e>       * there's work to do.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>alert</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Only do eviction if the memory budget overage fulfills the</color>
<color=#75715e>       * critical eviction requirements. We want to avoid having</color>
<color=#75715e>       * application thread do eviction.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>needCriticalEviction</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>doEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CRITICAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This method is called from daemon threads for every operation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>doDaemonEviction</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>isOverBudget</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Any time there's excessive cache usage, let the thread pool know</color>
<color=#75715e>       * there's work to do.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>alert</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Only do eviction if the memory budget overage fulfills the</color>
<color=#75715e>       * critical eviction requirements. This allows evictor threads to</color>
<color=#75715e>       * take the burden of eviction whenever possible, rather than</color>
<color=#75715e>       * slowing other threads and risking a growing cleaner or</color>
<color=#75715e>       * compressor backlog.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>needCriticalEviction</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>doEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>DAEMON</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Eviction invoked by the API</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>doManualEvict</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>doEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>MANUAL</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*backgroundIO*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Evict a specific IN, used by tests. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>doTestEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>doEvictOneIN</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color> <color=#f92672>==</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color> <color=#f92672>?</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>EVICT_BIN</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Evict a specific IN, used by cache modes. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>doCacheModeEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>doEvictOneIN</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>doEvictOneIN</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchOwner</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If a dirty BIN is being evicted via a cache mode and an off-heap</color>
<color=#75715e>     * cache is not used, do not evict the node since it would be</color>
<color=#75715e>     * logged. When an off-heap cache is used, we can evict dirty nodes</color>
<color=#75715e>     * without logging them.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>source</color> <color=#f92672>==</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>==</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>EVICT_BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>partialEviction</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>evictedBytes</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>NON_EVICTABLE_IN</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictedBytes</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>nNodesStripped</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>numBytesEvicted</color><color=#f92672>[</color><color=#f8f8f2>source</color><color=#f8f8f2>.</color><color=#a6e22e>ordinal</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>evictedBytes</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>reentrancyGuard</color><color=#f8f8f2>.</color><color=#a6e22e>enter</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color>
          <color=#f8f8f2>processTarget</color><color=#f8f8f2>(</color>
              <color=#66d9ef>null</color> <color=#75715e>/* rootEvictor */</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>target</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/* parent */</color><color=#f8f8f2>,</color>
              <color=#f92672>-</color><color=#ae81ff>1</color> <color=#75715e>/* entry index within parent */</color><color=#f8f8f2>,</color>
              <color=#66d9ef>false</color> <color=#75715e>/* backgroundIO */</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>source</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/* debug stats */</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>numBytesEvicted</color><color=#f92672>[</color><color=#f8f8f2>source</color><color=#f8f8f2>.</color><color=#a6e22e>ordinal</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>evictedBytes</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reentrancyGuard</color><color=#f8f8f2>.</color><color=#a6e22e>leave</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Let the eviction pool know there's work to do. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>alert</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>runEvictorThreads</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For a private evictor/cache, we can prevent background eviction</color>
<color=#75715e>     * during recovery here. For a shared cache, we must do it on a</color>
<color=#75715e>     * per-target basis, in evictBatch().</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isShared</color> <color=#f92672>&&</color> <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInInit</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This check is meant to avoid the lock taken by</color>
<color=#75715e>     * ArrayBlockingQueue.offer() when this is futile. The lock reduces</color>
<color=#75715e>     * concurrency because this method is called so frequently.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>activePoolThreads</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#f8f8f2>maxPoolThreads</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>evictionPool</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BackgroundEvictTask</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This is where the real work is done. Can execute concurrently, called by app threads or by</color>
<color=#75715e>   * background evictor</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>doEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isEnabled</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>reentrancyGuard</color><color=#f8f8f2>.</color><color=#a6e22e>enter</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nEvictionRuns</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Repeat as necessary to keep up with allocations.  Stop if no</color>
<color=#75715e>       * progress is made, to prevent an infinite loop.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>progress</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nBatches</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>bytesEvicted</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>evictionStats</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>collectEvictionDebugStats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictionStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EvictionDebugStats</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>evictionStats</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>evictionStats</color><color=#f8f8f2>.</color><color=#a6e22e>pri1Size</color> <color=#f92672>=</color> <color=#f8f8f2>getPri1LRUSize</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>evictionStats</color><color=#f8f8f2>.</color><color=#a6e22e>pri2Size</color> <color=#f92672>=</color> <color=#f8f8f2>getPri2LRUSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>progress</color> <color=#f92672>&&</color> <color=#f8f8f2>nBatches</color> <color=#f92672><</color> <color=#f8f8f2>MAX_BATCHES_PER_RUN</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>shutdownRequested</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Do eviction only if memory consumption is over budget.</color>
<color=#75715e>         * If so, try to evict (memoryConsumption + M - maxMemory)</color>
<color=#75715e>         * bytes, where M is a config param.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>maxEvictBytes</color> <color=#f92672>=</color> <color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictionPledge</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxEvictBytes</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>bytesEvicted</color> <color=#f92672>=</color> <color=#f8f8f2>evictBatch</color><color=#f8f8f2>(</color><color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxEvictBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>evictionStats</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>numBytesEvicted</color><color=#f92672>[</color><color=#f8f8f2>source</color><color=#f8f8f2>.</color><color=#a6e22e>ordinal</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>bytesEvicted</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytesEvicted</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>stillNeedsEviction</color><color=#f8f8f2>()</color>
              <color=#f92672>&&</color> <color=#f8f8f2>numNoEvictionEvents</color> <color=#f92672>==</color> <color=#ae81ff>0</color>
              <color=#f92672>&&</color> <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>numNoEvictionEvents</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Eviction pass failed to evict any bytes"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>numNoEvictionEvents</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>progress</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numNoEvictionEvents</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>nBatches</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictionStats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>evictionStats</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* For debugging. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>source</color> <color=#f92672>==</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTORTHREAD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Thread evicted "</color> <color=#f92672>+</color> <color=#f8f8f2>bytesEvicted</color> <color=#f92672>+</color> <color=#e6db74>" bytes in "</color> <color=#f92672>+</color> <color=#f8f8f2>nBatches</color> <color=#f92672>+</color> <color=#e6db74>" batches"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reentrancyGuard</color><color=#f8f8f2>.</color><color=#a6e22e>leave</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Not private because it is used in unit test. */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>evictBatch</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>bgIO</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxEvictBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>evictionStats</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>totalEvictedBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>inPri1LRUSet</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numNodesScannedThisBatch</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>maxNodesScannedThisBatch</color> <color=#f92672>=</color> <color=#f8f8f2>getPri1LRUSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>maxNodesScannedThisBatch</color> <color=#f92672>+=</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookSetupIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>evictProfile</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Perform special eviction,i.e., evict non-tree memory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * TODO: special eviction is done serially. We may want to absolve</color>
<color=#75715e>     * application threads of that responsibility, to avoid blocking, and</color>
<color=#75715e>     * only have evictor threads do special eviction.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numEnvs</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numEnvs</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>specialEvictionIndex</color> <color=#f92672>>=</color> <color=#f8f8f2>numEnvs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>specialEvictionIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>EnvInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>specialEvictionIndex</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>specialEvictionIndex</color><color=#f92672>++</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>totalEvictedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>env</color><color=#f8f8f2>.</color><color=#a6e22e>specialEviction</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>totalEvictedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>.</color><color=#a6e22e>specialEviction</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Use local caching to reduce DbTree.getDb overhead. [#21330] */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DbCache</color> <color=#f8f8f2>dbCache</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbCache</color><color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbCacheClearCount</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>memBudget</color> <color=#f92672>=</color> <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalEvictedBytes</color> <color=#f92672><</color> <color=#f8f8f2>maxEvictBytes</color>
          <color=#f92672>&&</color> <color=#f8f8f2>numNodesScannedThisBatch</color> <color=#f92672><</color> <color=#f8f8f2>maxNodesScannedThisBatch</color>
          <color=#f92672>&&</color> <color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>stillNeedsEviction</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isShared</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>memBudget</color><color=#f8f8f2>.</color><color=#a6e22e>isTreeUsageAboveMinimum</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>getNextTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>inPri1LRUSet</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>numNodesScannedThisBatch</color><color=#f92672>++</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>nNodesTargeted</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictionStats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>evictionStats</color><color=#f8f8f2>.</color><color=#a6e22e>incNumSelected</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>evictProfile</color><color=#f8f8f2>,</color> <color=#f8f8f2>target</color><color=#f8f8f2>);</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>targetDb</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>dbEnv</color> <color=#f92672>=</color> <color=#f8f8f2>targetDb</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Check to make sure the target's DB was not deleted or</color>
<color=#75715e>           * truncated after selecting the target. Furthermore,</color>
<color=#75715e>           * prevent the DB from being deleted while we're working</color>
<color=#75715e>           * with it (this is done by the dbCache.getDb() call).</color>
<color=#75715e>           *</color>
<color=#75715e>           * Also check that the refreshedDb is the same instance</color>
<color=#75715e>           * as the targetDb. If not, then the MapLN associated with</color>
<color=#75715e>           * targetDb was recently evicted (which can happen after</color>
<color=#75715e>           * all handles to the DB are closed). In this case,</color>
<color=#75715e>           * targetDb and its INs are orphaned and cannot be</color>
<color=#75715e>           * processed; they should simply be removed from the</color>
<color=#75715e>           * LRU [#21686]</color>
<color=#75715e>           */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>refreshedDb</color> <color=#f92672>=</color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetDb</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>refreshedDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>refreshedDb</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>refreshedDb</color> <color=#f92672>==</color> <color=#f8f8f2>targetDb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>long</color> <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isRoot</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>RootEvictor</color> <color=#f8f8f2>rootEvictor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RootEvictor</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>target</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>backgroundIO</color> <color=#f92672>=</color> <color=#f8f8f2>bgIO</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>source</color> <color=#f92672>=</color> <color=#f8f8f2>source</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>stats</color> <color=#f92672>=</color> <color=#f8f8f2>evictionStats</color><color=#f8f8f2>;</color>

              <color=#75715e>/* try to evict the root */</color>
              <color=#f8f8f2>targetDb</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>withRootLatchedExclusive</color><color=#f8f8f2>(</color><color=#f8f8f2>rootEvictor</color><color=#f8f8f2>);</color>

              <color=#75715e>/*</color>
<color=#75715e>               * If the root IN was flushed, write the dirtied</color>
<color=#75715e>               *  MapLN.</color>
<color=#75715e>               */</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>flushed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>modifyDbRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>targetDb</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>

              <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>evictedBytes</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color>
                  <color=#f8f8f2>processTarget</color><color=#f8f8f2>(</color>
                      <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* rootEvictor */</color>
                      <color=#f8f8f2>target</color><color=#f8f8f2>,</color>
                      <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* parent */</color>
                      <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#75715e>/* parent entry index */</color>
                      <color=#f8f8f2>bgIO</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>source</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>evictionStats</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>totalEvictedBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>/*</color>
<color=#75715e>             * We don't expect to find in the INList an IN whose</color>
<color=#75715e>             * database that has finished delete processing,</color>
<color=#75715e>             * because it should have been removed from the</color>
<color=#75715e>             * INList during post-delete cleanup.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetDb</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleteFinished</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>inInfo</color> <color=#f92672>=</color>
                  <color=#e6db74>" IN type="</color>
                      <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getLogType</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>" id="</color>
                      <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>" not expected on INList"</color><color=#f8f8f2>;</color>
              <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>errMsg</color> <color=#f92672>=</color>
                  <color=#f8f8f2>(</color><color=#f8f8f2>refreshedDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                      <color=#f92672>?</color> <color=#f8f8f2>inInfo</color>
                      <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#e6db74>"Database "</color>
                          <color=#f92672>+</color> <color=#f8f8f2>refreshedDb</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>()</color>
                          <color=#f92672>+</color> <color=#e6db74>" id="</color>
                          <color=#f92672>+</color> <color=#f8f8f2>refreshedDb</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                          <color=#f92672>+</color> <color=#e6db74>" rootLsn="</color>
                          <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>refreshedDb</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>getRootLsn</color><color=#f8f8f2>())</color>
                          <color=#f92672>+</color> <color=#e6db74>' '</color>
                          <color=#f92672>+</color> <color=#f8f8f2>inInfo</color><color=#f8f8f2>);</color>

              <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>errMsg</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Move to the priority-2 LRUSet, if we are done processing the</color>
<color=#75715e>         * priority-1 LRUSet.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numNodesScannedThisBatch</color> <color=#f92672>>=</color> <color=#f8f8f2>maxNodesScannedThisBatch</color>
            <color=#f92672>&&</color> <color=#f8f8f2>totalEvictedBytes</color> <color=#f92672><</color> <color=#f8f8f2>maxEvictBytes</color>
            <color=#f92672>&&</color> <color=#f8f8f2>inPri1LRUSet</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>numNodesScannedThisBatch</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>maxNodesScannedThisBatch</color> <color=#f92672>=</color> <color=#f8f8f2>getPri2LRUSize</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>maxNodesScannedThisBatch</color> <color=#f92672>+=</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>inPri1LRUSet</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictionStats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>evictionStats</color><color=#f8f8f2>.</color><color=#a6e22e>inPri1LRU</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbCache</color><color=#f8f8f2>.</color><color=#a6e22e>releaseDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>totalEvictedBytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a copy of the LRU list, for tightly controlled testing. Requires that there is exactly</color>
<color=#75715e>   * one LRU list configured.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>IN</color><color=#f92672>></color> <color=#a6e22e>getPri1LRUList</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>pri1LRUSet</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>copyList</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#a6e22e>getNextTarget</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>inPri1LRUSet</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inPri1LRUSet</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>listId</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPri1LRUList</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>pri1LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>removeFront</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>traceUINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceBINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" XXXX priority-1 Eviction target: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>listId</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPri2LRUList</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numLRULists</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>pri2LRUSet</color><color=#f92672>[</color><color=#f8f8f2>listId</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>removeFront</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>traceUINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceBINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" XXXX Pri2 Eviction target: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>class</color> <color=#a6e22e>RootEvictor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>WithRootLatched</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ChildReference</color> <color=#f8f8f2>rootRef</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>flushed</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>doWork</color><color=#f8f8f2>(</color><color=#f8f8f2>ChildReference</color> <color=#f8f8f2>root</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not call fetchTarget since this root or DB should be</color>
<color=#75715e>       * resident already if it is to be the target of eviction. If</color>
<color=#75715e>       * it is not present, it has been evicted by another thread and</color>
<color=#75715e>       * should not be fetched for two reasons: 1) this would be</color>
<color=#75715e>       * counterproductive, 2) to guard against bringing in a root</color>
<color=#75715e>       * for an evicted DB.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>rootIN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>root</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootIN</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>rootRef</color> <color=#f92672>=</color> <color=#f8f8f2>root</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Latch the target and re-check that all conditions still hold.</color>
<color=#75715e>       * The latch on the target will be released by processTarget().</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>rootIN</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootIN</color> <color=#f92672>==</color> <color=#f8f8f2>target</color> <color=#f92672>&&</color> <color=#f8f8f2>rootIN</color><color=#f8f8f2>.</color><color=#a6e22e>isRoot</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color>
            <color=#f8f8f2>processTarget</color><color=#f8f8f2>(</color>
                <color=#66d9ef>this</color><color=#f8f8f2>,</color>
                <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* target */</color>
                <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* parent */</color>
                <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#75715e>/* entry index within parent */</color>
                <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>source</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rootIN</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Decide what to do with an eviction target and carry out the decision. Return the number of</color>
<color=#75715e>   * bytes evicted (if any).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is called from evictBatch() after an IN has been selected for eviction. It</color>
<color=#75715e>   * EX-latches the IN and determines whether it can/should really be evicted, and if not what is</color>
<color=#75715e>   * the appropriate action to be taken by the evicting thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If a decision is taken to evict the target or mutate it to a BINDelta, the target must first</color>
<color=#75715e>   * be unlatched and its parent must be searched within the tree. During this search, many things</color>
<color=#75715e>   * can happen to the unlatched target, and as a result, after the parent is found and the target</color>
<color=#75715e>   * is relatched, processTarget() calls itself recursively to re-consider all the possible actions</color>
<color=#75715e>   * on the target.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>processTarget</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RootEvictor</color> <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>bgIO</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>targetIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>withParent</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>rootEvictor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootEvictor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>target</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>targetIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>dbEnv</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * The node was put back to the LRU, and then possibly evicted</color>
<color=#75715e>         * by other threads before this thread could latch it.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Normally, UINs that have cached children are not in the LRU,</color>
<color=#75715e>       * and as a result, cannot be selected for eviction. However, a</color>
<color=#75715e>       * childless UIN may be selected for eviction and then acquire</color>
<color=#75715e>       * cached children in the time after its removal from its LRUSet</color>
<color=#75715e>       * and before it is EX-latched by the evicting thread.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>hasCachedChildrenFlag</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>hasCachedChildren</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Disallow eviction of the mapping and naming DB roots, because</color>
<color=#75715e>       * their eviction and re-fetching is a special case that is not</color>
<color=#75715e>       * worth supporting.  [#13415]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isRoot</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DB_ID</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NAME_DB_ID</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * For a shared cache, we must prevent background eviction during</color>
<color=#75715e>       * recovery here, on a per-target basis. For a private</color>
<color=#75715e>       * evictor/cache, we can do it in alert().</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color> <color=#f92672>&&</color> <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>isInInit</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>source</color> <color=#f92672>==</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTORTHREAD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>putBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>isInInit</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>source</color> <color=#f92672>==</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTORTHREAD</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>isClosed</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>wasInvalidated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>isTreeUsageAboveMinimum</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>putBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isPinned</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>putBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Attempt partial eviction. The partialEviction() method also</color>
<color=#75715e>       * determines whether the IN in evictable or not. For now,</color>
<color=#75715e>       * partialEviction() will consider a node to be non-evictable if</color>
<color=#75715e>       * it is a BIN that (a) has cursors registered on it, or (b) has</color>
<color=#75715e>       * a resident non-evictable LN, which can happen only for MapLNs</color>
<color=#75715e>       * (see MapLN.isEvictable()).</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>partialEviction</color><color=#f8f8f2>();</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>isEvictable</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictedBytes</color> <color=#f92672>&</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>NON_EVICTABLE_IN</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>evictedBytes</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>NON_EVICTABLE_IN</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If we could evict some bytes from this node, put it back in</color>
<color=#75715e>       * the LRU, unless it is a BIN being explicitly evicted via a cache</color>
<color=#75715e>       * mode, in which case we should evict it, if possible.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictedBytes</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>source</color> <color=#f92672>!=</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>strippedPutBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the node is not evictable, put it back.</color>
<color=#75715e>       *</color>
<color=#75715e>       * TODO: Logically this check should come after BIN mutation, not</color>
<color=#75715e>       * before, but currently this would have little or no impact.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isEvictable</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>putBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Give the node a second chance, if it is a full BIN that can be</color>
<color=#75715e>       * mutated to a BINDelta and it is not a BIN being explicitly</color>
<color=#75715e>       * evicted via a cache mode.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f8f8f2>source</color> <color=#f92672>!=</color> <color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color>
          <color=#f92672>&&</color> <color=#f8f8f2>mutateBins</color>
          <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>target</color><color=#f8f8f2>).</color><color=#a6e22e>canMutateToBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>evictedBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>mutateToBINDelta</color><color=#f8f8f2>();</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictedBytes</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>binDeltaPutBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Give the node a second chance, if it is dirty and is not in the</color>
<color=#75715e>       * priority-2 LRUSet already.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useDirtyLRUSet</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>moveToPri2LRU</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Give the node a second chance, if it has off-heap BIN children</color>
<color=#75715e>       * and is not in the priority-2 LRUSet already.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useOffHeapCache</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>hasOffHeapBINIds</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>moveToPri2LRU</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Evict the node. To do so, we must find and latch the</color>
<color=#75715e>       * parent IN first, if we have not done this already.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootEvictor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictedBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>evictRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>rootEvictor</color><color=#f8f8f2>,</color> <color=#f8f8f2>bgIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictedBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>evict</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>bgIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>preEvictINHook</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>targetIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>evictedBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>findParentAndRetry</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>bgIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetIsLatched</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parentIsLatched</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>traceUINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceBINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" XXXX SKIPPED Eviction Target: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nNodesSkipped</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>putBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>caller</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>traceUINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceBINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" XXXX PUT-BACK-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>caller</color>
              <color=#f92672>+</color> <color=#e6db74>" Eviction Target: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri2AddBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incNumPutBack</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nNodesPutBack</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>strippedPutBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>traceUINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceBINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" XXXX STRIPPED Eviction Target: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri2AddBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incNumStripped</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nNodesStripped</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>binDeltaPutBack</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>traceUINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceBINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" XXXX MUTATED Eviction Target: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pri2AddBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incNumMutated</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nNodesMutated</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>moveToPri2LRU</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>traceUINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceBINs</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"-"</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" XXXX MOVED-TO_PRI2 Eviction Target: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incNumMoved</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>pri2AddFront</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nNodesMovedToPri2LRU</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>findParentAndRetry</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Tree</color> <color=#f8f8f2>tree</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>().</color><color=#a6e22e>getTree</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Pass false for doFetch to avoid fetching a full BIN when a</color>
<color=#75715e>     * delta is in cache. This also avoids a fetch when the node</color>
<color=#75715e>     * was evicted while unlatched, but that should be very rare.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>SearchResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>getParentINForChildIN</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>/*useTargetLevel*/</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>/*doFetch*/</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>exactParentFound</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>processTarget</color><color=#f8f8f2>(</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* rootEvictor */</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The target has been detached from the tree and it should stay</color>
<color=#75715e>     * out of the LRU. It should not be in the INList, because whenever</color>
<color=#75715e>     * we detach a node we remove it from the INList, but in case we</color>
<color=#75715e>     * forgot to do this somewhere, we can just remove it here.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>

        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" has been detached from the in-memory tree,"</color>
                <color=#f92672>+</color> <color=#e6db74>" but it is still in the INList. lastLogged="</color>
                <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLoggedLsn</color><color=#f8f8f2>()));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>evict</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>dbEnv</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#75715e>// System.out.println("Evicting BIN " + target.getNodeId());</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>storedOffHeap</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useOffHeapCache</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>storedOffHeap</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>storeEvictedBIN</color><color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>flushAndDiscardBINChildren</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Could not log a dirty BIN. See below. */</color>
        <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>logged</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>loggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>storedOffHeap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Cannot evict dirty nodes in a read-only environment, or when a</color>
<color=#75715e>       * disk limit has been exceeded. We can assume that the cache will</color>
<color=#75715e>       * not overflow with dirty nodes because writes are prohibited.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>Provisional</color> <color=#f8f8f2>provisional</color> <color=#f92672>=</color> <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>coordinateWithCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getLevel</color><color=#f8f8f2>(),</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>loggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>allowBinDeltas</color><color=#f8f8f2>,</color> <color=#f8f8f2>provisional</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>logged</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>evictedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getBudgetedMemorySize</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>detachNode</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>logged</color> <color=#75715e>/*updateLsn*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>loggedLsn</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nNodesEvicted</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logged</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nDirtyNodesEvicted</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incNumEvicted</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>evictedBytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>evictRoot</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RootEvictor</color> <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EvictionSource</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EvictionDebugStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ChildReference</color> <color=#f8f8f2>rootRef</color> <color=#f92672>=</color> <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>rootRef</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>rootRef</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>dbEnv</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>INList</color> <color=#f8f8f2>inList</color> <color=#f92672>=</color> <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>flushAndDiscardBINChildren</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Could not log a dirty BIN. See below. */</color>
        <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Cannot evict dirty nodes in a read-only environment, or when a</color>
<color=#75715e>       * disk limit has been exceeded. We can assume that the cache will</color>
<color=#75715e>       * not overflow with dirty nodes because writes are prohibited.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>Provisional</color> <color=#f8f8f2>provisional</color> <color=#f92672>=</color>
          <color=#f8f8f2>dbEnv</color><color=#f8f8f2>.</color><color=#a6e22e>coordinateWithCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getLevel</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color> <color=#75715e>/*parent*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>newLsn</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*allowDeltas*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>provisional</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*parent*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>rootRef</color><color=#f8f8f2>.</color><color=#a6e22e>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>newLsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>flushed</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>inList</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>);</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>evictBytes</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getBudgetedMemorySize</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>rootRef</color><color=#f8f8f2>.</color><color=#a6e22e>clearTarget</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>nNodesEvicted</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nRootNodesEvicted</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootEvictor</color><color=#f8f8f2>.</color><color=#a6e22e>flushed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nDirtyNodesEvicted</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incNumEvicted</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>evictBytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRunnableHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>setRunnableHook</color><color=#f8f8f2>(</color><color=#f8f8f2>hook</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPreEvictINHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>preEvictINHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEvictProfileHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>IN</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>evictProfile</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getStatsGroup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Load stats. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>envInfos</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>float</color> <color=#f8f8f2>binFetchMisses</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>nBINFetchMiss</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>float</color> <color=#f8f8f2>binFetches</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>nBINFetch</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>binFetchMissRatio</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>((</color><color=#f8f8f2>binFetches</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>binFetchMisses</color> <color=#f92672>/</color> <color=#f8f8f2>binFetches</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * These stats are not cleared. They represent the current state of</color>
<color=#75715e>     * the cache.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>copy</color><color=#f8f8f2>,</color> <color=#f8f8f2>CACHED_IN_SPARSE_TARGET</color><color=#f8f8f2>,</color> <color=#f8f8f2>nINSparseTarget</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>copy</color><color=#f8f8f2>,</color> <color=#f8f8f2>CACHED_IN_NO_TARGET</color><color=#f8f8f2>,</color> <color=#f8f8f2>nINNoTarget</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>copy</color><color=#f8f8f2>,</color> <color=#f8f8f2>CACHED_IN_COMPACT_KEY</color><color=#f8f8f2>,</color> <color=#f8f8f2>nINCompactKey</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>

    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>copy</color><color=#f8f8f2>,</color> <color=#f8f8f2>PRI1_LRU_SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>getPri1LRUSize</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>copy</color><color=#f8f8f2>,</color> <color=#f8f8f2>PRI2_LRU_SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>getPri2LRUSize</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>copy</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>getINListStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getINListStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>totalINListStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"temp"</color><color=#f8f8f2>,</color> <color=#e6db74>"temp"</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getFast</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * This is a slow stat for shared envs, because of the need to</color>
<color=#75715e>         * synchronize.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>totalINListStats</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>EnvInfo</color><color=#f92672>></color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>EnvInfo</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>envInfos</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvInfo</color> <color=#f8f8f2>ei</color> <color=#f8f8f2>:</color> <color=#f8f8f2>copy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>totalINListStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>ei</color><color=#f8f8f2>.</color><color=#a6e22e>env</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>loadStats</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>totalINListStats</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>firstEnvImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>loadStats</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incNumLNsEvicted</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>inc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nLNsEvicted</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>inc</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Update the appropriate fetch stat, based on node type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incLNFetchStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nLNFetch</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMiss</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nLNFetchMiss</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incUINFetchStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nUpperINFetch</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMiss</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nUpperINFetchMiss</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incBINFetchStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nBINFetch</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMiss</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nBINFetchMiss</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nBINDeltaFetchMiss</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incFullBINMissStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nFullBINMiss</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incBinDeltaBlindOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nBinDeltaBlindOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>AtomicLong</color> <color=#a6e22e>getNINSparseTarget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nINSparseTarget</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>AtomicLong</color> <color=#a6e22e>getNINNoTarget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nINNoTarget</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>AtomicLong</color> <color=#a6e22e>getNINCompactKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nINCompactKey</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ReentrancyGuard</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>Thread</color><color=#f92672>></color> <color=#f8f8f2>activeThreads</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ReentrancyGuard</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>activeThreads</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>Thread</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>enter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Thread</color> <color=#f8f8f2>thisThread</color> <color=#f92672>=</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeThreads</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>thisThread</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* We don't really expect a reentrant call. */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"reentrant call to eviction from "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>());</color>

        <color=#75715e>/* If running w/assertions, in testing mode, assert here. */</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#e6db74>"reentrant call to eviction from "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>activeThreads</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>thisThread</color><color=#f8f8f2>,</color> <color=#f8f8f2>thisThread</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>leave</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>activeThreads</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>activeThreads</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>BackgroundEvictTask</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Runnable</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>BackgroundEvictTask</color><color=#f8f8f2>(</color><color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>evictor</color> <color=#f92672>=</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>backgroundIO</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>activePoolThreads</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>doEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTORTHREAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>activePoolThreads</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>RejectEvictHandler</color> <color=#66d9ef>implements</color> <color=#f8f8f2>RejectedExecutionHandler</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>threadUnavailableStat</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>RejectEvictHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>threadUnavailableStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>threadUnavailableStat</color> <color=#f92672>=</color> <color=#f8f8f2>threadUnavailableStat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>rejectedExecution</color><color=#f8f8f2>(</color><color=#f8f8f2>Runnable</color> <color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>ThreadPoolExecutor</color> <color=#f8f8f2>executor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>threadUnavailableStat</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Caches DatabaseImpls to reduce DbTree.getDb overhead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>SharedEvictor, unlike PrivateEvictor, must maintain a cache map for each EnvironmentImpl,</color>
<color=#75715e>   * since each cache map is logically associated with a single DbTree instance.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DbCache</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>shared</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>nOperations</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>dbCacheClearCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>>></color> <color=#f8f8f2>envMap</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>dbMap</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DbCache</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>shared</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dbCacheClearCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>shared</color> <color=#f92672>=</color> <color=#f8f8f2>shared</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbCacheClearCount</color> <color=#f92672>=</color> <color=#f8f8f2>dbCacheClearCount</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>>></color><color=#f8f8f2>();</color>

        <color=#f8f8f2>dbMap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>envMap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Calls DbTree.getDb for the given environment and database ID, and caches the result to</color>
<color=#75715e>     * optimize multiple calls for the same DB.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param env identifies which environment the dbId parameter belongs to. For PrivateEvictor, it</color>
<color=#75715e>     *     is the same as the Evictor.firstEnvImpl field.</color>
<color=#75715e>     * @param dbId is the DB to get.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#f8f8f2>envMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>map</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color><color=#f8f8f2>();</color>
          <color=#f8f8f2>envMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>map</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#f8f8f2>dbMap</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Clear DB cache after dbCacheClearCount operations, to</color>
<color=#75715e>       * prevent starving other threads that need exclusive access to</color>
<color=#75715e>       * the MapLN (for example, DbTree.deleteMapLN).  [#21015]</color>
<color=#75715e>       *</color>
<color=#75715e>       * Note that we clear the caches for all environments after</color>
<color=#75715e>       * dbCacheClearCount total operations, rather than after</color>
<color=#75715e>       * dbCacheClearCount operations for a single environment,</color>
<color=#75715e>       * because the total is a more accurate representation of</color>
<color=#75715e>       * elapsed time, during which other threads may be waiting for</color>
<color=#75715e>       * exclusive access to the MapLN.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>nOperations</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>nOperations</color> <color=#f92672>%</color> <color=#f8f8f2>dbCacheClearCount</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>releaseDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>map</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Calls DbTree.releaseDb for cached DBs, and clears the cache. */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>releaseDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envMap</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>sharingEnv</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>

          <color=#f8f8f2>sharingEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>dbMap</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dbMap</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>