<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ReplicaConsistencyPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.Replica</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.PropUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A consistency policy which describes the amount of time the Replica is allowed to lag the Master.</color>
<color=#75715e> * The application can use this policy to ensure that this node sees all transactions that were</color>
<color=#75715e> * committed on the Master before the lag interval.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Effective use of this policy requires that the clocks on the Master and Replica are</color>
<color=#75715e> * synchronized by using a protocol like NTP</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Consistency policies are specified at either a per-transaction level through {@link</color>
<color=#75715e> * com.sleepycat.je.TransactionConfig#setConsistencyPolicy} or as an replication node wide default</color>
<color=#75715e> * through {@link ReplicationConfig#setConsistencyPolicy}</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="{@docRoot}/../ReplicationGuide/consistency.html" target="_top">Managing</color>
<color=#75715e> *     Consistency</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TimeConsistencyPolicy</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The name:{@value} associated with this policy. The name can be used when constructing policy</color>
<color=#75715e>   * property values for use in je.properties files.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>NAME</color> <color=#f92672>=</color> <color=#e6db74>"TimeConsistencyPolicy"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>permissibleLag</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Amount of time to wait (in ms) for the consistency to be reached. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the amount of time by which the Replica is allowed to lag the master when initiating</color>
<color=#75715e>   * a transaction. The Replica ensures that all transactions that were committed on the Master</color>
<color=#75715e>   * before this lag interval are available at the Replica before allowing a transaction to proceed</color>
<color=#75715e>   * with Environment.beginTransaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Effective use of this policy requires that the clocks on the Master and Replica are</color>
<color=#75715e>   * synchronized by using a protocol like NTP.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param permissibleLag the time interval by which the Replica may be out of date with respect to</color>
<color=#75715e>   *     the Master when a transaction is initiated on the Replica.</color>
<color=#75715e>   * @param permissibleLagUnit the {@code TimeUnit} for the permissibleLag parameter.</color>
<color=#75715e>   * @param timeout the amount of time to wait for the consistency to be reached.</color>
<color=#75715e>   * @param timeoutUnit the {@code TimeUnit} for the timeout parameter.</color>
<color=#75715e>   * @throws IllegalArgumentException if the permissibleLagUnit or timeoutUnit is null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TimeConsistencyPolicy</color><color=#f8f8f2>(</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>permissibleLag</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>permissibleLagUnit</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>timeoutUnit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>permissibleLag</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>durationToMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>permissibleLag</color><color=#f8f8f2>,</color> <color=#f8f8f2>permissibleLagUnit</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>durationToMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeoutUnit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the name:{@value #NAME}, associated with this policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #NAME</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>NAME</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the allowed time lag associated with this policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param unit the {@code TimeUnit} of the returned value.</color>
<color=#75715e>   * @return the permissible lag time in the specified unit.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPermissibleLag</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>millisToDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>permissibleLag</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the consistency timeout associated with this policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param unit the {@code TimeUnit} of the returned value.</color>
<color=#75715e>   * @return the consistency timeout in the specified unit.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>millisToDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only. Ensures that the replica has replayed the replication stream to</color>
<color=#75715e>   *     the point identified by the lag period. If it isn't the method waits until the constraint</color>
<color=#75715e>   *     is satisfied by the replica.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>ensureConsistency</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>replicatorImpl</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicaConsistencyException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Cast is done to preserve replication/non replication code</color>
<color=#75715e>     * boundaries.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>replicatorImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Replica</color> <color=#f8f8f2>replica</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>replica</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getConsistencyTracker</color><color=#f8f8f2>().</color><color=#a6e22e>lagAwait</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>prime</color> <color=#f92672>=</color> <color=#ae81ff>31</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>prime</color> <color=#f92672>*</color> <color=#f8f8f2>result</color> <color=#f92672>+</color> <color=#f8f8f2>permissibleLag</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>prime</color> <color=#f92672>*</color> <color=#f8f8f2>result</color> <color=#f92672>+</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#f8f8f2>obj</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>obj</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>TimeConsistencyPolicy</color> <color=#f8f8f2>other</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>TimeConsistencyPolicy</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>permissibleLag</color> <color=#f92672>!=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>permissibleLag</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>timeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" permissibleLag="</color> <color=#f92672>+</color> <color=#f8f8f2>permissibleLag</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>