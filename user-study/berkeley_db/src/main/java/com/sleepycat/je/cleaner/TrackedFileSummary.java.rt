<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.cleaner</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Delta file summary info for a tracked file. Tracked files are managed by the UtilizationTracker.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The methods in this class for reading obsolete offsets may be used by multiple threads without</color>
<color=#75715e> * synchronization even while another thread is adding offsets. This is possible because elements</color>
<color=#75715e> * are never deleted from the lists. The thread adding obsolete offsets does so under the log write</color>
<color=#75715e> * latch to prevent multiple threads from adding concurrently.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TrackedFileSummary</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FileSummary</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>BaseUtilizationTracker</color> <color=#f8f8f2>tracker</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OffsetList</color> <color=#f8f8f2>obsoleteOffsets</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>trackDetail</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowFlush</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates an empty tracked summary. */</color>
  <color=#f8f8f2>TrackedFileSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>BaseUtilizationTracker</color> <color=#f8f8f2>tracker</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>trackDetail</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>tracker</color> <color=#f92672>=</color> <color=#f8f8f2>tracker</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>trackDetail</color> <color=#f92672>=</color> <color=#f8f8f2>trackDetail</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this summary is allowed or prohibited from being flushed or evicted during</color>
<color=#75715e>   * cleaning. By default, flushing is allowed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowFlush</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>allowFlush</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Allows or prohibits this summary from being flushed or evicted during cleaning. By default,</color>
<color=#75715e>   * flushing is allowed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setAllowFlush</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowFlush</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowFlush</color> <color=#f92672>=</color> <color=#f8f8f2>allowFlush</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the file number being tracked. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getFileNumber</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the total memory size for this object. We only bother to budget obsolete detail, not the</color>
<color=#75715e>   * overhead for this object, for two reasons: 1) The number of these objects is very small, and 2)</color>
<color=#75715e>   * unit tests disable detail tracking as a way to prevent budget adjustments here.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Overrides reset for a tracked file, and is called when a FileSummaryLN is written to the log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>tracker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>obsoleteOffsets</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>tracker</color><color=#f8f8f2>.</color><color=#a6e22e>resetFile</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memSize</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemoryBudget</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Tracks the given offset as obsolete or non-obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trackObsolete</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkDupOffsets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>trackDetail</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>adjustMem</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteOffsets</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>obsoleteOffsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OffsetList</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>adjustMem</color> <color=#f92672>+=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>TFS_LIST_INITIAL_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteOffsets</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkDupOffsets</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>adjustMem</color> <color=#f92672>+=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>TFS_LIST_SEGMENT_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>adjustMem</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemoryBudget</color><color=#f8f8f2>(</color><color=#f8f8f2>adjustMem</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds the obsolete offsets as well as the totals of the given object. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addTrackedSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>TrackedFileSummary</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Add the totals. */</color>
    <color=#f8f8f2>add</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Add the offsets and the memory used [#15505] by the other tracker.</color>
<color=#75715e>     * The memory budget has already been updated for the offsets to be</color>
<color=#75715e>     * added, so we only need to account for a possible difference of one</color>
<color=#75715e>     * segment when we merge them.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>memSize</color> <color=#f92672>+=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>memSize</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>obsoleteOffsets</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteOffsets</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Merge the other offsets into our list. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteOffsets</color><color=#f8f8f2>.</color><color=#a6e22e>merge</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>obsoleteOffsets</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* There is one segment less as a result of the merge. */</color>
          <color=#f8f8f2>updateMemoryBudget</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>TFS_LIST_SEGMENT_OVERHEAD</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Adopt the other's offsets as our own. */</color>
        <color=#f8f8f2>obsoleteOffsets</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>obsoleteOffsets</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns obsolete offsets as an array of longs, or null if none. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getObsoleteOffsets</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteOffsets</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>obsoleteOffsets</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the given offset is present in the tracked offsets. This does not indicate</color>
<color=#75715e>   * whether the offset is obsolete in general, but only if it is known to be obsolete in this</color>
<color=#75715e>   * version of the tracked information.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>containsObsoleteOffset</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteOffsets</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>obsoleteOffsets</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>updateMemoryBudget</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>tracker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>memSize</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>tracker</color><color=#f8f8f2>.</color><color=#a6e22e>env</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>updateAdminMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Update memory budgets when this tracker is closed and will never be accessed again. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>tracker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>tracker</color><color=#f8f8f2>.</color><color=#a6e22e>env</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>updateAdminMemoryUsage</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>tracker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>