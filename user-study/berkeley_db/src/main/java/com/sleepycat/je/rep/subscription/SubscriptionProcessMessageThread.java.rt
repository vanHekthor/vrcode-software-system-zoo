<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LNLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.GroupShutdownException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.InputWireRecord</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.Protocol</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThread</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.BlockingQueue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType.LOG_TXN_ABORT</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType.LOG_TXN_COMMIT</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Object to represent the thread created by Subscription to process messages received from feeder.</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>SubscriptionProcessMessageThread</color> <color=#66d9ef>extends</color> <color=#f8f8f2>StoppableThread</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* handle to stats */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionStat</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#75715e>/* configuration */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
  <color=#75715e>/* input queue from which to consume messages */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>BlockingQueue</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>queue</color><color=#f8f8f2>;</color>
  <color=#75715e>/* logger */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/* exit flag to specify exit type */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>ExitType</color> <color=#f8f8f2>exitRequest</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Construct a subscription thread to process messages</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param impl RepImpl of the RN where thread is running</color>
<color=#75715e>   * @param queue Input queue from which to consume messages</color>
<color=#75715e>   * @param config Subscription configuration</color>
<color=#75715e>   * @param logger Logger</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>SubscriptionProcessMessageThread</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>impl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>BlockingQueue</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>queue</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SubscriptionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SubscriptionStat</color> <color=#f8f8f2>stats</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>impl</color><color=#f8f8f2>,</color> <color=#e6db74>"SubscriptionProcessMessageThread"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>config</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>queue</color> <color=#f92672>=</color> <color=#f8f8f2>queue</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>stats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>exitRequest</color> <color=#f92672>=</color> <color=#f8f8f2>ExitType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setHighVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Shut down input thread immediately, regardless of the state of queue */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>exitRequest</color> <color=#f92672>=</color> <color=#f8f8f2>ExitType</color><color=#f8f8f2>.</color><color=#a6e22e>IMMEDIATE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Implement a soft shutdown. The thread will exist after all messages in the queue are consumed</color>
<color=#75715e>   * and processed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the amount of time in ms that the shutdownThread method will wait for the thread to</color>
<color=#75715e>   *     exit. A -ve value means that the method will not wait. A zero value means it will wait</color>
<color=#75715e>   *     indefinitely.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>initiateSoftShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>exitRequest</color> <color=#f92672>=</color> <color=#f8f8f2>ExitType</color><color=#f8f8f2>.</color><color=#a6e22e>IMMEDIATE</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Implement thread run() method. Dequeue message from the queue and process it via the callback.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* callback provided by client to process each message in input queue */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionCallback</color> <color=#f8f8f2>callBack</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getCallBack</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#e6db74>"Input thread started. Message queue size:"</color> <color=#f92672>+</color> <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>remainingCapacity</color><color=#f8f8f2>());</color>

    <color=#75715e>/* loop to process each message in the queue */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exitRequest</color> <color=#f92672>==</color> <color=#f8f8f2>ExitType</color><color=#f8f8f2>.</color><color=#a6e22e>IMMEDIATE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * if immediate exit is requested,  exit without</color>
<color=#75715e>           * consuming any message in the queue</color>
<color=#75715e>           */</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

          <color=#75715e>/* fetch next message from queue */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
              <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>poll</color><color=#f8f8f2>(</color><color=#f8f8f2>SubscriptionConfig</color><color=#f8f8f2>.</color><color=#a6e22e>QUEUE_POLL_INTERVAL_MS</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>message</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/*</color>
<color=#75715e>             * No message to consume, continue and wait for the</color>
<color=#75715e>             * next message.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>message</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>callBack</color><color=#f8f8f2>.</color><color=#a6e22e>processException</color><color=#f8f8f2>((</color><color=#f8f8f2>Exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>

            <color=#75715e>/* exits if shutdown message from feeder */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>message</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>GroupShutdownException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>exitRequest</color> <color=#f92672>=</color> <color=#f8f8f2>ExitType</color><color=#f8f8f2>.</color><color=#a6e22e>IMMEDIATE</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>GroupShutdownException</color> <color=#f8f8f2>gse</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>GroupShutdownException</color><color=#f8f8f2>)</color> <color=#f8f8f2>message</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
                  <color=#e6db74>"Received shutdown message from "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getFeederHost</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>" at VLSN "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>gse</color><color=#f8f8f2>.</color><color=#a6e22e>getShutdownVLSN</color><color=#f8f8f2>());</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#75715e>/* use different callbacks depending on entry type */</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>InputWireRecord</color> <color=#f8f8f2>wireRecord</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Protocol</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>message</color><color=#f8f8f2>).</color><color=#a6e22e>getWireRecord</color><color=#f8f8f2>();</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color> <color=#f92672>=</color> <color=#f8f8f2>wireRecord</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>();</color>
            <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>wireRecord</color><color=#f8f8f2>.</color><color=#a6e22e>getEntryType</color><color=#f8f8f2>();</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>wireRecord</color><color=#f8f8f2>.</color><color=#a6e22e>getLogEntry</color><color=#f8f8f2>();</color>
            <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnId</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactionId</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setHighVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNumOpsProcessed</color><color=#f8f8f2>().</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>

            <color=#75715e>/* call different proc depending on entry type */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LOG_TXN_COMMIT</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNumTxnCommitted</color><color=#f8f8f2>().</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>callBack</color><color=#f8f8f2>.</color><color=#a6e22e>processCommit</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>);</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LOG_TXN_ABORT</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNumTxnAborted</color><color=#f8f8f2>().</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>callBack</color><color=#f8f8f2>.</color><color=#a6e22e>processAbort</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>);</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LNLogEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

              <color=#75715e>/* receive a LNLogEntry from Feeder */</color>
              <color=#66d9ef>final</color> <color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color> <color=#f8f8f2>lnEntry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>

              <color=#75715e>/*</color>
<color=#75715e>               * We have to call postFetchInit to avoid EFE. The</color>
<color=#75715e>               * function will reformat the key/data if entry is</color>
<color=#75715e>               * from a dup DB. The default feeder filter would</color>
<color=#75715e>               * filter out all dup db entries for us.</color>
<color=#75715e>               *</color>
<color=#75715e>               * TODO:</color>
<color=#75715e>               * Note today we temporarily disabled user-defined</color>
<color=#75715e>               * feeder filter and thus users are unable to</color>
<color=#75715e>               * replace the default feeder filter with their own.</color>
<color=#75715e>               * So here it is safe to assume no dup db entry.</color>
<color=#75715e>               *</color>
<color=#75715e>               * We will have to address the dup db entry issue</color>
<color=#75715e>               * in future to make the Subscription API public,</color>
<color=#75715e>               * in which users will be allowed to use their own</color>
<color=#75715e>               * feeder filter.</color>
<color=#75715e>               */</color>
              <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getLN</color><color=#f8f8f2>().</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>callBack</color><color=#f8f8f2>.</color><color=#a6e22e>processDel</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(),</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>callBack</color><color=#f8f8f2>.</color><color=#a6e22e>processPut</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
          <color=#e6db74>"input thread receives exception "</color>
              <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>", process the exception in callback, clear queue "</color>
              <color=#f92672>+</color> <color=#e6db74>"and exit."</color>
              <color=#f92672>+</color> <color=#e6db74>"\n"</color>
              <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>

      <color=#f8f8f2>exitRequest</color> <color=#f92672>=</color> <color=#f8f8f2>ExitType</color><color=#f8f8f2>.</color><color=#a6e22e>IMMEDIATE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#e6db74>"message queue cleared, thread exits with type: "</color> <color=#f92672>+</color> <color=#f8f8f2>exitRequest</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* types of exits  */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>enum</color> <color=#f8f8f2>ExitType</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>NONE</color><color=#f8f8f2>,</color> <color=#75715e>/* No exit requested */</color>
    <color=#f8f8f2>IMMEDIATE</color><color=#f8f8f2>,</color> <color=#75715e>/* An immediate exit; ignore queued requests. */</color>
    <color=#f8f8f2>SOFT</color> <color=#75715e>/* Process pending requests in queue, then exit */</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>