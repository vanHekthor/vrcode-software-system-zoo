<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.GetMode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.SearchMode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DatabaseUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.HashSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A database cursor for a secondary database. Cursors are not thread safe and the application is</color>
<color=#75715e> * responsible for coordinating any multithreaded access to a single cursor object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Secondary cursors are returned by {@link SecondaryDatabase#openCursor</color>
<color=#75715e> * SecondaryDatabase.openCursor} and {@link SecondaryDatabase#openSecondaryCursor</color>
<color=#75715e> * SecondaryDatabase.openSecondaryCursor}. The distinguishing characteristics of a secondary cursor</color>
<color=#75715e> * are:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Direct calls to <code>put()</code> methods on a secondary cursor are prohibited.</color>
<color=#75715e> *   <li>The {@link #delete} method of a secondary cursor will delete the primary record and as well</color>
<color=#75715e> *       as all its associated secondary records.</color>
<color=#75715e> *   <li>Calls to all get methods will return the data from the associated primary database.</color>
<color=#75715e> *   <li>Additional get method signatures are provided to return the primary key in an additional</color>
<color=#75715e> *       pKey parameter.</color>
<color=#75715e> *   <li>Calls to {@link #dup} will return a {@link SecondaryCursor}.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To obtain a secondary cursor with default attributes:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     SecondaryCursor cursor = myDb.openSecondaryCursor(txn, null);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To customize the attributes of a cursor, use a CursorConfig object.</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     CursorConfig config = new CursorConfig();</color>
<color=#75715e> *     config.setReadUncommitted(true);</color>
<color=#75715e> *     SecondaryCursor cursor = myDb.openSecondaryCursor(txn, config);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SecondaryCursor</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>;</color>

<color=#75715e>//  /**</color>
<color=#75715e>//   * Cursor constructor. Not public. To get a cursor, the user should call</color>
<color=#75715e>//   * SecondaryDatabase.cursor();</color>
<color=#75715e>//   */</color>
<color=#75715e>//  SecondaryCursor(</color>
<color=#75715e>//      final SecondaryDatabase dbHandle, final Transaction txn, final CursorConfig cursorConfig) {</color>
<color=#75715e>//    super(dbHandle, txn, cursorConfig);</color>
<color=#75715e>//    secondaryDb = dbHandle;</color>
<color=#75715e>//  }</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Cursor constructor. Not public. To get a cursor, the user should call</color>
<color=#75715e>   * SecondaryDatabase.cursor();</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>SecondaryCursor</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>secondaryDb</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

<color=#75715e>//  /** Copy constructor. */</color>
<color=#75715e>//  private SecondaryCursor(final SecondaryCursor cursor, final boolean samePosition) {</color>
<color=#75715e>//    super(cursor, samePosition);</color>
<color=#75715e>//    secondaryDb = cursor.secondaryDb;</color>
<color=#75715e>//  }</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isSecondaryCursor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Database handle associated with this Cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The Database handle associated with this Cursor.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the primary {@link Database Database} associated with this cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is the equivalent of the following expression:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <blockquote></color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *         getDatabase().getPrimaryDatabase()</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * </blockquote></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The primary {@link Database Database} associated with this cursor.</color>
<color=#75715e>   */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * To be added when SecondaryAssociation is published:</color>
<color=#75715e>   * If a {@link SecondaryAssociation} is {@link</color>
<color=#75715e>   * SecondaryCursor#setSecondaryAssociation configured}, this method returns</color>
<color=#75715e>   * null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getPrimaryDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimaryDatabase</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

<color=#75715e>//  /**</color>
<color=#75715e>//   * Returns a new <code>SecondaryCursor</code> for the same transaction as the original cursor.</color>
<color=#75715e>//   * <!-- inherit other javadoc from overridden method --></color>
<color=#75715e>//   */</color>
<color=#75715e>//  @Override</color>
<color=#75715e>//  public SecondaryCursor dup(final boolean samePosition) {</color>
<color=#75715e>//    checkOpenAndState(false);</color>
<color=#75715e>//    return new SecondaryCursor(this, samePosition);</color>
<color=#75715e>//  }</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a new copy of the cursor as a <code>SecondaryCursor</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is the equivalent of calling {@link #dup} and casting the result to</color>
<color=#75715e>   * {@link SecondaryCursor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #dup</color>
<color=#75715e>   * @deprecated As of JE 4.0.13, replaced by {@link Cursor#dup}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryCursor</color> <color=#a6e22e>dupSecondary</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>samePosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color><color=#75715e>//    return dup(samePosition);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Delete the record to which the cursor refers from the primary database and all secondary</color>
<color=#75715e>   * indices.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method behaves as if {@link Database#delete(Transaction, DatabaseEntry, WriteOptions)}</color>
<color=#75715e>   * were called for the primary database, using the primary key associated with this cursor</color>
<color=#75715e>   * position.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cursor position is unchanged after a delete, and subsequent calls to cursor functions</color>
<color=#75715e>   * expecting the cursor to refer to an existing record will fail.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: Unlike read operations using a SecondaryCursor, write operations like this one are</color>
<color=#75715e>   * deadlock-prone.</color>
<color=#75715e>   * <!-- inherit other javadoc from overridden method --></color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkOpenAndState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"SecondaryCursor.delete: "</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Read the primary key (the data of a secondary). */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Currently we write-lock the secondary before deleting the primary,</color>
<color=#75715e>     * which reverses the normal locking order and is deadlock-prone.</color>
<color=#75715e>     *</color>
<color=#75715e>     * FUTURE: To avoid deadlocks we could use dirty-read-all here, and</color>
<color=#75715e>     * then perform a special delete-if-has-secondary-key operation on the</color>
<color=#75715e>     * primary. We must be careful not to delete the primary record if,</color>
<color=#75715e>     * after locking it, it does not reference this secondary key.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>secResult</color> <color=#f92672>=</color> <color=#f8f8f2>getCurrentInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secResult</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>primaryDb</color> <color=#f92672>=</color> <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimary</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>primaryDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Primary was removed from the association. */</color>
      <color=#f8f8f2>deleteNoNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getRepContext</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>secResult</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Delete the primary and all secondaries (including this one). */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>priResult</color> <color=#f92672>=</color> <color=#f8f8f2>primaryDb</color><color=#f8f8f2>.</color><color=#a6e22e>deleteInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priResult</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>priResult</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* The primary record may have expired after locking the secondary. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isProbablyExpired</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>.</color><color=#a6e22e>secondaryRefersToMissingPrimaryKey</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>secResult</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationTime</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Delete the record to which the cursor refers from the primary database and all secondary</color>
<color=#75715e>   * indices.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method behaves as if {@link Database#delete(Transaction, DatabaseEntry, WriteOptions)}</color>
<color=#75715e>   * were called for the primary database, using the primary key associated with this cursor</color>
<color=#75715e>   * position.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cursor position is unchanged after a delete, and subsequent calls to cursor functions</color>
<color=#75715e>   * expecting the cursor to refer to an existing record will fail.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #delete(WriteOptions)}.</color>
<color=#75715e>   * <!-- inherit other javadoc from overridden method --></color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>delete</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEMPTY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed on a secondary cursor. {@link UnsupportedOperationException} will</color>
<color=#75715e>   * always be thrown by this method. The corresponding method on the primary cursor should be used</color>
<color=#75715e>   * instead.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Put</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>throw</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>notAllowedException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed on a secondary cursor. {@link UnsupportedOperationException} will</color>
<color=#75715e>   * always be thrown by this method. The corresponding method on the primary cursor should be used</color>
<color=#75715e>   * instead.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>notAllowedException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed on a secondary cursor. {@link UnsupportedOperationException} will</color>
<color=#75715e>   * always be thrown by this method. The corresponding method on the primary cursor should be used</color>
<color=#75715e>   * instead.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putNoOverwrite</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>notAllowedException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed on a secondary cursor. {@link UnsupportedOperationException} will</color>
<color=#75715e>   * always be thrown by this method. The corresponding method on the primary cursor should be used</color>
<color=#75715e>   * instead.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putNoDupData</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>notAllowedException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed on a secondary cursor. {@link UnsupportedOperationException} will</color>
<color=#75715e>   * always be thrown by this method. The corresponding method on the primary cursor should be used</color>
<color=#75715e>   * instead.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putCurrent</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>notAllowedException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to a record according to the specified {@link Get} type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data. In addition, two operations are not supported by this method: {@link</color>
<color=#75715e>   * Get#SEARCH_BOTH} and {@link Get#SEARCH_BOTH_GTE}.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to a record according to the specified {@link Get} type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the operation succeeds, the record at the resulting cursor position will be locked</color>
<color=#75715e>   * according to the {@link ReadOptions#getLockMode() lock mode} specified, the key, primary key,</color>
<color=#75715e>   * and/or data will be returned via the (non-null) DatabaseEntry parameters, and a non-null</color>
<color=#75715e>   * OperationResult will be returned. If the operation fails because the record requested is not</color>
<color=#75715e>   * found, null is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The following table lists each allowed operation and whether the key, pKey and data</color>
<color=#75715e>   * parameters are <a href="DatabaseEntry.html#params">input or output parameters</a>. Also</color>
<color=#75715e>   * specified is whether the cursor must be initialized (positioned on a record) before calling</color>
<color=#75715e>   * this method. See the individual {@link Get} operations for more information. <div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1" summary=""></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <th>Get operation</th></color>
<color=#75715e>   *     <th>Description</th></color>
<color=#75715e>   *     <th>'key' parameter</th></color>
<color=#75715e>   *     <th>'pKey' parameter</th></color>
<color=#75715e>   *     <th>'data' parameter</th></color>
<color=#75715e>   *     <th>Cursor position<br/>must be initialized?</th></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH_BOTH}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key and pKey.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH_GTE}</td></color>
<color=#75715e>   *     <td>Searches using a GTE match by key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input/output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH_BOTH_GTE}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key and a GTE match by pKey.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input/output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#CURRENT}</td></color>
<color=#75715e>   *     <td>Accesses the current record</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>yes</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#FIRST}</td></color>
<color=#75715e>   *     <td>Finds the first record in the database.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#LAST}</td></color>
<color=#75715e>   *     <td>Finds the last record in the database.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#NEXT}</td></color>
<color=#75715e>   *     <td>Moves to the next record.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#NEXT_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the next record with the same key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>yes</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#NEXT_NO_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the next record with a different key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#PREV}</td></color>
<color=#75715e>   *     <td>Moves to the previous record.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#PREV_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the previous record with the same key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>yes</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#PREV_NO_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the previous record with a different key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * </div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>** - For these 'next' and 'previous' operations the cursor may be uninitialized, in which</color>
<color=#75715e>   * case the cursor will be moved to the first or last record, respectively.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key input or output parameter, depending on getType.</color>
<color=#75715e>   * @param pKey the primary key input or output parameter, depending on getType.</color>
<color=#75715e>   * @param data the primary data output parameter.</color>
<color=#75715e>   * @param getType the Get operation type. May not be null.</color>
<color=#75715e>   * @param options the ReadOptions, or null to use default options.</color>
<color=#75715e>   * @return the OperationResult if the record requested is found, else null.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record) and this is not permitted (see above), or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified. This includes passing a</color>
<color=#75715e>   *     null getType, a null input key/pKey parameter, an input key/pKey parameter with a null data</color>
<color=#75715e>   *     array, a partial key/pKey input parameter, and specifying a {@link</color>
<color=#75715e>   *     ReadOptions#getLockMode() lock mode} of READ_COMMITTED.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>options</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>options</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_READ_OPTIONS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getLockMode</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"SecondaryCursor.get: "</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>),</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>getInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs the get() operation except for state checking and tracing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The LockMode is passed because for Database operations it is sometimes different than</color>
<color=#75715e>   * ReadOptions.getLockMode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Allows passing a throughput stat index so it can be called for Database and SecondaryCursor</color>
<color=#75715e>   * operations.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>getInternal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#e6db74>"getType"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>getSearchMode</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color><color=#f8f8f2>.</color><color=#a6e22e>isDataSearch</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#e6db74>"pKey"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#e6db74>"pKey"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>pKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>search</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>getGetMode</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowNextPrevUninitialized</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isNotInitialized</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>getMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>getType</color> <color=#f92672>=</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>isForward</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>LAST</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>getMode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>retrieveNext</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLockPrimaryOnly</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>getCurrentInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color> <color=#f92672>||</color> <color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>LAST</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>position</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>getLockPrimaryOnly</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getCurrent</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the key/data pair to which the cursor refers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the key/pair at the cursor</color>
<color=#75715e>   *     position has been deleted; otherwise, {@link OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEMPTY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getFirst</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getFirst</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the first key/data pair of the database, and return that pair. If the first</color>
<color=#75715e>   * key has duplicate values, the first data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getFirst</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getLast</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getLast</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the last key/data pair of the database, and return that pair. If the last</color>
<color=#75715e>   * key has duplicate values, the last data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getLast</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>LAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the next key/data pair and return that pair. If the matching key has</color>
<color=#75715e>   * duplicate values, the first data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the first key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the next key/data pair of the</color>
<color=#75715e>   * database, and that pair is returned. In the presence of duplicate key values, the value of the</color>
<color=#75715e>   * key may not change.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNextDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNextDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the next key/data pair of the database is a duplicate data record for the current key/data</color>
<color=#75715e>   * pair, move the cursor to the next key/data pair of the database and return that pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNextDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNextNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNextNoDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the next non-duplicate key/data pair and return that pair. If the matching</color>
<color=#75715e>   * key has duplicate values, the first data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the first key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the next non-duplicate key of</color>
<color=#75715e>   * the database, and that key/data pair is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNextNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_NO_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrev</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getPrev</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the previous key/data pair and return that pair. If the matching key has</color>
<color=#75715e>   * duplicate values, the last data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the last key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the previous key/data pair of</color>
<color=#75715e>   * the database, and that pair is returned. In the presence of duplicate key values, the value of</color>
<color=#75715e>   * the key may not change.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrev</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrevDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getPrevDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the previous key/data pair of the database is a duplicate data record for the current</color>
<color=#75715e>   * key/data pair, move the cursor to the previous key/data pair of the database and return that</color>
<color=#75715e>   * pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrevDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>PREV_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrevNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getPrevNoDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the previous non-duplicate key/data pair and return that pair. If the</color>
<color=#75715e>   * matching key has duplicate values, the last data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the last key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the previous non-duplicate</color>
<color=#75715e>   * key of the database, and that key/data pair is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrevNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>PREV_NO_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchKey</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getSearchKey</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the given key of the database, and return the datum associated with the</color>
<color=#75715e>   * given key. If the matching key has duplicate values, the first data item in the set of</color>
<color=#75715e>   * duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key used as input. It must be initialized with a non-null byte array</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchKey</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The difference between this method and the method it overrides in {@link Cursor} is that the</color>
<color=#75715e>   * key here is defined as the secondary records's key, and the data is defined as the primary</color>
<color=#75715e>   * record's data.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchKeyRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getSearchKeyRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the closest matching key of the database, and return the data item</color>
<color=#75715e>   * associated with the matching key. If the matching key has duplicate values, the first data item</color>
<color=#75715e>   * in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The returned key/data pair is for the smallest key greater than or equal to the specified</color>
<color=#75715e>   * key (as determined by the key comparison function), permitting partial key matches and range</color>
<color=#75715e>   * searches.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key used as input and returned as output. It must be initialized with</color>
<color=#75715e>   *     a non-null byte array by the caller.</color>
<color=#75715e>   * @param pKey the primary key returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller. A <a href="Cursor.html#partialEntry">partial data item</a> may be specified</color>
<color=#75715e>   *     to optimize for key only or partial data retrieval.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchKeyRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_GTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed with this method signature. {@link UnsupportedOperationException}</color>
<color=#75715e>   * will always be thrown by this method. The corresponding method with the <code>pKey</code></color>
<color=#75715e>   * parameter should be used instead.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchBoth</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>notAllowedException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the specified secondary and primary key, where both the primary and</color>
<color=#75715e>   * secondary key items must match.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key used as input. It must be initialized with a non-null byte array</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key used as input. It must be initialized with a non-null byte array by</color>
<color=#75715e>   *     the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchBoth</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_BOTH</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed with this method signature. {@link UnsupportedOperationException}</color>
<color=#75715e>   * will always be thrown by this method. The corresponding method with the <code>pKey</code></color>
<color=#75715e>   * parameter should be used instead.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchBothRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>notAllowedException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Move the cursor to the specified secondary key and closest matching primary key of the</color>
<color=#75715e>   * database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the case of any database supporting sorted duplicate sets, the returned key/data pair is</color>
<color=#75715e>   * for the smallest primary key greater than or equal to the specified primary key (as determined</color>
<color=#75715e>   * by the key comparison function), permitting partial matches and range searches in duplicate</color>
<color=#75715e>   * data sets.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the secondary key used as input. It must be initialized with a non-null byte array</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param pKey the primary key used as input and returned as output. It must be initialized with a</color>
<color=#75715e>   *     non-null byte array by the caller.</color>
<color=#75715e>   * @param data the primary data returned as output. Its byte array does not need to be initialized</color>
<color=#75715e>   *     by the caller.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair</color>
<color=#75715e>   *     is found; otherwise, {@link OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, if a</color>
<color=#75715e>   *     DatabaseEntry parameter is null or does not contain a required non-null byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchBothRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_BOTH_GTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the current key and data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a secondary key is found, but the primary cannot be read for one of the following</color>
<color=#75715e>   * reasons, this method returns KEYEMPTY.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1) lock mode is read-uncommitted and the primary record was deleted in the middle of the</color>
<color=#75715e>   * operation</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>2) the primary DB has been removed from the SecondaryAssocation</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>getCurrentInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockPrimaryOnly</color> <color=#f92672>=</color> <color=#f8f8f2>getLockPrimaryOnly</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>searchLockMode</color> <color=#f92672>=</color> <color=#f8f8f2>lockPrimaryOnly</color> <color=#f92672>?</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>getCurrentInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchLockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>searchLockMode</color><color=#f8f8f2>),</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls search() and retrieves primary data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When the primary record cannot be read (see readPrimaryAfterGet), advance over the</color>
<color=#75715e>   * unavailable record, according to the search type.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>search</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockPrimaryOnly</color> <color=#f92672>=</color> <color=#f8f8f2>getLockPrimaryOnly</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>searchLockMode</color> <color=#f92672>=</color> <color=#f8f8f2>lockPrimaryOnly</color> <color=#f92672>?</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result1</color> <color=#f92672>=</color> <color=#f8f8f2>search</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchLockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result1</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result2</color> <color=#f92672>=</color>
        <color=#f8f8f2>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>searchLockMode</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>result1</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result2</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Advance over the unavailable record. */</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>BOTH</color><color=#f8f8f2>:</color>
        <color=#75715e>/* Exact search on sec and pri key. */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SET</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>BOTH_RANGE</color><color=#f8f8f2>:</color>
        <color=#75715e>/* Find exact sec key and next primary key. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>retrieveNext</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SET_RANGE</color><color=#f8f8f2>:</color>
        <color=#75715e>/* Find next sec key or primary key. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>retrieveNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>);</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls position() and retrieves primary data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When the primary record cannot be read (see readPrimaryAfterGet), advance over the</color>
<color=#75715e>   * unavailable record.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>position</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>first</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>searchLockMode</color> <color=#f92672>=</color> <color=#f8f8f2>lockPrimaryOnly</color> <color=#f92672>?</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result1</color> <color=#f92672>=</color> <color=#f8f8f2>position</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchLockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result1</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result2</color> <color=#f92672>=</color>
        <color=#f8f8f2>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>searchLockMode</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>result1</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result2</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Advance over the unavailable record. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>retrieveNext</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color> <color=#f92672>?</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color> <color=#f8f8f2>:</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls retrieveNext() and retrieves primary data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When the primary record cannot be read (see readPrimaryAfterGet), advance over the</color>
<color=#75715e>   * unavailable record.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>retrieveNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>searchLockMode</color> <color=#f92672>=</color> <color=#f8f8f2>lockPrimaryOnly</color> <color=#f92672>?</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result1</color> <color=#f92672>=</color> <color=#f8f8f2>retrieveNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchLockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result1</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result2</color> <color=#f92672>=</color>
          <color=#f8f8f2>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>searchLockMode</color><color=#f8f8f2>),</color>
              <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>result1</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result2</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>result2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Continue loop to advance over the unavailable record. */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether to use dirty-read for the secondary read and rely on the primary record lock</color>
<color=#75715e>   * alone.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>False is returned in the following cases, and true otherwise.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>+ When the user specifies dirty-read, since there is no locking.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>+ For serializable isolation because this would likely require other changes to the</color>
<color=#75715e>   * serializable algorithms. Currently we live with the fact that secondary access with</color>
<color=#75715e>   * serializable isolation is deadlock prone.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>+ When the primary data is not requested we must lock the secondary because we do not read</color>
<color=#75715e>   * or lock the primary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getLockPrimaryOnly</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dataRequested</color> <color=#f92672>=</color>
        <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartialLength</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>dataRequested</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isSerializableIsolation</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the primary record associated with a secondary record.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An approach is used for secondary DB access that avoids deadlocks that would occur if locks</color>
<color=#75715e>   * were acquired on primary and secondary DBs in different orders for different operations. The</color>
<color=#75715e>   * primary DB lock must always be acquired first when doing a write op; for example, when deleting</color>
<color=#75715e>   * a primary record, we don't know what the secondary keys are until we read (and lock) the</color>
<color=#75715e>   * primary record. However, the natural way to read via a secondary DB would be to read (and lock)</color>
<color=#75715e>   * the secondary record first to obtain the primary key, and then read (and lock) the primary</color>
<color=#75715e>   * record. Because this would obtain locks in the reverse order as write ops, a different approach</color>
<color=#75715e>   * is used for secondary reads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In order to avoid deadlocks, for non-serializable isolation we change the natural lock order</color>
<color=#75715e>   * for reads -- we only lock the primary record and then check the secondary record's reference to</color>
<color=#75715e>   * primary record. The initial read of the secondary DB is performed without acquiring locks</color>
<color=#75715e>   * (dirty-read). The primary key is then used to read and lock the associated primary record. At</color>
<color=#75715e>   * this point only the primary record is locked.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Then, the secondary reference is checked (see checkReferenceToPrimary in Cursor). Note that</color>
<color=#75715e>   * there is no need to lock the secondary before checking its reference to the primary, because</color>
<color=#75715e>   * during the check the secondary is protected from changes by the lock on the primary. If we</color>
<color=#75715e>   * discover that the secondary record has been deleted (for example, due to an update to the</color>
<color=#75715e>   * primary after the secondary dirty-read and before the primary locking read), the record will</color>
<color=#75715e>   * not be returned to the caller (it will be skipped) and we will advance to the next record</color>
<color=#75715e>   * according to the operation type. In this case the lock on the primary record is released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, the READ_UNCOMMITTED_ALL mode is used for the dirty-read of the secondary DB.</color>
<color=#75715e>   * This ensures that we do not skip uncommitted deleted records. See LockMode.READ_UNCOMMITTED_ALL</color>
<color=#75715e>   * and Cursor.readPrimaryAfterGet for further details.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a secondary DB with dups, READ_UNCOMMITTED_ALL will return a deleted record for an open</color>
<color=#75715e>   * txn, and we'll discover the deletion when reading (and locking) the primary record. The primary</color>
<color=#75715e>   * lookup is wasted in that case, but this should be infrequent. For a secondary DB without dups,</color>
<color=#75715e>   * READ_UNCOMMITTED_ALL will block during the secondary read in this case (a deleted record for an</color>
<color=#75715e>   * open txn) in order to obtain the data (the primary key).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return null if the primary record has been deleted or updated (when using read-uncommitted),</color>
<color=#75715e>   *     or the primary database has been removed from the association. Otherwise, returns the</color>
<color=#75715e>   *     result that should be returned to the API caller, which may or may not be origResult (see</color>
<color=#75715e>   *     below).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>secDirtyRead</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>origResult</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>primaryDb</color> <color=#f92672>=</color> <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimary</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>primaryDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Primary was removed from the association. */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>primaryDb</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>secDirtyRead</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/*verifyPrimary*/</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#75715e>/*locker*/</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>,</color>
        <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>secDirtyRead</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>origResult</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The expiration time may have changed after the secondary dirty-read</color>
<color=#75715e>     * and before locking the primary.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>makeResult</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationTime</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Cursor#checkForPrimaryUpdate */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>checkForPrimaryUpdate</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryConfig</color> <color=#f8f8f2>conf</color> <color=#f92672>=</color> <color=#f8f8f2>secondaryDb</color><color=#f8f8f2>.</color><color=#a6e22e>getPrivateSecondaryConfig</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>possibleIntegrityError</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the secondary key is immutable, or the key creators are</color>
<color=#75715e>     * null (the database is read only), then we can skip this</color>
<color=#75715e>     * check.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getImmutableSecondaryKey</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Do nothing. */</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyCreator</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check that the key we're using is equal to the key</color>
<color=#75715e>       * returned by the key creator.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyCreator</color><color=#f8f8f2>().</color><color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>secondaryDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>secKey</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>possibleIntegrityError</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getMultiKeyCreator</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check that the key we're using is in the set returned by</color>
<color=#75715e>       * the key creator.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseEntry</color><color=#f92672>></color> <color=#f8f8f2>results</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>DatabaseEntry</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getMultiKeyCreator</color><color=#f8f8f2>().</color><color=#a6e22e>createSecondaryKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>secondaryDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>results</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>results</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>possibleIntegrityError</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>possibleIntegrityError</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>