<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.SequenceStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockerFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.IntStat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LongStat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Closeable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.math.BigInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.dbi.SequenceStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Sequence handle is used to manipulate a sequence record in a database. Sequence handles are</color>
<color=#75715e> * opened using the {@link Database#openSequence Database.openSequence} method.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Sequence</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Closeable</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>FLAG_INCR</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0x1</color><color=#f8f8f2>);</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>FLAG_WRAP</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0x2</color><color=#f8f8f2>);</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>FLAG_OVER</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0x4</color><color=#f8f8f2>);</color>

  <color=#75715e>/* Allocation size for the record data. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_DATA_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>50</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Version of the format for fields stored in the sequence record. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>CURRENT_VERSION</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/* A sequence is a unique record in a database. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Persistent fields. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>wrapAllowed</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>increment</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>overflow</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>rangeMin</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>rangeMax</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>storedValue</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Handle-specific fields. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>cacheSize</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>cacheValue</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>cacheLast</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nGets</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nCachedGets</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>autoCommitConfig</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The cache holds the range of values [cacheValue, cacheLast], which is</color>
<color=#75715e>   * the same as [cacheValue, storedValue) at the time the record is written.</color>
<color=#75715e>   * At store time, cacheLast is set to one before (after) storedValue.</color>
<color=#75715e>   *</color>
<color=#75715e>   * storedValue may be used by other Sequence handles with separate caches.</color>
<color=#75715e>   * storedValue is always the next value to be returned by any handle that</color>
<color=#75715e>   * runs out of cached values.</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a sequence handle, adding the sequence record if appropriate.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via Database.openSequence.</color>
<color=#75715e>   * @throws IllegalStateException via Database.openSequence.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Sequence</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>SequenceConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>SequenceNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>SequenceExistsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Sequences not supported in databases configured for "</color> <color=#f92672>+</color> <color=#e6db74>"duplicates"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>SequenceConfig</color> <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>config</color> <color=#f8f8f2>:</color> <color=#f8f8f2>SequenceConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMin</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMax</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Minimum sequence value must be less than the maximum"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getInitialValue</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMax</color><color=#f8f8f2>()</color>
        <color=#f92672>||</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getInitialValue</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMin</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Initial sequence value is out of range"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMin</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMax</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheSize</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"The cache size is larger than the sequence range"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getAutoCommitNoSync</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>autoCommitConfig</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultTxnConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>()).</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>autoCommitConfig</color><color=#f8f8f2>.</color><color=#a6e22e>overrideDurability</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_NO_SYNC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Use the environment's default transaction config. */</color>
      <color=#f8f8f2>autoCommitConfig</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>db</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>key</color> <color=#f92672>=</color> <color=#f8f8f2>copyEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>().</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Perform an auto-commit transaction to create the sequence. */</color>
    <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>OperationStatus</color> <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getReadableLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*readCommitedIsolation*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>sequenceExists</color> <color=#f92672>=</color> <color=#f8f8f2>readData</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>isWritableLocker</color> <color=#f92672>=</color>
          <color=#f92672>!</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>().</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>()</color>
              <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color>
                  <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>()).</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sequenceExists</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowCreate</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getExclusiveCreate</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>SequenceExistsException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"ExclusiveCreate=true and the sequence record "</color> <color=#f92672>+</color> <color=#e6db74>"already exists."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowCreate</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isWritableLocker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>locker</color> <color=#f92672>=</color>
                <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>(),</color>
                    <color=#75715e>/*txn,*/</color>
                    <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>().</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>().</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>autoCommitConfig</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* Get the persistent fields from the config. */</color>
          <color=#f8f8f2>rangeMin</color> <color=#f92672>=</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMin</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>rangeMax</color> <color=#f92672>=</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRangeMax</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>increment</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDecrement</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>wrapAllowed</color> <color=#f92672>=</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getWrap</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>storedValue</color> <color=#f92672>=</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getInitialValue</color><color=#f8f8f2>();</color>

          <color=#75715e>/*</color>
<color=#75715e>           * To avoid dependence on SerializableIsolation, try</color>
<color=#75715e>           * putNoOverwrite first.  If it fails, then try to get an</color>
<color=#75715e>           * existing record.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>putNoOverwrite</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>makeData</color><color=#f8f8f2>());</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>readData</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* A retry loop should be performed here. */</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Sequence record removed during openSequence."</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>SequenceNotFoundException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"AllowCreate=false and the sequence record "</color> <color=#f92672>+</color> <color=#e6db74>"does not exist."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>status</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * cacheLast is initialized such that the cache will be considered</color>
<color=#75715e>     * empty the first time get() is called.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>cacheSize</color> <color=#f92672>=</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>cacheValue</color> <color=#f92672>=</color> <color=#f8f8f2>storedValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>cacheLast</color> <color=#f92672>=</color> <color=#f8f8f2>increment</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>storedValue</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>storedValue</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes a sequence. Any unused cached values are lost.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The sequence handle may not be used again after this method has been called, regardless of</color>
<color=#75715e>   * the method's success or failure.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Defined only for DB compatibility and possible future use. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the next available element in the sequence and changes the sequence value by <code></color>
<color=#75715e>   * delta</code>. The value of <code>delta</code> must be greater than zero. If there are enough</color>
<color=#75715e>   * cached values in the sequence handle then they will be returned. Otherwise the next value will</color>
<color=#75715e>   * be fetched from the database and incremented (decremented) by enough to cover the <code>delta</color>
<color=#75715e>   * </code> and the next batch of cached values.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is synchronized to protect updating of the cached value, since multiple threads</color>
<color=#75715e>   * may share a single handle. Multiple handles for the same database/key may be used to increase</color>
<color=#75715e>   * concurrency.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The <code>txn</code> handle must be null if the sequence handle was opened with a non-zero</color>
<color=#75715e>   * cache size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For maximum concurrency, a non-zero cache size should be specified prior to opening the</color>
<color=#75715e>   * sequence handle, the <code>txn</code> handle should be <code>null</code>, and {@link</color>
<color=#75715e>   * com.sleepycat.je.SequenceConfig#setAutoCommitNoSync SequenceConfig.setAutoCommitNoSync} should</color>
<color=#75715e>   * be called to disable log flushes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified, or null may</color>
<color=#75715e>   *     be specified to use auto-commit. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param delta the amount by which to increment or decrement the sequence</color>
<color=#75715e>   * @return the next available element in the sequence</color>
<color=#75715e>   * @throws SequenceOverflowException if the end of the sequence is reached and wrapping is not</color>
<color=#75715e>   *     configured.</color>
<color=#75715e>   * @throws SequenceIntegrityException if the sequence record has been deleted.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalArgumentException if the delta is less than or equal to zero, or larger than the</color>
<color=#75715e>   *     size of the sequence's range.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>long</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Check parameters, being careful of overflow. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Sequence delta must be greater than zero"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rangeMin</color> <color=#f92672>></color> <color=#f8f8f2>rangeMax</color> <color=#f92672>-</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Sequence delta is larger than the range"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Status variables for tracing. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>cached</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>wrapped</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine whether we have exceeded the cache.  The cache size is</color>
<color=#75715e>     * always <= Integer.MAX_VALUE, so we don't have to worry about</color>
<color=#75715e>     * overflow here as long as we subtract the two long values first.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>increment</color> <color=#f92672>&&</color> <color=#f8f8f2>delta</color> <color=#f92672>></color> <color=#f8f8f2>((</color><color=#f8f8f2>cacheLast</color> <color=#f92672>-</color> <color=#f8f8f2>cacheValue</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color>
        <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>increment</color> <color=#f92672>&&</color> <color=#f8f8f2>delta</color> <color=#f92672>></color> <color=#f8f8f2>((</color><color=#f8f8f2>cacheValue</color> <color=#f92672>-</color> <color=#f8f8f2>cacheLast</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>cached</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We need to allocate delta or cacheSize values, whichever is</color>
<color=#75715e>       * larger, by incrementing or decrementing the stored value by</color>
<color=#75715e>       * adjust.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>adjust</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color> <color=#f92672>></color> <color=#f8f8f2>cacheSize</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>delta</color> <color=#f8f8f2>:</color> <color=#f8f8f2>cacheSize</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Perform an auto-commit transaction to update the sequence. */</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OperationStatus</color> <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locker</color> <color=#f92672>=</color>
            <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>(),</color>
                <color=#75715e>/*txn,*/</color>
                <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>().</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>().</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>(),</color>
                <color=#75715e>// autoTxnIsReplicated</color>
                <color=#f8f8f2>autoCommitConfig</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#75715e>/* Get the existing record. */</color>
        <color=#f8f8f2>readDataRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>);</color>

        <color=#75715e>/* If we would have wrapped when not allowed, overflow. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>overflow</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>SequenceOverflowException</color><color=#f8f8f2>(</color><color=#e6db74>"Sequence overflow "</color> <color=#f92672>+</color> <color=#f8f8f2>storedValue</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Handle wrapping.  The range size can be larger than a long</color>
<color=#75715e>         * can hold, so to avoid arithmetic overflow we use BigInteger</color>
<color=#75715e>         * arithmetic.  Since we are going to write, the BigInteger</color>
<color=#75715e>         * overhead is acceptable.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>BigInteger</color> <color=#f8f8f2>availBig</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Available amount: rangeMax - storedValue */</color>
          <color=#f8f8f2>availBig</color> <color=#f92672>=</color> <color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>rangeMax</color><color=#f8f8f2>).</color><color=#a6e22e>subtract</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>storedValue</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Available amount: storedValue - rangeMin */</color>
          <color=#f8f8f2>availBig</color> <color=#f92672>=</color> <color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>storedValue</color><color=#f8f8f2>).</color><color=#a6e22e>subtract</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>rangeMin</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>availBig</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>adjust</color><color=#f8f8f2>))</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* If availBig < adjust then availBig fits in an int. */</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>availInt</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>availBig</color><color=#f8f8f2>.</color><color=#a6e22e>longValue</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>availInt</color> <color=#f92672><</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wrapAllowed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>/* Wrap to the opposite range end point. */</color>
              <color=#f8f8f2>storedValue</color> <color=#f92672>=</color> <color=#f8f8f2>increment</color> <color=#f92672>?</color> <color=#f8f8f2>rangeMin</color> <color=#f8f8f2>:</color> <color=#f8f8f2>rangeMax</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>wrapped</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#75715e>/* Signal an overflow next time. */</color>
              <color=#f8f8f2>overflow</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>adjust</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * If the delta fits in the cache available, don't wrap</color>
<color=#75715e>             * just to allocate the full cacheSize; instead,</color>
<color=#75715e>             * allocate as much as is available.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>adjust</color> <color=#f92672>=</color> <color=#f8f8f2>availInt</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Negate the adjustment for decrementing. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>adjust</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>adjust</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Set the stored value one past the cached amount. */</color>
        <color=#f8f8f2>storedValue</color> <color=#f92672>+=</color> <color=#f8f8f2>adjust</color><color=#f8f8f2>;</color>

        <color=#75715e>/* Write the new stored value. */</color>
        <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>makeData</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>status</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* The cache now contains the range: [cacheValue, storedValue) */</color>
      <color=#f8f8f2>cacheValue</color> <color=#f92672>=</color> <color=#f8f8f2>storedValue</color> <color=#f92672>-</color> <color=#f8f8f2>adjust</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>cacheLast</color> <color=#f92672>=</color> <color=#f8f8f2>storedValue</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Return the current value and increment/decrement it by delta. */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>retVal</color> <color=#f92672>=</color> <color=#f8f8f2>cacheValue</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cacheValue</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cacheValue</color> <color=#f92672>-=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Increment stats. */</color>
    <color=#f8f8f2>nGets</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cached</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nCachedGets</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Trace this method at the FINEST level. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>().</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"Sequence.get"</color> <color=#f92672>+</color> <color=#e6db74>" value="</color> <color=#f92672>+</color> <color=#f8f8f2>retVal</color> <color=#f92672>+</color> <color=#e6db74>" cached="</color> <color=#f92672>+</color> <color=#f8f8f2>cached</color> <color=#f92672>+</color> <color=#e6db74>" wrapped="</color> <color=#f92672>+</color> <color=#f8f8f2>wrapped</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>retVal</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Database handle associated with this sequence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The Database handle associated with this sequence.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the DatabaseEntry used to open this sequence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The DatabaseEntry used to open this sequence.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseEntry</color> <color=#a6e22e>getKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>copyEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns statistical information about the sequence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the presence of multiple threads or processes accessing an active sequence, the</color>
<color=#75715e>   * information returned by this method may be out-of-date.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The getStats method cannot be transaction-protected. For this reason, it should be called in</color>
<color=#75715e>   * a thread of control that has no open cursors or active transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The statistics returned; if null, default statistics are returned.</color>
<color=#75715e>   * @return Sequence statistics.</color>
<color=#75715e>   * @throws SequenceIntegrityException if the sequence record has been deleted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SequenceStats</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>StatsConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getFast</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * storedValue may have been updated by another handle since it</color>
<color=#75715e>       * was last read by this handle.  Fetch the last written value.</color>
<color=#75715e>       * READ_UNCOMMITTED must be used to avoid lock conflicts.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>openCursor</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readDataRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>SequenceStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>SequenceStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_GETS</color><color=#f8f8f2>,</color> <color=#f8f8f2>nGets</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_CACHED_GETS</color><color=#f8f8f2>,</color> <color=#f8f8f2>nCachedGets</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_CACHE_SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_STORED_VALUE</color><color=#f8f8f2>,</color> <color=#f8f8f2>storedValue</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_CACHE_VALUE</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheValue</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_CACHE_LAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheLast</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_RANGE_MIN</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeMin</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>SEQUENCE_RANGE_MAX</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeMax</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>SequenceStats</color> <color=#f8f8f2>seqStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SequenceStats</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nGets</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nCachedGets</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>seqStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads persistent fields from the sequence record. Throws an exception if the key is not present</color>
<color=#75715e>   * in the database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readDataRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>readData</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>SequenceIntegrityException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The sequence record has been deleted while it is open."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads persistent fields from the sequence record. Returns false if the key is not present in</color>
<color=#75715e>   * the database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>readData</color><color=#f8f8f2>(</color><color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Fetch the sequence record. */</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>OperationStatus</color> <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getSearchKey</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>status</color> <color=#f92672>!=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>());</color>

    <color=#75715e>/* Get the persistent fields from the record data. */</color>
    <color=#66d9ef>byte</color> <color=#f8f8f2>version</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>byte</color> <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>unpacked</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>version</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>rangeMin</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>rangeMax</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>storedValue</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>increment</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_INCR</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>wrapAllowed</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_WRAP</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>overflow</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_OVER</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Makes a storable database entry from the persistent fields. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseEntry</color> <color=#a6e22e>makeData</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>MAX_DATA_SIZE</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>byte</color> <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>FLAG_INCR</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wrapAllowed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>FLAG_WRAP</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>overflow</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>FLAG_OVER</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>CURRENT_VERSION</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>flags</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeMin</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeMax</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>storedValue</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a deep copy of the given database entry. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseEntry</color> <color=#a6e22e>copyEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>