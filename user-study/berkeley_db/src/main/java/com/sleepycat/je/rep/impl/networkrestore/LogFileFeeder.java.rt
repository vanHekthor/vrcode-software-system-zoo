<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.networkRestore</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentFailureReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.FileManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.networkRestore.Protocol.FeederInfoReq</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.networkRestore.Protocol.FileInfoReq</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.networkRestore.Protocol.FileInfoResp</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.networkRestore.Protocol.FileReq</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.BinaryProtocol.ClientVersion</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.BinaryProtocol.ProtocolException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.NamedChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNRange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbBackup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LogVerifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThread</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.ClosedByInterruptException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.FileChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.MessageDigest</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.NoSuchAlgorithmException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The LogFileFeeder supplies log files to a client. There is one instance of this class per client</color>
<color=#75715e> * that's currently active. LogFileFeeders are created by the FeederManager and exist for the</color>
<color=#75715e> * duration of the session with the client.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LogFileFeeder</color> <color=#66d9ef>extends</color> <color=#f8f8f2>StoppableThread</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Time to wait for the next request from the client, 5 minutes. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SOCKET_TIMEOUT_MS</color> <color=#f92672>=</color> <color=#ae81ff>5</color> <color=#f92672>*</color> <color=#ae81ff>60</color> <color=#f92672>*</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * 8K transfer size to take advantage of increasingly prevalent jumbo</color>
<color=#75715e>   * frame sizes and to keep disk i/o contention to a minimum.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRANSFER_BYTES</color> <color=#f92672>=</color> <color=#ae81ff>0x2000</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The parent FeederManager that creates and maintains LogFileFeeder</color>
<color=#75715e>   * instances.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FeederManager</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The channel on which the feeder communicates with the client. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NamedChannel</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The client node requesting the log files. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>clientId</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The dbBackup instance that's used to manage the list of files that will</color>
<color=#75715e>   * be transferred. It's used to ensure that a consistent set is transferred</color>
<color=#75715e>   * over to the client. If an open dbBackup exists for the client, it's</color>
<color=#75715e>   * established in the checkProtocol method immediately after the client has</color>
<color=#75715e>   * been identified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DbBackup</color> <color=#f8f8f2>dbBackup</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used to compute a SHA1 during a transfer, or if a client requests it. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>MessageDigest</color> <color=#f8f8f2>messageDigest</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Logger shared with the FeederManager. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>LogFileFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>FeederManager</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Log File Feeder"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>namedChannel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NamedChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>messageDigest</color> <color=#f92672>=</color> <color=#f8f8f2>MessageDigest</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#e6db74>"SHA1"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchAlgorithmException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"The SHA1 algorithm was not made available "</color> <color=#f92672>+</color> <color=#e6db74>"by the security provider"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shutdownDone</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>shutdownThread</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>feeders</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>clientId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color>
        <color=#e6db74>"Log file feeder for client:"</color> <color=#f92672>+</color> <color=#f8f8f2>clientId</color> <color=#f92672>+</color> <color=#e6db74>" is shutdown."</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>initiateSoftShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * The feeder will get an I/O exception and exit, since it can't use</color>
<color=#75715e>     * the channel after it has been closed.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>namedChannel</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>SOCKET_TIMEOUT_MS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The main driver loop that enforces the protocol message sequence and implements it. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* The initial protocol */</color>
    <color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>(</color><color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>.</color><color=#a6e22e>VERSION</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>());</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>configureChannel</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>protocol</color> <color=#f92672>=</color> <color=#f8f8f2>checkProtocol</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>checkFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sendFileList</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sendRequestedFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Done, cleanup */</color>
      <color=#f8f8f2>dbBackup</color><color=#f8f8f2>.</color><color=#a6e22e>endBackup</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>dbBackup</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClosedByInterruptException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"Ignoring ClosedByInterruptException normal shutdown"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>" IO Exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ProtocolException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>" Protocol Exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>UNCAUGHT_EXCEPTION</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color>
            <color=#e6db74>"Log File feeder io exception on "</color> <color=#f92672>+</color> <color=#e6db74>"channel close: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbBackup</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dbBackup</color><color=#f8f8f2>.</color><color=#a6e22e>endBackup</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Establish lease so client can resume within the lease</color>
<color=#75715e>           * period.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>Lease</color><color=#f8f8f2>(</color><color=#f8f8f2>clientId</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>leaseDuration</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbBackup</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Lease created for node: "</color> <color=#f92672>+</color> <color=#f8f8f2>clientId</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"Log file feeder for client: "</color> <color=#f92672>+</color> <color=#f8f8f2>clientId</color> <color=#f92672>+</color> <color=#e6db74>" exited"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Implements the message exchange used to determine whether this feeder is suitable for use the</color>
<color=#75715e>   * client's backup needs. The feeder may be unsuitable if it's already busy, or it's not current</color>
<color=#75715e>   * enough to service the client's needs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>(),</color> <color=#f8f8f2>FeederInfoReq</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>feeders</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getActiveFeederCount</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#75715e>/* Exclude this one */</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>VLSN</color> <color=#f8f8f2>rangeFirst</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>VLSN</color> <color=#f8f8f2>rangeLast</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Include replication stream feeders as a load component. */</color>
      <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>feeders</color> <color=#f92672>+=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>feederManager</color><color=#f8f8f2>().</color><color=#a6e22e>activeReplicaCount</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>VLSNRange</color> <color=#f8f8f2>range</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>getRange</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>rangeFirst</color> <color=#f92672>=</color> <color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>rangeLast</color> <color=#f92672>=</color> <color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>getLast</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>FeederInfoResp</color><color=#f8f8f2>(</color><color=#f8f8f2>feeders</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeFirst</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeLast</color><color=#f8f8f2>),</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Send files in response to request messages. The request sequence looks like the following:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>[FileReq | FileInfoReq]+ Done</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The response sequence to a FileReq looks like:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>FileStart <file byte stream> FileEnd</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>and that for a FileInfoReq, is simply a FileInfoResp</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>sendRequestedFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ProtocolException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>prevFileName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FileReq</color> <color=#f8f8f2>fileReq</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>(),</color> <color=#f8f8f2>FileReq</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color> <color=#f92672>=</color> <color=#f8f8f2>fileReq</color><color=#f8f8f2>.</color><color=#a6e22e>getFileName</color><color=#f8f8f2>();</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Calculate the full path for a specified log file name,</color>
<color=#75715e>         * especially when this Feeder is configured to run with sub</color>
<color=#75715e>         * directories.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>FileManager</color> <color=#f8f8f2>fMgr</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getFileManager</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>fMgr</color><color=#f8f8f2>.</color><color=#a6e22e>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>));</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Log file not found: "</color> <color=#f92672>+</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Freeze the length and last modified date. */</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lastModified</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>lastModified</color><color=#f8f8f2>();</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>digest</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>FileInfoResp</color> <color=#f8f8f2>resp</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>FileInfoResp</color> <color=#f8f8f2>cachedResp</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>statResponses</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>cachedDigest</color> <color=#f92672>=</color>
            <color=#f8f8f2>((</color><color=#f8f8f2>cachedResp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>cachedResp</color><color=#f8f8f2>.</color><color=#a6e22e>getFileLength</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>cachedResp</color><color=#f8f8f2>.</color><color=#a6e22e>getLastModifiedTime</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>lastModified</color><color=#f8f8f2>))</color>
                <color=#f92672>?</color> <color=#f8f8f2>cachedResp</color><color=#f8f8f2>.</color><color=#a6e22e>getDigestSHA1</color><color=#f8f8f2>()</color>
                <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileReq</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>FileInfoReq</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cachedDigest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>digest</color> <color=#f92672>=</color> <color=#f8f8f2>cachedDigest</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>FileInfoReq</color><color=#f8f8f2>)</color> <color=#f8f8f2>fileReq</color><color=#f8f8f2>).</color><color=#a6e22e>getNeedSHA1</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>digest</color> <color=#f92672>=</color> <color=#f8f8f2>getSHA1Digest</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>).</color><color=#a6e22e>digest</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Digest not requested</color>
            <color=#f8f8f2>digest</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>resp</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>FileInfoResp</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastModified</color><color=#f8f8f2>,</color> <color=#f8f8f2>digest</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Allow deletion of previous file. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevFileName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>prevFileName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dbBackup</color><color=#f8f8f2>.</color><color=#a6e22e>removeFileProtection</color><color=#f8f8f2>(</color><color=#f8f8f2>prevFileName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>prevFileName</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>FileStart</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastModified</color><color=#f8f8f2>),</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>digest</color> <color=#f92672>=</color> <color=#f8f8f2>sendFileContents</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cachedDigest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>cachedDigest</color><color=#f8f8f2>,</color> <color=#f8f8f2>digest</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Inconsistent cached and computed digests"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>resp</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>FileEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastModified</color><color=#f8f8f2>,</color> <color=#f8f8f2>digest</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Cache for subsequent requests, if it was computed. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>digest</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>statResponses</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>resp</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>resp</color><color=#f8f8f2>,</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ProtocolException</color> <color=#f8f8f2>pe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pe</color><color=#f8f8f2>.</color><color=#a6e22e>getUnexpectedMessage</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>.</color><color=#a6e22e>Done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>pe</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the SHA1 has associated with the file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param file</color>
<color=#75715e>   * @param length</color>
<color=#75715e>   * @return</color>
<color=#75715e>   * @throws IOException</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>MessageDigest</color> <color=#a6e22e>getSHA1Digest</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>MessageDigest</color> <color=#f8f8f2>messageDigest</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>messageDigest</color> <color=#f92672>=</color> <color=#f8f8f2>MessageDigest</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#e6db74>"SHA1"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchAlgorithmException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FileInputStream</color> <color=#f8f8f2>fileStream</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>TRANSFER_BYTES</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>bytes</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>readSize</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>TRANSFER_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>readBytes</color> <color=#f92672>=</color> <color=#f8f8f2>fileStream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>readSize</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readBytes</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Premature EOF. Was expecting: "</color> <color=#f92672>+</color> <color=#f8f8f2>readSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>messageDigest</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>readBytes</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytes</color> <color=#f92672>-=</color> <color=#f8f8f2>readBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileStream</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>messageDigest</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends over the contents of the file and computes the SHA-1 hash. Note that the method does not</color>
<color=#75715e>   * rely on EOF detection, but rather on the promised file size, since the final log file might be</color>
<color=#75715e>   * growing while the transfer is in progress. The client uses the length sent in the FileResp</color>
<color=#75715e>   * message to maintain its position in the network stream. It expects to see a FileInfoResp once</color>
<color=#75715e>   * it has read the agreed upon number of bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Since JE log files are append only, there is no danger that we will send over any</color>
<color=#75715e>   * uninitialized file blocks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param file the log file to be sent.</color>
<color=#75715e>   * @param length the number of bytes to send</color>
<color=#75715e>   * @return the digest associated with the file that was sent</color>
<color=#75715e>   * @throws IOException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>sendFileContents</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogVerifier</color> <color=#f8f8f2>verifier</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f92672>-</color><color=#ae81ff>1L</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FileInputStream</color> <color=#f8f8f2>fileStream</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>FileChannel</color> <color=#f8f8f2>fileChannel</color> <color=#f92672>=</color> <color=#f8f8f2>fileStream</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>messageDigest</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocateDirect</color><color=#f8f8f2>(</color><color=#f8f8f2>TRANSFER_BYTES</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>hasArray</color><color=#f8f8f2>())</color> <color=#f92672>?</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>TRANSFER_BYTES</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>transmitBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileChannel</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verifyAtEof</color><color=#f8f8f2>();</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lim</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>hasArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>arrayOffset</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>lim</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>rewind</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>lim</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>messageDigest</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>lim</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>transmitBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transmitBytes</color> <color=#f92672>!=</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
            <color=#e6db74>"File length:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>length</color>
                <color=#f92672>+</color> <color=#e6db74>" does not match the "</color>
                <color=#f92672>+</color> <color=#e6db74>"number of bytes that were transmitted:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>transmitBytes</color><color=#f8f8f2>;</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"Sent file: "</color> <color=#f92672>+</color> <color=#f8f8f2>file</color> <color=#f92672>+</color> <color=#e6db74>" Length: "</color> <color=#f92672>+</color> <color=#f8f8f2>length</color> <color=#f92672>+</color> <color=#e6db74>" bytes"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileStream</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>messageDigest</color><color=#f8f8f2>.</color><color=#a6e22e>digest</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Processes the request for the list of files that constitute a valid backup. If a leased</color>
<color=#75715e>   * DbBackup instance is available, it uses it, otherwise it creates a new instance and uses it</color>
<color=#75715e>   * instead.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>sendFileList</color><color=#f8f8f2>(</color><color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ProtocolException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Wait for the request message. */</color>
    <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>.</color><color=#a6e22e>FileListReq</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbBackup</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbBackup</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbBackup</color><color=#f8f8f2>(</color><color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>dbBackup</color><color=#f8f8f2>.</color><color=#a6e22e>setNetworkRestore</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>dbBackup</color><color=#f8f8f2>.</color><color=#a6e22e>startBackup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>leaseRenewalCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Remove the subdirectory header of the log files, because the nodes</color>
<color=#75715e>     * that need to copy those log files may not configure the spreading</color>
<color=#75715e>     * log files into sub directories feature.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>files</color> <color=#f92672>=</color> <color=#f8f8f2>dbBackup</color><color=#f8f8f2>.</color><color=#a6e22e>getLogFilesInBackupSet</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>files</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>FileListResp</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>),</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Verify that the protocols are compatible, switch to a different protocol version, if we need</color>
<color=#75715e>   * to.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Protocol</color> <color=#a6e22e>checkProtocol</color><color=#f8f8f2>(</color><color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ProtocolException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ClientVersion</color> <color=#f8f8f2>clientVersion</color> <color=#f92672>=</color>
        <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>.</color><color=#a6e22e>ClientVersion</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>clientId</color> <color=#f92672>=</color> <color=#f8f8f2>clientVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>FeederManager</color><color=#f8f8f2>.</color><color=#a6e22e>Lease</color> <color=#f8f8f2>lease</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>leases</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>clientId</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lease</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbBackup</color> <color=#f92672>=</color> <color=#f8f8f2>lease</color><color=#f8f8f2>.</color><color=#a6e22e>terminate</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>feeders</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>clientId</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clientVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
          <color=#e6db74>"Client requested protocol version: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>clientVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" but the server version is "</color>
              <color=#f92672>+</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Simply log the difference on the server, it's up to the client</color>
<color=#75715e>       * to reject the protocol version, if it can't accommodate it.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>ServerVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>);</color>

    <color=#75715e>/* In future we may switch protocol versions to accommodate the client.</color>
<color=#75715e>     * For now, simply return the one and only version.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sets up the channel to facilitate efficient transfer of large log files. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DataChannel</color> <color=#a6e22e>configureChannel</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>configureBlocking</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvImpl</color><color=#f8f8f2>(),</color>
        <color=#e6db74>"Log File Feeder accepted connection from "</color> <color=#f92672>+</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>setSoTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>SOCKET_TIMEOUT_MS</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Enable Nagle's algorithm since throughput is important for the large</color>
<color=#75715e>     * files we will be transferring.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>setTcpNoDelay</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>namedChannel</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see StoppableThread#getLogger */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>