<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicatedEnvironment.State</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Communicates the {@link ReplicatedEnvironment.State state} change at a node to the</color>
<color=#75715e> * StateChangeListener. There is a distinct instance of this event representing each state change at</color>
<color=#75715e> * a node.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each event instance may have zero or more state change related exceptions associated with it.</color>
<color=#75715e> * The exceptions are of type {@link StateChangeException}. {@link StateChangeException} has a</color>
<color=#75715e> * method called {@link StateChangeException#getEvent()} that can be used to associate an event with</color>
<color=#75715e> * an exception.</color>
<color=#75715e> *</color>
<color=#75715e> * @see StateChangeListener</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>StateChangeEvent</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>masterNameId</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Records the time associated with the event. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>eventTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only. Creates a StateChangeEvent identifying the new state and the new</color>
<color=#75715e>   *     master if there is a master in the new state.</color>
<color=#75715e>   * @param state the new state</color>
<color=#75715e>   * @param masterNameId the new master or <code>NULL</code> if there isn't one.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>StateChangeEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>State</color> <color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>masterNameId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>((</color><color=#f8f8f2>masterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_NODE_ID</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA</color><color=#f8f8f2>)))</color>
        <color=#f8f8f2>:</color> <color=#e6db74>"state="</color> <color=#f92672>+</color> <color=#f8f8f2>state</color> <color=#f92672>+</color> <color=#e6db74>" masterId="</color> <color=#f92672>+</color> <color=#f8f8f2>masterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>state</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>masterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>masterNameId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the state that the node has transitioned to.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the new <code>State</code> resulting from this event</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>getState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the time (in nano second units) the event occurred, as reported by {@link</color>
<color=#75715e>   * System#nanoTime}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the time the event occurred, in nanoseconds</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getEventTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>eventTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the node name identifying the master at the time of the event.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the master node name</color>
<color=#75715e>   * @throws IllegalStateException if the node is in the <code>DETACHED</code> or <code>UNKNOWN</color>
<color=#75715e>   *     </code> state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMasterNodeName</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>masterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"No current master in state: "</color> <color=#f92672>+</color> <color=#f8f8f2>state</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>