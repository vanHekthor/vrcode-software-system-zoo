<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.stream</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.CheckpointEnd</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNIndex</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNRange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.TxnAbort</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.TxnCommit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHookExecute</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn.NULL_LSN</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The ReplicaSyncupReader scans the log backwards for requested log entries. The reader must track</color>
<color=#75715e> * whether it has passed a checkpoint, and therefore can not used the vlsn index to skip over</color>
<color=#75715e> * entries.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The ReplicaSyncupReader is not thread safe, and can only be used serially. It will stop at the</color>
<color=#75715e> * finishLsn, which should be set using the GlobalCBVLSN.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ReplicaSyncupReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>VLSNReader</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * True if this particular record retrieval is for a syncable record.</color>
<color=#75715e>   * False if the reader is looking for a specific VLSN</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>syncableSearch</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>ckptEndLogEntry</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CKPT_END</color><color=#f8f8f2>.</color><color=#a6e22e>getNewLogEntry</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>commitLogEntry</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_COMMIT</color><color=#f8f8f2>.</color><color=#a6e22e>getNewLogEntry</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>abortLogEntry</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_ABORT</color><color=#f8f8f2>.</color><color=#a6e22e>getNewLogEntry</color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * SearchResults retains the information as to whether the found</color>
<color=#75715e>   * matchpoint is valid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MatchpointSearchResults</color> <color=#f8f8f2>searchResults</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger1</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>fileGapHook</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>ReplicaSyncupReader</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>VLSNIndex</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>endOfLogLsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>readBufferSize</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>VLSN</color> <color=#f8f8f2>startVLSN</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>finishLsn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>MatchpointSearchResults</color> <color=#f8f8f2>searchResults</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If we go backwards, endOfFileLsn and startLsn must not be null.</color>
<color=#75715e>     * Make them the same, so we always start at the same very end.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// forward</color>
        <color=#f8f8f2>endOfLogLsn</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>readBufferSize</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>finishLsn</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>initScan</color><color=#f8f8f2>(</color><color=#f8f8f2>startVLSN</color><color=#f8f8f2>,</color> <color=#f8f8f2>endOfLogLsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>searchResults</color> <color=#f92672>=</color> <color=#f8f8f2>searchResults</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>logger1</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set up the ReplicaSyncupReader to start scanning from this VLSN. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initScan</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>startVLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>endOfLogLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"ReplicaSyncupReader start can't be NULL_VLSN"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>startLsn</color> <color=#f92672>=</color> <color=#f8f8f2>endOfLogLsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>startLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Flush the log so that syncup can assume that all log entries that</color>
<color=#75715e>     * are represented in the VLSNIndex  are safely out of the log buffers</color>
<color=#75715e>     * and on disk. Simplifies this reader, so it can use the regular</color>
<color=#75715e>     * ReadWindow, which only works on a file.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>flushNoSync</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>window</color><color=#f8f8f2>.</color><color=#a6e22e>initAtFileStart</color><color=#f8f8f2>(</color><color=#f8f8f2>startLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>currentEntryPrevOffset</color> <color=#f92672>=</color> <color=#f8f8f2>window</color><color=#f8f8f2>.</color><color=#a6e22e>getEndOffset</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>currentEntryOffset</color> <color=#f92672>=</color> <color=#f8f8f2>window</color><color=#f8f8f2>.</color><color=#a6e22e>getEndOffset</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>currentVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>startVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Backward scanning for the replica's part in syncup. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OutputWireRecord</color> <color=#a6e22e>scanBackwards</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>syncableSearch</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>VLSNRange</color> <color=#f8f8f2>range</color> <color=#f92672>=</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>())</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * The requested VLSN is before the start of our range, we don't</color>
<color=#75715e>       * have this record.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>currentVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readNextEntry</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>currentFeedRecord</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Backward scanning for finding an earlier candidate syncup matchpoint. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OutputWireRecord</color> <color=#a6e22e>findPrevSyncEntry</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>startAtPrev</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>currentFeedRecord</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>syncableSearch</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startAtPrev</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Start by looking at the entry before the current record. */</color>
      <color=#f8f8f2>currentVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>getPrev</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Restart ReplicaSyncupReader at "</color> <color=#f92672>+</color> <color=#e6db74>"vlsn "</color> <color=#f92672>+</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>VLSNRange</color> <color=#f8f8f2>range</color> <color=#f92672>=</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>())</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We've walked off the end of the contiguous VLSN range.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readNextEntry</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>false</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * We scanned all the way to the front of the log, no</color>
<color=#75715e>       * other sync-able entry found.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>isSyncPoint</color><color=#f8f8f2>(</color><color=#f8f8f2>currentFeedRecord</color><color=#f8f8f2>.</color><color=#a6e22e>getEntryType</color><color=#f8f8f2>())</color>
        <color=#f8f8f2>:</color> <color=#e6db74>"Unexpected log type= "</color> <color=#f92672>+</color> <color=#f8f8f2>currentFeedRecord</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>currentFeedRecord</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @throw an EnvironmentFailureException if we were scanning for a particular VLSN and we have</color>
<color=#75715e>   *     passed it by.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkForPassingTarget</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>compareResult</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compareResult</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Hey, we passed the VLSN we wanted. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"want to read "</color> <color=#f92672>+</color> <color=#f8f8f2>currentVLSN</color> <color=#f92672>+</color> <color=#e6db74>" but reader at "</color> <color=#f92672>+</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return true for ckpt entries, for syncable entries, and if we're in specific vlsn scan mode,</color>
<color=#75715e>   * any replicated entry. There is an additional level of filtering in processEntry.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTargetEntry</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>" isTargetEntry "</color> <color=#f92672>+</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nScanned</color><color=#f92672>++</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Skip invisible entries. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>isInvisible</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>byte</color> <color=#f8f8f2>currentType</color> <color=#f92672>=</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Return true if this entry is replicated. All entries need to be</color>
<color=#75715e>     * perused by processEntry, when we are doing a vlsn based search,</color>
<color=#75715e>     * even if they are not a sync point, because:</color>
<color=#75715e>     *  (a) If this is a vlsn-based search, it's possible that the replica</color>
<color=#75715e>     * and feeder are mismatched. The feeder will only propose a sync type</color>
<color=#75715e>     * entry as a matchpoint but it might be that the replica has a non-</color>
<color=#75715e>     * sync entry at that vlsn.</color>
<color=#75715e>     *  (b) We need to note passed commits in processEntry.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryIsReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>syncableSearch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>isSyncPoint</color><color=#f8f8f2>(</color><color=#f8f8f2>currentType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>currentVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>getPrev</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We'll also need to read checkpoint end records to record their</color>
<color=#75715e>     * presence.</color>
<color=#75715e>     */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CKPT_END</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>currentType</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * ProcessEntry does additional filtering before deciding whether to return an entry as a</color>
<color=#75715e>   * candidate for matching.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this is a record we are submitting as a matchpoint candidate, instantiate a WireRecord to</color>
<color=#75715e>   * house this log entry. If this is a non-replicated entry or a txn end that follows the candidate</color>
<color=#75715e>   * matchpoint, record whatever status we need to, but don't use it for comparisons.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For example, suppose the log is like this:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>VLSN entry 10 LN 11 commit 12 LN -- ckpt end 13 commit 14 abort</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>And that the master only has VLSNs 1-12. The replica will suggest vlsn 14 as the first</color>
<color=#75715e>   * matchpoint. The feeder will counter with a suggestion of vlsn 11, since it does not have vlsn</color>
<color=#75715e>   * 14.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>At that point, the ReplicaSyncupReader will scan backwards in the log, looking for vlsn 11.</color>
<color=#75715e>   * Although the reader should only return an entry when it gets to vlsn 11. The reader must</color>
<color=#75715e>   * process commits and ckpts that follow 11, so that they can be recorded in the searchResults, so</color>
<color=#75715e>   * the number of rolled back commits can be accurately reported.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>processEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>" syncup reader saw "</color> <color=#f92672>+</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>byte</color> <color=#f8f8f2>currentType</color> <color=#f92672>=</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * CheckpointEnd entries are tracked in order to see if a rollback</color>
<color=#75715e>     * must be done, but are not returned as possible matchpoints.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CKPT_END</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>currentType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Read the entry, which both lets us decipher its contents and</color>
<color=#75715e>       * also advances the file reader position.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>ckptEndLogEntry</color><color=#f8f8f2>.</color><color=#a6e22e>readEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>" syncup reader read "</color> <color=#f92672>+</color> <color=#f8f8f2>currentEntryHeader</color> <color=#f92672>+</color> <color=#f8f8f2>ckptEndLogEntry</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>CheckpointEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>ckptEndLogEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>()).</color><color=#a6e22e>getCleanedFilesToDelete</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>searchResults</color><color=#f8f8f2>.</color><color=#a6e22e>notePassedCheckpointEnd</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Setup the log entry as a wire record so we can compare it to</color>
<color=#75715e>     * the entry from the feeder as we look for a matchpoint. Do this</color>
<color=#75715e>     * before we change positions on the entry buffer by reading it.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>slice</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>(</color><color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>currentFeedRecord</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OutputWireRecord</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * All commit records must be tracked to figure out if we've exceeded</color>
<color=#75715e>     * the txn rollback limit. For reporting reasons, we'll need to</color>
<color=#75715e>     * unmarshal the log entry, so we can read the timestamp in the commit</color>
<color=#75715e>     * record.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_COMMIT</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>currentType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>commitLogEntry</color><color=#f8f8f2>.</color><color=#a6e22e>readEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>TxnCommit</color> <color=#f8f8f2>commit</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>TxnCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>commitLogEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>searchResults</color><color=#f8f8f2>.</color><color=#a6e22e>notePassedCommits</color><color=#f8f8f2>(</color><color=#f8f8f2>commit</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getLastLsn</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"syncup reader read "</color> <color=#f92672>+</color> <color=#f8f8f2>currentEntryHeader</color> <color=#f92672>+</color> <color=#f8f8f2>commitLogEntry</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_ABORT</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>currentType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>abortLogEntry</color><color=#f8f8f2>.</color><color=#a6e22e>readEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>TxnAbort</color> <color=#f8f8f2>abort</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>TxnAbort</color><color=#f8f8f2>)</color> <color=#f8f8f2>abortLogEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>searchResults</color><color=#f8f8f2>.</color><color=#a6e22e>notePassedAborts</color><color=#f8f8f2>(</color><color=#f8f8f2>abort</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"syncup reader read "</color> <color=#f92672>+</color> <color=#f8f8f2>currentEntryHeader</color> <color=#f92672>+</color> <color=#f8f8f2>abortLogEntry</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>syncableSearch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* We're looking for a particular VLSN. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>compareResult</color> <color=#f92672>=</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>currentVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>checkForPassingTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>compareResult</color><color=#f8f8f2>);</color>

    <color=#75715e>/* return true if this is the entry we want. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>compareResult</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** TBW */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>handleGapInBackwardsScan</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>prevFileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>SkipGapException</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SkipGapException</color><color=#f8f8f2>(</color><color=#f8f8f2>window</color><color=#f8f8f2>.</color><color=#a6e22e>currentFileNum</color><color=#f8f8f2>(),</color> <color=#f8f8f2>prevFileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>fileGapHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>prevFileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * An internal exception indicating that the reader must scan across a</color>
<color=#75715e>   * gap in the log files. The gap may have been created by cleaning.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>SkipGapException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>SkipGapException</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>currentFileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>nextFileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Restarting reader in order to read backwards across gap "</color>
              <color=#f92672>+</color> <color=#e6db74>"from file 0x"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>currentFileNum</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" to file 0x"</color>
              <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>nextFileNum</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>". Reset position to vlsn "</color>
              <color=#f92672>+</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>currentVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>currentVLSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setFileGapHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>fileGapHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>