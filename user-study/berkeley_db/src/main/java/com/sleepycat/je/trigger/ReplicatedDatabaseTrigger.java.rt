<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.trigger</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Transaction</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * ReplicatedTrigger defines trigger methods that are invoked on a replica when a replica needs to</color>
<color=#75715e> * resume a transaction that's only partially present in the replica's logs and needs to be resumed</color>
<color=#75715e> * so that it can be replayed to a conclusion, that is, to the point where the partial transaction</color>
<color=#75715e> * has been committed or aborted by the master.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>WARNING: This interface is not currently supported. This means that, on a replica where</color>
<color=#75715e> * transactions may be rolled back without a full environment shutdown, the repeatXxx methods cannot</color>
<color=#75715e> * be used to handle this circumstance. To be safe, it is best to only use TransactionTrigger</color>
<color=#75715e> * methods, namely TransactionTrigger.commit.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>WARNING: Only transient triggers are currently supported, and the documention below has not</color>
<color=#75715e> * yet been updated to reflect this fact. See details at the top of Trigger.java.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The trigger methods can be invoked in one of two circumstances:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>A new environment handle is opened on the replica and its logs contain a partial</color>
<color=#75715e> *       transaction.</color>
<color=#75715e> *   <li>A new master is elected and a replica has to switch over to the new master, while in the</color>
<color=#75715e> *       midst of replaying a transaction.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>These trigger methods are only invoked if the partial transactions contain operations</color>
<color=#75715e> * associated with triggers. Consider a transaction consisting of two put operations:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * put k1</color>
<color=#75715e> * put k2</color>
<color=#75715e> * commit t</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * In the absence of a replica or master failure this would normally result in the sequence of</color>
<color=#75715e> * trigger calls:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> * Trigger.put(t, k1, ...)</color>
<color=#75715e> * Trigger.put(t, k2,....)</color>
<color=#75715e> * Trigger.commit(t)</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * If the replica failed in the midst of the transaction replay, immediately after the first put</color>
<color=#75715e> * operation, the sequence of trigger invocations before the replica went down would be:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  Trigger.put(k1, ...)</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * followed by the trigger calls below when the replica handle was subsequently reopened:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  ReplicatedTrigger.repeat(t)</color>
<color=#75715e> *  Trigger.repeatPut(t, k1, ...)</color>
<color=#75715e> *  Trigger.put(t, k2, ...)</color>
<color=#75715e> *  Trigger.commit(t)</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * The interface defines one "repeat" trigger method for each of the trigger methods defined by</color>
<color=#75715e> * Trigger. The methods are distinct from those defined by Trigger to highlight the fact that the</color>
<color=#75715e> * trigger method is being invoked a second time for the same operation and the trigger method may</color>
<color=#75715e> * not have completed the actions it intended to take when it was invoked the first time. For</color>
<color=#75715e> * example, the trigger method may have been used to update a couple of local indexes and it was</color>
<color=#75715e> * only finished with updating one local index and persisting it before the replica crashed. As a</color>
<color=#75715e> * result the method may need to take special action to repair state maintained by it.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A ReplicatedTrigger is associated with a replicated database via {@link</color>
<color=#75715e> * DatabaseConfig#setTriggers DatabaseConfig.setTriggers}. For a replicated database, the</color>
<color=#75715e> * ReplicatedTrigger interface must be implemented for all triggers. For a non-replicated database,</color>
<color=#75715e> * implementing the ReplicatedTrigger interface is allowed, but the ReplicatedTrigger methods will</color>
<color=#75715e> * not be called.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>ReplicatedDatabaseTrigger</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to inform the application that the trigger method calls associated with the partial</color>
<color=#75715e>   * transaction will be repeated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the partial transaction</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/* Trigger lifecycle operations. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when an addTrigger operation needs to be repeated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Trigger#addTrigger</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatAddTrigger</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when a removeTrigger operation needs to be repeated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Trigger#removeTrigger</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatRemoveTrigger</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/* Database Granularity operations */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when a database create trigger needs to be repeated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see PersistentTrigger#open</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatCreate</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when a database remove trigger needs to be repeated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see PersistentTrigger#remove</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatRemove</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when a database truncate trigger needs to be repeated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see PersistentTrigger#truncate</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatTruncate</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when a database rename trigger needs to be repeated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see PersistentTrigger#rename</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatRename</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>

  <color=#75715e>/* Key/value granularity operations. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when a database put trigger needs to be repeated. Note that this</color>
<color=#75715e>   * method differs from the corresponding <code>Trigger.put</code> method in that it omits the</color>
<color=#75715e>   * <code>oldData</code> argument.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Trigger#put</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatPut</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked when a database delete trigger needs to be repeated. Note that this</color>
<color=#75715e>   * method differs from the corresponding <code>Trigger.delete</code> method in that it omits the</color>
<color=#75715e>   * <code>oldData</code> argument.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Trigger#remove</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>repeatDelete</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>