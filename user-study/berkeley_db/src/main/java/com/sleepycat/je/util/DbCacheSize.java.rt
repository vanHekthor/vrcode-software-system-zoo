<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.Evictor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.OffHeapCache</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.BIN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.IN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.CmdUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbCacheSizeRepEnv</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.RuntimeExceptionWrapper</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.math.BigInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.NumberFormat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Estimates the in-memory cache size needed to hold a specified data set.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To get an estimate of the in-memory footprint for a given database, specify the number of</color>
<color=#75715e> * records and database characteristics and DbCacheSize will return an estimate of the cache size</color>
<color=#75715e> * required for holding the database in memory. Based on this information a JE main cache size can</color>
<color=#75715e> * be chosen and then configured using {@link EnvironmentConfig#setCacheSize} or using the {@link</color>
<color=#75715e> * EnvironmentConfig#MAX_MEMORY} property. An off-heap cache may also be optionally configured using</color>
<color=#75715e> * {@link EnvironmentConfig#setOffHeapCacheSize} or using the {@link</color>
<color=#75715e> * EnvironmentConfig#MAX_OFF_HEAP_MEMORY} property.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Importance of the JE Cache</h4></color>
<color=#75715e> *</color>
<color=#75715e> * The JE cache is not an optional cache. It is used to hold the metadata for accessing JE data. In</color>
<color=#75715e> * fact the JE cache size is probably the most critical factor to JE performance, since Btree nodes</color>
<color=#75715e> * will have to be fetched during a database read or write operation if they are not in cache.</color>
<color=#75715e> * During a single read or write operation, at each level of the Btree that a fetch is necessary, an</color>
<color=#75715e> * IO may be necessary at a different disk location for each fetch. In addition, if internal nodes</color>
<color=#75715e> * (INs) are not in cache, then write operations will cause additional copies of the INs to be</color>
<color=#75715e> * written to storage, as modified INs are moved out of the cache to make room for other parts of</color>
<color=#75715e> * the Btree during subsequent operations. This additional fetching and writing means that sizing</color>
<color=#75715e> * the cache too small to hold the INs will result in lower operation performance.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For best performance, all Btree nodes should fit in the JE cache, including leaf nodes (LNs),</color>
<color=#75715e> * which hold the record data, and INs, which hold record keys and other metadata. However, because</color>
<color=#75715e> * system memory is limited, it is sometimes necessary to size the cache to hold all or at least</color>
<color=#75715e> * most INs, but not the LNs. This utility estimates the size necessary to hold only INs, and the</color>
<color=#75715e> * size to hold INs and LNs.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In addition, a common problem with large caches is that Java GC overhead can become</color>
<color=#75715e> * significant. When a Btree node is evicted from the JE main cache based on JE's LRU algorithm,</color>
<color=#75715e> * typically the node will have been resident in the JVM heap for an extended period of time, and</color>
<color=#75715e> * will be expensive to GC. Therefore, when most or all LNs do <em>not</em> fit in the main cache,</color>
<color=#75715e> * using {@link CacheMode#EVICT_LN} can be beneficial to reduce the Java GC cost of collecting the</color>
<color=#75715e> * LNs as they are moved out of the main cache. With EVICT_LN, the LNs only reside in the JVM heap</color>
<color=#75715e> * for a short period and are cheap to collect. A recommended approach is to size the JE main cache</color>
<color=#75715e> * to hold only INs, and size the Java heap to hold that amount plus the amount needed for GC</color>
<color=#75715e> * working space and application objects, leaving any additional memory for use by the file system</color>
<color=#75715e> * cache or the off-heap cache. Tests show this approach results in lower GC overhead and more</color>
<color=#75715e> * predictable latency.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another issue is that 64-bit JVMs store object references using less space when the heap size</color>
<color=#75715e> * is slightly less than 32GiB. When the heap size is 32GiB or more, object references are larger</color>
<color=#75715e> * and less data can be cached per GiB of memory. This JVM feature is enabled with the <a</color>
<color=#75715e> * href="http://download.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#compressedOop">Compressed</color>
<color=#75715e> * Oops</a> (<code>-XX:+UseCompressedOops</code>) option, although in modern JVMs it is on by</color>
<color=#75715e> * default. Because of this factor, and because Java GC overhead is usually higher with larger</color>
<color=#75715e> * heaps, a maximum heap size slightly less than 32GiB is recommended, along with Compressed Oops</color>
<color=#75715e> * option.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Of course, the JE main cache size must be less than the heap size since the main cache is</color>
<color=#75715e> * stored in the heap. In fact, around 30% of free space should normally be reserved in the heap for</color>
<color=#75715e> * use by Java GC, to avoid high GC overheads. For example, if the application uses roughly 2GiB of</color>
<color=#75715e> * the heap, then with a 32GiB heap the JE main cache should normally be no more than 20GiB.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>As of JE 6.4, an optional off-heap cache may be configured in addition to the main JE cache.</color>
<color=#75715e> * See {@link EnvironmentConfig#setOffHeapCacheSize} for information about the trade-offs in using</color>
<color=#75715e> * an off-heap cache. When the {@code -offheap} argument is specified, this utility displays sizing</color>
<color=#75715e> * information for both the main and off-heap caches. The portion of the data set that fits in the</color>
<color=#75715e> * main cache, and the off-heap size needed to hold the rest of the data set, will be shown. The</color>
<color=#75715e> * main cache size can be specified with the {@code -maincache} argument, or is implied to be the</color>
<color=#75715e> * amount needed to hold all internal nodes if this argument is omitted. Omitting this argument is</color>
<color=#75715e> * appropriate when {@link CacheMode#EVICT_LN} is used, since only internal nodes will be stored in</color>
<color=#75715e> * the main cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To reduce Java GC overhead, sometimes a small main cache is used along with an off-heap cache.</color>
<color=#75715e> * Note that it is important that the size the main cache is at least large enough to hold all the</color>
<color=#75715e> * upper INs (the INs at level 2 and above). This is because the off-heap cache does not contain</color>
<color=#75715e> * upper INs, it only contains LNs and bottom internal nodes (BINs). When a level 2 IN is evicted</color>
<color=#75715e> * from the main cache, its children (BINs and LNs) in the off-heap cache, if any, must also be</color>
<color=#75715e> * evicted, which can be undesirable, especially if the off-heap cache is not full. This utility</color>
<color=#75715e> * displays the main cache size needed to hold all upper INs, and displays a warning if this is</color>
<color=#75715e> * smaller than the main cache size specified.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Estimating the JE Cache Size</h4></color>
<color=#75715e> *</color>
<color=#75715e> * Estimating JE in-memory sizes is not straightforward for several reasons. There is some fixed</color>
<color=#75715e> * overhead for each Btree internal node, so fanout (maximum number of child entries per parent</color>
<color=#75715e> * node) and degree of node sparseness impacts memory consumption. In addition, JE uses various</color>
<color=#75715e> * compact in-memory representations that depend on key sizes, data sizes, key prefixing, how many</color>
<color=#75715e> * child nodes are resident, etc. The physical proximity of node children also allows compaction of</color>
<color=#75715e> * child physical address values.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Therefore, when running this utility it is important to specify all {@link EnvironmentConfig}</color>
<color=#75715e> * and {@link DatabaseConfig} settings that will be used in a production system. The {@link</color>
<color=#75715e> * EnvironmentConfig} settings are specified by command line options for each property, using the</color>
<color=#75715e> * same names as the {@link EnvironmentConfig} parameter name values. For example, {@link</color>
<color=#75715e> * EnvironmentConfig#LOG_FILE_MAX}, which influences the amount of memory used to store physical</color>
<color=#75715e> * record addresses, can be specified on the command line as:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code -je.log.fileMax LENGTH}</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To be sure that this utility takes into account all relevant settings, especially as the</color>
<color=#75715e> * utility is enhanced in future versions, it is best to specify all {@link EnvironmentConfig}</color>
<color=#75715e> * settings used by the application.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link DatabaseConfig} settings are specified using command line options defined by this</color>
<color=#75715e> * utility.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@code -nodemax ENTRIES} corresponds to {@link DatabaseConfig#setNodeMaxEntries}.</color>
<color=#75715e> *   <li>{@code -duplicates} corresponds to passing true to {@link</color>
<color=#75715e> *       DatabaseConfig#setSortedDuplicates}. Note that duplicates are configured for DPL</color>
<color=#75715e> *       MANY_TO_ONE and MANY_TO_MANY secondary indices.</color>
<color=#75715e> *   <li>{@code -keyprefix LENGTH} corresponds to passing true {@link</color>
<color=#75715e> *       DatabaseConfig#setKeyPrefixing}. Note that key prefixing is always used when duplicates are</color>
<color=#75715e> *       configured.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>This utility estimates the JE cache size by creating an in-memory Environment and Database. In</color>
<color=#75715e> * addition to the size of the Database, the minimum overhead for the Environment is output. The</color>
<color=#75715e> * Environment overhead shown is likely to be smaller than actually needed because it doesn't take</color>
<color=#75715e> * into account use of memory by JE daemon threads (cleaner, checkpointer, etc) the memory used for</color>
<color=#75715e> * locks that are held by application operations and transactions, the memory for HA network</color>
<color=#75715e> * connections, etc. An additional amount should be added to account for these factors.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This utility estimates the cache size for a single JE Database, or a logical table spread</color>
<color=#75715e> * across multiple databases (as in the case of Oracle NoSQL DB, for example). To estimate the size</color>
<color=#75715e> * for multiple databases/tables with different configuration parameters or different key and data</color>
<color=#75715e> * sizes, run this utility for each database/table and sum the sizes. If you are summing multiple</color>
<color=#75715e> * runs for multiple databases/tables that are opened in a single Environment, the overhead size for</color>
<color=#75715e> * the Environment should only be added once.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In some applications with databases/tables having variable key and data sizes, it may be</color>
<color=#75715e> * difficult to determine the key and data size input parameters for this utility. If a</color>
<color=#75715e> * representative data set can be created, one approach is to use the {@link DbPrintLog} utility</color>
<color=#75715e> * with the {@code -S} option to find the average key and data size for all databases/tables, and</color>
<color=#75715e> * use these values as input parameters, as if there were only a single database/tables. With this</color>
<color=#75715e> * approach, it is important that the {@code DatabaseConfig} parameters are the same, or at least</color>
<color=#75715e> * similar, for all databases/tables.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Key Prefixing and Compaction</h4></color>
<color=#75715e> *</color>
<color=#75715e> * Key prefixing deserves special consideration. It can significantly reduce the size of the cache</color>
<color=#75715e> * and is generally recommended; however, the benefit can be difficult to predict. Key prefixing, in</color>
<color=#75715e> * turn, impacts the benefits of key compaction, and the use of the {@link</color>
<color=#75715e> * EnvironmentConfig#TREE_COMPACT_MAX_KEY_LENGTH} parameter.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For a given data set, the impact of key prefixing is determined by how many leading bytes are</color>
<color=#75715e> * in common for the keys in a single bottom internal node (BIN). For example, if keys are assigned</color>
<color=#75715e> * sequentially as long (8 byte) integers, and the {@link DatabaseConfig#setNodeMaxEntries maximum</color>
<color=#75715e> * entries per node} is 128 (the default value) then 6 or 7 of the 8 bytes of the key will have a</color>
<color=#75715e> * common prefix in each BIN. Of course, when records are deleted, the number of prefixed bytes may</color>
<color=#75715e> * be reduced because the range of key values in a BIN will be larger. For this example we will</color>
<color=#75715e> * assume that, on average, 5 bytes in each BIN are a common prefix leaving 3 bytes per key that are</color>
<color=#75715e> * unprefixed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Key compaction is applied when the number of unprefixed bytes is less than a configured value;</color>
<color=#75715e> * see {@link EnvironmentConfig#TREE_COMPACT_MAX_KEY_LENGTH}. In the example, the 3 unprefixed bytes</color>
<color=#75715e> * per key is less than the default used for key compaction (16 bytes). This means that each key</color>
<color=#75715e> * will use 16 bytes of memory, in addition to the amount used for the prefix for each BIN. The</color>
<color=#75715e> * per-key overhead could be reduced by changing the {@code TREE_COMPACT_MAX_KEY_LENGTH} parameter</color>
<color=#75715e> * to a smaller value, but care should be taken to ensure the compaction will be effective as keys</color>
<color=#75715e> * are inserted and deleted over time.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because key prefixing depends so much on the application key format and the way keys are</color>
<color=#75715e> * assigned, the number of expected prefix bytes must be estimated by the user and specified to</color>
<color=#75715e> * DbCacheSize using the {@code -keyprefix} argument.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Key Prefixing and Duplicates</h4></color>
<color=#75715e> *</color>
<color=#75715e> * When {@link DatabaseConfig#setSortedDuplicates duplicates} are configured for a Database</color>
<color=#75715e> * (including DPL MANY_TO_ONE and MANY_TO_MANY secondary indices), key prefixing is always used.</color>
<color=#75715e> * This is because the internal key in a duplicates database BIN is formed by concatenating the</color>
<color=#75715e> * user-specified key and data. In secondary databases with duplicates configured, the data is the</color>
<color=#75715e> * primary key, so the internal key is the concatenation of the secondary key and the primary key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Key prefixing is always used for duplicates databases because prefixing is necessary to store</color>
<color=#75715e> * keys efficiently. When the number of duplicates per unique user-specified key is more than the</color>
<color=#75715e> * number of entries per BIN, the entire user-specified key will be the common prefix.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example, a database that stores user information may use email address as the primary key</color>
<color=#75715e> * and zip code as a secondary key. The secondary index database will be a duplicates database, and</color>
<color=#75715e> * the internal key stored in the BINs will be a two part key containing zip code followed by email</color>
<color=#75715e> * address. If on average there are more users per zip code than the number of entries in a BIN,</color>
<color=#75715e> * then the key prefix will normally be at least as long as the zip code key. If there are less</color>
<color=#75715e> * (more than one zip code appears in each BIN), then the prefix will be shorter than the zip code</color>
<color=#75715e> * key.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>It is also possible for the key prefix to be larger than the secondary key. If for one</color>
<color=#75715e> * secondary key value (one zip code) there are a large number of primary keys (email addresses),</color>
<color=#75715e> * then a single BIN may contain concatenated keys that all have the same secondary key (same zip</color>
<color=#75715e> * code) and have primary keys (email addresses) that all have some number of prefix bytes in</color>
<color=#75715e> * common. Therefore, when duplicates are specified it is possible to specify a prefix size that is</color>
<color=#75715e> * larger than the key size.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Small Data Sizes and Embedded LNs</h4></color>
<color=#75715e> *</color>
<color=#75715e> * Another special data representation involves small data sizes. When the data size of a record is</color>
<color=#75715e> * less than or equal to {@link EnvironmentConfig#TREE_MAX_EMBEDDED_LN} (16 bytes, by default), the</color>
<color=#75715e> * data is stored (embedded) in the BIN, and the LN is not stored in cache at all. This increases</color>
<color=#75715e> * the size needed to hold all INs in cache, but it decreases the size needed to hold the complete</color>
<color=#75715e> * data set. If the data size specified when running this utility is less than or equal to</color>
<color=#75715e> * TREE_MAX_EMBEDDED_LN, the size displayed for holding INs only will be the same as the size</color>
<color=#75715e> * displayed for holdings INs and LNs.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>See {@link EnvironmentConfig#TREE_MAX_EMBEDDED_LN} for information about the trade-offs in</color>
<color=#75715e> * using the embedded LNs feature.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Record Versions and Oracle NoSQL Database</h4></color>
<color=#75715e> *</color>
<color=#75715e> * This note applies only to when JE is used with Oracle NoSQL DB. In Oracle NoSQL DB, an internal</color>
<color=#75715e> * JE environment configuration parameter is always used: {@code -je.rep.preserveRecordVersion</color>
<color=#75715e> * true}. This allows using record versions in operations such as "put if version", "delete if</color>
<color=#75715e> * version", etc. This feature performs best when the cache is sized large enough to hold the record</color>
<color=#75715e> * versions.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using JE with Oracle NoSQL DB, always add {@code -je.rep.preserveRecordVersion true} to</color>
<color=#75715e> * the command line. This ensures that the cache sizes calculated are correct, and also outputs an</color>
<color=#75715e> * additional line showing how much memory is required to hold the internal nodes and record</color>
<color=#75715e> * versions (but not the leaf nodes). This is the minimum recommended size when the "... if version"</color>
<color=#75715e> * operations are used.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Running the DbCacheSize utility</h4></color>
<color=#75715e> *</color>
<color=#75715e> * Usage:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> * java { com.sleepycat.je.util.DbCacheSize |</color>
<color=#75715e> *        -jar je-&lt;version&gt;.jar DbCacheSize }</color>
<color=#75715e> *  -records COUNT</color>
<color=#75715e> *      # Total records (key/data pairs); required</color>
<color=#75715e> *  -key BYTES</color>
<color=#75715e> *      # Average key bytes per record; required</color>
<color=#75715e> *  [-data BYTES]</color>
<color=#75715e> *      # Average data bytes per record; if omitted no leaf</color>
<color=#75715e> *      # node sizes are included in the output; required with</color>
<color=#75715e> *      # -duplicates, and specifies the primary key length</color>
<color=#75715e> *  [-offheap]</color>
<color=#75715e> *      # Indicates that an off-heap cache will be used.</color>
<color=#75715e> *  [-maincache BYTES]</color>
<color=#75715e> *      # The size of the main cache (in the JVM heap).</color>
<color=#75715e> *      # The size of the off-heap cache displayed is the</color>
<color=#75715e> *      # additional amount needed to hold the data set.</color>
<color=#75715e> *      # If omitted, the main cache size is implied to</color>
<color=#75715e> *      # be the amount needed to hold all internal nodes.</color>
<color=#75715e> *      # Ignored if -offheap is not also specified.</color>
<color=#75715e> *  [-keyprefix BYTES]</color>
<color=#75715e> *      # Expected size of the prefix for the keys in each</color>
<color=#75715e> *      # BIN; default: key prefixing is not configured;</color>
<color=#75715e> *      # required with -duplicates</color>
<color=#75715e> *  [-nodemax ENTRIES]</color>
<color=#75715e> *      # Number of entries per Btree node; default: 128</color>
<color=#75715e> *  [-orderedinsertion]</color>
<color=#75715e> *      # Assume ordered insertions and no deletions, so BINs</color>
<color=#75715e> *      # are 100% full; default: unordered insertions and/or</color>
<color=#75715e> *      # deletions, BINs are 70% full</color>
<color=#75715e> *  [-duplicates]</color>
<color=#75715e> *      # Indicates that sorted duplicates are used, including</color>
<color=#75715e> *      # MANY_TO_ONE and MANY_TO_MANY secondary indices;</color>
<color=#75715e> *      # default: false</color>
<color=#75715e> *  [-ttl]</color>
<color=#75715e> *      # Indicates that TTL is used; default: false</color>
<color=#75715e> *  [-replicated]</color>
<color=#75715e> *      # Use a ReplicatedEnvironment; default: false</color>
<color=#75715e> *  [-ENV_PARAM_NAME VALUE]...</color>
<color=#75715e> *      # Any number of EnvironmentConfig parameters and</color>
<color=#75715e> *      # ReplicationConfig parameters (if -replicated)</color>
<color=#75715e> *  [-btreeinfo]</color>
<color=#75715e> *      # Outputs additional Btree information</color>
<color=#75715e> *  [-outputproperties]</color>
<color=#75715e> *      # Writes Java properties file to System.out</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>You should run DbCacheSize on the same target platform and JVM for which you are sizing the</color>
<color=#75715e> * cache, as cache sizes will vary. You may also need to specify -d32 or -d64 depending on your</color>
<color=#75715e> * target, if the default JVM mode is not the same as the mode to be used in production.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To take full advantage of JE cache memory, it is strongly recommended that <a</color>
<color=#75715e> * href="http://download.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#compressedOop">compressed</color>
<color=#75715e> * oops</a> (<code>-XX:+UseCompressedOops</code>) is specified when a 64-bit JVM is used and the</color>
<color=#75715e> * maximum heap size is less than 32 GB. As described in the referenced documentation, compressed</color>
<color=#75715e> * oops is sometimes the default JVM mode even when it is not explicitly specified in the Java</color>
<color=#75715e> * command. However, if compressed oops is desired then it <em>must</em> be explicitly specified in</color>
<color=#75715e> * the Java command when running DbCacheSize or a JE application. If it is not explicitly specified</color>
<color=#75715e> * then JE will not aware of it, even if it is the JVM default setting, and will not take it into</color>
<color=#75715e> * account when calculating cache memory sizes.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> * $ java -jar je-X.Y.Z.jar DbCacheSize -records 554719 -key 16 -data 100</color>
<color=#75715e> *</color>
<color=#75715e> *  === Environment Cache Overhead ===</color>
<color=#75715e> *</color>
<color=#75715e> *  3,157,213 minimum bytes</color>
<color=#75715e> *</color>
<color=#75715e> * To account for JE daemon operation, record locks, HA network connections, etc,</color>
<color=#75715e> * a larger amount is needed in practice.</color>
<color=#75715e> *</color>
<color=#75715e> *  === Database Cache Size ===</color>
<color=#75715e> *</color>
<color=#75715e> *  Number of Bytes  Description</color>
<color=#75715e> *  ---------------  -----------</color>
<color=#75715e> *       23,933,736  Internal nodes only</color>
<color=#75715e> *      107,206,616  Internal nodes and leaf nodes</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>This indicates that the minimum memory size to hold only the internal nodes of the Database</color>
<color=#75715e> * Btree is approximately 24MB. The maximum size to hold the entire database, both internal nodes</color>
<color=#75715e> * and data records, is approximately 107MB. To either of these amounts, at least 3MB (plus more for</color>
<color=#75715e> * locks and daemons) should be added to account for the environment overhead.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following example adds the use of an off-heap cache, where the main cache size is</color>
<color=#75715e> * specified to be 30MB.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> * $ java -jar je-X.Y.Z.jar DbCacheSize -records 554719 -key 16 -data 100 \</color>
<color=#75715e> *      -offheap -maincache 30000000</color>
<color=#75715e> *</color>
<color=#75715e> *  === Environment Cache Overhead ===</color>
<color=#75715e> *</color>
<color=#75715e> *  5,205,309 minimum bytes</color>
<color=#75715e> *</color>
<color=#75715e> * To account for JE daemon operation, record locks, HA network connections, etc,</color>
<color=#75715e> * a larger amount is needed in practice.</color>
<color=#75715e> *</color>
<color=#75715e> *  === Database Cache Size ===</color>
<color=#75715e> *</color>
<color=#75715e> *  Number of Bytes  Description</color>
<color=#75715e> *  ---------------  -----------</color>
<color=#75715e> *       23,933,736  Internal nodes only: MAIN cache</color>
<color=#75715e> *                0  Internal nodes only: OFF-HEAP cache</color>
<color=#75715e> *       24,794,691  Internal nodes and leaf nodes: MAIN cache</color>
<color=#75715e> *       70,463,604  Internal nodes and leaf nodes: OFF-HEAP cache</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * There are several things of interest in the output.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>The environment overhead is larger because of memory used for the off-heap LRU.</color>
<color=#75715e> *   <li>To cache only internal nodes, an off-heap cache is not needed since the internal nodes take</color>
<color=#75715e> *       around 24MB, which when added to the 5MB overhead is less than the 30MB main cache</color>
<color=#75715e> *       specified. This is why the number of bytes on the second line is zero.</color>
<color=#75715e> *   <li>To cache all nodes, the main cache size specified should be used (25MB added to the 5MB</color>
<color=#75715e> *       overhead is 30MB), and an off-heap cache of around 71MB should be configured.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Output Properties</h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When {@code -outputproperties} is specified, a list of properties in Java properties file</color>
<color=#75715e> * format will be written to System.out, instead of the output shown above. The properties and their</color>
<color=#75715e> * meanings are listed below.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>The following properties are always output (except allNodes, see below). They describe the</color>
<color=#75715e> *       estimated size of the main cache.</color>
<color=#75715e> *       <ul></color>
<color=#75715e> *         <li><strong>overhead</strong>: The environment overhead, as shown under Environment Cache</color>
<color=#75715e> *             Overhead above.</color>
<color=#75715e> *         <li><strong>internalNodes</strong>: The Btree size in the main cache for holding the</color>
<color=#75715e> *             internal nodes. This is the "Internal nodes only" line above (followed by "MAIN</color>
<color=#75715e> *             cache" when {@code -offheap} is specified).</color>
<color=#75715e> *         <li><strong>internalNodesAndVersions</strong>: The Btree size needed to hold the internal</color>
<color=#75715e> *             nodes and record versions in the main cache. This value is zero when {@code -offheap}</color>
<color=#75715e> *             is specified; currently JE does not cache record versions off-heap unless their</color>
<color=#75715e> *             associated LNs are also cached off-heap, so there is no way to calculate this</color>
<color=#75715e> *             property.</color>
<color=#75715e> *         <li><strong>allNodes</strong>: The Btree size in the main cache needed to hold all nodes.</color>
<color=#75715e> *             This is the "Internal nodes and leaf nodes" line above (followed by "MAIN cache" when</color>
<color=#75715e> *             {@code -offheap} is specified). This property is not output unless {@code -data} is</color>
<color=#75715e> *             specified.</color>
<color=#75715e> *       </ul></color>
<color=#75715e> *   <li>The following properties are output only when {@code -offheap} is specified. They describe</color>
<color=#75715e> *       the estimated size of the off-heap cache.</color>
<color=#75715e> *       <ul></color>
<color=#75715e> *         <li><strong>minMainCache</strong>: The minimum size of the main cache needed to hold all</color>
<color=#75715e> *             upper INs. When the {@code -maincache} value specified is less than this minimum, not</color>
<color=#75715e> *             all internal nodes can be cached. See the discussion further above.</color>
<color=#75715e> *         <li><strong>offHeapInternalNodes</strong>: The size of the off-heap cache needed to hold</color>
<color=#75715e> *             the internal nodes. This is the "Internal nodes only: OFF_HEAP cache" line above.</color>
<color=#75715e> *         <li><strong>offHeapAllNodes</strong>: The size of the off-heap cache needed to hold all</color>
<color=#75715e> *             nodes. This is the "Internal nodes and leaf nodes: OFF_HEAP cache" line above. This</color>
<color=#75715e> *             property is not output unless {@code -data} is specified.</color>
<color=#75715e> *       </ul></color>
<color=#75715e> *   <li>The following properties are deprecated but are output for compatibility with earlier</color>
<color=#75715e> *       releases.</color>
<color=#75715e> *       <ul></color>
<color=#75715e> *         <li>minInternalNodes, maxInternalNodes, minAllNodes, and (when {@code -data} is</color>
<color=#75715e> *             specified) maxAllNodes</color>
<color=#75715e> *       </ul></color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * @see EnvironmentConfig#setCacheSize</color>
<color=#75715e> * @see EnvironmentConfig#setOffHeapCacheSize</color>
<color=#75715e> * @see CacheMode</color>
<color=#75715e> * @see <a href="../EnvironmentStats.html#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DbCacheSize</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Undocumented command line options, used for comparing calculated to</color>
<color=#75715e>   * actual cache sizes during testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   *  [-measure]</color>
<color=#75715e>   *      # Causes main program to write a database to find</color>
<color=#75715e>   *      # the actual cache size; default: do not measure;</color>
<color=#75715e>   *      # without -data, measures internal nodes only</color>
<color=#75715e>   *</color>
<color=#75715e>   * Only use -measure without -orderedinsertion when record count is 100k or</color>
<color=#75715e>   * less, to avoid endless attempts to find an unused key value via random</color>
<color=#75715e>   * number generation.  Also note that measured amounts will be slightly</color>
<color=#75715e>   * less than calculated amounts because the number of prefix bytes is</color>
<color=#75715e>   * larger for smaller key values, which are sequential integers from zero</color>
<color=#75715e>   * to max records minus one.</color>
<color=#75715e>   */</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>NumberFormat</color> <color=#f8f8f2>INT_FORMAT</color> <color=#f92672>=</color> <color=#f8f8f2>NumberFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getIntegerInstance</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MAIN_HEADER</color> <color=#f92672>=</color>
      <color=#e6db74>"   Number of Bytes  Description\n"</color> <color=#f92672>+</color> <color=#e6db74>"   ---------------  -----------"</color><color=#f8f8f2>;</color>
  <color=#75715e>//   123456789012345678</color>
  <color=#75715e>//                     12</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MIN_COLUMN_WIDTH</color> <color=#f92672>=</color> <color=#ae81ff>18</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>COLUMN_SEPARATOR</color> <color=#f92672>=</color> <color=#e6db74>"  "</color><color=#f8f8f2>;</color>

  <color=#75715e>/* IN density for non-ordered insertion. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_DENSITY</color> <color=#f92672>=</color> <color=#ae81ff>70</color><color=#f8f8f2>;</color>
  <color=#75715e>/* IN density for ordered insertion. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ORDERED_DENSITY</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Parameters. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>();</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>repParams</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>();</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>records</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>keySize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataSize</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>offHeapCache</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>assumeEvictLN</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainCacheSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainDataSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nodeMaxEntries</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>binMaxEntries</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>keyPrefix</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>orderedInsertion</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>duplicates</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>replicated</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useTTL</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>outputProperties</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doMeasure</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>btreeInfo</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Calculated values. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>envOverhead</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>uinWithTargets</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>uinNoTargets</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>uinOffHeapBINIds</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>binNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>binNoLNsWithVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>binWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>binOffHeapWithLNIds</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>binOffHeapNoLNIds</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>binOffHeapLNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>binOffHeapLNIds</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainMinDataSize</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainNoLNsWithVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>offHeapNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>offHeapWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nMainBINsNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nMainBINsWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nMainLNsWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>measuredMainNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>measuredMainNoLNsWithVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>measuredMainWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>measuredOffHeapNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>measuredOffHeapWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>preloadMainNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>preloadMainNoLNsWithVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>preloadMainWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>binAvg</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>btreeLevels</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nBinNodes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nUinNodes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nLevel2Nodes</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>File</color> <color=#f8f8f2>tempDir</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>DbCacheSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>parseArgs</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>args</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>args</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"-"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>args</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-records"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after -records"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>records</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a number"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>records</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a positive integer"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-key"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after -key"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>keySize</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a number"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keySize</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a positive integer"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-data"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after -data"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dataSize</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a number"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataSize</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a non-negative integer"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-offheap"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>offHeapCache</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-maincache"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after -maincache"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>mainCacheSize</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a number"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainCacheSize</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a positive integer"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-keyprefix"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after -keyprefix"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>keyPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a number"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a non-negative integer"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-orderedinsertion"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>orderedInsertion</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-duplicates"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>duplicates</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-ttl"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>useTTL</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-replicated"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>replicated</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-nodemax"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after -nodemax"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nodeMaxEntries</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a number"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeMaxEntries</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a positive integer"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-binmax"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after -binmax"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>binMaxEntries</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a number"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binMaxEntries</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#e6db74>" is not a positive integer"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-density"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"-density is no longer supported, see -orderedinsertion"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-overhead"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"-overhead is no longer supported"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"-je."</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"-je.rep."</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>repParams</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-measure"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>doMeasure</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-outputproperties"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>outputProperties</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-btreeinfo"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"No value allowed after "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>btreeInfo</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown arg: "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>records</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"-records not specified"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keySize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>usage</color><color=#f8f8f2>(</color><color=#e6db74>"-key not specified"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>cleanup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tempDir</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>emptyTempDir</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>tempDir</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMainNoLNsOrVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMainNoLNsWithVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mainNoLNsWithVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapWithLNsAndVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapNoLNsOrVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMainWithLNsAndVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mainWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMeasuredMainNoLNsOrVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>measuredMainNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMeasuredMainNoLNsWithVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>measuredMainNoLNsWithVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMeasuredMainWithLNsAndVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>measuredMainWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMeasuredOffHeapNoLNsOrVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>measuredOffHeapNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getMeasuredOffHeapWithLNsAndVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>measuredOffHeapWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getPreloadMainNoLNsOrVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>preloadMainNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getPreloadMainNoLNsWithVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>preloadMainNoLNsWithVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getPreloadMainWithLNsAndVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>preloadMainWithLNsAndVLSNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Runs DbCacheSize as a command line utility. For command usage, see {@link DbCacheSize class</color>
<color=#75715e>   * description}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DbCacheSize</color> <color=#f8f8f2>dbCacheSize</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbCacheSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>parseArgs</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>calculateCacheSizes</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>outputProperties</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>printProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>printCacheSizes</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>doMeasure</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>measure</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>cleanup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Prints usage and calls System.exit. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>usage</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>msg</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
        <color=#e6db74>"usage:"</color>
            <color=#f92672>+</color> <color=#e6db74>"\njava "</color>
            <color=#f92672>+</color> <color=#f8f8f2>CmdUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getJavaCommand</color><color=#f8f8f2>(</color><color=#f8f8f2>DbCacheSize</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#e6db74>"\n   -records <count>"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Total records (key/data pairs); required"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n   -key <bytes> "</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Average key bytes per record; required"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-data <bytes>]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Average data bytes per record; if omitted no leaf"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # node sizes are included in the output; required with"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # -duplicates, and specifies the primary key length"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-offheap]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Indicates that an off-heap cache will be used."</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-maincache <bytes>]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # The size of the main cache (in the JVM heap)."</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # The size of the off-heap cache displayed is the"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # additional amount needed to hold the data set."</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # If omitted, the main cache size is implied to"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # be the amount needed to hold all internal nodes."</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Ignored if -offheap is not also specified."</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-keyprefix <bytes>]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Expected size of the prefix for the keys in each"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # BIN; default: zero, key prefixing is not configured;"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # required with -duplicates"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-nodemax <entries>]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Number of entries per Btree node; default: 128"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-orderedinsertion]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Assume ordered insertions and no deletions, so BINs"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # are 100% full; default: unordered insertions and/or"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # deletions, BINs are 70% full"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-duplicates]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Indicates that sorted duplicates are used, including"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # MANY_TO_ONE and MANY_TO_MANY secondary indices;"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # default: false"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-ttl]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Indicates that TTL is used; default: false"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-replicated]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Use a ReplicatedEnvironment; default: false"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-ENV_PARAM_NAME VALUE]..."</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Any number of EnvironmentConfig parameters and"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # ReplicationConfig parameters (if -replicated)"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-btreeinfo]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Outputs additional Btree information"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n  [-outputproperties]"</color>
            <color=#f92672>+</color> <color=#e6db74>"\n      # Writes Java properties to System.out"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Calculates estimated cache sizes. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>calculateCacheSizes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binMaxEntries</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>binMaxEntries</color> <color=#f92672>=</color> <color=#f8f8f2>nodeMaxEntries</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>openCalcEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>ACCUMULATED_LIMIT</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>envOverhead</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>).</color><color=#a6e22e>getCacheTotalBytes</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>assumeEvictLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainCacheSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainCacheSize</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>mainCacheSize</color> <color=#f92672>-</color> <color=#f8f8f2>envOverhead</color> <color=#f92672><=</color> <color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"The -maincache value must be at least 1 MiB larger"</color>
                  <color=#f92672>+</color> <color=#e6db74>" than the environment overhead ("</color>
                  <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>envOverhead</color><color=#f8f8f2>)</color>
                  <color=#f92672>+</color> <color=#e6db74>')'</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>density</color> <color=#f92672>=</color> <color=#f8f8f2>orderedInsertion</color> <color=#f92672>?</color> <color=#f8f8f2>ORDERED_DENSITY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>DEFAULT_DENSITY</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>nodeAvg</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeMaxEntries</color> <color=#f92672>*</color> <color=#f8f8f2>density</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>binAvg</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>binMaxEntries</color> <color=#f92672>*</color> <color=#f8f8f2>density</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>calcTreeSizes</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>calcNNodes</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>calcMainCacheSizes</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * With an off-heap cache, if all UINs don't fit in main then we</color>
<color=#75715e>       * can't fit all internal nodes, much less all nodes, in both</color>
<color=#75715e>       * caches. We adjust the number of records downward so all UINs do</color>
<color=#75715e>       * fit in main (there is no point in configuring a cache that can</color>
<color=#75715e>       * never be filled) and then recalculate the number of nodes.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainCacheSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>mainCacheSize</color> <color=#f92672>=</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color> <color=#f92672>+</color> <color=#f8f8f2>envOverhead</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>mainDataSize</color> <color=#f92672>=</color> <color=#f8f8f2>mainCacheSize</color> <color=#f92672>-</color> <color=#f8f8f2>envOverhead</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>mainMinDataSize</color> <color=#f92672>=</color> <color=#f8f8f2>calcLevel2AndAboveSize</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainMinDataSize</color> <color=#f92672>></color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>records</color> <color=#f92672>*=</color> <color=#f8f8f2>((</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>mainMinDataSize</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>calcNNodes</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>calcMainCacheSizes</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>calcOffHeapNoLNsOrVLSNs</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>calcOffHeapWithLNsAndVLSNs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>ACCUMULATED_LIMIT</color> <color=#f92672>=</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>ACCUMULATED_LIMIT_DEFAULT</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not propagate exception thrown by Environment.close if</color>
<color=#75715e>       * another exception is currently in flight.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>calcLevel2AndAboveSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>nUinNodes</color> <color=#f92672>-</color> <color=#f8f8f2>nLevel2Nodes</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>uinWithTargets</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>nLevel2Nodes</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>uinNoTargets</color> <color=#f92672>+</color> <color=#f8f8f2>uinOffHeapBINIds</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>calcNNodes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>nBinNodes</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>records</color> <color=#f92672>+</color> <color=#f8f8f2>binAvg</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>binAvg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>btreeLevels</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nUinNodes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nLevel2Nodes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>nodes</color> <color=#f92672>=</color> <color=#f8f8f2>nBinNodes</color> <color=#f92672>/</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>nodes</color> <color=#f92672>/=</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodes</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nodes</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// root</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeLevels</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>nLevel2Nodes</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nLevel2Nodes</color> <color=#f92672>=</color> <color=#f8f8f2>nodes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>nUinNodes</color> <color=#f92672>+=</color> <color=#f8f8f2>nodes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>btreeLevels</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodes</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calculates main cache sizes as if there were no off-heap cache. During off-heap cache size</color>
<color=#75715e>   * calculations, these numbers may be revised.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>calcMainCacheSizes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainUINs</color> <color=#f92672>=</color> <color=#f8f8f2>nUinNodes</color> <color=#f92672>*</color> <color=#f8f8f2>uinWithTargets</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>mainNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nBinNodes</color> <color=#f92672>*</color> <color=#f8f8f2>binNoLNsOrVLSNs</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>mainUINs</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>mainNoLNsWithVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nBinNodes</color> <color=#f92672>*</color> <color=#f8f8f2>binNoLNsWithVLSNs</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>mainUINs</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>mainWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nBinNodes</color> <color=#f92672>*</color> <color=#f8f8f2>binWithLNsAndVLSNs</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>mainUINs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>calcOffHeapNoLNsOrVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>mainNoLNsWithVLSNs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If all INs fit in main, then no off-heap cache is needed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainNoLNsOrVLSNs</color> <color=#f92672><=</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>offHeapNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nMainBINsNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nBinNodes</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>mainNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If not all BINs fit in main, then put as many BINs in main as</color>
<color=#75715e>     * possible, and the rest off-heap.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainSpare</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>mainDataSize</color> <color=#f92672>></color> <color=#f8f8f2>calcLevel2AndAboveSize</color><color=#f8f8f2>())</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainDataSize</color> <color=#f92672>-</color> <color=#f8f8f2>calcLevel2AndAboveSize</color><color=#f8f8f2>())</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>nMainBINs</color> <color=#f92672>=</color> <color=#f8f8f2>mainSpare</color> <color=#f92672>/</color> <color=#f8f8f2>binNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>nOffHeapBins</color> <color=#f92672>=</color> <color=#f8f8f2>nBinNodes</color> <color=#f92672>-</color> <color=#f8f8f2>nMainBINs</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>offHeapNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nOffHeapBins</color> <color=#f92672>*</color> <color=#f8f8f2>binOffHeapNoLNIds</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nMainBINsNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nMainBINs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>calcOffHeapWithLNsAndVLSNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If everything fits in main, then no off-heap cache is needed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainWithLNsAndVLSNs</color> <color=#f92672><=</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>offHeapWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nMainBINsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nBinNodes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nMainLNsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>binOffHeapLNs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>records</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>mainWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If LNs are not stored separately (they are embedded or duplicates</color>
<color=#75715e>     * are configured), then only internal nodes are relevant.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binOffHeapLNs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>offHeapWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nMainBINsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nMainBINsNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nMainLNsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If all BINs fit in main, then compute how many BINs will have main</color>
<color=#75715e>     * LNs and how many off-heap LNs. The number that have main LNs is</color>
<color=#75715e>     * the amount of main cache to spare (if all BINs had off-heap LNs)</color>
<color=#75715e>     * divided by the added size required to hold the LNs in one BIN.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainWithOffHeapLNIds</color> <color=#f92672>=</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>nBinNodes</color> <color=#f92672>*</color> <color=#f8f8f2>binOffHeapLNIds</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainWithOffHeapLNIds</color> <color=#f92672><=</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainSpare</color> <color=#f92672>=</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>mainDataSize</color> <color=#f92672>></color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainDataSize</color> <color=#f92672>-</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>nBINsWithMainLNs</color> <color=#f92672>=</color> <color=#f8f8f2>mainSpare</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>binWithLNsAndVLSNs</color> <color=#f92672>-</color> <color=#f8f8f2>binNoLNsOrVLSNs</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>nBINsWithOffHeapLNs</color> <color=#f92672>=</color> <color=#f8f8f2>nBinNodes</color> <color=#f92672>-</color> <color=#f8f8f2>nBINsWithMainLNs</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>offHeapWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nBINsWithOffHeapLNs</color> <color=#f92672>*</color> <color=#f8f8f2>binOffHeapLNs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nMainBINsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nMainBINsNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nMainLNsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nBINsWithMainLNs</color> <color=#f92672>*</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If not all BINs fit in main, then put as many BINs in main as</color>
<color=#75715e>     * possible, and the rest off-heap. Put all LNs off-heap.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>mainSpare</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>mainDataSize</color> <color=#f92672>></color> <color=#f8f8f2>calcLevel2AndAboveSize</color><color=#f8f8f2>())</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainDataSize</color> <color=#f92672>-</color> <color=#f8f8f2>calcLevel2AndAboveSize</color><color=#f8f8f2>())</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>nMainBINs</color> <color=#f92672>=</color> <color=#f8f8f2>mainSpare</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>binNoLNsOrVLSNs</color> <color=#f92672>+</color> <color=#f8f8f2>binOffHeapLNIds</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>nOffHeapBins</color> <color=#f92672>=</color> <color=#f8f8f2>nBinNodes</color> <color=#f92672>-</color> <color=#f8f8f2>nMainBINs</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>offHeapWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nOffHeapBins</color> <color=#f92672>*</color> <color=#f8f8f2>binOffHeapWithLNIds</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>nBinNodes</color> <color=#f92672>*</color> <color=#f8f8f2>binOffHeapLNs</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nMainBINsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>nMainBINs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nMainLNsWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>calcTreeSizes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeMaxEntries</color> <color=#f92672>!=</color> <color=#f8f8f2>binMaxEntries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"-binmax not currently supported because a per-BIN max is"</color>
              <color=#f92672>+</color> <color=#e6db74>" not implemented in the Btree, so we can't measure"</color>
              <color=#f92672>+</color> <color=#e6db74>" an actual BIN node with the given -binmax value"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>nodeAvg</color> <color=#f92672>==</color> <color=#f8f8f2>binAvg</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeAvg</color> <color=#f92672>></color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Entries per node ("</color> <color=#f92672>+</color> <color=#f8f8f2>nodeAvg</color> <color=#f92672>+</color> <color=#e6db74>") is greater than 0xFFFF"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Either a one or two byte key is used, depending on whether a single</color>
<color=#75715e>     * byte can hold the key for nodeAvg entries.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeAvg</color> <color=#f92672><=</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WriteOptions</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useTTL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>setTTL</color><color=#f8f8f2>(</color><color=#ae81ff>30</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>DAYS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Insert nodeAvg records into a single BIN. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>openDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>keyBytes</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>keyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>keyBytes</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>keyBytes</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>setKeyData</color><color=#f8f8f2>(</color><color=#f8f8f2>keyBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color>
              <color=#75715e>/*null, */</color><color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicates</color> <color=#f92672>?</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>DUP_DATA</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>NO_OVERWRITE</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Position a cursor at the first record to get the BIN. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>openCursor</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>OperationStatus</color> <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>(</color><color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>status</color> <color=#f92672>==</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>).</color><color=#a6e22e>getBIN</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Calculate BIN size including LNs. The recalcKeyPrefix and</color>
<color=#75715e>     * compactMemory methods are called to simulate normal operation.</color>
<color=#75715e>     * Normally prefixes are recalculated when a IN is split, and</color>
<color=#75715e>     * compactMemory is called after fetching a IN or evicting an LN.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>recalcKeyPrefix</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>compactMemory</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>binWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Evict all LNs so we can calculate BIN size without LNs.  This is</color>
<color=#75715e>     * simulated by calling partialEviction directly.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>prevSize</color> <color=#f92672>=</color> <color=#f8f8f2>getOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>partialEviction</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>binOffHeapLNs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>binOffHeapLNs</color> <color=#f92672>+=</color> <color=#f8f8f2>getOffHeapLNSize</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>getOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>prevSize</color> <color=#f92672>==</color> <color=#f8f8f2>binOffHeapLNs</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>binOffHeapLNIds</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapLNIdsMemorySize</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>partialEviction</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>binOffHeapLNs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>binOffHeapLNIds</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>hasCachedChildren</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>binNoLNsWithVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>binOffHeapLNIds</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Another variant is when VLSNs are cached, since they are evicted</color>
<color=#75715e>     * after the LNs in a separate step.  This is simulated by calling</color>
<color=#75715e>     * partialEviction a second time.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicates</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheVLSN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNCache</color><color=#f8f8f2>().</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNCache</color><color=#f8f8f2>().</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>partialEviction</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataSize</color> <color=#f92672><=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getMaxEmbeddedLN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNCache</color><color=#f8f8f2>().</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNCache</color><color=#f8f8f2>().</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* There are no LNs or VLSNs remaining. */</color>
    <color=#f8f8f2>binNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>binOffHeapLNIds</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * To calculate IN size, get parent/root IN and artificially fill the</color>
<color=#75715e>     * slots with nodeAvg entries.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>).</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>getRootINLatchedExclusive</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>insertEntry1</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color> <color=#75715e>/*blindInsertion*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>&</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>INSERT_SUCCESS</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>INSERT_SUCCESS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>recalcKeyPrefix</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>compactMemory</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>uinWithTargets</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>uinNoTargets</color> <color=#f92672>=</color> <color=#f8f8f2>uinWithTargets</color> <color=#f92672>-</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getTargets</color><color=#f8f8f2>().</color><color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>bytesFreed</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>doTestEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evictor</color><color=#f8f8f2>.</color><color=#a6e22e>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color><color=#f8f8f2>);</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>bytesFreed</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>binId</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>binId</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>binOffHeapWithLNIds</color> <color=#f92672>=</color> <color=#f8f8f2>getOffHeapBINSize</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>bytesFreed</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>stripLNs</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>binOffHeapNoLNIds</color> <color=#f92672>=</color> <color=#f8f8f2>getOffHeapBINSize</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>bytesFreed</color> <color=#f92672>==</color> <color=#f8f8f2>binOffHeapLNs</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>binOffHeapWithLNIds</color> <color=#f92672>-</color> <color=#f8f8f2>binOffHeapNoLNIds</color><color=#f8f8f2>);</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>setOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>binId</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>uinOffHeapBINIds</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapBINIdsMemorySize</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Cleanup to avoid assertions during env close. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nodeAvg</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>clearOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>binOffHeapWithLNIds</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>uinOffHeapBINIds</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getMainDataSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>).</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>getTreeMemoryUsage</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>getAllocator</color><color=#f8f8f2>().</color><color=#a6e22e>getUsedBytes</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapLNSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>memId</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapLNId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memId</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>getAllocator</color><color=#f8f8f2>().</color><color=#a6e22e>totalSize</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapBINSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lruId</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>lruId</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>memId</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>getMemId</color><color=#f8f8f2>(</color><color=#f8f8f2>lruId</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>memId</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>getAllocator</color><color=#f8f8f2>().</color><color=#a6e22e>totalSize</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setKeyData</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyBytes</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>keyOffset</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>fullKey</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fullKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>keySize</color> <color=#f92672>+</color> <color=#f8f8f2>dataSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fullKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>keySize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>+</color> <color=#f8f8f2>keyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#f8f8f2>fullKey</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Key doesn't fit, allowedLen="</color>
              <color=#f92672>+</color> <color=#f8f8f2>fullKey</color><color=#f8f8f2>.</color><color=#a6e22e>length</color>
              <color=#f92672>+</color> <color=#e6db74>" keyLen="</color>
              <color=#f92672>+</color> <color=#f8f8f2>keyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color>
              <color=#f92672>+</color> <color=#e6db74>" prefixLen="</color>
              <color=#f92672>+</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>keyBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>fullKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>finalKey</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>finalData</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>finalKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>keySize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>finalData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>dataSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>fullKey</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>finalKey</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>keySize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>fullKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>keySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>finalData</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>finalKey</color> <color=#f92672>=</color> <color=#f8f8f2>fullKey</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>finalData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>keyEntry</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>finalKey</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dataEntry</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>finalData</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Prints Java properties for information collected by calculateCacheSizes. Min/max sizes are</color>
<color=#75715e>   * output for compatibility with earlier versions; in the past, min and max were different values.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>printProperties</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"overhead="</color> <color=#f92672>+</color> <color=#f8f8f2>envOverhead</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"internalNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"internalNodesAndVersions="</color> <color=#f92672>+</color> <color=#f8f8f2>mainNoLNsWithVLSNs</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataSize</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"allNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>mainWithLNsAndVLSNs</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"minMainCache="</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainMinDataSize</color> <color=#f92672>+</color> <color=#f8f8f2>envOverhead</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"offHeapInternalNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>offHeapNoLNsOrVLSNs</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataSize</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"offHeapAllNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>offHeapWithLNsAndVLSNs</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"# Following are deprecated"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"minInternalNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"maxInternalNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataSize</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"minAllNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>mainWithLNsAndVLSNs</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"maxAllNodes="</color> <color=#f92672>+</color> <color=#f8f8f2>mainWithLNsAndVLSNs</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Prints information collected by calculateCacheSizes. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>printCacheSizes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>mainSuffix</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapCache</color> <color=#f92672>?</color> <color=#e6db74>": MAIN cache"</color> <color=#f8f8f2>:</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>offHeapSuffix</color> <color=#f92672>=</color> <color=#e6db74>": OFF-HEAP cache"</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"=== Environment Cache Overhead ==="</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>envOverhead</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>" minimum bytes"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
        <color=#e6db74>"To account for JE daemon operation, record locks, HA network "</color> <color=#f92672>+</color> <color=#e6db74>"connections, etc,"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"a larger amount is needed in practice."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"=== Database Cache Size ==="</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>MAIN_HEADER</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes only"</color> <color=#f92672>+</color> <color=#f8f8f2>mainSuffix</color><color=#f8f8f2>));</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>offHeapNoLNsOrVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes only"</color> <color=#f92672>+</color> <color=#f8f8f2>offHeapSuffix</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataSize</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>offHeapCache</color> <color=#f92672>&&</color> <color=#f8f8f2>mainNoLNsWithVLSNs</color> <color=#f92672>!=</color> <color=#f8f8f2>mainNoLNsOrVLSNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>mainNoLNsWithVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes and record versions"</color> <color=#f92672>+</color> <color=#f8f8f2>mainSuffix</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>mainWithLNsAndVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes and leaf nodes"</color> <color=#f92672>+</color> <color=#f8f8f2>mainSuffix</color><color=#f8f8f2>));</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>offHeapWithLNsAndVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes and leaf nodes"</color> <color=#f92672>+</color> <color=#f8f8f2>offHeapSuffix</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mainNoLNsOrVLSNs</color> <color=#f92672>==</color> <color=#f8f8f2>mainWithLNsAndVLSNs</color>
          <color=#f92672>&&</color> <color=#f8f8f2>offHeapNoLNsOrVLSNs</color> <color=#f92672>==</color> <color=#f8f8f2>offHeapWithLNsAndVLSNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
              <color=#e6db74>"\nNote that leaf nodes do not use additional memory"</color>
                  <color=#f92672>+</color> <color=#e6db74>" because the database is"</color>
                  <color=#f92672>+</color> <color=#e6db74>"\nconfigured for duplicates. In addition, record"</color>
                  <color=#f92672>+</color> <color=#e6db74>" versions are not applicable."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
              <color=#e6db74>"\nNote that leaf nodes do not use additional memory"</color>
                  <color=#f92672>+</color> <color=#e6db74>" because with a small"</color>
                  <color=#f92672>+</color> <color=#e6db74>"\ndata size, the LNs are embedded in the BINs."</color>
                  <color=#f92672>+</color> <color=#e6db74>" In addition, record versions"</color>
                  <color=#f92672>+</color> <color=#e6db74>"\n(if configured) are always cached in this mode."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>duplicates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"\nTo get leaf node sizing specify -data"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color> <color=#f92672>&&</color> <color=#f8f8f2>mainMinDataSize</color> <color=#f92672>></color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"\nWARNING: The information above applies to a data set of "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>records</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" records,"</color>
              <color=#f92672>+</color> <color=#e6db74>"\nnot the number of records specified, because the main"</color>
              <color=#f92672>+</color> <color=#e6db74>" cache size specified is "</color>
              <color=#f92672>+</color> <color=#e6db74>"\ntoo small to hold all upper INs. This prevents all"</color>
              <color=#f92672>+</color> <color=#e6db74>" internal nodes (or leaf"</color>
              <color=#f92672>+</color> <color=#e6db74>"\nnodes) from fitting into cache, and the data set was"</color>
              <color=#f92672>+</color> <color=#e6db74>" reduced accordingly. To"</color>
              <color=#f92672>+</color> <color=#e6db74>"\nfit all internal nodes in cache with the specified "</color>
              <color=#f92672>+</color> <color=#e6db74>" number of records, specify"</color>
              <color=#f92672>+</color> <color=#e6db74>"\na main cache size of at least "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>mainMinDataSize</color> <color=#f92672>+</color> <color=#f8f8f2>envOverhead</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" bytes."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"=== Calculated Btree Information ==="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeLevels</color><color=#f8f8f2>,</color> <color=#e6db74>"Btree levels"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>nUinNodes</color><color=#f8f8f2>,</color> <color=#e6db74>"Upper internal nodes"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>nBinNodes</color><color=#f8f8f2>,</color> <color=#e6db74>"Bottom internal nodes"</color><color=#f8f8f2>));</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"--- BINs and LNs in Main Cache vs Off-heap ---"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>nMainBINsNoLNsOrVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes only, BINs"</color> <color=#f92672>+</color> <color=#f8f8f2>mainSuffix</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>nBinNodes</color> <color=#f92672>-</color> <color=#f8f8f2>nMainBINsNoLNsOrVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes only, BINs"</color> <color=#f92672>+</color> <color=#f8f8f2>offHeapSuffix</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>nMainBINsWithLNsAndVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes and leaf nodes, BINs"</color> <color=#f92672>+</color> <color=#f8f8f2>mainSuffix</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>line</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>nBinNodes</color> <color=#f92672>-</color> <color=#f8f8f2>nMainBINsWithLNsAndVLSNs</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Internal nodes and leaf nodes, BINs"</color> <color=#f92672>+</color> <color=#f8f8f2>offHeapSuffix</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>line</color><color=#f8f8f2>(</color><color=#f8f8f2>nMainLNsWithLNsAndVLSNs</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes and leaf nodes, LNs"</color> <color=#f92672>+</color> <color=#f8f8f2>mainSuffix</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>line</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>records</color> <color=#f92672>-</color> <color=#f8f8f2>nMainLNsWithLNsAndVLSNs</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Internal nodes and leaf nodes, LNs"</color> <color=#f92672>+</color> <color=#f8f8f2>offHeapSuffix</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"For further information see the DbCacheSize javadoc."</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>line</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>num</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#ae81ff>100</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>column</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>num</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>COLUMN_SEPARATOR</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>comment</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>column</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>str</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>start</color> <color=#f92672>+</color> <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>MIN_COLUMN_WIDTH</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>' '</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>str</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For testing, insert the specified data set and initialize measuredMainNoLNsWithVLSNs and</color>
<color=#75715e>   * measuredMainWithLNsAndVLSNs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>measure</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>openMeasureEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*createNew*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*setMainSize*/</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>ACCUMULATED_LIMIT</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>openDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Measuring with maximum cache size: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>().</color><color=#a6e22e>getCacheSize</color><color=#f8f8f2>())</color>
                <color=#f92672>+</color> <color=#e6db74>" and (for off-heap) main data size: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>mainDataSize</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>insertRecords</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>openMeasureEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*createNew*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*setMainSize*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>openDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>readRecords</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*readData*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>evictMainToDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>measuredMainNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"After read keys only, evict main to size"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>measuredOffHeapNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>));</color>

        <color=#f8f8f2>readRecords</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*readData*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>evictMainToDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>mainDataSize</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>measuredMainWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"After read all, evict main to size"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>measuredOffHeapWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>));</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>measuredMainWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"After insert"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>trimLNs</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>measuredMainNoLNsWithVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"After trimLNs"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>trimVLSNs</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>measuredMainNoLNsOrVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"After trimVLSNs"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>openMeasureEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*createNew*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>offHeapCache</color> <color=#75715e>/*setMainSize*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>openDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>PreloadStatus</color> <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>preloadRecords</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*loadLNs*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>preloadMainNoLNsOrVLSNs</color> <color=#f92672>=</color>
          <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes only after preload ("</color> <color=#f92672>+</color> <color=#f8f8f2>status</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>assumeEvictLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>preloadMainWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>preloadMainNoLNsOrVLSNs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>status</color> <color=#f92672>=</color> <color=#f8f8f2>preloadRecords</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*loadLNs*/</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>preloadMainWithLNsAndVLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"All nodes after preload ("</color> <color=#f92672>+</color> <color=#f8f8f2>status</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>trimLNs</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>preloadMainNoLNsWithVLSNs</color> <color=#f92672>=</color>
            <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"Internal nodes plus VLSNs after preload ("</color> <color=#f92672>+</color> <color=#f8f8f2>status</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>ACCUMULATED_LIMIT</color> <color=#f92672>=</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>ACCUMULATED_LIMIT_DEFAULT</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not propagate exception thrown by Environment.close if</color>
<color=#75715e>       * another exception is currently in flight.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>env</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>openMeasureEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>createNew</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>setMainSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>setMainSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setCacheSize</color><color=#f8f8f2>(</color><color=#f8f8f2>mainCacheSize</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Normally the main cache size is left "unlimited", meaning that</color>
<color=#75715e>       * log buffers will be maximum sized (1 MB each). Here we limit the</color>
<color=#75715e>       * main cache size in order to use the off-heap cache. But with a</color>
<color=#75715e>       * smaller main cache, the log buffers will be smaller. Use maximum</color>
<color=#75715e>       * sized log buffers so we can compare totals with the case where</color>
<color=#75715e>       * we don't set the cache size.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TOTAL_BUFFER_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672><<</color> <color=#ae81ff>20</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setCachePercent</color><color=#f8f8f2>(</color><color=#ae81ff>90</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>openEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>createNew</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>openCalcEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>createNew</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* The amount of disk space needed is quite small. */</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>FREE_DISK</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#ae81ff>1L</color> <color=#f92672><<</color> <color=#ae81ff>20</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>openEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>createNew</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>openEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>createNew</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>mkTempDir</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>createNew</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>emptyTempDir</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setDurability</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_NO_SYNC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setAllowCreate</color><color=#f8f8f2>(</color><color=#f8f8f2>createNew</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Daemons interfere with cache size measurements. */</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_CLEANER</color><color=#f8f8f2>,</color> <color=#e6db74>"false"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_CHECKPOINTER</color><color=#f8f8f2>,</color> <color=#e6db74>"false"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_IN_COMPRESSOR</color><color=#f8f8f2>,</color> <color=#e6db74>"false"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_EVICTOR</color><color=#f8f8f2>,</color> <color=#e6db74>"false"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_OFFHEAP_EVICTOR</color><color=#f8f8f2>,</color> <color=#e6db74>"false"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_VERIFIER</color><color=#f8f8f2>,</color> <color=#e6db74>"false"</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Evict in small chunks. */</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_EVICT_BYTES</color><color=#f8f8f2>,</color> <color=#e6db74>"1024"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>newEnv</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicated</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>repEnvClass</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"com.sleepycat.je.rep.utilint.DbCacheSizeRepEnv"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>DbCacheSizeRepEnv</color> <color=#f8f8f2>repEnv</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbCacheSizeRepEnv</color><color=#f8f8f2>)</color> <color=#f8f8f2>repEnvClass</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>newEnv</color> <color=#f92672>=</color> <color=#f8f8f2>repEnv</color><color=#f8f8f2>.</color><color=#a6e22e>open</color><color=#f8f8f2>(</color><color=#f8f8f2>tempDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>repParams</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f92672>|</color> <color=#f8f8f2>InstantiationException</color> <color=#f92672>|</color> <color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>repParams</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Cannot set replication params in a standalone "</color>
                <color=#f92672>+</color> <color=#e6db74>"environment.  May add -replicated."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>newEnv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Environment</color><color=#f8f8f2>(</color><color=#f8f8f2>tempDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * LSN compaction is typically effective (in a realistic data set) only</color>
<color=#75715e>     * when the file size fits in 3 bytes and sequential keys are written.</color>
<color=#75715e>     * Since a tiny data set is use for estimating, and a small data set</color>
<color=#75715e>     * for testing, we disable the compact representation when it is</color>
<color=#75715e>     * unlikely to be effective.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileSize</color> <color=#f92672>=</color>
        <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>newEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>().</color><color=#a6e22e>getConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_MAX</color><color=#f8f8f2>));</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>fileSize</color> <color=#f92672>></color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FILE_OFFSET</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>orderedInsertion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>disableCompactLsns</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Preallocate 1st chunk of LRU entries, so it is counted in env</color>
<color=#75715e>     * overhead.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>newEnv</color><color=#f8f8f2>).</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>preallocateLRUEntries</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>newEnv</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>mkTempDir</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tempDir</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tempDir</color> <color=#f92672>=</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>createTempFile</color><color=#f8f8f2>(</color><color=#e6db74>"DbCacheSize"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>/* createTempFile creates a file, but we want a directory. */</color>
      <color=#f8f8f2>tempDir</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>tempDir</color><color=#f8f8f2>.</color><color=#a6e22e>mkdir</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>emptyTempDir</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tempDir</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>children</color> <color=#f92672>=</color> <color=#f8f8f2>tempDir</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>children</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>child</color> <color=#f8f8f2>:</color> <color=#f8f8f2>children</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Database</color> <color=#a6e22e>openDatabase</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>createNew</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setAllowCreate</color><color=#f8f8f2>(</color><color=#f8f8f2>createNew</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setExclusiveCreate</color><color=#f8f8f2>(</color><color=#f8f8f2>createNew</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setNodeMaxEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeMaxEntries</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setKeyPrefixing</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setSortedDuplicates</color><color=#f8f8f2>(</color><color=#f8f8f2>duplicates</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>openDatabase</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#e6db74>"foo"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Inserts records and ensures that no eviction occurs. LNs (and VLSNs) are left intact. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>insertRecords</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastKey</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>records</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>lastKeyBytes</color> <color=#f92672>=</color> <color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>lastKey</color><color=#f8f8f2>).</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxKeyBytes</color> <color=#f92672>=</color> <color=#f8f8f2>lastKeyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>keyOffset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>keyOffset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Calculate prefix length for generated keys and adjust key offset</color>
<color=#75715e>       * to produce the desired prefix length.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nodeAvg</color> <color=#f92672>=</color>
          <color=#f8f8f2>orderedInsertion</color> <color=#f92672>?</color> <color=#f8f8f2>nodeMaxEntries</color> <color=#f8f8f2>:</color> <color=#f8f8f2>((</color><color=#f8f8f2>nodeMaxEntries</color> <color=#f92672>*</color> <color=#f8f8f2>DEFAULT_DENSITY</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>100</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>prevKey</color> <color=#f92672>=</color> <color=#f8f8f2>lastKey</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeAvg</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>prevKeyBytes</color> <color=#f92672>=</color> <color=#f8f8f2>padLeft</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>prevKey</color><color=#f8f8f2>).</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>(),</color> <color=#f8f8f2>maxKeyBytes</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>calcPrefix</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>calcPrefix</color> <color=#f92672><</color> <color=#f8f8f2>lastKeyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color>
          <color=#f92672>&&</color> <color=#f8f8f2>calcPrefix</color> <color=#f92672><</color> <color=#f8f8f2>prevKeyBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color>
          <color=#f92672>&&</color> <color=#f8f8f2>lastKeyBytes</color><color=#f92672>[</color><color=#f8f8f2>calcPrefix</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>prevKeyBytes</color><color=#f92672>[</color><color=#f8f8f2>calcPrefix</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>calcPrefix</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>keyOffset</color> <color=#f92672>=</color> <color=#f8f8f2>keyPrefix</color> <color=#f92672>-</color> <color=#f8f8f2>calcPrefix</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Generate random keys. */</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>rndKeys</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>orderedInsertion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>rndKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>lastKey</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rndKeys</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>shuffle</color><color=#f8f8f2>(</color><color=#f8f8f2>rndKeys</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Random</color><color=#f8f8f2>(</color><color=#ae81ff>123</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WriteOptions</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useTTL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>setTTL</color><color=#f8f8f2>(</color><color=#ae81ff>30</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>DAYS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>beginTransaction</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>openCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>keyVal</color> <color=#f92672>=</color> <color=#f8f8f2>orderedInsertion</color> <color=#f92672>?</color> <color=#f8f8f2>i</color> <color=#f8f8f2>:</color> <color=#f8f8f2>rndKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyBytes</color> <color=#f92672>=</color> <color=#f8f8f2>padLeft</color><color=#f8f8f2>(</color><color=#f8f8f2>BigInteger</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>keyVal</color><color=#f8f8f2>).</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>(),</color> <color=#f8f8f2>maxKeyBytes</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>setKeyData</color><color=#f8f8f2>(</color><color=#f8f8f2>keyBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicates</color> <color=#f92672>?</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>DUP_DATA</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>NO_OVERWRITE</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>orderedInsertion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>i</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Could not insert"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>%</color> <color=#ae81ff>10000</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>checkForEviction</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>commit</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>checkForEviction</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Checkpoint to speed recovery and reset the memory budget. */</color>
    <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>checkpoint</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>CheckpointConfig</color><color=#f8f8f2>().</color><color=#a6e22e>setForce</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>));</color>

    <color=#75715e>/* Let's be sure the memory budget is updated. */</color>
    <color=#f8f8f2>iterateBINs</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>BINVisitor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>updateMemoryBudget</color><color=#f8f8f2>();</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Reads all keys, optionally reading the data. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readRecords</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>readData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dataEntry</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReadOptions</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>assumeEvictLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>EVICT_LN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>openCursor</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkForEviction</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>recNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentStats</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapNodesTargeted</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"Out of off-heap cache"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"*** Ran out of off-heap cache at record "</color>
              <color=#f92672>+</color> <color=#f8f8f2>recNum</color>
              <color=#f92672>+</color> <color=#e6db74>" -- try increasing off-heap cache size ***"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNNodesTargeted</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#e6db74>"Out of main cache"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"*** Ran out of main cache at record "</color>
              <color=#f92672>+</color> <color=#f8f8f2>recNum</color>
              <color=#f92672>+</color> <color=#e6db74>" -- try increasing Java heap size ***"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>trimLNs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>iterateBINs</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>BINVisitor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>evictLNs</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>updateMemoryBudget</color><color=#f8f8f2>();</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>trimVLSNs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>iterateBINs</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>BINVisitor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>discardVLSNCache</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>updateMemoryBudget</color><color=#f8f8f2>();</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>evictMainToDataSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getMainDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>())</color> <color=#f92672><=</color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>keepGoing</color> <color=#f92672>=</color>
        <color=#f8f8f2>iterateBINs</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>BINVisitor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
              <color=#a6e22e>@Override</color>
              <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>evictLNs</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>discardVLSNCache</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>updateMemoryBudget</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>getMainDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>())</color> <color=#f92672>></color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>keepGoing</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>()).</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>keepGoing</color> <color=#f92672>=</color>
        <color=#f8f8f2>iterateBINs</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>BINVisitor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
              <color=#a6e22e>@Override</color>
              <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>doTestEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evictor</color><color=#f8f8f2>.</color><color=#a6e22e>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>getMainDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>())</color> <color=#f92672>></color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>

    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>keepGoing</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>interface</color> <color=#a6e22e>BINVisitor</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>iterateBINs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>BINVisitor</color> <color=#f8f8f2>visitor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>openCursor</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>BIN</color> <color=#f8f8f2>prevBin</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>keepGoing</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>keepGoing</color>
        <color=#f92672>&&</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>).</color><color=#a6e22e>getBIN</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#f8f8f2>prevBin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevBin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>prevBin</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>keepGoing</color> <color=#f92672>=</color> <color=#f8f8f2>visitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>prevBin</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>prevBin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatchIfOwner</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>prevBin</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keepGoing</color> <color=#f92672>&&</color> <color=#f8f8f2>prevBin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>prevBin</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>visitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>prevBin</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>prevBin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>keepGoing</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Pads the given array with zeros on the left, and returns an array of the given size. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>padLeft</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color> <color=#f92672>-</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Preloads the database. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>PreloadStatus</color> <color=#a6e22e>preloadRecords</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>loadLNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Thread</color> <color=#f8f8f2>thread</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>thread</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                  <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>);</color>
                  <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
                  <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#ae81ff>5</color> <color=#f92672>*</color> <color=#ae81ff>1000</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                  <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>};</color>
      <color=#f8f8f2>thread</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>PreloadStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>().</color><color=#a6e22e>setLoadLNs</color><color=#f8f8f2>(</color><color=#f8f8f2>loadLNs</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>thread</color><color=#f8f8f2>.</color><color=#a6e22e>interrupt</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>thread</color><color=#f8f8f2>.</color><color=#a6e22e>join</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeExceptionWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * When preloading with an off-heap cache, the main cache will overflow</color>
<color=#75715e>     * a little by design. We evict here to bring it down below the</color>
<color=#75715e>     * maximum, and clear the stats so that the getStats method in this</color>
<color=#75715e>     * class doesn't complain about the eviction later on.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>evictMemory</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getStatus</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the Btree size, and prints a few other stats for testing. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color> <color=#f92672>+</color> <color=#e6db74>':'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentStats</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>dataSize</color> <color=#f92672>=</color> <color=#f8f8f2>getMainDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"MainCache= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheTotalBytes</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>" Data= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>dataSize</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" BINs= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNCachedBINs</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>" UINs= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNCachedUpperINs</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>" CacheMiss= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNCacheMiss</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>" OffHeapCache= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapTotalBytes</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>" OhLNs= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCachedLNs</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>" OhBIN= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCachedBINs</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>" OhBINDeltas= "</color>
              <color=#f92672>+</color> <color=#f8f8f2>INT_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCachedBINDeltas</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getNNodesTargeted</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"*** All records did not fit in the cache ***"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapNodesTargeted</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"*** All records did not fit in the off-heap cache ***"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>