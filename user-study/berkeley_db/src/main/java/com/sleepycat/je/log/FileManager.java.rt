<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.log</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentFailureReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.FileHeaderEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.ClosedChannelException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.FileChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.FileLock</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.OverlappingFileLockException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicLong</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.locks.ReentrantLock</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.log.LogStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/** The FileManager presents the abstraction of one contiguous file. It doles out LSNs. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>FileManager</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>COUNT_READ</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>COUNT_WRITE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>COUNT_FORCE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>FileMode</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>READ_MODE</color><color=#f8f8f2>(</color><color=#e6db74>"r"</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>),</color>
    <color=#f8f8f2>READWRITE_MODE</color><color=#f8f8f2>(</color><color=#e6db74>"rw"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>),</color>
    <color=#f8f8f2>READWRITE_ODSYNC_MODE</color><color=#f8f8f2>(</color><color=#e6db74>"rwd"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>),</color>
    <color=#f8f8f2>READWRITE_OSYNC_MODE</color><color=#f8f8f2>(</color><color=#e6db74>"rws"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileModeValue</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isWritable</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>FileMode</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fileModeValue</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isWritable</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fileModeValue</color> <color=#f92672>=</color> <color=#f8f8f2>fileModeValue</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>isWritable</color> <color=#f92672>=</color> <color=#f8f8f2>isWritable</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getModeValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fileModeValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isWritable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>isWritable</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The number of writes that have been performed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * public so that unit tests can diddle them.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#f8f8f2>WRITE_COUNT</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The write count value where we should stop or throw.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#f8f8f2>STOP_ON_WRITE_COUNT</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * If we're throwing, then throw on write #'s WRITE_COUNT through</color>
<color=#75715e>   * WRITE_COUNT + N_BAD_WRITES - 1 (inclusive).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#f8f8f2>N_BAD_WRITES</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * If true, then throw an IOException on write #'s WRITE_COUNT through</color>
<color=#75715e>   * WRITE_COUNT + N_BAD_WRITES - 1 (inclusive).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>THROW_ON_WRITE</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>JE_SUFFIX</color> <color=#f92672>=</color> <color=#e6db74>".jdb"</color><color=#f8f8f2>;</color> <color=#75715e>// regular log files</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>DEL_SUFFIX</color> <color=#f92672>=</color> <color=#e6db74>".del"</color><color=#f8f8f2>;</color> <color=#75715e>// cleaned files</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>BAD_SUFFIX</color> <color=#f92672>=</color> <color=#e6db74>".bad"</color><color=#f8f8f2>;</color> <color=#75715e>// corrupt files</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOCK_FILE</color> <color=#f92672>=</color> <color=#e6db74>"je.lck"</color><color=#f8f8f2>;</color> <color=#75715e>// lock file</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>DEL_SUFFIXES</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>DEL_SUFFIX</color><color=#f8f8f2>};</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>JE_SUFFIXES</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>};</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>JE_AND_DEL_SUFFIXES</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEL_SUFFIX</color><color=#f8f8f2>};</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The suffix used to denote a file that is in the process of being</color>
<color=#75715e>   * transferred during a network backup. The file may not have been</color>
<color=#75715e>   * completely transferred, or its digest verified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TMP_SUFFIX</color> <color=#f92672>=</color> <color=#e6db74>".tmp"</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The suffix used to rename files out of the way, if they are being</color>
<color=#75715e>   * retained during a backup. Note that the suffix is used in conjunction</color>
<color=#75715e>   * with a backup number as described in <code>NetworkBackup</code></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>BUP_SUFFIX</color> <color=#f92672>=</color> <color=#e6db74>".bup"</color><color=#f8f8f2>;</color>

  <color=#75715e>/* May be set to false to speed unit tests. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>syncAtFileEnd</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxFileSize</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f8f8f2>;</color>

  <color=#75715e>/* True if .del files should be included in the list of log files. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>includeDeletedFiles</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* File cache */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileCache</color> <color=#f8f8f2>fileCache</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>FileCacheWarmer</color> <color=#f8f8f2>fileCacheWarmer</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The channel and lock for the je.lck file. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>lockFile</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FileChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FileLock</color> <color=#f8f8f2>envLock</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FileLock</color> <color=#f8f8f2>exclLock</color><color=#f8f8f2>;</color>

  <color=#75715e>/* True if all files should be opened readonly. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Handles onto log position */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>long</color> <color=#f8f8f2>currentFileNum</color><color=#f8f8f2>;</color> <color=#75715e>// number of the current file</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>long</color> <color=#f8f8f2>nextAvailableLsn</color><color=#f8f8f2>;</color> <color=#75715e>// the next LSN available</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>long</color> <color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>;</color> <color=#75715e>// last LSN used in the current file</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forceNewFile</color><color=#f8f8f2>;</color> <color=#75715e>// Force new file on next write</color>

  <color=#75715e>/* endOfLog is used for writes and fsyncs to the end of the log. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEndFileDescriptor</color> <color=#f8f8f2>endOfLog</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * When we bump the LSNs over to a new file, we must remember the last LSN</color>
<color=#75715e>   * of the previous file so we can set the prevOffset field of the file</color>
<color=#75715e>   * header appropriately. We have to save it in a map because there's a time</color>
<color=#75715e>   * lag between when we know what the last LSN is and when we actually do</color>
<color=#75715e>   * the file write, because LSN bumping is done before we get a write</color>
<color=#75715e>   * buffer.  This map is keyed by file num->last LSN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>perFileLastUsedLsn</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * True if we should use the Write Queue.  This queue is enabled by default</color>
<color=#75715e>   * and contains any write() operations which were attempted but would have</color>
<color=#75715e>   * blocked because an fsync() or another write() was in progress at the</color>
<color=#75715e>   * time.  The operations on the Write Queue are later executed by the next</color>
<color=#75715e>   * operation that is able to grab the fsync latch.  File systems like ext3</color>
<color=#75715e>   * need this queue in order to achieve reasonable throughput since it</color>
<color=#75715e>   * acquires an exclusive mutex on the inode during any IO operation</color>
<color=#75715e>   * (seek/read/write/fsync).  OS's like Windows and Solaris do not since</color>
<color=#75715e>   * they are able to handle concurrent IO operations on a single file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useWriteQueue</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The starting size of the Write Queue. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>writeQueueSize</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Use O_DSYNC to open JE log files.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useODSYNC</color><color=#f8f8f2>;</color>

  <color=#75715e>/* public for unit tests. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>VERIFY_CHECKSUMS</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/** {@link EnvironmentParams#LOG_FSYNC_TIME_LIMIT}. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>fSyncTimeLimit</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Non-0 means to use envHome/data001 through envHome/data00N for the</color>
<color=#75715e>   * environment directories, where N is nDataDirs.  Distribute *.jdb files</color>
<color=#75715e>   * through dataNNN directories round-robin.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nDataDirs</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Last file to which any IO was done.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#f8f8f2>lastFileNumberTouched</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Current file offset of lastFile.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#f8f8f2>lastFileTouchedOffset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For IO stats, this is a measure of what is "close enough" to constitute</color>
<color=#75715e>   * a sequential IO vs a random IO. 1MB for now.  Generally a seek within a</color>
<color=#75715e>   * few tracks of the current disk track is "fast" and only requires a</color>
<color=#75715e>   * single rotational latency.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>ADJACENT_TRACK_SEEK_DELTA</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>20</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to detect unexpected file deletion.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileDeletionDetector</color> <color=#f8f8f2>fdd</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Stats</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nRandomReads</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nRandomWrites</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nSequentialReads</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nSequentialWrites</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nRandomReadBytes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nRandomWriteBytes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nSequentialReadBytes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nSequentialWriteBytes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>nFileOpens</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>nOpenFiles</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nBytesReadFromWriteQueue</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nBytesWrittenFromWriteQueue</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nReadsFromWriteQueue</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nWritesFromWriteQueue</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nWriteQueueOverflow</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nWriteQueueOverflowFailures</color><color=#f8f8f2>;</color>
  <color=#75715e>/* all fsyncs, includes those issued for group commit */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nLogFSyncs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nFSyncTime</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LongMaxZeroStat</color> <color=#f8f8f2>nFSyncMaxTime</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set up the file cache and initialize the file manager to point to the beginning of the log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dbEnvHome environment home directory</color>
<color=#75715e>   * @throws IllegalArgumentException via Environment ctor</color>
<color=#75715e>   * @throws EnvironmentLockedException via Environment ctor</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FileManager</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentLockedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbEnvHome</color> <color=#f92672>=</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>readOnly</color> <color=#f92672>=</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>stats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>LogStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>FILEMGR_GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>FILEMGR_GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nRandomReads</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_RANDOM_READS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nRandomWrites</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_RANDOM_WRITES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nSequentialReads</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_SEQUENTIAL_READS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nSequentialWrites</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_SEQUENTIAL_WRITES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nRandomReadBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_RANDOM_READ_BYTES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nRandomWriteBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_RANDOM_WRITE_BYTES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nSequentialReadBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_SEQUENTIAL_READ_BYTES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nSequentialWriteBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_SEQUENTIAL_WRITE_BYTES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nFileOpens</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_FILE_OPENS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nOpenFiles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_OPEN_FILES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nBytesReadFromWriteQueue</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_BYTES_READ_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nBytesWrittenFromWriteQueue</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_BYTES_WRITTEN_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nReadsFromWriteQueue</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_READS_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nWritesFromWriteQueue</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_WRITES_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nWriteQueueOverflow</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_WRITEQUEUE_OVERFLOW</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nWriteQueueOverflowFailures</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_WRITEQUEUE_OVERFLOW_FAILURES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nLogFSyncs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILEMGR_LOG_FSYNCS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nFSyncTime</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>GRPCMGR_FSYNC_TIME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nFSyncMaxTime</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongMaxZeroStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>GRPCMGR_FSYNC_MAX_TIME</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Read configurations. */</color>
      <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>maxFileSize</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_MAX</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>useWriteQueue</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_USE_WRITE_QUEUE</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>writeQueueSize</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_WRITE_QUEUE_SIZE</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>useODSYNC</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_USE_ODSYNC</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>VERIFY_CHECKSUMS</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERIFY_CHECKSUMS</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>fSyncTimeLimit</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FSYNC_TIME_LIMIT</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>nDataDirs</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_N_DATA_DIRECTORIES</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbEnvDataDirs</color> <color=#f92672>=</color> <color=#f8f8f2>gatherDataDirs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkNoDataDirs</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dbEnvDataDirs</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isMemOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Environment home "</color> <color=#f92672>+</color> <color=#f8f8f2>dbEnvHome</color> <color=#f92672>+</color> <color=#e6db74>" doesn't exist"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If this is an arbiter take an exclusive lock.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>isReadOnly</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isArbiter</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>lockEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentLockedException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#e6db74>"The environment cannot be locked for "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>isReadOnly</color> <color=#f92672>?</color> <color=#e6db74>"shared"</color> <color=#f8f8f2>:</color> <color=#e6db74>"single writer"</color><color=#f8f8f2>)</color>
                  <color=#f92672>+</color> <color=#e6db74>" access."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Cache of files. */</color>
      <color=#f8f8f2>fileCache</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileCache</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Start out as if no log existed. */</color>
      <color=#f8f8f2>currentFileNum</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nextAvailableLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>currentFileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>firstLogEntryOffset</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>lastUsedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>perFileLastUsedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>synchronizedMap</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>());</color>
      <color=#f8f8f2>endOfLog</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogEndFileDescriptor</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>forceNewFile</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>stopOnWriteCountName</color> <color=#f92672>=</color> <color=#e6db74>"je.debug.stopOnWriteCount"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>stopOnWriteCountProp</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>stopOnWriteCountName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopOnWriteCountProp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>STOP_ON_WRITE_COUNT</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>stopOnWriteCountProp</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Could not parse: "</color> <color=#f92672>+</color> <color=#f8f8f2>stopOnWriteCountName</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>stopOnWriteActionName</color> <color=#f92672>=</color> <color=#e6db74>"je.debug.stopOnWriteAction"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>stopOnWriteActionProp</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>stopOnWriteActionName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopOnWriteActionProp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopOnWriteActionProp</color><color=#f8f8f2>.</color><color=#a6e22e>compareToIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"throw"</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>THROW_ON_WRITE</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopOnWriteActionProp</color><color=#f8f8f2>.</color><color=#a6e22e>compareToIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"stop"</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>THROW_ON_WRITE</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Unknown value for: "</color> <color=#f92672>+</color> <color=#f8f8f2>stopOnWriteActionName</color> <color=#f92672>+</color> <color=#f8f8f2>stopOnWriteActionProp</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Boolean</color> <color=#f8f8f2>logFileDeleteDetect</color> <color=#f92672>=</color>
          <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DETECT_FILE_DELETE</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isMemOnly</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>logFileDeleteDetect</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fdd</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileDeletionDetector</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fdd</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Klockwork - ok</color>
<color=#75715e>           * Eat it, we want to throw the original exception.</color>
<color=#75715e>           */</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the file manager's "end of log".</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nextAvailableLsn LSN to be used for the next log entry</color>
<color=#75715e>   * @param lastUsedLsn last LSN to have a valid entry, may be null</color>
<color=#75715e>   * @param prevOffset value to use for the prevOffset of the next entry. If the beginning of the</color>
<color=#75715e>   *     file, this is 0.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLastPosition</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>nextAvailableLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>prevOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lastUsedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>perFileLastUsedLsn</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>),</color> <color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nextAvailableLsn</color> <color=#f92672>=</color> <color=#f8f8f2>nextAvailableLsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>currentFileNum</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nextAvailableLsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * May be used to disable sync at file end to speed unit tests. Must only be used for unit</color>
<color=#75715e>   * testing, since log corruption may result.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSyncAtFileEnd</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>sync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>syncAtFileEnd</color> <color=#f92672>=</color> <color=#f8f8f2>sync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * File management</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * public for cleaner.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of the first file in this environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Long</color> <color=#a6e22e>getFirstFileNum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getFileNum</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the number of the last file in this environment. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Long</color> <color=#a6e22e>getLastFileNum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getFileNum</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the highest (current) file number. Note that this is unsynchronized, so if it is called</color>
<color=#75715e>   * outside the log write latch it is only valid as an approximation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCurrentFileNum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>currentFileNum</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit tests. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getUseWriteQueue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useWriteQueue</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For assertions that check whether a file is valid or has been deleted via log cleaning. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFileValid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the file is the current file, it may be buffered and not yet</color>
<color=#75715e>     * created.  If the env is memory-only, we will never create or delete</color>
<color=#75715e>     * log files.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color> <color=#f92672>==</color> <color=#f8f8f2>currentFileNum</color> <color=#f92672>||</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isMemOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check for file existence. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color> <color=#f92672>=</color> <color=#f8f8f2>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileManager</color><color=#f8f8f2>.</color><color=#a6e22e>JE_SUFFIX</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setIncludeDeletedFiles</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>includeDeletedFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>includeDeletedFiles</color> <color=#f92672>=</color> <color=#f8f8f2>includeDeletedFiles</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get all JE file numbers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an array of all JE file numbers.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Long</color><color=#f92672>[]</color> <color=#a6e22e>getAllFileNumbers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Get all the names in sorted order. */</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color> <color=#f92672>=</color> <color=#f8f8f2>listFileNames</color><color=#f8f8f2>(</color><color=#f8f8f2>JE_SUFFIXES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Long</color><color=#f92672>[]</color> <color=#f8f8f2>nums</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Long</color><color=#f92672>[</color><color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nums</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>names</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>num</color> <color=#f92672>=</color> <color=#f8f8f2>nums</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>getNumFromName</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dbEnvDataDirsIdx</color> <color=#f92672>=</color> <color=#f8f8f2>getDataDirIndexFromName</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbEnvDataDirsIdx</color> <color=#f92672>!=</color> <color=#f8f8f2>(</color><color=#f8f8f2>num</color> <color=#f92672>%</color> <color=#f8f8f2>nDataDirs</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Found file "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>name</color>
                  <color=#f92672>+</color> <color=#e6db74>" but it should have been in "</color>
                  <color=#f92672>+</color> <color=#e6db74>"data directory "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbEnvDataDirsIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
                  <color=#f92672>+</color> <color=#e6db74>". Perhaps it was moved or restored incorrectly?"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nums</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get the next file number before/after currentFileNum.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param curFile the file we're at right now. Note that it may not exist, if it's been cleaned</color>
<color=#75715e>   *     and renamed.</color>
<color=#75715e>   * @param forward if true, we want the next larger file, if false we want the previous file</color>
<color=#75715e>   * @return null if there is no following file, or if filenum doesn't exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Long</color> <color=#a6e22e>getFollowingFileNum</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>curFile</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forward</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * First try the next/prev file number without listing all files. This</color>
<color=#75715e>     * efficiently supports an important use case: reading files during</color>
<color=#75715e>     * recovery, where there are no gaps due to log cleaning. If there is a</color>
<color=#75715e>     * gap due to log cleaning, fall through and get a list of all files.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>tryFile</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forward</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curFile</color> <color=#f92672>==</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>tryFile</color> <color=#f92672>=</color> <color=#f8f8f2>curFile</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curFile</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>tryFile</color> <color=#f92672>=</color> <color=#f8f8f2>curFile</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>tryName</color> <color=#f92672>=</color> <color=#f8f8f2>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>tryFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>tryName</color><color=#f8f8f2>)).</color><color=#a6e22e>isFile</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>tryFile</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Get all the names in sorted order. */</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color> <color=#f92672>=</color> <color=#f8f8f2>listFileNames</color><color=#f8f8f2>(</color><color=#f8f8f2>JE_SUFFIXES</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Search for the current file. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>searchName</color> <color=#f92672>=</color> <color=#f8f8f2>getFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>curFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>foundIdx</color> <color=#f92672>=</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>binarySearch</color><color=#f8f8f2>(</color><color=#f8f8f2>names</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchName</color><color=#f8f8f2>,</color> <color=#f8f8f2>stringComparator</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>foundTarget</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>foundIdx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forward</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>foundIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>foundIdx</color><color=#f92672>--</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * currentFileNum not found (might have been cleaned). FoundIdx</color>
<color=#75715e>       * will be (-insertionPoint - 1).</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>foundIdx</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>foundIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>forward</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>foundIdx</color><color=#f92672>--</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* The current fileNum is found, return the next or prev file. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forward</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>foundIdx</color> <color=#f92672><</color> <color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>foundTarget</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>forward</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>foundIdx</color> <color=#f92672>></color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>foundTarget</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>foundTarget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>getNumFromName</color><color=#f8f8f2>(</color><color=#f8f8f2>names</color><color=#f92672>[</color><color=#f8f8f2>foundIdx</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if there are any files at all. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>filesExist</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color> <color=#f92672>=</color> <color=#f8f8f2>listFileNames</color><color=#f8f8f2>(</color><color=#f8f8f2>JE_SUFFIXES</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get the first or last file number in the set of JE files.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param first if true, get the first file, else get the last file</color>
<color=#75715e>   * @return the file number or null if no files exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Long</color> <color=#a6e22e>getFileNum</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color> <color=#f92672>=</color> <color=#f8f8f2>listFileNames</color><color=#f8f8f2>(</color><color=#f8f8f2>JE_SUFFIXES</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNumFromName</color><color=#f8f8f2>(</color><color=#f8f8f2>names</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get the data dir index from a file name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return index into dbEnvDataDirs of this fileName's data directory. -1 if multiple data</color>
<color=#75715e>   *     directories are not being used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getDataDirIndexFromName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>dataDirEnd</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>dataDir</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataDirEnd</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>dataDir</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#e6db74>"data"</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>())));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get the file number from a file name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fileName the file name</color>
<color=#75715e>   * @return the file number</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Long</color> <color=#a6e22e>getNumFromName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>fileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>));</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNumber</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Find JE files. Return names sorted in ascending fashion.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param suffixes which type of file we're looking for</color>
<color=#75715e>   * @return array of file names</color>
<color=#75715e>   *     <p>Used by unit tests so package protection.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>listFileNames</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>suffixes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>JEFileFilter</color> <color=#f8f8f2>fileFilter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JEFileFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>suffixes</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>listFileNamesInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>fileFilter</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Find .jdb files which are >= the minimimum file number and <= the maximum file number. Return</color>
<color=#75715e>   * names sorted in ascending fashion.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return array of file names</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>listFileNames</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>minFileNumber</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxFileNumber</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>JEFileFilter</color> <color=#f8f8f2>fileFilter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JEFileFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>JE_SUFFIXES</color><color=#f8f8f2>,</color> <color=#f8f8f2>minFileNumber</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxFileNumber</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>listFileNamesInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>fileFilter</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>fileComparator</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFileNum</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>String</color> <color=#f8f8f2>fname</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>fname</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>fname</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>o1</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>String</color> <color=#f8f8f2>fnum1</color> <color=#f92672>=</color> <color=#f8f8f2>getFileNum</color><color=#f8f8f2>(</color><color=#f8f8f2>o1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>String</color> <color=#f8f8f2>fnum2</color> <color=#f92672>=</color> <color=#f8f8f2>getFileNum</color><color=#f8f8f2>(</color><color=#f8f8f2>o2</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>o1</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>o2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>};</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>stringComparator</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFileNum</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fname</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>fname</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>fname</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>o1</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>String</color> <color=#f8f8f2>fnum1</color> <color=#f92672>=</color> <color=#f8f8f2>getFileNum</color><color=#f8f8f2>(</color><color=#f8f8f2>o1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>String</color> <color=#f8f8f2>fnum2</color> <color=#f92672>=</color> <color=#f8f8f2>getFileNum</color><color=#f8f8f2>(</color><color=#f8f8f2>o2</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>fnum1</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>fnum2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>};</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Find JE files, flavor for unit test support.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param suffixes which type of file we're looking for</color>
<color=#75715e>   * @return array of file names</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envDirFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>suffixes</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>envMultiSubDir</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color> <color=#f92672>=</color> <color=#f8f8f2>envDirFile</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>JEFileFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>suffixes</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>subFileNames</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envMultiSubDir</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envDirFile</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"data"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>subFiles</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>JEFileFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>suffixes</color><color=#f8f8f2>));</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>subFile</color> <color=#f8f8f2>:</color> <color=#f8f8f2>subFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>subFileNames</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color> <color=#f92672>+</color> <color=#f8f8f2>subFile</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>totalFileNames</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#f8f8f2>subFileNames</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>totalFileNames</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>totalFileNames</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>names</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>totalFileNames</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>subFileNames</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#f8f8f2>names</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>names</color> <color=#f92672>=</color> <color=#f8f8f2>totalFileNames</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>names</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>names</color><color=#f8f8f2>,</color> <color=#f8f8f2>stringComparator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>names</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>names</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listJDBFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>listJDBFilesInternalSingleDir</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>JEFileFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>JE_SUFFIXES</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>listJDBFilesInternalMultiDir</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>JEFileFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>JE_SUFFIXES</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listJDBFilesInternalSingleDir</color><color=#f8f8f2>(</color><color=#f8f8f2>JEFileFilter</color> <color=#f8f8f2>fileFilter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>files</color> <color=#f92672>=</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>fileFilter</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>files</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>files</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>files</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listJDBFilesInternalMultiDir</color><color=#f8f8f2>(</color><color=#f8f8f2>JEFileFilter</color> <color=#f8f8f2>fileFilter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>File</color><color=#f92672>[][]</color> <color=#f8f8f2>files</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f92672>[</color><color=#f8f8f2>nDataDirs</color><color=#f92672>][]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nTotalFiles</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envDir</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>envDir</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>fileFilter</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nTotalFiles</color> <color=#f92672>+=</color> <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTotalFiles</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f92672>[</color><color=#f8f8f2>nTotalFiles</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>envFiles</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envFile</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>envFile</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileComparator</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>listFileNamesInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>JEFileFilter</color> <color=#f8f8f2>fileFilter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>listFileNamesInternalSingleDir</color><color=#f8f8f2>(</color><color=#f8f8f2>fileFilter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>listFileNamesInternalMultiDirs</color><color=#f8f8f2>(</color><color=#f8f8f2>fileFilter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>listFileNamesInternalSingleDir</color><color=#f8f8f2>(</color><color=#f8f8f2>JEFileFilter</color> <color=#f8f8f2>fileFilter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>fileNames</color> <color=#f92672>=</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#f8f8f2>fileFilter</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNames</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNames</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileNames</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileNames</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>listFileNamesInternalMultiDirs</color><color=#f8f8f2>(</color><color=#f8f8f2>JEFileFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color><color=#f92672>[][]</color> <color=#f8f8f2>files</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>nDataDirs</color><color=#f92672>][]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nTotalFiles</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envDir</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>envDir</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>String</color> <color=#f8f8f2>envDirName</color> <color=#f92672>=</color> <color=#f8f8f2>envDir</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>dataDirName</color> <color=#f92672>=</color> <color=#f8f8f2>envDirName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>envDirName</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>][</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>dataDirName</color> <color=#f92672>+</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color> <color=#f92672>+</color> <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>][</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>nTotalFiles</color> <color=#f92672>+=</color> <color=#f8f8f2>files</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTotalFiles</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>nTotalFiles</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>envFiles</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>envFile</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>envFile</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>,</color> <color=#f8f8f2>stringComparator</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkNoDataDirs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>dataDirNames</color> <color=#f92672>=</color>
        <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>(</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>FilenameFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>/* We'll validate the subdirNum later. */</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>name</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#e6db74>"dataNNN"</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"data"</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataDirNames</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dataDirNames</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_N_DATA_DIRECTORIES</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" was not set and expected to find no"</color>
              <color=#f92672>+</color> <color=#e6db74>" data directories, but found "</color>
              <color=#f92672>+</color> <color=#f8f8f2>dataDirNames</color><color=#f8f8f2>.</color><color=#a6e22e>length</color>
              <color=#f92672>+</color> <color=#e6db74>" data directories instead."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>gatherDataDirs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>dataDirNames</color> <color=#f92672>=</color>
        <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>(</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>FilenameFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>/* We'll validate the subdirNum later. */</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>name</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#e6db74>"dataNNN"</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"data"</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataDirNames</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>dataDirNames</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dataDirNames</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataDirNames</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>!=</color> <color=#f8f8f2>nDataDirs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_N_DATA_DIRECTORIES</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" was set and expected to find "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nDataDirs</color>
              <color=#f92672>+</color> <color=#e6db74>" data directories, but found "</color>
              <color=#f92672>+</color> <color=#f8f8f2>dataDirNames</color><color=#f8f8f2>.</color><color=#a6e22e>length</color>
              <color=#f92672>+</color> <color=#e6db74>" instead."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>ddNum</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>dataDirs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f92672>[</color><color=#f8f8f2>nDataDirs</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dataDirNames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subdirNumStr</color> <color=#f92672>=</color> <color=#f8f8f2>fn</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>subdirNum</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>subdirNumStr</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subdirNum</color> <color=#f92672>!=</color> <color=#f8f8f2>ddNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Expected to find data subdir: data"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>paddedDirNum</color><color=#f8f8f2>(</color><color=#f8f8f2>ddNum</color><color=#f8f8f2>)</color>
                  <color=#f92672>+</color> <color=#e6db74>" but found data"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>subdirNumStr</color>
                  <color=#f92672>+</color> <color=#e6db74>" instead."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>File</color> <color=#f8f8f2>dataDir</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>fn</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dataDir</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Data dir: "</color> <color=#f92672>+</color> <color=#f8f8f2>dataDir</color> <color=#f92672>+</color> <color=#e6db74>" doesn't exist."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dataDir</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Data dir: "</color> <color=#f92672>+</color> <color=#f8f8f2>dataDir</color> <color=#f92672>+</color> <color=#e6db74>" is not a directory."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>dataDirs</color><color=#f92672>[</color><color=#f8f8f2>ddNum</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>dataDir</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Illegal data subdir: data"</color> <color=#f92672>+</color> <color=#f8f8f2>subdirNumStr</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>ddNum</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dataDirs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>paddedDirNum</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dirNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>paddedStr</color> <color=#f92672>=</color> <color=#e6db74>"000"</color> <color=#f92672>+</color> <color=#f8f8f2>dirNum</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>paddedStr</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>paddedStr</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the full file name and path for the nth JE file. */</color>
  <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getFullFileNames</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>includeDeletedFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nSuffixes</color> <color=#f92672>=</color> <color=#f8f8f2>JE_AND_DEL_SUFFIXES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>nSuffixes</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nSuffixes</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_AND_DEL_SUFFIXES</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>)};</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>File</color> <color=#a6e22e>getDataDir</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>dbEnvHome</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color> <color=#f92672>%</color> <color=#f8f8f2>nDataDirs</color><color=#f8f8f2>))</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFullFileName</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the full file name and path for this file name. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFullFileName</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>suffix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>File</color> <color=#f8f8f2>dbEnvDataDir</color> <color=#f92672>=</color> <color=#f8f8f2>getDataDir</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbEnvDataDir</color> <color=#f92672>+</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color> <color=#f92672>+</color> <color=#f8f8f2>getFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>suffix</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the file name relative to the env home directory. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getPartialFileName</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>getFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>File</color> <color=#f8f8f2>dataDir</color> <color=#f92672>=</color> <color=#f8f8f2>getDataDir</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dataDir</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Return the full file name of a specified log file name, including the</color>
<color=#75715e>   * sub directories names if needed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>suffixStartPos</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>suffix</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>suffixStartPos</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>suffix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>suffixStartPos</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>)),</color> <color=#f8f8f2>suffix</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the file name for the nth file. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFileName</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>suffix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>getFileNumberString</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>suffix</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the file name for the nth log (*.jdb) file. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFileName</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * HexFormatter generates a 0 padded string starting with 0x. We want the right most 8 digits, so</color>
<color=#75715e>   * start at 10.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFileNumberString</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>HexFormatter</color><color=#f8f8f2>.</color><color=#a6e22e>formatLong</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>).</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>10</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return true if successful, false if File.renameTo returns false, which can occur on Windows if</color>
<color=#75715e>   *     the file was recently closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>renameFile</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newSuffix</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>renameFile</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSuffix</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Rename this file to NNNNNNNN.suffix. If that file already exists, try NNNNNNNN.suffix.1, etc.</color>
<color=#75715e>   * Used for deleting files or moving corrupt files aside.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fileNum the file we want to move</color>
<color=#75715e>   * @param newSuffix the new file suffix</color>
<color=#75715e>   * @param subDir the data directory sub-directory to rename the file into. The subDir must already</color>
<color=#75715e>   *     exist. May be null to leave the file in its current data directory.</color>
<color=#75715e>   * @return renamed File if successful, or null if File.renameTo returns false, which can occur on</color>
<color=#75715e>   *     Windows if the file was recently closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>renameFile</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newSuffix</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>subDir</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>oldDir</color> <color=#f92672>=</color> <color=#f8f8f2>getDataDir</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>oldName</color> <color=#f92672>=</color> <color=#f8f8f2>getFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>oldFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>oldDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>newDir</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>subDir</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>oldDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>subDir</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#f8f8f2>oldDir</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color> <color=#f92672>=</color> <color=#f8f8f2>getFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSuffix</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>generation</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>repeatNum</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>newFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>newDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color> <color=#f92672>+</color> <color=#f8f8f2>generation</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>repeatNum</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>generation</color> <color=#f92672>=</color> <color=#e6db74>"."</color> <color=#f92672>+</color> <color=#f8f8f2>repeatNum</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If CLEANER_EXPUNGE is false, then the cleaner will rename</color>
<color=#75715e>       * the .jdb file. The rename action will first delete the</color>
<color=#75715e>       * old file and then create the new file. So we should also</color>
<color=#75715e>       * record the file rename action here.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fdd</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>FileManager</color><color=#f8f8f2>.</color><color=#a6e22e>JE_SUFFIX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fdd</color><color=#f8f8f2>.</color><color=#a6e22e>addDeletedFile</color><color=#f8f8f2>(</color><color=#f8f8f2>oldName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>clearFileCache</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#f8f8f2>oldFile</color><color=#f8f8f2>.</color><color=#a6e22e>renameTo</color><color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>success</color> <color=#f92672>?</color> <color=#f8f8f2>newFile</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Delete log file NNNNNNNN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fileNum the file we want to move</color>
<color=#75715e>   * @return true if successful, false if File.delete returns false, which can occur on Windows if</color>
<color=#75715e>   *     the file was recently closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>deleteFile</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color> <color=#f92672>=</color> <color=#f8f8f2>getFullFileNames</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Add files deleted by JE to filesDeletedByJE in fdd, which aims to</color>
<color=#75715e>     * check whether a deleted file is deleted by JE or by users wrongly.</color>
<color=#75715e>     *</color>
<color=#75715e>     * The file name gotten from WatchKey is the relative file name,</color>
<color=#75715e>     * so we should also get the relative file name here.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fdd</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>FileManager</color><color=#f8f8f2>.</color><color=#a6e22e>JE_SUFFIX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>relativeFileName</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fdd</color><color=#f8f8f2>.</color><color=#a6e22e>addDeletedFile</color><color=#f8f8f2>(</color><color=#f8f8f2>relativeFileName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>clearFileCache</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the log version for the given file. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getFileLogVersion</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>handle</color> <color=#f92672>=</color> <color=#f8f8f2>getFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>handle</color><color=#f8f8f2>.</color><color=#a6e22e>getLogVersion</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>handle</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CHECKSUM</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return a read only file handle that corresponds to this file number. Retrieve it from the cache</color>
<color=#75715e>   * or open it anew and validate the file header. This method takes a latch on this file, so that</color>
<color=#75715e>   * the file descriptor will be held in the cache as long as it's in use. When the user is done</color>
<color=#75715e>   * with the file, the latch must be released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fileNum which file</color>
<color=#75715e>   * @return the file handle for the existing or newly created file</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>FileHandle</color> <color=#a6e22e>getFileHandle</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ChecksumException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Check the file cache for this file. */</color>
    <color=#f8f8f2>Long</color> <color=#f8f8f2>fileId</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/** Loop until we get an open FileHandle. */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The file cache is intentionally not latched here so that</color>
<color=#75715e>         * it's not a bottleneck in the fast path.  We check that the</color>
<color=#75715e>         * file handle that we get back is really still open after we</color>
<color=#75715e>         * latch it down below.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color> <color=#f8f8f2>fileCache</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileId</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the file isn't in the cache, latch the cache and check</color>
<color=#75715e>         * again.  Under the latch, if the file is not in the cache we</color>
<color=#75715e>         * add it to the cache but do not open the file yet.  We latch</color>
<color=#75715e>         * the handle here, and open the file further below after</color>
<color=#75715e>         * releasing the cache latch.  This prevents blocking other</color>
<color=#75715e>         * threads that are opening other files while we open this</color>
<color=#75715e>         * file.  The latch on the handle blocks other threads waiting</color>
<color=#75715e>         * to open the same file, which is necessary.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>newHandle</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileHandle</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color> <color=#f8f8f2>fileCache</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileId</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileHandle</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>newHandle</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color> <color=#f8f8f2>addFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileId</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newHandle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Open the file with the fileHandle latched.  It was</color>
<color=#75715e>           * latched by addFileHandle above.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>openFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileHandle</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_MODE</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*existingHandle*/</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>/* An exception is in flight -- clean up. */</color>
              <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>clearFileCache</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * The handle was found in the cache.  Latch the fileHandle</color>
<color=#75715e>           * before checking getFile below and returning.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoWait</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * But the handle was latched.  Rather than wait, let's</color>
<color=#75715e>             * just make a new transient handle.  It doesn't need</color>
<color=#75715e>             * to be latched, but it does need to be closed.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>existingHandle</color> <color=#f92672>=</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>FileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileId</color><color=#f8f8f2>,</color> <color=#f8f8f2>getFileNumberString</color><color=#f8f8f2>(</color><color=#f8f8f2>fileId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                  <color=#a6e22e>@Override</color>
                  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>release</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

                    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                      <color=#f8f8f2>close</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                      <color=#75715e>// Ignore</color>
                    <color=#f8f8f2>}</color>
                  <color=#f8f8f2>}</color>
                <color=#f8f8f2>};</color>

            <color=#f8f8f2>openFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileHandle</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_MODE</color><color=#f8f8f2>,</color> <color=#f8f8f2>existingHandle</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * We may have obtained this file handle outside the file cache</color>
<color=#75715e>         * latch, so we have to test that the handle is still valid.</color>
<color=#75715e>         * If it's not, then loop back and try again.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>getFile</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Handle at higher levels. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_READ</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a new FileHandle and adds it to the cache, but does not open the file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the latched FileHandle.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FileHandle</color> <color=#a6e22e>addFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>getFileNumberString</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>fileCache</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>FileMode</color> <color=#a6e22e>getAppropriateReadWriteMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useODSYNC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>FileMode</color><color=#f8f8f2>.</color><color=#a6e22e>READWRITE_ODSYNC_MODE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>FileMode</color><color=#f8f8f2>.</color><color=#a6e22e>READWRITE_MODE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Creates a new handle and opens it. Does not add the handle to the cache. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FileHandle</color> <color=#a6e22e>makeFileHandle</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileMode</color> <color=#f8f8f2>mode</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>getFileNumberString</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>openFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileHandle</color><color=#f8f8f2>,</color> <color=#f8f8f2>mode</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*existingHandle*/</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens the file for the given handle and initializes it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param existingHandle is an already open handle for the same file or null. If non-null it is</color>
<color=#75715e>   *     used to avoid the cost of reading the file header.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>openFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>FileHandle</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileMode</color> <color=#f8f8f2>mode</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>existingHandle</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>nFileOpens</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNum</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>fileNames</color> <color=#f92672>=</color> <color=#f8f8f2>getFullFileNames</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>newFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Open the file. Note that we are going to try a few names to open</color>
<color=#75715e>       * this file -- we'll try for N.jdb, and if that doesn't exist and</color>
<color=#75715e>       * we're configured to look for all types, we'll look for N.del.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>FNFE</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fileName2</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileNames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fileName</color> <color=#f92672>=</color> <color=#f8f8f2>fileName2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newFile</color> <color=#f92672>=</color> <color=#f8f8f2>fileFactory</color><color=#f8f8f2>.</color><color=#a6e22e>createFile</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>mode</color><color=#f8f8f2>.</color><color=#a6e22e>getModeValue</color><color=#f8f8f2>());</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Save the first exception thrown. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>FNFE</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>FNFE</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If we didn't find the file or couldn't create it, rethrow the</color>
<color=#75715e>       * exception.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFile</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>FNFE</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>FNFE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If there is an existing open handle, there is no need to read or</color>
<color=#75715e>       * validate the header.  Note that the log version is zero if the</color>
<color=#75715e>       * existing handle is not fully initialized.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>existingHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>existingHandle</color><color=#f8f8f2>.</color><color=#a6e22e>getLogVersion</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the file is empty, reinitialize it if we can. If not,</color>
<color=#75715e>         * send the file handle back up; the calling code will deal</color>
<color=#75715e>         * with the fact that there's nothing there.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mode</color><color=#f8f8f2>.</color><color=#a6e22e>isWritable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* An empty file, write a header. */</color>
          <color=#66d9ef>long</color> <color=#f8f8f2>lastLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>longToLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>perFileLastUsedLsn</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)));</color>
          <color=#66d9ef>long</color> <color=#f8f8f2>headerPrevOffset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>headerPrevOffset</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>lastLsn</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>headerPrevOffset</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>syncAtFileEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Get more info if this happens again. [#20732] */</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Zero prevOffset fileNum=0x"</color>
                    <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color>
                    <color=#f92672>+</color> <color=#e6db74>" lastLsn="</color>
                    <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lastLsn</color><color=#f8f8f2>)</color>
                    <color=#f92672>+</color> <color=#e6db74>" perFileLastUsedLsn="</color>
                    <color=#f92672>+</color> <color=#f8f8f2>perFileLastUsedLsn</color>
                    <color=#f92672>+</color> <color=#e6db74>" fileLen="</color>
                    <color=#f92672>+</color> <color=#f8f8f2>newFile</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>FileHeader</color> <color=#f8f8f2>fileHeader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>headerPrevOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>writeFileHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* A non-empty file, check the header */</color>
        <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>readAndValidateFileHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Handle at higher levels. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_READ</color><color=#f8f8f2>,</color> <color=#e6db74>"Couldn't open file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Let this exception go as a checksum exception, so it sets the</color>
<color=#75715e>       * run recovery state correctly.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>closeFileInErrorCase</color><color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#e6db74>"Couldn't open file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>closeFileInErrorCase</color><color=#f8f8f2>(</color><color=#f8f8f2>newFile</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Close this file and eat any exceptions. Used in catch clauses. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>closeFileInErrorCase</color><color=#f8f8f2>(</color><color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Read the given JE log file and validate the header.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException if the file header isn't valid</color>
<color=#75715e>   * @return file header log version.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readAndValidateFileHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>ChecksumException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Read the file header from this file. It's always the first log</color>
<color=#75715e>     * entry.</color>
<color=#75715e>     *</color>
<color=#75715e>     * The special UNKNOWN_FILE_HEADER_VERSION value is passed for reading</color>
<color=#75715e>     * the entry header.  The actual log version is read as part of the</color>
<color=#75715e>     * FileHeader entry.  [#16939]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>LogManager</color> <color=#f8f8f2>logManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>headerEntry</color> <color=#f92672>=</color>
        <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLogEntryAllowChecksumException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>),</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>UNKNOWN_FILE_HEADER_VERSION</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>FileHeader</color> <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileHeader</color><color=#f8f8f2>)</color> <color=#f8f8f2>headerEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Write a proper file header to the given file. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFileHeader</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileHeader</color> <color=#f8f8f2>header</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Fail loudly if the environment is invalid. */</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkIfInvalid</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Fail silent if the environment is not open.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>mayNotWrite</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Write file header into this buffer in the usual log entry format. */</color>
    <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>headerLogEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileHeaderEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_HEADER</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>headerBuf</color> <color=#f92672>=</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>putIntoBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>headerLogEntry</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// prevLogEntryOffset</color>

    <color=#75715e>/* Write the buffer into the channel. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>bytesWritten</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LOGWRITE_EXCEPTION_TESTING</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>generateLogWriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Always flush header so that file.length() will be non-zero when</color>
<color=#75715e>       * this method returns and two threads won't attempt to create the</color>
<color=#75715e>       * header. [#20732]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>bytesWritten</color> <color=#f92672>=</color> <color=#f8f8f2>writeToFile</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*flushRequired*/</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClosedChannelException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The channel should never be closed. It may be closed because</color>
<color=#75715e>       * of an interrupt received by another thread. See SR [#10463]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Channel closed, may be due to thread interrupt"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Possibly an out of disk exception. */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogWriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytesWritten</color> <color=#f92672>!=</color> <color=#f8f8f2>headerLogEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_HEADER_SIZE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color>
          <color=#e6db74>"File "</color>
              <color=#f92672>+</color> <color=#f8f8f2>fileName</color>
              <color=#f92672>+</color> <color=#e6db74>" was created with an incomplete header. Only "</color>
              <color=#f92672>+</color> <color=#f8f8f2>bytesWritten</color>
              <color=#f92672>+</color> <color=#e6db74>" bytes were written."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the prevOffset field stored in the file header. */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>getFileHeaderPrevOffset</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ChecksumException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>headerEntry</color> <color=#f92672>=</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>getLogEntryAllowChecksumException</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>FileHeader</color> <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileHeader</color><color=#f8f8f2>)</color> <color=#f8f8f2>headerEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getLastEntryInPrevFileOffset</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Support for writing new log entries</color>
<color=#75715e>   */</color>

  <color=#75715e>/** Returns whether we should flip files to log an entry of 'size' bytes. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>shouldFlipFile</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>forceNewFile</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>nextAvailableLsn</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>maxFileSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Calculates LSN of next entry to be logged. */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>calculateNextLsn</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>flippedFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>flippedFile</color>
        <color=#f92672>?</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>currentFileNum</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileManager</color><color=#f8f8f2>.</color><color=#a6e22e>firstLogEntryOffset</color><color=#f8f8f2>())</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>nextAvailableLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Advance LSN position after determining the LSN of an entry to be logged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When flippedFile is true, this method must be called after flushing the prior file. We</color>
<color=#75715e>   * guarantee that certain volatile LSN fields (currentFileNumber, nextAvailableLsn, lastUsedLsn)</color>
<color=#75715e>   * are not updated until after flushing the prior file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param currentLsn value returned by {@link #calculateNextLsn}</color>
<color=#75715e>   * @param size value passed to {@link #shouldFlipFile}</color>
<color=#75715e>   * @param flippedFile value returned by {@link #shouldFlipFile}.</color>
<color=#75715e>   * @return the file offset of the previous LSN that was used. Needed for constructing the header</color>
<color=#75715e>   *     of the log entry for currentLsn. If the previous LSN was in the previous file, or this is</color>
<color=#75715e>   *     the very first LSN of the env, zero is returned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>advanceLsn</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>currentLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>flippedFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>prevOffset</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>flippedFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>currentLsn</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>currentFileNum</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>currentLsn</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>firstLogEntryOffset</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>perFileLastUsedLsn</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>currentFileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>currentFileNum</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>prevOffset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>currentLsn</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>currentFileNum</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>prevOffset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastUsedLsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>forceNewFile</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>lastUsedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>currentLsn</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>nextAvailableLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>currentFileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>currentLsn</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>prevOffset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Write out a log buffer to the file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fullBuffer buffer to write</color>
<color=#75715e>   * @param flushWriteQueue true if this write can not be queued on the Write Queue.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeLogBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>LogBuffer</color> <color=#f8f8f2>fullBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>flushWriteQueue</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Fail loudly if the environment is invalid. */</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkIfInvalid</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Fail silent if the environment is not open.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>mayNotWrite</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Use the LSN to figure out what file to write this buffer to. */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>firstLsn</color> <color=#f92672>=</color> <color=#f8f8f2>fullBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>getFirstLsn</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Is there anything in this write buffer? We could have been called by</color>
<color=#75715e>     * the environment shutdown, and nothing is actually in the buffer.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableFile</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>fullBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>getDataBuffer</color><color=#f8f8f2>();</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Check that we do not overwrite unless the file only contains</color>
<color=#75715e>         * a header [#11915] [#12616].</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>fullBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>getRewriteAllowed</color><color=#f8f8f2>()</color>
                <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color>
                    <color=#f92672>||</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>firstLogEntryOffset</color><color=#f8f8f2>())</color>
            <color=#f8f8f2>:</color> <color=#e6db74>"FileManager would overwrite non-empty file 0x"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>))</color>
                <color=#f92672>+</color> <color=#e6db74>" lsnOffset=0x"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>))</color>
                <color=#f92672>+</color> <color=#e6db74>" fileLength=0x"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LOGWRITE_EXCEPTION_TESTING</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>generateLogWriteException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>),</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>writeToFile</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>firstLsn</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>flushWriteQueue</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClosedChannelException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The file should never be closed. It may be closed because</color>
<color=#75715e>         * of an interrupt received by another thread. See SR [#10463].</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"File closed, may be due to thread interrupt"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogWriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>maybeForceYield</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Write a buffer to a file at a given offset. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>writeToFile</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>flushWriteQueue</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>COUNT_WRITE</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>totalBytesWritten</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>bumpWriteCount</color><color=#f8f8f2>(</color><color=#e6db74>"write"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastFileNumberTouched</color> <color=#f92672>==</color> <color=#f8f8f2>fileNum</color>
        <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>destOffset</color> <color=#f92672>-</color> <color=#f8f8f2>lastFileTouchedOffset</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>ADJACENT_TRACK_SEEK_DELTA</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nSequentialWrites</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>nSequentialWriteBytes</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nRandomWrites</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>nRandomWriteBytes</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>VERIFY_CHECKSUMS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>verifyChecksums</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color> <color=#e6db74>"pre-write"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Perform a RandomAccessFile write and update the buffer position.</color>
<color=#75715e>     * ByteBuffer.array() is safe to use since all non-direct ByteBuffers</color>
<color=#75715e>     * have a backing array.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Synchronization on the file object is needed because two threads may</color>
<color=#75715e>     * call seek() on the same file object.</color>
<color=#75715e>     *</color>
<color=#75715e>     * If the Write Queue is enabled, attempt to get the fsync latch.  If</color>
<color=#75715e>     * we can't get it, then an fsync or write is in progress and we'd</color>
<color=#75715e>     * block anyway.  In that case, queue the write operation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>fsyncLatchAcquired</color> <color=#f92672>=</color> <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>tryLock</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>enqueueSuccess</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fsyncLatchAcquired</color> <color=#f92672>&&</color> <color=#f8f8f2>useWriteQueue</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>flushWriteQueue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>enqueueSuccess</color> <color=#f92672>=</color>
          <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>enqueueWrite</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>arrayOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>enqueueSuccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fsyncLatchAcquired</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useWriteQueue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>dequeuePendingWrites1</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>destOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>arrayOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>VERIFY_CHECKSUMS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>destOffset</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>arrayOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>verifyChecksums</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color> <color=#e6db74>"post-write"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>totalBytesWritten</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>lastFileNumberTouched</color> <color=#f92672>=</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>lastFileTouchedOffset</color> <color=#f92672>=</color> <color=#f8f8f2>destOffset</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totalBytesWritten</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>bumpWriteCount</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>debugMsg</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DEBUG</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Write: "</color> <color=#f92672>+</color> <color=#f8f8f2>WRITE_COUNT</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>debugMsg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>++</color><color=#f8f8f2>WRITE_COUNT</color> <color=#f92672>>=</color> <color=#f8f8f2>STOP_ON_WRITE_COUNT</color>
        <color=#f92672>&&</color> <color=#f8f8f2>WRITE_COUNT</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#f8f8f2>STOP_ON_WRITE_COUNT</color> <color=#f92672>+</color> <color=#f8f8f2>N_BAD_WRITES</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>THROW_ON_WRITE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"IOException generated for testing: "</color> <color=#f92672>+</color> <color=#f8f8f2>WRITE_COUNT</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>debugMsg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Runtime</color><color=#f8f8f2>.</color><color=#a6e22e>getRuntime</color><color=#f8f8f2>().</color><color=#a6e22e>halt</color><color=#f8f8f2>(</color><color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Read a buffer from a file at a given offset. We know that the desired data exists in this file.</color>
<color=#75715e>   * There's no need to incur extra costs such as checks of the file length, nor to return status as</color>
<color=#75715e>   * to whether this file contains the data.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>readFromFile</color><color=#f8f8f2>(</color><color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNo</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>readFromFile</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNo</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/* dataKnownToBeInFile */</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Read a buffer from a file at a given offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the read buffer is filled, false, if there is nothing left in the file to read</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>readFromFile</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>fileNo</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>dataKnownToBeInFile</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * All IOExceptions on read turn into EnvironmentFailureExceptions</color>
<color=#75715e>     * [#15768].</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check if there's a pending write(s) in the write queue for this</color>
<color=#75715e>       * fileNo/offset and if so, use it to fulfill this read request.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useWriteQueue</color> <color=#f92672>&&</color> <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>checkWriteCache</color><color=#f8f8f2>(</color><color=#f8f8f2>readBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNo</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Nothing queued, all data for this file must be in the file.</color>
<color=#75715e>       * Note that there's no synchronization between the check of the</color>
<color=#75715e>       * write queue above, and this check of file length. It's possible</color>
<color=#75715e>       * that a newly written log entry could show up between the</color>
<color=#75715e>       * statements, and enter the write queue just after we finish the</color>
<color=#75715e>       * check.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Because of this, callers of this method must abide by one of</color>
<color=#75715e>       * three conditions:</color>
<color=#75715e>       * 1. They guarantee that the attempt to read a chunk of new data</color>
<color=#75715e>       *   comes after the new data has been logged by the LogManager.</color>
<color=#75715e>       * 2. The files are quiescent when the read is going on.</color>
<color=#75715e>       * 3. The caller is sure the data is in this file.</color>
<color=#75715e>       *</color>
<color=#75715e>       * The replication feeder reader abides by (1) while all other file</color>
<color=#75715e>       * readers abide by (2). Callers which are fetching specific log</color>
<color=#75715e>       * entries fall under (3).</color>
<color=#75715e>       */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>readThisFile</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dataKnownToBeInFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Callers who are not sure whether the desired data is in this</color>
<color=#75715e>         * file or the next incur the cost of a check of file.length(),</color>
<color=#75715e>         * which is a system call.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>readThisFile</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672><</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readThisFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readFromFileInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNo</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClosedChannelException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The channel should never be closed. It may be closed because</color>
<color=#75715e>       * of an interrupt received by another thread. See SR [#10463]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Channel closed, may be due to thread interrupt"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_READ</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readFromFileInternal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>COUNT_READ</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Perform a RandomAccessFile read and update the buffer position.</color>
<color=#75715e>     * ByteBuffer.array() is safe to use since all non-direct ByteBuffers</color>
<color=#75715e>     * have a backing array.  Synchronization on the file object is needed</color>
<color=#75715e>     * because two threads may call seek() on the same file object.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastFileNumberTouched</color> <color=#f92672>==</color> <color=#f8f8f2>fileNum</color>
          <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>-</color> <color=#f8f8f2>lastFileTouchedOffset</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>ADJACENT_TRACK_SEEK_DELTA</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nSequentialReads</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>nSequentialReadBytes</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nRandomReads</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>nRandomReadBytes</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>bytesRead</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>arrayOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytesRead</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>bytesRead</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>lastFileNumberTouched</color> <color=#f92672>=</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>lastFileTouchedOffset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>bytesRead</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>printLogBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>curPos</color> <color=#f92672>=</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>recStartPos</color> <color=#f92672>=</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"ChecksumException in printLogBuffer "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>recType</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>findType</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>recSize</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"LOGREC "</color>
              <color=#f92672>+</color> <color=#f8f8f2>recType</color><color=#f8f8f2>.</color><color=#a6e22e>toStringNoVersion</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" at LSN "</color>
              <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" , log buffer offset "</color>
              <color=#f92672>+</color> <color=#f8f8f2>recStartPos</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>lsn</color> <color=#f92672>+=</color> <color=#f8f8f2>recSize</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>recStartPos</color> <color=#f92672>+</color> <color=#f8f8f2>recSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>curPos</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyChecksums</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>curPos</color> <color=#f92672>=</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>recStartPos</color> <color=#f92672>=</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
        <color=#75715e>/* Write buffer contains current log version entries. */</color>
        <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>verifyChecksum</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>comment</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>recStartPos</color> <color=#f92672>+</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"ChecksumException: ("</color> <color=#f92672>+</color> <color=#f8f8f2>comment</color> <color=#f92672>+</color> <color=#e6db74>") "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"start stack trace"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"end stack trace"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>curPos</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyChecksum</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>header</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comment</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ChecksumValidator</color> <color=#f8f8f2>validator</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#75715e>/* Add header to checksum bytes */</color>
    <color=#f8f8f2>validator</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChecksumValidator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>headerSizeMinusChecksum</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getSizeMinusChecksum</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>itemStart</color> <color=#f92672>=</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>itemStart</color> <color=#f92672>-</color> <color=#f8f8f2>headerSizeMinusChecksum</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>headerSizeMinusChecksum</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>itemStart</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Now that we know the size, read the rest of the entry if the first</color>
<color=#75715e>     * read didn't get enough.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>itemSize</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>itemSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Couldn't verify checksum ("</color> <color=#f92672>+</color> <color=#f8f8f2>comment</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do entry validation. Run checksum before checking the entry</color>
<color=#75715e>     * type, it will be the more encompassing error.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>itemSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getChecksum</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** FSync the end of the log. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>syncLogEnd</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>force</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogWriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"IOException during fsync"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sync the end of the log, close off this log file. Should only be called under the log write</color>
<color=#75715e>   * latch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>syncLogEndAndFinishFile</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>syncAtFileEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>syncLogEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether anything is in the write queue. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasQueuedWrites</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>hasQueuedWrites</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testWriteQueueLock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testWriteQueueUnlock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>startFileCacheWarmer</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>recoveryStartLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>fileCacheWarmer</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>warmUpSize</color> <color=#f92672>=</color> <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_WARM_UP_SIZE</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>warmUpSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufSize</color> <color=#f92672>=</color> <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_WARM_UP_BUF_SIZE</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>fileCacheWarmer</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>FileCacheWarmer</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>recoveryStartLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>warmUpSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>bufSize</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>fileCacheWarmer</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>stopFileCacheWarmer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use fcw local var because fileCacheWarmer can be set to null by</color>
<color=#75715e>     * other threads calling clearFileCacheWarmer, namely the cache warmer</color>
<color=#75715e>     * thread.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FileCacheWarmer</color> <color=#f8f8f2>fcw</color> <color=#f92672>=</color> <color=#f8f8f2>fileCacheWarmer</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fcw</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>fcw</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>clearFileCacheWarmer</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Allow cache warmer thread to be GC'd. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>clearFileCacheWarmer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>fileCacheWarmer</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Close all file handles and empty the cache. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileCache</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>endOfLog</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Clear the file lock. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>stopFileCacheWarmer</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envLock</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>envLock</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exclLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>exclLock</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>exclLock</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockFile</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lockFile</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>lockFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fdd</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fdd</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Lock the environment. Return true if the lock was acquired. If exclusive is false, then this</color>
<color=#75715e>   * implements a single writer, multiple reader lock. If exclusive is true, then implement an</color>
<color=#75715e>   * exclusive lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>There is a lock file and there are two regions of the lock file: byte 0, and byte 1. Byte 0</color>
<color=#75715e>   * is the exclusive writer process area of the lock file. If an environment is opened for write,</color>
<color=#75715e>   * then it attempts to take an exclusive write lock on byte 0. Byte 1 is the shared reader process</color>
<color=#75715e>   * area of the lock file. If an environment is opened for read-only, then it attempts to take a</color>
<color=#75715e>   * shared lock on byte 1. This is how we implement single writer, multi reader semantics.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cleaner, each time it is invoked, attempts to take an exclusive lock on byte 1. The</color>
<color=#75715e>   * owning process already either has an exclusive lock on byte 0, or a shared lock on byte 1. This</color>
<color=#75715e>   * will necessarily conflict with any shared locks on byte 1, even if it's in the same process and</color>
<color=#75715e>   * there are no other holders of that shared lock. So if there is only one read-only process, it</color>
<color=#75715e>   * will have byte 1 for shared access, and the cleaner can not run in it because it will attempt</color>
<color=#75715e>   * to get an exclusive lock on byte 1 (which is already locked for shared access by itself). If a</color>
<color=#75715e>   * write process comes along and tries to run the cleaner, it will attempt to get an exclusive</color>
<color=#75715e>   * lock on byte 1. If there are no other reader processes (with shared locks on byte 1), and no</color>
<color=#75715e>   * other writers (which are running cleaners on with exclusive locks on byte 1), then the cleaner</color>
<color=#75715e>   * will run.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>lockEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>rdOnly</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exclusive</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkEnvHomePermissions</color><color=#f8f8f2>(</color><color=#f8f8f2>rdOnly</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockFile</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lockFile</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>RandomAccessFile</color><color=#f8f8f2>(</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_FILE</color><color=#f8f8f2>),</color> <color=#f8f8f2>FileMode</color><color=#f8f8f2>.</color><color=#a6e22e>READWRITE_MODE</color><color=#f8f8f2>.</color><color=#a6e22e>getModeValue</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#f8f8f2>lockFile</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>();</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exclusive</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * To lock exclusive, must have exclusive on</color>
<color=#75715e>           * shared reader area (byte 1).</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>exclLock</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>tryLock</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>exclLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rdOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envLock</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>tryLock</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envLock</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>tryLock</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>envLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>OverlappingFileLockException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseExclusiveLock</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exclLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>exclLock</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ensure that if the environment home dir is on readonly media or in a readonly directory that</color>
<color=#75715e>   * the environment has been opened for readonly access.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the environment home dir is readonly.</color>
<color=#75715e>   * @throws IllegalArgumentException via Environment ctor</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkEnvHomePermissions</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>rdOnly</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDataDirs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>checkEnvHomePermissionsSingleEnvDir</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>rdOnly</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>checkEnvHomePermissionsMultiEnvDir</color><color=#f8f8f2>(</color><color=#f8f8f2>rdOnly</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkEnvHomePermissionsSingleEnvDir</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rdOnly</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>envDirIsReadOnly</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>canWrite</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envDirIsReadOnly</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>rdOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Use the absolute path in the exception message, to</color>
<color=#75715e>       * make a mis-specified relative path problem more obvious.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The Environment directory "</color>
              <color=#f92672>+</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" is not writable, but the "</color>
              <color=#f92672>+</color> <color=#e6db74>"Environment was opened for read-write access."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envDirIsReadOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkEnvHomePermissionsMultiEnvDir</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>rdOnly</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dbEnvDir</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkEnvHomePermissionsSingleEnvDir</color><color=#f8f8f2>(</color><color=#f8f8f2>dbEnvDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>rdOnly</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Truncate a log at this position. Used by recovery to a timestamp utilities and by recovery to</color>
<color=#75715e>   * set the end-of-log position, see LastFileReader.setEndOfFile().</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method forces a new log file to be written next, if the last file (the file truncated</color>
<color=#75715e>   * to) has an old version in its header. This ensures that when the log is opened by an old</color>
<color=#75715e>   * version of JE, a version incompatibility will be detected. [#11243]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>truncateSingleFile</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>handle</color> <color=#f92672>=</color> <color=#f8f8f2>makeFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>getAppropriateReadWriteMode</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>handle</color><color=#f8f8f2>.</color><color=#a6e22e>getFile</color><color=#f8f8f2>();</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>truncate</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handle</color><color=#f8f8f2>.</color><color=#a6e22e>isOldHeaderVersion</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>forceNewFile</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CHECKSUM</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Truncate all log entries after a specified log entry, the position of</color>
<color=#75715e>   * that entry is specified by the fileNum and offset, we do this to avoid</color>
<color=#75715e>   * the log file gap. Used by replication hard recovery and the</color>
<color=#75715e>   * DbTruncateLog utility, see SR [#19463].</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>truncateLog</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Truncate the log files following by this log file in descending</color>
<color=#75715e>     * order to avoid the log entry gap, see SR [#19463].</color>
<color=#75715e>     */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>getLastFileNum</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Do nothing if this file doesn't exist. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isFileValid</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If this is the file that truncation starts, invoke</color>
<color=#75715e>       * truncateSingleFile. If the offset is 0, which means the</color>
<color=#75715e>       * FileHeader is also deleted, delete the whole file to avoid a log</color>
<color=#75715e>       * file gap.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>truncateSingleFile</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>deleted</color> <color=#f92672>=</color> <color=#f8f8f2>deleteFile</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>deleted</color> <color=#f8f8f2>:</color> <color=#e6db74>"File "</color> <color=#f92672>+</color> <color=#f8f8f2>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>JE_SUFFIX</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" not deleted during truncateLog"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Mark the specified log entries as invisible and obsolete. The entries are written here, but are</color>
<color=#75715e>   * fsync'ed later. If there is any problem or exception during the setting, the method will throw</color>
<color=#75715e>   * an EnvironmentFailureException.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>These changes are made directly to the file, but recently logged log entries may also be</color>
<color=#75715e>   * resident in the log buffers. The caller must take care to call LogManager.flush() before this</color>
<color=#75715e>   * method, to ensure that all entries are on disk.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, we must ensure that after this step, the affected log entries will only be read</color>
<color=#75715e>   * via a FileReader, and will not be faulted in by the LogManager. Entries may be present in the</color>
<color=#75715e>   * log and in the log buffers, but only the on disk version is modified by this method. The</color>
<color=#75715e>   * LogManager can read directly from the log buffers and may read the incorrect, non-invisible</color>
<color=#75715e>   * version of the log entry, rather than the invisible version from the file. This should not be</color>
<color=#75715e>   * an issue, because invisible log entries should be detached from the in-memory tree before they</color>
<color=#75715e>   * are made invisible.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fileNum target file.</color>
<color=#75715e>   * @param lsns The list of LSNs to make invisible, must be sorted in ascending order.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>makeInvisible</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>lsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Open this file. */</color>
    <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>handle</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Note that we are getting a new, non-cached file handle for</color>
<color=#75715e>       * specific use by this method.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>handle</color> <color=#f92672>=</color> <color=#f8f8f2>makeFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>getAppropriateReadWriteMode</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CHECKSUM</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Opening file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color> <color=#f92672>+</color> <color=#e6db74>" for invisible marking "</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Opening file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color> <color=#f92672>+</color> <color=#e6db74>" for invisible marking "</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>handle</color><color=#f8f8f2>.</color><color=#a6e22e>getFile</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Set the invisible bit for each entry. */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * This failure will not invalidate the environment right</color>
<color=#75715e>           * away. But since it causes replication syncup to fail,</color>
<color=#75715e>           * the environment will shutdown, which is the effect we</color>
<color=#75715e>           * want.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>UNEXPECTED_STATE</color><color=#f8f8f2>,</color>
              <color=#e6db74>"LSN of "</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" did not match file number"</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>entryFlagsOffset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>FLAGS_OFFSET</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>entryFlagsOffset</color><color=#f8f8f2>);</color>
        <color=#66d9ef>byte</color> <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>readByte</color><color=#f8f8f2>();</color>
        <color=#66d9ef>byte</color> <color=#f8f8f2>newFlags</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>makeInvisible</color><color=#f8f8f2>(</color><color=#f8f8f2>flags</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>entryFlagsOffset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>writeByte</color><color=#f8f8f2>(</color><color=#f8f8f2>newFlags</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_WRITE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Flipping invisibility in file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Just close the file. Fsyncs will be done later on, in the hope</color>
<color=#75715e>       * that the OS has already synced asynchronously.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_WRITE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Closing after invisibility cloaking: file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Fsync this set of log files. Used for replication syncup rollback. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>force</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>fileNums</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileNums</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>handle</color> <color=#f92672>=</color> <color=#f8f8f2>makeFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>getAppropriateReadWriteMode</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>handle</color><color=#f8f8f2>.</color><color=#a6e22e>getFile</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>force</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>nLogFSyncs</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Invisible fsyncing file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CHECKSUM</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Invisible fsyncing file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_WRITE</color><color=#f8f8f2>,</color> <color=#e6db74>"Invisible fsyncing file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_WRITE</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Invisible fsyncing file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set the flag that causes a new file to be written before the next write. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>forceNewLogFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>forceNewFile</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the offset of the first log entry after the file header.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the size in bytes of the file header log entry.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>firstLogEntryOffset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>FileHeader</color><color=#f8f8f2>.</color><color=#a6e22e>entrySize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_HEADER_SIZE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the next available LSN in the log. Note that this is unsynchronized, so if it is called</color>
<color=#75715e>   * outside the log write latch it is only valid as an approximation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNextLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nextAvailableLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the last allocated LSN in the log. Note that this is unsynchronized, so if it is called</color>
<color=#75715e>   * outside the log write latch it is only valid as an approximation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastUsedLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastUsedLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>StatGroup</color> <color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nOpenFiles</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>fileCache</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>copyStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>());</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>copyStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Unit test support</color>
<color=#75715e>   */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * @return ids of files in cache</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getCacheKeys</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileCache</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheKeys</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Clear a file out of the file cache regardless of mode type. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clearFileCache</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileCache</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The file cache keeps N RandomAccessFile objects cached for file</color>
<color=#75715e>   * access. The cache consists of two parts: a Hashtable that doesn't</color>
<color=#75715e>   * require extra synchronization, for the most common access, and a linked</color>
<color=#75715e>   * list of files to support cache administration. Looking up a file from</color>
<color=#75715e>   * the hash table doesn't require extra latching, but adding or deleting a</color>
<color=#75715e>   * file does.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FileCache</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileHandle</color><color=#f92672>></color> <color=#f8f8f2>fileMap</color><color=#f8f8f2>;</color> <color=#75715e>// Long->file</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>fileList</color><color=#f8f8f2>;</color> <color=#75715e>// list of file numbers</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>fileCacheSize</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>FileCache</color><color=#f8f8f2>(</color><color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A fileMap maps the file number to FileHandles (RandomAccessFile,</color>
<color=#75715e>       * latch). The fileList is a list of Longs to determine which files</color>
<color=#75715e>       * to eject out of the file cache if it's too small.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>fileMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Hashtable</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileHandle</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fileList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fileCacheSize</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_CACHE_SIZE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>FileHandle</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileId</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Does the cache have any room or do we have to evict?  Hunt down</color>
<color=#75715e>       * the file list for an unused file. Note that the file cache might</color>
<color=#75715e>       * actually grow past the prescribed size if there is nothing</color>
<color=#75715e>       * evictable. Should we try to shrink the file cache? Presently if</color>
<color=#75715e>       * it grows, it doesn't shrink.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#f8f8f2>fileCacheSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>fileList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Long</color> <color=#f8f8f2>evictId</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>evictTarget</color> <color=#f92672>=</color> <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>evictId</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Try to latch. If latchNoWait returns false, then another</color>
<color=#75715e>           * thread owns this latch. Note that a thread that's trying</color>
<color=#75715e>           * to get a new file handle should never already own the</color>
<color=#75715e>           * latch on another file handle, because these latches are</color>
<color=#75715e>           * meant to be short lived and only held over the i/o out</color>
<color=#75715e>           * of the file.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictTarget</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoWait</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>evictId</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>evictTarget</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>evictTarget</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We've done our best to evict. Add the file the the cache now</color>
<color=#75715e>       * whether or not we did evict.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>fileList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>fileId</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>fileId</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileHandle</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Take any file handles corresponding to this file name out of the cache. A file handle could</color>
<color=#75715e>     * be there twice, in rd only and in r/w mode.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>fileList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Long</color> <color=#f8f8f2>evictId</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>evictId</color><color=#f8f8f2>.</color><color=#a6e22e>longValue</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>evictTarget</color> <color=#f92672>=</color> <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>evictId</color><color=#f8f8f2>);</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>evictTarget</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>evictId</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>evictTarget</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>evictTarget</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>FileHandle</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>FileHandle</color> <color=#f8f8f2>fileHandle</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fileHandle</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fileList</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getCacheKeys</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fileMap</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The LogEndFileDescriptor is used to write and fsync the end of the log. Because the JE log is</color>
<color=#75715e>   * append only, there is only one logical R/W file descriptor for the whole environment. This</color>
<color=#75715e>   * class actually implements two RandomAccessFile instances, one for writing and one for fsyncing,</color>
<color=#75715e>   * so the two types of operations don't block each other.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The write file descriptor is considered the master. Manipulation of this class is done under</color>
<color=#75715e>   * the log write latch. Here's an explanation of why the log write latch is sufficient to</color>
<color=#75715e>   * safeguard all operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>There are two types of callers who may use this file descriptor: the thread that is</color>
<color=#75715e>   * currently writing to the end of the log and any threads that are fsyncing on behalf of the</color>
<color=#75715e>   * FSyncManager.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The writing thread appends data to the file and fsyncs the file when we flip over to a new</color>
<color=#75715e>   * log file. The file is only instantiated at the point that it must do so -- which is either when</color>
<color=#75715e>   * the first fsync is required by JE or when the log file is full and we flip files. Therefore,</color>
<color=#75715e>   * the writing thread has two actions that change this descriptor -- we initialize the file</color>
<color=#75715e>   * descriptor for the given log file at the first write to the file, and we close the file</color>
<color=#75715e>   * descriptor when the log file is full. Therefore is a period when there is no log descriptor --</color>
<color=#75715e>   * when we have not yet written a log buffer into a given log file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The fsyncing threads ask for the log end file descriptor asynchronously, but will never</color>
<color=#75715e>   * modify it. These threads may arrive at the point when the file descriptor is null, and</color>
<color=#75715e>   * therefore skip their fysnc, but that is fine because it means a writing thread already flipped</color>
<color=#75715e>   * that target file and has moved on to the next file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Time Activity 10 thread 1 writes log entry A into file 0x0, issues fsync outside of log</color>
<color=#75715e>   * write latch, yields the processor 20 thread 2 writes log entry B, piggybacks off thread 1 30</color>
<color=#75715e>   * thread 3 writes log entry C, but no room left in that file, so it flips the log, and fsyncs</color>
<color=#75715e>   * file 0x0, all under the log write latch. It nulls out endOfLogRWFile, moves onto file 0x1, but</color>
<color=#75715e>   * doesn't create the file yet. 40 thread 1 finally comes along, but endOfLogRWFile is null-- no</color>
<color=#75715e>   * need to fsync in that case, 0x0 got fsynced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If a write is attempted and an fsync is already in progress, then the information pertaining</color>
<color=#75715e>   * to the data to be written (data, offset, length) is saved away in the "queuedWrites" array.</color>
<color=#75715e>   * When the fsync completes, the queuedWrites buffer is emptied. This ensures that writes continue</color>
<color=#75715e>   * to execute on file systems which block all IO calls during an fsync() call (e.g. ext3).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>class</color> <color=#a6e22e>LogEndFileDescriptor</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>endOfLogRWFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>endOfLogSyncFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReentrantLock</color> <color=#f8f8f2>fsyncFileSynchronizer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReentrantLock</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Holds all data for writes which have been queued due to their</color>
<color=#75715e>     * being blocked by an fsync when the original write was attempted.</color>
<color=#75715e>     * The next thread to execute an fsync or write will execute any</color>
<color=#75715e>     * queued writes in this buffer.</color>
<color=#75715e>     * Latch order is fsyncFileSynchronizer, followed by the queuedWrites</color>
<color=#75715e>     * mutex [ synchronized (queuedWrites) {} ].</color>
<color=#75715e>     *</color>
<color=#75715e>     * Default protection for unit tests.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>queuedWrites</color> <color=#f92672>=</color> <color=#f8f8f2>useWriteQueue</color> <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>writeQueueSize</color><color=#f92672>]</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Current position in the queuedWrites array. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>queuedWritesPosition</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The starting offset on disk of the first byte in queuedWrites. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>qwStartingOffset</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The file number that the queuedWrites are destined for. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>qwFileNum</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/* For unit tests. */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>setQueueFileNum</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>qwFileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>qwFileNum</color> <color=#f92672>=</color> <color=#f8f8f2>qwFileNum</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check if fileNo/offset is present in queuedWrites, and if so, fill</color>
<color=#75715e>     * readBuffer with those bytes.  We theorize that this is needed</color>
<color=#75715e>     * because HA will be reading at the very end of the log and those</color>
<color=#75715e>     * writes, if enqueued, may no longer be in LogBuffers in the</color>
<color=#75715e>     * LogBufferPool.  This might happen in the case of lots of concurrent</color>
<color=#75715e>     * non-synchronous writes (with synchronous commits) which become</color>
<color=#75715e>     * enqueued in the queuedWrites cache, but cycle out of the LBP.  In</color>
<color=#75715e>     * general, using synchronous commits with HA is a bad idea.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Default protection for unit tests.</color>
<color=#75715e>     * @return true if more data was available. If so, the read buffer</color>
<color=#75715e>     * will be filled up.</color>
<color=#75715e>     */</color>
    <color=#75715e>/* private */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>checkWriteCache</color><color=#f8f8f2>(</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>requestedOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>targetBufSize</color> <color=#f92672>=</color> <color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>queuedWrites</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>qwFileNum</color> <color=#f92672>!=</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>queuedWritesPosition</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requestedOffset</color> <color=#f92672><</color> <color=#f8f8f2>qwStartingOffset</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>qwStartingOffset</color> <color=#f92672>+</color> <color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#f8f8f2>requestedOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* We have the bytes available. */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>nBytesToCopy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>queuedWritesPosition</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>requestedOffset</color> <color=#f92672>-</color> <color=#f8f8f2>qwStartingOffset</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>nBytesToCopy</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>nBytesToCopy</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetBufSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>readBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>queuedWrites</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>requestedOffset</color> <color=#f92672>-</color> <color=#f8f8f2>qwStartingOffset</color><color=#f8f8f2>),</color> <color=#f8f8f2>nBytesToCopy</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>nBytesReadFromWriteQueue</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>nBytesToCopy</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>nReadsFromWriteQueue</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Enqueue a blocked write call for later execution by the next thread</color>
<color=#75715e>     * to do either an fsync or write call. fsyncFileSynchronizer is not</color>
<color=#75715e>     * held when this is called.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Default protection for unit tests.</color>
<color=#75715e>     */</color>
    <color=#75715e>/* private */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>enqueueWrite</color><color=#f8f8f2>(</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>arrayOffset</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>isHeldByCurrentThread</color><color=#f8f8f2>();</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>enqueueWrite1</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>arrayOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RelatchRequiredException</color> <color=#f8f8f2>RE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dequeuePendingWrites</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Give up after two tries. */</color>
      <color=#f8f8f2>nWriteQueueOverflowFailures</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>enqueueWrite1</color><color=#f8f8f2>(</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>arrayOffset</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>RelatchRequiredException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The queuedWrites queue only ever holds writes for a single file.</color>
<color=#75715e>       *</color>
<color=#75715e>       * This check is safe because qwFileNum can only ever change inside</color>
<color=#75715e>       * enqueueWrite which can only ever be called while the Log Write</color>
<color=#75715e>       * Latch is held.</color>
<color=#75715e>       *</color>
<color=#75715e>       * NOTE: We believe the commented out second condition is safe</color>
<color=#75715e>       * to add to the code if we ever see contention with this call to</color>
<color=#75715e>       * dequeuePendingWrites against an fsync.  Here is the reasoning:</color>
<color=#75715e>       *</color>
<color=#75715e>       * queuedWritesPosition is changed in two places: (1) enqueueWrite1</color>
<color=#75715e>       * where it is incremented, and (2) dequeuePendingWrites1 where it</color>
<color=#75715e>       * is zeroed. Both of these places are proected by the queuedWrites</color>
<color=#75715e>       * mutex.  The zero'ing (2) will only make the dequeue unnecessary</color>
<color=#75715e>       * so the extra commented out check below is safe since it will</color>
<color=#75715e>       * only result in eliminating an unnecessary dequeuePendingWrites</color>
<color=#75715e>       * call.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>qwFileNum</color> <color=#f92672><</color> <color=#f8f8f2>fileNum</color> <color=#75715e>/* && queuedWritesPosition > 0 */</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dequeuePendingWrites</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>qwFileNum</color> <color=#f92672>=</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>queuedWrites</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>overflow</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeQueueSize</color> <color=#f92672>-</color> <color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>overflow</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nWriteQueueOverflow</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Since we can't write this "write call" into the</color>
<color=#75715e>           * ByteBuffer without overflowing, we will try to dequeue</color>
<color=#75715e>           * all current writes in the buffer.  But that requires</color>
<color=#75715e>           * holding the fsyncFileSynchronizer latch first which</color>
<color=#75715e>           * would be latching out of order relative to the</color>
<color=#75715e>           * queuedWrites mutex.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>RelatchRequiredException</color><color=#f8f8f2>.</color><color=#a6e22e>relatchRequiredException</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>assert</color> <color=#f8f8f2>qwFileNum</color> <color=#f92672>==</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>curPos</color> <color=#f92672>=</color> <color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curPos</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * This is the first entry in queue.  Set qwStartingOffset.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>qwStartingOffset</color> <color=#f92672>=</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curPos</color> <color=#f92672>+</color> <color=#f8f8f2>qwStartingOffset</color> <color=#f92672>!=</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color>
              <color=#e6db74>"non-consecutive writes queued. "</color>
                  <color=#f92672>+</color> <color=#e6db74>"qwPos="</color>
                  <color=#f92672>+</color> <color=#f8f8f2>queuedWritesPosition</color>
                  <color=#f92672>+</color> <color=#e6db74>" write destOffset="</color>
                  <color=#f92672>+</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>arrayOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>queuedWrites</color><color=#f8f8f2>,</color> <color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>queuedWritesPosition</color> <color=#f92672>+=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Returns whether anything is in the write queue. */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>hasQueuedWrites</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>queuedWritesPosition</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Execute pending writes.  Assumes fsyncFileSynchronizer is not held.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>dequeuePendingWrites</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>isHeldByCurrentThread</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dequeuePendingWrites1</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Execute pending writes.  Assumes fsyncFileSynchronizer is held.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>dequeuePendingWrites1</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>isHeldByCurrentThread</color><color=#f8f8f2>();</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>queuedWrites</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Nothing to see here.  Move along. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>queuedWritesPosition</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>getWritableFile</color><color=#f8f8f2>(</color><color=#f8f8f2>qwFileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
          <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>qwStartingOffset</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>queuedWrites</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>nBytesWrittenFromWriteQueue</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>nWritesFromWriteQueue</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>VERIFY_CHECKSUMS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>qwStartingOffset</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>queuedWrites</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>bb</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>bb</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>queuedWrites</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>queuedWritesPosition</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>bb</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>verifyChecksums</color><color=#f8f8f2>(</color><color=#f8f8f2>bb</color><color=#f8f8f2>,</color> <color=#f8f8f2>qwStartingOffset</color><color=#f8f8f2>,</color> <color=#e6db74>"post-write"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* We flushed the queue.  Reset the buffer. */</color>
          <color=#f8f8f2>queuedWritesPosition</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogWriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"IOException during fsync"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * getWritableFile must be called under the log write latch.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Typically, endOfLogRWFile is not null. Hence the fsyncFileSynchronizer does not need to be</color>
<color=#75715e>     * locked (which would block the write queue from operating.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>RandomAccessFile</color> <color=#a6e22e>getWritableFile</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNumber</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>endOfLogRWFile</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * We need to make a file descriptor for the end of the</color>
<color=#75715e>           * log.  This is guaranteed to be called under the log</color>
<color=#75715e>           * write latch.</color>
<color=#75715e>           *</color>
<color=#75715e>           * Protect both the RWFile and SyncFile under this lock,</color>
<color=#75715e>           * to avoid a race for creating the file and writing the</color>
<color=#75715e>           * header.  [#20732]</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>endOfLogRWFile</color> <color=#f92672>=</color> <color=#f8f8f2>makeFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNumber</color><color=#f8f8f2>,</color> <color=#f8f8f2>getAppropriateReadWriteMode</color><color=#f8f8f2>()).</color><color=#a6e22e>getFile</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>endOfLogSyncFile</color> <color=#f92672>=</color> <color=#f8f8f2>makeFileHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNumber</color><color=#f8f8f2>,</color> <color=#f8f8f2>getAppropriateReadWriteMode</color><color=#f8f8f2>()).</color><color=#a6e22e>getFile</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>endOfLogRWFile</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If we can't get a write channel, we need to invalidate the</color>
<color=#75715e>         * environment.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** FSync the log file that makes up the end of the log. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>force</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>COUNT_FORCE</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get a local copy of the end of the log file descriptor, it could</color>
<color=#75715e>       * change. No need to latch, no harm done if we get an old file</color>
<color=#75715e>       * descriptor, because we forcibly fsync under the log write latch</color>
<color=#75715e>       * when we switch files.</color>
<color=#75715e>       *</color>
<color=#75715e>       * If there is no current end file descriptor, we know that the log</color>
<color=#75715e>       * file has flipped to a new file since the fsync was issued.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

        <color=#75715e>/* Flush any queued writes. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useWriteQueue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dequeuePendingWrites1</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>endOfLogSyncFile</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>bumpWriteCount</color><color=#f8f8f2>(</color><color=#e6db74>"fsync"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>FileChannel</color> <color=#f8f8f2>ch</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>();</color>

          <color=#66d9ef>long</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ch</color><color=#f8f8f2>.</color><color=#a6e22e>force</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClosedChannelException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * The channel should never be closed. It may be closed</color>
<color=#75715e>             * because of an interrupt received by another thread.</color>
<color=#75715e>             * See SR [#10463].</color>
<color=#75715e>             */</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Channel closed, may be due to thread interrupt"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fSyncMs</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>nLogFSyncs</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>nFSyncTime</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>fSyncMs</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nFSyncMaxTime</color><color=#f8f8f2>.</color><color=#a6e22e>setMax</color><color=#f8f8f2>(</color><color=#f8f8f2>fSyncMs</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>fSyncTimeLimit</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>fSyncMs</color> <color=#f92672>></color> <color=#f8f8f2>fSyncTimeLimit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"FSync time of %d ms exceeds limit (%d ms)"</color><color=#f8f8f2>,</color> <color=#f8f8f2>fSyncMs</color><color=#f8f8f2>,</color> <color=#f8f8f2>fSyncTimeLimit</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>assert</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>maybeForceYield</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Flush any writes which were queued while fsync'ing. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useWriteQueue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dequeuePendingWrites1</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Close the end of the log file descriptor. Use atomic assignment to ensure that we won't force</color>
<color=#75715e>     * and close on the same descriptor.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Protect both the RWFile and SyncFile under this lock out of</color>
<color=#75715e>       * paranoia, although we don't expect two threads to call close</color>
<color=#75715e>       * concurrently.  [#20732]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>IOException</color> <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>endOfLogRWFile</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>endOfLogRWFile</color><color=#f8f8f2>;</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Null out so that other threads know endOfLogRWFile is no</color>
<color=#75715e>           * longer available.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>endOfLogRWFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Save this exception, so we can try second close. */</color>
            <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>endOfLogSyncFile</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>endOfLogSyncFile</color><color=#f8f8f2>;</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Null out so that other threads know endOfLogSyncFile is</color>
<color=#75715e>           * no longer available.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>endOfLogSyncFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>firstException</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fsyncFileSynchronizer</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Generate IOExceptions for testing.</color>
<color=#75715e>   */</color>

  <color=#75715e>/* Testing switch. public so others can read the value. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>LOGWRITE_EXCEPTION_TESTING</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>RRET_PROPERTY_NAME</color> <color=#f92672>=</color> <color=#e6db74>"je.logwrite.exception.testing"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LOGWRITE_EXCEPTION_TESTING</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>RRET_PROPERTY_NAME</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Max write counter value. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOGWRITE_EXCEPTION_MAX</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>
  <color=#75715e>/* Current write counter value. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>logWriteExceptionCounter</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#75715e>/* Whether an exception has been thrown. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>logWriteExceptionThrown</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#75715e>/* Random number generator. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Random</color> <color=#f8f8f2>logWriteExceptionRandom</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>generateLogWriteException</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logWriteExceptionThrown</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>(</color><color=#e6db74>"Write after LogWriteException"</color><color=#f8f8f2>)).</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>logWriteExceptionCounter</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logWriteExceptionCounter</color> <color=#f92672>>=</color> <color=#f8f8f2>LOGWRITE_EXCEPTION_MAX</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logWriteExceptionCounter</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logWriteExceptionRandom</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logWriteExceptionRandom</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Random</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logWriteExceptionCounter</color> <color=#f92672>==</color> <color=#f8f8f2>logWriteExceptionRandom</color><color=#f8f8f2>.</color><color=#a6e22e>nextInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LOGWRITE_EXCEPTION_MAX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>logWriteExceptionRandom</color><color=#f8f8f2>.</color><color=#a6e22e>nextInt</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writeToFile</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>destOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*flushRequired*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>logWriteExceptionThrown</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Randomly generated for testing"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The factory interface for creating RandomAccessFiles. For production use, the default factory</color>
<color=#75715e>   * is always used and a DefaultRandomAccessFile is always created. For testing, the factory can be</color>
<color=#75715e>   * overridden to return a subclass of DefaultRandomAccessFile that overrides methods and injects</color>
<color=#75715e>   * faults, for example.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>FileFactory</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param envHome can be used to distinguish environments in a test program that opens multiple</color>
<color=#75715e>     *     environments. Not for production use.</color>
<color=#75715e>     * @param fullName the full file name to be passed to the RandomAccessFile constructor.</color>
<color=#75715e>     * @param mode the file mode to be passed to the RandomAccessFile constructor.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RandomAccessFile</color> <color=#a6e22e>createFile</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fullName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>mode</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The RandomAccessFile for production use. Tests that override the default FileFactory should</color>
<color=#75715e>   * return a RandomAccessFile that subclasses this class to inherit workarounds such as the</color>
<color=#75715e>   * overridden length method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DefaultRandomAccessFile</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#a6e22e>DefaultRandomAccessFile</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fullName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>mode</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>fullName</color><color=#f8f8f2>,</color> <color=#f8f8f2>mode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * RandomAccessFile.length() is not thread safe and side-effects the file pointer if interrupted</color>
<color=#75715e>     * in the middle. It is synchronized here to work around that problem.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>long</color> <color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The factory instance used to create RandomAccessFiles. This field is intentionally public and</color>
<color=#75715e>   * non-static so it may be set by tests. See FileFactory.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>FileFactory</color> <color=#f8f8f2>fileFactory</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>FileFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>RandomAccessFile</color> <color=#a6e22e>createFile</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fullName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>mode</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DefaultRandomAccessFile</color><color=#f8f8f2>(</color><color=#f8f8f2>fullName</color><color=#f8f8f2>,</color> <color=#f8f8f2>mode</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>};</color>
<color=#f8f8f2>}</color>