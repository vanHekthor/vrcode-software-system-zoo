<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.Proposal</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.CountDownLatch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Ensures that a VLSN is not advanced at this node while an election is in progress. Note that this</color>
<color=#75715e> * is difficult, if not impossible to achieve efficiently in a distributed environment across the</color>
<color=#75715e> * entire group, when communications may not always be reliable. So, the implementation really</color>
<color=#75715e> * represents a good faith effort to freeze the VLSN. JE HA itself should be able to make forward</color>
<color=#75715e> * progress in the event of such a failure.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The class coordinates three threads: the acceptor, the learner, and the replay thread. There</color>
<color=#75715e> * is exactly one instance of each thread per replication node, so it coordinates the activity of</color>
<color=#75715e> * these three threads.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The typical serialized sequence of calls is therefore:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>latch.freeze() -- invoked in response to a Promise by an Acceptor latch.vlsnEvent() -- one or</color>
<color=#75715e> * more of them in response to ongoing election latch.awaitThaw() -- by the replica thread waiting</color>
<color=#75715e> * for the freeze to lift</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Both vlsnEvent() and awaitThaw() are NOPs in the absence of a freeze.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a</color>
<color=#75715e> *     href="https://sleepycat.oracle.com/trac/wiki/ElectionsImplementation#FreezingVLSNs">Freezing</color>
<color=#75715e> *     VLSNs</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CommitFreezeLatch</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* The current frozen promise/vlsn pair */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Statistics */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>freezeCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>awaitTimeoutCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>awaitElectionCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The latch used internally. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>latch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#75715e>/* The end time of the freeze. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>freezeEnd</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeOut</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_LATCH_TIMEOUT</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>DEFAULT_LATCH_TIMEOUT</color> <color=#f92672>=</color> <color=#ae81ff>5000</color><color=#f8f8f2>;</color> <color=#75715e>// ms</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getAwaitTimeoutCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>awaitTimeoutCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getAwaitElectionCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>awaitElectionCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getFreezeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>freezeCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTimeOut</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>timeOut</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTimeOut</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeOut</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>timeOut</color> <color=#f92672>=</color> <color=#f8f8f2>timeOut</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initiates or extends a freeze on a VLSN in response to a new election that is in progress. It's</color>
<color=#75715e>   * invoked by the Acceptor thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param freezeProposal identifies the election that is provoking the freeze</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>freeze</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>freezeProposal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>proposal</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>freezeProposal</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>proposal</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>// Older proposal ignore it.</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>latch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Enable waiters who will reacquire the new latch below. */</color>
      <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>latch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CountDownLatch</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>proposal</color> <color=#f92672>=</color> <color=#f8f8f2>freezeProposal</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>freezeEnd</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>timeOut</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invoked by the Learner thread whenever it receives an election result. The freeze on the VLSN</color>
<color=#75715e>   * is only lifted if the proposal associated with the event is current, that is, it represents a</color>
<color=#75715e>   * proposal that is newer than the one used to establish the freeze.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param listenerProposal identifies the election that just concluded</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>vlsnEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>listenerProposal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>proposal</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// No VLSN to unfreeze</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>listenerProposal</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>proposal</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Clears the latch freeing any waiters. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>clearLatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>latch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>latch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>proposal</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>freezeEnd</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to wait for an event that unfreezes the VLSN. In our case this event is a message to the</color>
<color=#75715e>   * Learner agent announcing the result of an election. Note that the latch must be re-initialized</color>
<color=#75715e>   * after a return from this await method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is invoked by the Replay thread. Completion of an awaitThaw always results in</color>
<color=#75715e>   * the freeze being lifted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the await was satisfied due to completion of an election, false if no freeze</color>
<color=#75715e>   *     was in effect, or the latch was timed out.</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>awaitThaw</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>awaitLatch</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>awaitTimeout</color><color=#f8f8f2>;</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Copy out the values of interest  */</color>
      <color=#f8f8f2>awaitLatch</color> <color=#f92672>=</color> <color=#f8f8f2>latch</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>awaitLatch</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>awaitTimeout</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>freezeEnd</color> <color=#f92672>-</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>freezeCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#f8f8f2>awaitLatch</color><color=#f8f8f2>.</color><color=#a6e22e>await</color><color=#f8f8f2>(</color><color=#f8f8f2>awaitTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>awaitElectionCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>clearLatch</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>freezeEnd</color> <color=#f92672>-</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>awaitTimeoutCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#75715e>/* freeze end was not extended, election completed. */</color>
        <color=#f8f8f2>clearLatch</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Re-acquire the new latch and wait for the extended timeout. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>awaitThaw</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>