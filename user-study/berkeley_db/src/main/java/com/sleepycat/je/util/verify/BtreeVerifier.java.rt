<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.util.verify</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.UtilizationProfile</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.ChecksumException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.FileManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.WholeEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.RestoreRequired</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockerFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.utilint.StringUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BtreeVerifier</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>LOCKTYPE_NOLOCK</color> <color=#f92672>=</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReadOptions</color><color=#f8f8f2>();</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>READLOCK_UNCHANGED</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReadOptions</color><color=#f8f8f2>();</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>.</color><color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>.</color><color=#a6e22e>setLockMode</color><color=#f8f8f2>(</color><color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>READLOCK_UNCHANGED</color><color=#f8f8f2>.</color><color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>READLOCK_UNCHANGED</color><color=#f8f8f2>.</color><color=#a6e22e>setLockMode</color><color=#f8f8f2>(</color><color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileManager</color> <color=#f8f8f2>fileManager</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogManager</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configMgr</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>UtilizationProfile</color> <color=#f8f8f2>up</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileSizeCache</color> <color=#f8f8f2>fsCache</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ObsoleteOffsetsCache</color> <color=#f8f8f2>ooCache</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>stopVerify</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>VerifyConfig</color> <color=#f8f8f2>btreeVerifyConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>VerifyConfig</color><color=#f8f8f2>();</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color> <color=#f8f8f2>databaseOperBeforeBatchCheckHook</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color> <color=#f8f8f2>databaseOperDuringBatchCheckHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a BtreeVerifier object for Btree verification. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>BtreeVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fileManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getFileManager</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>configMgr</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>up</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationProfile</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fsCache</color> <color=#f92672>=</color> <color=#f8f8f2>createFileSizeCache</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ooCache</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ObsoleteOffsetsCache</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Verifies all databases in the environment, including idDatabase and nameDatabase. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyAll</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This aims to guarantee that only if DataVerifier.shutdown is</color>
<color=#75715e>     * called, then BtreeVerifier will do nothing, including not</color>
<color=#75715e>     * verifying the nameDatabase and mapDatabase.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Without this, the following interleaving may appear. The premise</color>
<color=#75715e>     * is that DataVerifier.shutdown is called immediately after</color>
<color=#75715e>     * DataVerifier is created.</color>
<color=#75715e>     *</color>
<color=#75715e>     *           T1                                  Timer</color>
<color=#75715e>     *      verifyTask is created</color>
<color=#75715e>     *      verifyTask is scheduled</color>
<color=#75715e>     *      DataVerifier.shutdown is called</color>
<color=#75715e>     *         verifyTask.cancel()</color>
<color=#75715e>     *         set stop verify flag</color>
<color=#75715e>     *         timer.cancel()</color>
<color=#75715e>     *         check 'task == null || !task.isRunning'</color>
<color=#75715e>     *         Return true because !task.isRunning</color>
<color=#75715e>     *</color>
<color=#75715e>     *                                       Due to some reason, although</color>
<color=#75715e>     *                                       verifyTask.cancel() and</color>
<color=#75715e>     *                                       timer.cancel() is called,</color>
<color=#75715e>     *                                       verifyTask can still execute</color>
<color=#75715e>     *                                       once. So DataVerifier.shutdown</color>
<color=#75715e>     *                                       does not achieve its target.</color>
<color=#75715e>     *  After we add the following code, even if verifyTask can execute,</color>
<color=#75715e>     *  it will do nothing. BtreeVerifier and DbVerifyLog will just return</color>
<color=#75715e>     *  because now we have already set the stop flag to be true.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopVerify</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DbTree</color> <color=#f8f8f2>dbTree</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getShowProgressStream</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getShowProgressStream</color><color=#f8f8f2>()</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>startMsg</color> <color=#f92672>=</color> <color=#e6db74>"Start verify all databases"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>stopMsg</color> <color=#f92672>=</color> <color=#e6db74>"End verify all databases"</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getPrintInfo</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>startMsg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>startMsg</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Verify NameDb and MappingDb. */</color>
      <color=#f8f8f2>verifyOneDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>ID</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DB_ID</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*verifyAll*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>verifyOneDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NAME_DB_ID</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*verifyAll*/</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Verify all the remaining databases.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Get a cursor db on the naming tree. The cursor is used to get</color>
<color=#75715e>       * the name for logging, as well as the ID of each DB. Each DB</color>
<color=#75715e>       * is verified by batch, e.g. verifying 1000 records each time. So</color>
<color=#75715e>       * for each batch, the DB ID will be used to get real-time</color>
<color=#75715e>       * DatabaseImpl. If the databaseImpl is valid, i.e. not null and</color>
<color=#75715e>       * not deleted, then the next batch of records will be verified.</color>
<color=#75715e>       *</color>
<color=#75715e>       * This aims to leave a window where the DatabaseImpl is not in use</color>
<color=#75715e>       * between batches, to allow db truncate/remove operations to run.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>class</color> <color=#a6e22e>Traversal</color> <color=#66d9ef>implements</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>WithCursor</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>withCursor</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color>
            <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
            <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopVerify</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>NameLN</color> <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>NameLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrentLN</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCKTYPE_NOLOCK</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color> <color=#f92672>=</color> <color=#f8f8f2>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>

            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>());</color>

            <color=#f8f8f2>verifyOneDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*verifyAll*/</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>Traversal</color> <color=#f8f8f2>traversal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Traversal</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>traverseDbWithCursor</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>getNameDatabaseImpl</color><color=#f8f8f2>(),</color> <color=#f8f8f2>LOCKTYPE_NOLOCK</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*allowEviction*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>traversal</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getPrintInfo</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>stopMsg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>stopMsg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Verify one database. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>BtreeStats</color> <color=#a6e22e>verifyDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getShowProgressStream</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>verifyOneDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*verifyAll*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Verify one database, a batch at a time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param verifyAll if true, we won't log INFO messages for every database to avoid cluttering the</color>
<color=#75715e>   *     trace log.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>BtreeStats</color> <color=#a6e22e>verifyOneDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verifyAll</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>startMsg</color> <color=#f92672>=</color> <color=#e6db74>"Start verify database: "</color> <color=#f92672>+</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>stopMsg</color> <color=#f92672>=</color> <color=#e6db74>"End verify database: "</color> <color=#f92672>+</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getPrintInfo</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>startMsg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>verifyAll</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>startMsg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>batchSize</color> <color=#f92672>=</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getBatchSize</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>batchDelay</color> <color=#f92672>=</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getBatchDelay</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The accumulated information for this database.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>VerifierStatsAccumulator</color> <color=#f8f8f2>statsAcc</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>VerifierStatsAccumulator</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getShowProgressInterval</color><color=#f8f8f2>());</color>

      <color=#75715e>/* Check whether this DatabaseImpl is primary or secondary db. */</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkOpen</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DbTree</color> <color=#f8f8f2>dbTree</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecondaryDb</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeStats</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color> <color=#f8f8f2>referringHandles</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getReferringHandles</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f8f8f2>:</color> <color=#f8f8f2>referringHandles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>priDb</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>isSecondaryDb</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>secDb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>)</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>priDb</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastKey</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastData</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkOpen</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dbTree</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopVerify</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseOperBeforeBatchCheckHook</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>databaseOperBeforeBatchCheckHook</color><color=#f8f8f2>.</color><color=#a6e22e>doHook</color><color=#f8f8f2>(</color><color=#f8f8f2>priDb</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>databaseOperBeforeBatchCheckHook</color><color=#f8f8f2>.</color><color=#a6e22e>doHook</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>WalkDatabaseTreeResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>walkDatabaseTree</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>isSecondaryDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>statsAcc</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>,</color> <color=#f8f8f2>batchSize</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>noMoreRecords</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>lastKey</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lastKey</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>lastData</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lastData</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>batchDelay</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#f8f8f2>batchDelay</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>BtreeStats</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeStats</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setDbImplStats</color><color=#f8f8f2>(</color><color=#f8f8f2>statsAcc</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getPrintInfo</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Intentionally use print, not println, because</color>
<color=#75715e>         * stats.toString() puts in a newline too.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>BtreeVerificationException</color> <color=#f8f8f2>bve</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * A persistent corruption is detected due to the btree</color>
<color=#75715e>       * corruption, or a checksum exception was encountered when</color>
<color=#75715e>       * trying to read the entry from disk to determine whether</color>
<color=#75715e>       * the corruption is persistent.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bve</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ChecksumException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * When a checksum exception occurs during processing of a</color>
<color=#75715e>         * Btree corruption, the checksum error should override,</color>
<color=#75715e>         * because it means that the log entry on disk is probably</color>
<color=#75715e>         * meaningless. In other words, this is really a media</color>
<color=#75715e>         * corruption, not a corruption caused by a bug.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>VerifierUtils</color><color=#f8f8f2>.</color><color=#a6e22e>createMarkerFileFromException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>RestoreRequired</color><color=#f8f8f2>.</color><color=#a6e22e>FailureType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CHECKSUM</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>bve</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CHECKSUM</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>VerifierUtils</color><color=#f8f8f2>.</color><color=#a6e22e>createMarkerFileFromException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>RestoreRequired</color><color=#f8f8f2>.</color><color=#a6e22e>FailureType</color><color=#f8f8f2>.</color><color=#a6e22e>BTREE_CORRUPTION</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>bve</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>BTREE_CORRUPTION</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getPrintInfo</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>stopMsg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>verifyAll</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>stopMsg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This method is called in StatsAccumulator.verifyNode, which means that</color>
<color=#75715e>   * this method will execute every time it encounters one upperIN or BIN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * In this method, only the basic structure issue of IN and the dangling</color>
<color=#75715e>   * LSN issue for upperIN are checked. The dangling LSN issue for BIN</color>
<color=#75715e>   * and other features verification, e.g. VERIFY_SECONDARIES,</color>
<color=#75715e>   * VERIFY_DATA_RECORDS and VERIFY_OBSOLETE_RECORDS, are checked when</color>
<color=#75715e>   * the cursor positions at each slot.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>basicBtreeVerify</color><color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * When accessing upper IN, shared latch is used most of the time. It</color>
<color=#75715e>     * is OK to hold this latch longer than usual (because it is shared).</color>
<color=#75715e>     * So the dangling LSN issue for all slots of this upperIN can be</color>
<color=#75715e>     * checked without releasing the latch.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>verifyDanglingLSNAndObsoleteRecordsAllSlots</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For upperIN and BIN, their basic structure is checked here. This may</color>
<color=#75715e>     * also hold the latch for a long time.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>verifyCommonStructure</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Possible basic structure may contain:</color>
<color=#75715e>   *  1. keyPrefix</color>
<color=#75715e>   *  2. inMemorySize</color>
<color=#75715e>   *  3. parent IN</color>
<color=#75715e>   *  4. ordered Keys</color>
<color=#75715e>   *  5. identifier Key and so on.</color>
<color=#75715e>   *</color>
<color=#75715e>   * On 1, the keyPrefix cannot be re-calculated from the full keys here,</color>
<color=#75715e>   * since the full keys are not stored in the IN. We could get the full key</color>
<color=#75715e>   * from the LNs, but this would be very slow.</color>
<color=#75715e>   *</color>
<color=#75715e>   * On 2, the inMemorySize may be slightly inaccurate, and this would not be</color>
<color=#75715e>   * considered corruption. It is recalculated during checkpoints to account</color>
<color=#75715e>   * for errors.</color>
<color=#75715e>   *</color>
<color=#75715e>   * For 3, we should verify that the node's parent is correct, i.e. the</color>
<color=#75715e>   * parent should have a slot that refers to the child using the correct</color>
<color=#75715e>   * key. But this has already been done in the current code:</color>
<color=#75715e>   *      There are three places to call IN.accumulateStats, i.e. calling</color>
<color=#75715e>   *      acc.processIN:</color>
<color=#75715e>   *        1. Tree.getNextIN</color>
<color=#75715e>   *        2. Tree.search</color>
<color=#75715e>   *        3. Tree.searchSubTree</color>
<color=#75715e>   *</color>
<color=#75715e>   *      At these places, before calling IN.accumulateStats, the current</color>
<color=#75715e>   *      code uses latchChildShared or latchChild to check whether the</color>
<color=#75715e>   *      parent is right when holding the parent latch and child latch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * For 4 and 5, we can check for corruption here.</color>
<color=#75715e>   * For 4, whole keys need to be obtained using IN.getKey.</color>
<color=#75715e>   * For 5, user's comparator function needs to be called if exists.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyCommonStructure</color><color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isIN</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>verifyOrderedKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>verifyIdentifierKey</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Here we can not get DatabaseImpl from IN, because the IN may be</color>
<color=#75715e>   * read directly from file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>verifyOrderedKeysInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>userCompareToFcn</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key1</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key2</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>key1</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>,</color> <color=#f8f8f2>userCompareToFcn</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyOrderedKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>corruptIndex</color> <color=#f92672>=</color> <color=#f8f8f2>verifyOrderedKeysInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>corruptIndex</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>targetLsns</color> <color=#f92672>=</color> <color=#f8f8f2>getTargetLsns</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>

    <color=#75715e>/* For security/privacy, we cannot output keys. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#e6db74>"IN keys are out of order. "</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg1</color> <color=#f92672>=</color> <color=#f8f8f2>label</color> <color=#f92672>+</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#f8f8f2>corruptIndex</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>corruptIndex</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>inFromFile</color> <color=#f92672>=</color> <color=#f8f8f2>getINFromFile</color><color=#f8f8f2>(</color><color=#f8f8f2>targetLsns</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg1</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>newCorruptIndex</color> <color=#f92672>=</color> <color=#f8f8f2>verifyOrderedKeysInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>inFromFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newCorruptIndex</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>transientMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg1</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg2</color> <color=#f92672>=</color> <color=#f8f8f2>label</color> <color=#f92672>+</color> <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#f8f8f2>newCorruptIndex</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>newCorruptIndex</color><color=#f8f8f2>);</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeVerificationException</color><color=#f8f8f2>(</color><color=#f8f8f2>persistentMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg2</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatchIfOwner</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyIdentifierKey</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>verifyIdentifierKeyInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>targetLsns</color> <color=#f92672>=</color> <color=#f8f8f2>getTargetLsns</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>

    <color=#75715e>/* For security/privacy, we cannot output keys. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#e6db74>"IdentifierKey not present in any slot. "</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg1</color> <color=#f92672>=</color> <color=#f8f8f2>label</color> <color=#f92672>+</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>inFromFile</color> <color=#f92672>=</color> <color=#f8f8f2>getINFromFile</color><color=#f8f8f2>(</color><color=#f8f8f2>targetLsns</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg1</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>verifyIdentifierKeyInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>inFromFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>transientMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg1</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg2</color> <color=#f92672>=</color> <color=#f8f8f2>label</color> <color=#f92672>+</color> <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeVerificationException</color><color=#f8f8f2>(</color><color=#f8f8f2>persistentMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg2</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatchIfOwner</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>verifyIdentifierKeyInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This check can only be done for full BIN, not upperIn and BIN-delta.</color>
<color=#75715e>     * Besides, if the slot number is 0, then we may also not check this.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>identifierKey</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getIdentifierKey</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * There are two problematic cases about identifierKey which are caused</color>
<color=#75715e>     * by some errors in previous code:</color>
<color=#75715e>     *</color>
<color=#75715e>     * (1). The identifierKey is a prefix key due to the DupConvert bug.</color>
<color=#75715e>     *</color>
<color=#75715e>     *    When reading log files written by JE 4.1 or earlier, the</color>
<color=#75715e>     *    identifier key may be incorrect because DupConvert did not</color>
<color=#75715e>     *    convert it correctly. DupConvert converts the identifier key to</color>
<color=#75715e>     *    a prefix key, so it will not match the complete key in any slot.</color>
<color=#75715e>     *</color>
<color=#75715e>     *    We should probably fix DupConvert. But even if we fix it now,</color>
<color=#75715e>     *    it won't help users of JE 5.0 and above who have already upgraded</color>
<color=#75715e>     *    from JE 4.1 or earlier, because DupConvert is only used when</color>
<color=#75715e>     *    reading log files written by JE 4.1 or earlier.</color>
<color=#75715e>     *</color>
<color=#75715e>     *    This issue seems harmless, at least no user reports errors caused</color>
<color=#75715e>     *    by it. So we can choose to ignore this issue. Normally, we can</color>
<color=#75715e>     *    identify this issue by checking the end of the key for the</color>
<color=#75715e>     *    PREFIX_ONLY value. But unfortunately this will also ignore</color>
<color=#75715e>     *    identifier keys that happen to have the PREFIX_ONLY value at the</color>
<color=#75715e>     *    end of a complete key(in the user's data).</color>
<color=#75715e>     *</color>
<color=#75715e>     *    Considering the following second issue, we choose to not check</color>
<color=#75715e>     *    identifierKey for environments who is initially created with</color>
<color=#75715e>     *    LogEntryType.LOG_VERSION being LT 15, where 15 is just the new</color>
<color=#75715e>     *    log version of JE after we fix the following second issue.</color>
<color=#75715e>     *</color>
<color=#75715e>     * (2). The identifierKey is not in any slot due to the BIN-delta</color>
<color=#75715e>     * mutation bug.</color>
<color=#75715e>     *</color>
<color=#75715e>     *     The fullBIN identifierKey may have changed when reconstituteBIN</color>
<color=#75715e>     *     called BIN.compress. The previous code forgot to reset it. Now</color>
<color=#75715e>     *     we fix this by reseting the identifier in BIN.mutateToFullBIN.</color>
<color=#75715e>     *</color>
<color=#75715e>     *     For the problematic identifierKey which is caused by the</color>
<color=#75715e>     *     BIN-delta mutation bug, we do not have good methods to correct</color>
<color=#75715e>     *     them. We can only detect them.</color>
<color=#75715e>     *</color>
<color=#75715e>     *     The problem with detecting them is that we know it is incorrect</color>
<color=#75715e>     *     in past releases, but even when it is incorrect, we don't know</color>
<color=#75715e>     *     the impact on the app in a particular case. It is possible that</color>
<color=#75715e>     *     the app is working OK, even though the identifier key is</color>
<color=#75715e>     *     incorrect. So if we detect it and the app stops working</color>
<color=#75715e>     *     (because we invalidate the env) then we may be making things</color>
<color=#75715e>     *     worse for the app -- this may not be what the user wants.</color>
<color=#75715e>     *</color>
<color=#75715e>     *  So combing above (1) and (2), we need to add a way to know the</color>
<color=#75715e>     *  earliest log version of the env. Then we can only validate the</color>
<color=#75715e>     *  identifierKey when this version is >= 15, where 15 is just the new</color>
<color=#75715e>     *  log version of JE after we fix (2). See DbTree.initialLogVersion</color>
<color=#75715e>     *  and LogEntryType.LOG_VERSION.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>getInitialLogVersion</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#ae81ff>15</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>userCompareToFcn</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>userCompareToFcn</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For upperIN, we verify all the slots at one time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Note that for upperINs, we only need to verify dangling LSN issue</color>
<color=#75715e>   * and basic structure issue. The former is checked here and basic</color>
<color=#75715e>   * structure issue is checked in following verifyCommonStructure.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyDanglingLSNAndObsoleteRecordsAllSlots</color><color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>verifyDanglingLSNAndObsoleteRecordsOneSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isBin*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyDanglingLSNAndObsoleteRecordsOneSlot</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* If the slot of BIN is defunct, then just return. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBin</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>in</color><color=#f8f8f2>).</color><color=#a6e22e>isDefunct</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>verifyDanglingLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>verifyObsoleteRecords</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Verify the dangling LSN issue for each slot of BIN or IN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyDanglingLSN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the environment is opened with setting LOG_MEMORY_ONLY be</color>
<color=#75715e>     * true, there will be no log files. We just ignore it.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isMemOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>DanglingLSNCheckResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>verifyDanglingLSNInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>problematicIndex</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>targetLsns</color> <color=#f92672>=</color> <color=#f8f8f2>getTargetLsns</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>

    <color=#75715e>/* For security/privacy, we cannot output keys. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#e6db74>"LSN is invalid. "</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg1</color> <color=#f92672>=</color> <color=#f8f8f2>label</color> <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getReason</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>problematicIndex</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>inFromFile</color> <color=#f92672>=</color> <color=#f8f8f2>getINFromFile</color><color=#f8f8f2>(</color><color=#f8f8f2>targetLsns</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg1</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>findAgain</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>verifyDanglingLSNInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>inFromFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>problematicIndex</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>findAgain</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>findAgain</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>transientMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg1</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg2</color> <color=#f92672>=</color>
            <color=#f8f8f2>label</color> <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getReason</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>problematicIndex</color><color=#f8f8f2>);</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeVerificationException</color><color=#f8f8f2>(</color><color=#f8f8f2>persistentMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg2</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatchIfOwner</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>DanglingLSNCheckResult</color> <color=#a6e22e>verifyDanglingLSNInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For BIN, if the database has duplicates or the the LN is an</color>
<color=#75715e>     * embedded LN, or the slot is deleted, we do not check the</color>
<color=#75715e>     * dangling LSN issue.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBin</color>
        <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>()</color>
            <color=#f92672>||</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isLNImmediatelyObsolete</color><color=#f8f8f2>()</color>
            <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>in</color><color=#f8f8f2>).</color><color=#a6e22e>isDefunct</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DanglingLSNCheckResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_DANGLING_LSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>curLsn</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>isTransientOrNull</color><color=#f8f8f2>(</color><color=#f8f8f2>curLsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DanglingLSNCheckResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_DANGLING_LSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>curLsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileOffset</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>curLsn</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check whether the corresponding file exist and whether the</color>
<color=#75715e>     * LSN's offset is less than the file's length.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastLoggedSize</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FileSizeInfo</color> <color=#f8f8f2>fsInfo</color> <color=#f92672>=</color> <color=#f8f8f2>getFileSize</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileOffset</color> <color=#f92672>+</color> <color=#f8f8f2>lastLoggedSize</color> <color=#f92672>></color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fsInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DanglingLSNCheckResult</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DanglingLSNCheckResult</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DanglingLSNCheckResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_DANGLING_LSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DanglingLSNCheckResult</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DanglingLSNCheckResult</color> <color=#f8f8f2>NO_DANGLING_LSN</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>DanglingLSNCheckResult</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * -1 means that no dangling LSN issue exists. An integer which</color>
<color=#75715e>     * is gte 0 shows that location of the problematic slot.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>problematicIndex</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * True means the issue is because the file does not exist. False</color>
<color=#75715e>     * means that the issue is because the log entry exceeds the end</color>
<color=#75715e>     * of the file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>fileNotExist</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>FileSizeInfo</color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DanglingLSNCheckResult</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>problematicIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>fileNotExist</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileSizeInfo</color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>problematicIndex</color> <color=#f92672>=</color> <color=#f8f8f2>problematicIndex</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fileNotExist</color> <color=#f92672>=</color> <color=#f8f8f2>fileNotExist</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fsInfo</color> <color=#f92672>=</color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>String</color> <color=#a6e22e>getReason</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNotExist</color>
              <color=#f92672>?</color> <color=#e6db74>"File does not exist. "</color>
              <color=#f8f8f2>:</color> <color=#e6db74>"Offset[+lastLoggerSize] exceeds the end of the file. "</color><color=#f8f8f2>)</color>
          <color=#f92672>+</color> <color=#e6db74>"fileSize="</color>
          <color=#f92672>+</color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color>
          <color=#f92672>+</color> <color=#e6db74>". "</color>
          <color=#f92672>+</color> <color=#f8f8f2>fsInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getReason</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FileSizeInfo</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>sizeFromLastFile</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * True if the file size was previously in the FileSizeCache,</color>
<color=#75715e>     * false if it is calculated and added to the cache.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>sizeFromCache</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>FileSizeInfo</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>sizeFromLastFile</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>sizeFromCache</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sizeFromLastFile</color> <color=#f92672>=</color> <color=#f8f8f2>sizeFromLastFile</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sizeFromCache</color> <color=#f92672>=</color> <color=#f8f8f2>sizeFromCache</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>String</color> <color=#a6e22e>getReason</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>sizeFromLastFile</color>
              <color=#f92672>?</color> <color=#e6db74>"File size from last file"</color>
              <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>sizeFromCache</color> <color=#f92672>?</color> <color=#e6db74>"File size previously cached"</color> <color=#f8f8f2>:</color> <color=#e6db74>"File size added to cache"</color><color=#f8f8f2>))</color>
          <color=#f92672>+</color> <color=#e6db74>". "</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return if the FileSizeInfo.size is gte 0, then it means that the file does exist. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FileSizeInfo</color> <color=#a6e22e>getFileSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * The last file is a special case, because its totalSize is changing</color>
<color=#75715e>     * and this file in the FileSummary is not volatile. For the last file</color>
<color=#75715e>     * we can use getNextLsn to get the fileNum and offset of the last</color>
<color=#75715e>     * file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>nextLsn</color> <color=#f92672>=</color> <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>getNextLsn</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>nextLsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileSizeInfo</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>nextLsn</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>fsCache</color><color=#f8f8f2>.</color><color=#a6e22e>getFileSize</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileSizeInfo</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>first</color><color=#f8f8f2>(),</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>second</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>interface</color> <color=#a6e22e>FileSizeCache</color> <color=#f8f8f2>{</color>

    <color=#75715e>/** @return {wasCached, size} */</color>
    <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#a6e22e>getFileSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>FileSizeCache</color> <color=#a6e22e>createFileSizeCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Currently we don't use the UtilizationProfile for getting file</color>
<color=#75715e>     * sizes because testing has shown it is inaccurate. This needs</color>
<color=#75715e>     * further debugging.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>USE_UP</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>USE_UP</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>UPFileSizeCache</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DirectFileSizeCache</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used to get file sizes directly from the File class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>DirectFileSizeCache</color> <color=#66d9ef>implements</color> <color=#f8f8f2>FileSizeCache</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>cache</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DirectFileSizeCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cache</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#a6e22e>getFileSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>Integer</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>getFullFileName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Use a map to cache the file total size info.</color>
<color=#75715e>   * 1. First call UtilizationProfile.getFileSizeSummaryMap to get the</color>
<color=#75715e>   *    initial copy info.</color>
<color=#75715e>   * 2. When a file is not present in the cached map, call</color>
<color=#75715e>   *    UtilizationProfile.getFileSize to get it and add its total size</color>
<color=#75715e>   *    to the cached map.</color>
<color=#75715e>   * 3. The last file is a special case, because its totalSize is changing</color>
<color=#75715e>   *    and this file in the FileSummary is not volatile. For the last file,</color>
<color=#75715e>   *    we handle it in getFileSize, i.e. using getNextLsn to get the fileNum</color>
<color=#75715e>   *    and offset of the last file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>UPFileSizeCache</color> <color=#66d9ef>implements</color> <color=#f8f8f2>FileSizeCache</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>fileSizeSummaryMap</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>UPFileSizeCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileSizeSummaryMap</color> <color=#f92672>=</color> <color=#f8f8f2>up</color><color=#f8f8f2>.</color><color=#a6e22e>getFileSizeSummaryMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#a6e22e>getFileSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileSizeSummaryMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileSizeSummaryMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>up</color><color=#f8f8f2>.</color><color=#a6e22e>getFileSize</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fileSizeSummaryMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Verify the obsolete records issue for each slot of BIN or IN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyObsoleteRecords</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getVerifyObsoleteRecords</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>databaseImpl</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
    <color=#75715e>/*</color>
<color=#75715e>     * For BIN, if the database is duplicate or the the LN is</color>
<color=#75715e>     * embedded LN, we do not check the dangling LSN issue.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBin</color>
        <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>()</color>
            <color=#f92672>||</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isLNImmediatelyObsolete</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>curLsn</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>curLsn</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * TODO: How to check the corruption is persistent?</color>
<color=#75715e>     *    For dangling LSN, we can read the latest written entry from the</color>
<color=#75715e>     *    log. Although the CRUD operations may cause some slots of the</color>
<color=#75715e>     *    read log entry to be obsolete, for normal case, the file</color>
<color=#75715e>     *    containing these slots should have not been deleted. [Is this</color>
<color=#75715e>     *    right?]. So checking the logged entry is rational.</color>
<color=#75715e>     *</color>
<color=#75715e>     *    But for checking obsolete records, the slots of the read log</color>
<color=#75715e>     *    entry, at the current time point, can really locate at the</color>
<color=#75715e>     *    obsolete offsets. Then is it still rational to re-check the</color>
<color=#75715e>     *    read log entry?. The answer is true.</color>
<color=#75715e>     *</color>
<color=#75715e>     *    If an IN slot has an LSN that is obsolete, and that slot was</color>
<color=#75715e>     *    added or change recently and has not been flushed to disk,</color>
<color=#75715e>     *    then the corruption is not persistent. So re-fetching the IN from</color>
<color=#75715e>     *    disk is needed only to see if the LSN is persistently present</color>
<color=#75715e>     *    in the slot.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#f8f8f2>ooCache</color><color=#f8f8f2>.</color><color=#a6e22e>getOffsets</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the active lsn exists in the obsolete lsn offsets, throw</color>
<color=#75715e>     * EFE.unexpectedException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>binarySearch</color><color=#f8f8f2>(</color><color=#f8f8f2>offsets</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>curLsn</color><color=#f8f8f2>))</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>UNEXPECTED_EXCEPTION_FATAL</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Active lsn is obsolete: "</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>curLsn</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Similar to FileSummaryCache but holds obsolete LSN offsets.</color>
<color=#75715e>   *</color>
<color=#75715e>   * This cache may contain outdated information, since LSNs may become</color>
<color=#75715e>   * obsolete during the verification process, and the cache is not updated.</color>
<color=#75715e>   * This is OK because:</color>
<color=#75715e>   *  - an obsolete LSN can never become active again, and</color>
<color=#75715e>   *  - there is no requirement to detect corruption that occurs during the</color>
<color=#75715e>   *    scan.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>ObsoleteOffsetsCache</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color><color=#f92672>[]></color> <color=#f8f8f2>obsoleteOffsetsMap</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ObsoleteOffsetsCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>obsoleteOffsetsMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeMap</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getOffsets</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteOffsetsMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>obsoleteOffsetsMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#f8f8f2>up</color><color=#f8f8f2>.</color><color=#a6e22e>getObsoleteDetailSorted</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>obsoleteOffsetsMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>persistentMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"Btree corruption was detected and is persistent. Re-opening "</color>
        <color=#f92672>+</color> <color=#e6db74>"the Environment is not possible without restoring from backup "</color>
        <color=#f92672>+</color> <color=#e6db74>" or from another node. "</color>
        <color=#f92672>+</color> <color=#f8f8f2>msg</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>transientMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"Btree corruption was detected in memory, but does not appear"</color>
        <color=#f92672>+</color> <color=#e6db74>"to be persistent. Re-opening the Environment may be possible. "</color>
        <color=#f92672>+</color> <color=#f8f8f2>msg</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getTargetLsns</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>targetLsn1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>targetLsn2</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>targetLsn1</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>targetLsn2</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>in</color><color=#f8f8f2>;</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>lastDeltaVersion</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLastDeltaLsn</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastDeltaVersion</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * The most recently written logrec for this BIN instance</color>
<color=#75715e>         * is full BIN.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>targetLsn1</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * The most recently written logrec for this BIN instance</color>
<color=#75715e>         * is BIN-delta.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>targetLsn1</color> <color=#f92672>=</color> <color=#f8f8f2>lastDeltaVersion</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>targetLsn2</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>targetLsn1</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetLsn2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * When detecting btree corruption, we want to directly read the related</color>
<color=#75715e>   * BIN, or BIN-delta, or both from the log file to confirm whether the</color>
<color=#75715e>   * corruption is persistent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return latched IN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#a6e22e>getINFromFile</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>targetLsns</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>WholeEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>WholeEntry</color> <color=#f8f8f2>optionalFullBinEntry</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Read the entry directly from log */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLogEntryDirectFromFile</color><color=#f8f8f2>(</color><color=#f8f8f2>targetLsns</color><color=#f8f8f2>.</color><color=#a6e22e>first</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetLsns</color><color=#f8f8f2>.</color><color=#a6e22e>second</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>optionalFullBinEntry</color> <color=#f92672>=</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLogEntryDirectFromFile</color><color=#f8f8f2>(</color><color=#f8f8f2>targetLsns</color><color=#f8f8f2>.</color><color=#a6e22e>second</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>optionalFullBinEntry</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>transientMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>ce</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeVerificationException</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>ce</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>inFromFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>inFromFile</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getEntry</color><color=#f8f8f2>().</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>optionalFullBinEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>BIN</color> <color=#f8f8f2>optionalFullBin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>optionalFullBinEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getEntry</color><color=#f8f8f2>().</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inFromFile</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>inFromFile</color><color=#f8f8f2>).</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>optionalFullBin</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>inFromFile</color> <color=#f92672>=</color> <color=#f8f8f2>optionalFullBin</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>inFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inFromFile</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>WalkDatabaseTreeResult</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>noMoreRecords</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>WalkDatabaseTreeResult</color> <color=#f8f8f2>NO_MORE_RECORDS</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noMoreRecords</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lastKey</color> <color=#f92672>=</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lastData</color> <color=#f92672>=</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>noMoreRecords</color> <color=#f92672>=</color> <color=#f8f8f2>noMoreRecords</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>findFirstRecord</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>usedKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>usedData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#75715e>/* The first record of this db. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>usedData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Find the first record according to (lastKey, lastData). */</color>
    <color=#f8f8f2>usedKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>lastKey</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>usedData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>lastData</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>isDuplicated</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDuplicated</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>usedData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_BOTH_GTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>usedData</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>lastData</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Find next dup of lastKey. */</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Find lastKey/lastData. Move to the next dup of lastKey or</color>
<color=#75715e>         * move to the first dup of next key.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>usedData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>usedData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_GTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* No more records. */</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>lastKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Find the first dup of next key. */</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Find the first dup of lastKey. Skip over dups of lastKey</color>
<color=#75715e>         * to the first dup of next key. This may miss "phantoms" but</color>
<color=#75715e>         * that is OK -- see comments 26 and 28 in [#25960].</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>usedData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_NO_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>usedData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_GTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* No more records. */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>lastKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Find next key. */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Find lastKey. Move to next key. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>usedKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>usedData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Verify one batch of records for the given DB. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>WalkDatabaseTreeResult</color> <color=#a6e22e>walkDatabaseTree</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>isSecondaryDb</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>TreeWalkerStatsAccumulator</color> <color=#f8f8f2>statsAcc</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>batchSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Traverse the database. */</color>
    <color=#f8f8f2>Tree</color> <color=#f8f8f2>tree</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>incThreadLocalReferenceCount</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalReadOperationLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>makeCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursorImpl</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setTreeStatsAccumulator</color><color=#f8f8f2>(</color><color=#f8f8f2>statsAcc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>setTreeStatsAccumulator</color><color=#f8f8f2>(</color><color=#f8f8f2>statsAcc</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use local caching to reduce DbTree.getDb overhead.  Do not call</color>
<color=#75715e>     * releaseDb after getDb with the dbCache, since the entire dbCache</color>
<color=#75715e>     * will be released at the end of this method.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>dbCache</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Four parts need to be checked: basic, index, primary record and</color>
<color=#75715e>       * obsolete. 'basic' and 'obsolete' are checked for each slot</color>
<color=#75715e>       * for both secondary db and primary db, and they do not need</color>
<color=#75715e>       * the data portion.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Data portion is needed only for the following two situations:</color>
<color=#75715e>       * 1. Db is secondary and index needs to be checked</color>
<color=#75715e>       * 2. Db is primary, verifySecondaries and verifyDataRecords are</color>
<color=#75715e>       *    both true.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Actually, now we have the following combinations:</color>
<color=#75715e>       * verifySecondaries/verifyDataRecords   Meaning</color>
<color=#75715e>       *</color>
<color=#75715e>       *  No       No        Do not read the primary LN.</color>
<color=#75715e>       *                     Do not verify any secondaries.</color>
<color=#75715e>       *</color>
<color=#75715e>       *  Yes      No        Do not read the primary LN.</color>
<color=#75715e>       *                     Check that the secondary records refer to</color>
<color=#75715e>       *                     existing primary records.</color>
<color=#75715e>       *</color>
<color=#75715e>       *  No       Yes       Read the LN as a basic check.</color>
<color=#75715e>       *                     Do not verify any secondaries.</color>
<color=#75715e>       *</color>
<color=#75715e>       *  Yes      Yes       Read the LN as a basic check.</color>
<color=#75715e>       *                     Check that the secondary records refer to</color>
<color=#75715e>       *                     existing primary records.</color>
<color=#75715e>       *                     Check that primary records refer to</color>
<color=#75715e>       *                     existing secondary records.</color>
<color=#75715e>       *</color>
<color=#75715e>       * According to above combinations, only when verifySecondaries</color>
<color=#75715e>       * and verifyDataRecords are both true, for a primary database,</color>
<color=#75715e>       * we will check that primary records refer to existing secondary</color>
<color=#75715e>       * records.</color>
<color=#75715e>       *</color>
<color=#75715e>       * But only if verifyDataRecords is true, for a primary database,</color>
<color=#75715e>       * we need to check that the primary LN is valid, i.e. we need</color>
<color=#75715e>       * to read data portion. This is why we do not use</color>
<color=#75715e>       * verifyPrimaryDataRecords to replace (!isSecondaryDb &&</color>
<color=#75715e>       * btreeVerifyConfig.getVerifyDataRecords()) when determining</color>
<color=#75715e>       * whether we need to read the data portion.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>verifyPrimaryDataRecords</color> <color=#f92672>=</color>
          <color=#f8f8f2>priDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
              <color=#f92672>&&</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getVerifySecondaries</color><color=#f8f8f2>()</color>
              <color=#f92672>&&</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getVerifyDataRecords</color><color=#f8f8f2>();</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>verifySecondary</color> <color=#f92672>=</color> <color=#f8f8f2>isSecondaryDb</color> <color=#f92672>&&</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getVerifySecondaries</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>foundKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>foundData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>verifySecondary</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>priDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getVerifyDataRecords</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>foundData</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Whether the first record for this round check exists. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>findFirstRecord</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastData</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The previous readPrimaryAfterGet implementation has a problem</color>
<color=#75715e>       * when used in btree verification: it cannot detect</color>
<color=#75715e>       * corruption when secDirtyRead is true and the primary record</color>
<color=#75715e>       * is NOT_FOUND. In this situation, we don't have any locks,</color>
<color=#75715e>       * so we don't know the true current state of either the primary or</color>
<color=#75715e>       * secondary record.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Therefore, for the index verification, we need to lock the</color>
<color=#75715e>       * secondary first. And then use non-blocking lock to lock</color>
<color=#75715e>       * primary record to avoid deadlock. If we cannot lock the primary</color>
<color=#75715e>       * record, we can just skip the verification.</color>
<color=#75715e>       *</color>
<color=#75715e>       * If verifyPrimaryDataRecords is true, we will first get the</color>
<color=#75715e>       * record without acquiring a lock in this method and then try</color>
<color=#75715e>       * to acquire a Read lock in verifyPrimaryData. So in</color>
<color=#75715e>       * walkDatabaseTee we use READLOCK_UNCHANGED only when</color>
<color=#75715e>       * verifySecondary is true.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>recordCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>++</color><color=#f8f8f2>recordCount</color> <color=#f92672><=</color> <color=#f8f8f2>batchSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/* Stop the verification process asap. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stopVerify</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * <1> For primary database:</color>
<color=#75715e>           * 1. The cursor.get(CURRENT, NEXT) used in this method</color>
<color=#75715e>           * all use lockMode NOLOCK_UNCHANGED. So there will not</color>
<color=#75715e>           * be a LockConflictException.</color>
<color=#75715e>           * 2. The (foundKey, foundData) will not be used in this</color>
<color=#75715e>           * method, so it is OK that their data array is null.</color>
<color=#75715e>           * The cursor.get(CURRENT, NEXT) in this method only aims</color>
<color=#75715e>           * to locate position. Note that, although we may verify</color>
<color=#75715e>           * primary record data, we will do that in</color>
<color=#75715e>           * verifyPrimaryData.</color>
<color=#75715e>           *</color>
<color=#75715e>           * <2> For secondary database (NOT verify secondary): the</color>
<color=#75715e>           * same with primary database.</color>
<color=#75715e>           *</color>
<color=#75715e>           * <3> For secondary database (verify secondary), a</color>
<color=#75715e>           * simple approach is problematic:</color>
<color=#75715e>           * 1. Before verifying the secondary record, we first need</color>
<color=#75715e>           * to READ lock the secondary record. So</color>
<color=#75715e>           * LockConflictException may be thrown.</color>
<color=#75715e>           * 2. The (foundKey, foundData) will be used to find the</color>
<color=#75715e>           * corresponding primary record. So foundData (priKey) can</color>
<color=#75715e>           * not be null.</color>
<color=#75715e>           * 3. We need to use nonSticky==true to avoid a deadlock</color>
<color=#75715e>           * when calling cursor.get(NEXT). But if cursor.get(NEXT)</color>
<color=#75715e>           * cannot succeed due to LockConflictException or</color>
<color=#75715e>           * something else, the cursorImpl will be reset, i.e. its</color>
<color=#75715e>           * previous location will be lost. This is not what we</color>
<color=#75715e>           * expect.</color>
<color=#75715e>           *</color>
<color=#75715e>           * The solution:</color>
<color=#75715e>           * 1. Use nonSticky==true</color>
<color=#75715e>           * 2. Use LockMode.READ_UNCOMMITTED when doing Get.NEXT.</color>
<color=#75715e>           *    This can resolve 3 above.</color>
<color=#75715e>           *    Because Get.NEXT will not acquire lock, if more</color>
<color=#75715e>           *    records exist, Get.NEXT can always succeed,</color>
<color=#75715e>           *    i.e. Get.NEXT can move to next record. So</color>
<color=#75715e>           *    'nonSticky==true' will not cause the cursorImpl to</color>
<color=#75715e>           *    move to an invalid position.</color>
<color=#75715e>           * 3. Use Get.CURRENT with LockMode.DEFAULT to</color>
<color=#75715e>           *    lock the record and read the record.</color>
<color=#75715e>           *    This can resolve 1 above.</color>
<color=#75715e>           *    This will acquire a READ lock on the record.</color>
<color=#75715e>           * 4. If Get.CURRENT in (3) returns null, i.e. the record</color>
<color=#75715e>           *    may have been deleted, then we will throw an internal</color>
<color=#75715e>           *    exception to cause the cursor to move to next slot.</color>
<color=#75715e>           *    This will resolve 2 above.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSecondaryDb</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>verifySecondary</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>recordCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>foundKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
                <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>foundKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>READLOCK_UNCHANGED</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MoveToNextRecordException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Note that if we change this code to set nonSticky to be</color>
<color=#75715e>           * false for the cursor, then Get.NEXT will create a new</color>
<color=#75715e>           * CursorImpl, and we must refresh the CursorImpl variable.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>latchBIN</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>();</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>verifyDanglingLSNAndObsoleteRecordsOneSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getIndex</color><color=#f8f8f2>(),</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseOperDuringBatchCheckHook</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>databaseOperDuringBatchCheckHook</color><color=#f8f8f2>.</color><color=#a6e22e>doHook</color><color=#f8f8f2>(</color><color=#f8f8f2>priDb</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>databaseOperDuringBatchCheckHook</color><color=#f8f8f2>.</color><color=#a6e22e>doHook</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * When verifying index or foreign constraint, we</color>
<color=#75715e>           * first READ-lock the secondary record and then try</color>
<color=#75715e>           * to non-blocking READ-lock the primary record. Using</color>
<color=#75715e>           * non-blocking is to avoid deadlocks, since we are locking</color>
<color=#75715e>           * in the reverse of the usual order.</color>
<color=#75715e>           *</color>
<color=#75715e>           * If the non-blocking lock fails with</color>
<color=#75715e>           * LockNotAvailableException, we will not be able to detect</color>
<color=#75715e>           * corruption and we should ignore this exception and</color>
<color=#75715e>           * continue verification. In this case the primary record</color>
<color=#75715e>           * is write-locked and is being modified by another thread,</color>
<color=#75715e>           * so it is OK to skip this verification step in this case.</color>
<color=#75715e>           * This is a compromise.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>verifySecondary</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * When isCorrupted returns true we should stop</color>
<color=#75715e>             * verifying this db, just like when</color>
<color=#75715e>             * SecondaryIntegrityException is thrown.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>isCorrupted</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/* For secondary database, check index integrity. */</color>
            <color=#f8f8f2>verifyIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundData</color><color=#f8f8f2>);</color>

            <color=#75715e>/* For secondary database, check foreign constraint. */</color>
            <color=#f8f8f2>verifyForeignConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* For a primary database, verify data. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>verifyPrimaryDataRecords</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>verifyPrimaryData</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Even if we do not need the data part, for example, for</color>
<color=#75715e>           * a secondary database which does not need to check</color>
<color=#75715e>           * index issue, we may still need the data part to locate</color>
<color=#75715e>           * the first record of next batch. So for the last record</color>
<color=#75715e>           * of this batch, we need to get the data part.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>recordCount</color> <color=#f92672>==</color> <color=#f8f8f2>batchSize</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>foundData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * For the last record of each batch, we should do all</color>
<color=#75715e>           * above check. But we can NOT continue to get NEXT</color>
<color=#75715e>           * record.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>recordCount</color> <color=#f92672>==</color> <color=#f8f8f2>batchSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>foundKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>StopDbVerificationException</color> <color=#f8f8f2>sve</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * StopDbVerificationException is thrown when</color>
<color=#75715e>           * 1. In verifyIndex, a SecondaryIntegrityException, which</color>
<color=#75715e>           *    is caused by index corruption, or a</color>
<color=#75715e>           *    IllegalStateException, which is caused by accessing</color>
<color=#75715e>           *    the closed primary database,  is caught.</color>
<color=#75715e>           * 2. In verifyForeignConstraint, the DatabaseImpl of the</color>
<color=#75715e>           *    foreign database can not be gotten or the</color>
<color=#75715e>           *    corresponding foreign record does not exist.</color>
<color=#75715e>           * For both situations, we must stop verification of this</color>
<color=#75715e>           * db, but we should allow verification of other dbs to</color>
<color=#75715e>           * continue.</color>
<color=#75715e>           *</color>
<color=#75715e>           * No warning message needs to be logged here. For SIE,</color>
<color=#75715e>           * a message has already been logged when throwing SIE at</color>
<color=#75715e>           * the lower level.</color>
<color=#75715e>           */</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f92672>|</color> <color=#f8f8f2>MoveToNextRecordException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * LockConflictException can be thrown by</color>
<color=#75715e>           * Cursor.get(CURRENT) with READLOCK_UNCHANGED, which</color>
<color=#75715e>           * could be due to a normal timeout. Just move the cursor</color>
<color=#75715e>           * to next record.</color>
<color=#75715e>           *</color>
<color=#75715e>           * MoveToNextRecordException indicates that</color>
<color=#75715e>           * cursor.get(CURRENT) returns null because the record has</color>
<color=#75715e>           * been deleted. Just move the cursor to next record.</color>
<color=#75715e>           *</color>
<color=#75715e>           * These two exceptions should not prevent verification of</color>
<color=#75715e>           * other records in the same db, so we simply ignore it.</color>
<color=#75715e>           *</color>
<color=#75715e>           * If the cursor.get(NEXT, NOLOCK_UNCHANGED) here catches</color>
<color=#75715e>           * an exception, which will not be LockConflictException</color>
<color=#75715e>           * because NOLOCK_UNCHANGED is used, this is an unknown</color>
<color=#75715e>           * and unexpected exception, we just handle it in the same</color>
<color=#75715e>           * way as the following RuntimeException.</color>
<color=#75715e>           *</color>
<color=#75715e>           * TODO: A verification statistic is needed to find out</color>
<color=#75715e>           * how many times this happens. This should be returned</color>
<color=#75715e>           * and logged at the end of verification.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>foundKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>re</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Exception aborted btree verification of db "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>", verification of all dbs will stop. "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>setStopVerifyFlag</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f92672>|</color> <color=#f8f8f2>BtreeVerificationException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Consider all other exceptions. e.g. the</color>
<color=#75715e>           * OperationFailureException thrown by cursor.get which</color>
<color=#75715e>           * is not LockConflicExceptionException, to be fatal to</color>
<color=#75715e>           * the entire verification process, since we don't know</color>
<color=#75715e>           * what caused them.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Exception aborted btree verification of db "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>", verification of all dbs will stop. "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>setStopVerifyFlag</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>.</color><color=#a6e22e>NO_MORE_RECORDS</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>WalkDatabaseTreeResult</color><color=#f8f8f2>(</color><color=#f8f8f2>foundKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>foundData</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setTreeStatsAccumulator</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>setTreeStatsAccumulator</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>decThreadLocalReferenceCount</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Release all cached DBs. */</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>dbCache</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyIndex</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>StopDbVerificationException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>secDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryAssociation</color> <color=#f8f8f2>secAssoc</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociation</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color> <color=#f92672>=</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimary</color><color=#f8f8f2>(</color><color=#f8f8f2>priKey</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We only need to check whether the primary record exists, we</color>
<color=#75715e>       * do not need the data.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>priData</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Currently the secondary record is locked. In order to avoid</color>
<color=#75715e>       * deadlock, here we use the non-blocking lock. In order to</color>
<color=#75715e>       * release the lock on the primary record, we create a new</color>
<color=#75715e>       * Locker to acquire the lock and release the lock in finally</color>
<color=#75715e>       * block.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalReadOperationLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>setDefaultNoWait</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Cursor.readPrimaryAfterGet may return true or false, but for</color>
<color=#75715e>         * both cases, they do NOT indicate index corruption. Only</color>
<color=#75715e>         * throwing SecondaryIntegrityException means index corruption.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>priData</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color> <color=#75715e>/*secDirtyRead*/</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color> <color=#75715e>/*lockPrimaryOnly*/</color><color=#f8f8f2>,</color>
            <color=#66d9ef>true</color> <color=#75715e>/*verifyOnly*/</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>secAssoc</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockNotAvailableException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Ignored -- see comment in walkDatabaseTree. */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Release primary record lock. */</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryIntegrityException</color> <color=#f8f8f2>sie</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Because currently the primary database is not marked as</color>
<color=#75715e>       * CORRUPT, if we catch SIE here, it indicates that this SIE</color>
<color=#75715e>       * was thrown by Cursor.readPrimaryAfterGet. Log related error</color>
<color=#75715e>       * message here.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Secondary corruption is detected during btree "</color> <color=#f92672>+</color> <color=#e6db74>"verification. "</color> <color=#f92672>+</color> <color=#f8f8f2>sie</color><color=#f8f8f2>);</color>

      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>StopDbVerificationException</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>ise</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * IllegalStateException is thrown when the primary database,</color>
<color=#75715e>       * which is obtained via SecondaryAssociation.getPrimary, is</color>
<color=#75715e>       * accessed after it is closed. For non-KVS apps, a secondary</color>
<color=#75715e>       * database may only map to one unique primary database, and this</color>
<color=#75715e>       * database will have already been closed. Therefore we just stop</color>
<color=#75715e>       * the verification of the secondary database. In KVS, other primary</color>
<color=#75715e>       * DBs (partitions) may still be open, but stopping verification of</color>
<color=#75715e>       * the index is still acceptable.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>StopDbVerificationException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyForeignConstraint</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>StopDbVerificationException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>secDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>foreignDb</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getPrivateSecondaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>).</color><color=#a6e22e>getForeignKeyDatabase</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>foreignDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>foreignDbId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>foreignDbId</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignDb</color><color=#f8f8f2>).</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalStateException</color> <color=#f92672>|</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>StopDbVerificationException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkOpen</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DbTree</color> <color=#f8f8f2>dbTree</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>foreignDbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignDbId</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>foreignDbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>foreignDbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* This database is deleted. */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>StopDbVerificationException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We only need to check whether the corresponding record exists</color>
<color=#75715e>     * in the foreign database.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>tmpData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>tmpData</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Use the non-blocking lock. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalReadOperationLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>setDefaultNoWait</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>foreignCursor</color> <color=#f92672>=</color>
        <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>makeCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignDbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*retainNonTxnLocks*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>foreignCursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>secKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>tmpData</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH</color><color=#f8f8f2>,</color> <color=#f8f8f2>READLOCK_UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockNotAvailableException</color> <color=#f8f8f2>lnae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Ignored -- see comment in walkDatabaseTree. */</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * When a foreign key issue is found, we should first</color>
<color=#75715e>       * generate SecondaryIntegrityException (rather than</color>
<color=#75715e>       * ForeignConstraintException) to set the secondary database as</color>
<color=#75715e>       * corrupt, and then throw StopDbVerificationException to cause</color>
<color=#75715e>       * walkDatabaseTree to stop checking this secondary database.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>setSecondaryDbCorrupt</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>).</color><color=#a6e22e>getLocker</color><color=#f8f8f2>(),</color>
            <color=#e6db74>"Secondary key does not exist in foreign database "</color>
                <color=#f92672>+</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDbDebugName</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignDb</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color> <color=#75715e>/*priKey*/</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>).</color><color=#a6e22e>getExpirationTime</color><color=#f8f8f2>());</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>StopDbVerificationException</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyPrimaryData</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>priDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryAssociation</color> <color=#f8f8f2>secAssoc</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociation</color><color=#f8f8f2>(</color><color=#f8f8f2>priDb</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * 1. Read the primary data portion with Read lock.</color>
<color=#75715e>       * 2. If null is returned, this primary record is deleted. We</color>
<color=#75715e>       *    just ignore it.</color>
<color=#75715e>       * 3. If non-null is returned, the cursor, which is used by</color>
<color=#75715e>       *    walkDatabaseTree, owns a read lock on the primary record.</color>
<color=#75715e>       * 4. If LockConflictException is thrown, then this primary</color>
<color=#75715e>       *    record is locked. Just return.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>READLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If checkSecondaryKeysExist cannot find the secondary record,</color>
<color=#75715e>       * it will throw SIE. At that time, the cursor used in</color>
<color=#75715e>       * checkSecondaryKeysExist is not at a meaningful slot, so we get</color>
<color=#75715e>       * the expirationTime of the corresponding primary record here</color>
<color=#75715e>       * and then pass it to checkSecondaryKeysExist.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaries</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If the primary database is removed from the</color>
<color=#75715e>         * SecondaryAssociation, then we will skip checking any</color>
<color=#75715e>         * secondary database.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Besides, if the primary database is removed from the</color>
<color=#75715e>         * SecondaryAssociation, secAssoc.getPrimary may throw</color>
<color=#75715e>         * exception.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimary</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the secondary database is in population phase, it</color>
<color=#75715e>         * may be reasonable that the BtreeVerifier can not find</color>
<color=#75715e>         * the corresponding secondary records for the checked</color>
<color=#75715e>         * primary record, because the primary record has not been</color>
<color=#75715e>         * populated to the secondary database.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>isIncrementalPopulationEnabled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>checkSecondaryKeysExist</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>dbCache</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>secAssoc</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>).</color><color=#a6e22e>getExpirationTime</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkSecondaryKeysExist</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryAssociation</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>isCorrupted</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * If the secondary database is set to be CORRUPT, then we will</color>
<color=#75715e>       * not check this database. Just quick return.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryConfig</color> <color=#f8f8f2>secondaryConfig</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getPrivateSecondaryConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryKeyCreator</color> <color=#f8f8f2>keyCreator</color> <color=#f92672>=</color> <color=#f8f8f2>secondaryConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyCreator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryMultiKeyCreator</color> <color=#f8f8f2>multiKeyCreator</color> <color=#f92672>=</color> <color=#f8f8f2>secondaryConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getMultiKeyCreator</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyCreator</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>multiKeyCreator</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>.</color><color=#a6e22e>getConfig</color><color=#f8f8f2>().</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>secDbId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secDbId</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>).</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalStateException</color> <color=#f92672>|</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * We want to continue to check the following primary records,</color>
<color=#75715e>       * so we just return.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkOpen</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DbTree</color> <color=#f8f8f2>dbTree</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>secDbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>secDbId</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secDbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>secDbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * We want to continue to check the following primary records,</color>
<color=#75715e>       * so we just return.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>errMsg</color> <color=#f92672>=</color>
        <color=#e6db74>"Secondary is corrupt: the primary record contains a "</color>
            <color=#f92672>+</color> <color=#e6db74>"key that is not present in this secondary database."</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyCreator</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Each primary record may have a single secondary key. */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>multiKeyCreator</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>keyCreator</color><color=#f8f8f2>.</color><color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>priData</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* This primary record has no secondary keys. */</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>checkOneSecondaryKeyExists</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>secDbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>errMsg</color><color=#f8f8f2>,</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Each primary record may have multiple secondary keys. */</color>

    <color=#75715e>/* Get secondary keys. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseEntry</color><color=#f92672>></color> <color=#f8f8f2>secKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>.</color><color=#a6e22e>createSecondaryKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>priData</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKeys</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secKeys</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* This primary record has no secondary keys. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check each secondary key.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secKeys</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkOneSecondaryKeyExists</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>secDbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>errMsg</color><color=#f8f8f2>,</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkOneSecondaryKeyExists</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>secDbImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>errMsg</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryAssociation</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalReadOperationLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>checkCursor</color> <color=#f92672>=</color>
        <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>makeCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>secDbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*retainNonTxnLocks*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkCursor</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>secKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_BOTH</color><color=#f8f8f2>,</color> <color=#f8f8f2>NOLOCK_UNCHANGED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/* Same reason with that in verifyPrimaryData. */</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getPrimary</color><color=#f8f8f2>(</color><color=#f8f8f2>priKey</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>priDb</color> <color=#f92672>||</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>isIncrementalPopulationEnabled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Can not find the corresponding secondary key.</color>
<color=#75715e>         * So an index issue exists.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>setSecondaryDbCorrupt</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>errMsg</color><color=#f8f8f2>,</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setSecondaryDbCorrupt</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>errMsg</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>isCorrupted</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryIntegrityException</color> <color=#f8f8f2>sie</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>SecondaryIntegrityException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>errMsg</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDbDebugName</color><color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>),</color>
              <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>expirationTime</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Secondary corruption is detected during btree "</color> <color=#f92672>+</color> <color=#e6db74>"verification. "</color> <color=#f92672>+</color> <color=#f8f8f2>sie</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setStopVerifyFlag</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>stopVerify</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBtreeVerifyConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>VerifyConfig</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>btreeVerifyConfig</color> <color=#f92672>=</color> <color=#f8f8f2>btreeVerifyConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>VerifierStatsAccumulator</color> <color=#66d9ef>extends</color> <color=#f8f8f2>StatsAccumulator</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>VerifierStatsAccumulator</color><color=#f8f8f2>(</color><color=#f8f8f2>PrintStream</color> <color=#f8f8f2>progressStream</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>progressInterval</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>progressStream</color><color=#f8f8f2>,</color> <color=#f8f8f2>progressInterval</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyNode</color><color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Exceptions thrown by basicBtreeVerify should invalidate the</color>
<color=#75715e>       * env, so we cannot simply log the error and continue here. We</color>
<color=#75715e>       * must allow the exception to be thrown upwards.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>basicBtreeVerify</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * StopDbVerificationException is thrown when</color>
<color=#75715e>   * 1. In verifyIndex, a SecondaryIntegrityException, which</color>
<color=#75715e>   *    is caused by index corruption, or a</color>
<color=#75715e>   *    IllegalStateException, which is caused by accessing</color>
<color=#75715e>   *    the closed primary database,  is caught.</color>
<color=#75715e>   * 2. In verifyForeignConstraint, the DatabaseImpl of the</color>
<color=#75715e>   *    foreign database cannot be gotten or the</color>
<color=#75715e>   *    corresponding foreign record does not exist.</color>
<color=#75715e>   * This exception causes walkDatabaseTree stop checking the</color>
<color=#75715e>   * secondary database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>StopDbVerificationException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Thrown in walkDatabaseTree to indicate that cursor.get(CURRENT) returns</color>
<color=#75715e>   * null because the record has been deleted. Just let the cursor move to</color>
<color=#75715e>   * next record.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>MoveToNextRecordException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Thrown during btree verification if a persistent btree corruption is detected.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is an internal exception and ideally it should be a checked exception(not a</color>
<color=#75715e>   * RuntimeException) so that we can confirm statically that it is always handled. But this would</color>
<color=#75715e>   * require changes to CursorImpl.WithCursor interface, so for now a runtime exception is used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>BtreeVerificationException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>BtreeVerificationException</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>BtreeVerificationException</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>initCause</color><color=#f8f8f2>(</color><color=#f8f8f2>cause</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>