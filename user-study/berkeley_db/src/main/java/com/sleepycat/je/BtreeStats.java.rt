<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.dbi.BTreeStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/** The BtreeStats object is used to return Btree database statistics. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BtreeStats</color> <color=#66d9ef>extends</color> <color=#f8f8f2>DatabaseStats</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>298825033L</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>treeStats</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>BtreeStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>dbImplStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>treeStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>GROUP_DESC</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDbImplStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>dbImplStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTreeStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>tStats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>treeStats</color> <color=#f92672>=</color> <color=#f8f8f2>tStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of Bottom Internal Nodes in the database tree.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The information is included only if the {@link Database#getStats Database.getStats} call was</color>
<color=#75715e>   * not configured by the {@link com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of Bottom Internal Nodes in the database tree.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getBottomInternalNodeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_BIN_COUNT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated as of 5.0, returns zero. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDuplicateBottomInternalNodeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of deleted data records in the database tree that are pending removal by the</color>
<color=#75715e>   * compressor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The information is included only if the {@link Database#getStats Database.getStats} call was</color>
<color=#75715e>   * not configured by the {@link com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of deleted data records in the database tree that are pending removal by the</color>
<color=#75715e>   *     compressor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDeletedLeafNodeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_DELETED_LN_COUNT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated as of 5.0, returns zero. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDupCountLeafNodeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of Internal Nodes in the database tree.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The information is included only if the {@link Database#getStats Database.getStats} call was</color>
<color=#75715e>   * not configured by the {@link com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of Internal Nodes in the database tree.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getInternalNodeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_IN_COUNT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated as of 5.0, returns zero. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDuplicateInternalNodeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of leaf nodes in the database tree, which can equal the number of records.</color>
<color=#75715e>   * This is calculated without locks or transactions, and therefore is only an accurate count of</color>
<color=#75715e>   * the current number of records when the database is quiescent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The information is included only if the {@link Database#getStats Database.getStats} call was</color>
<color=#75715e>   * not configured by the {@link com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of leaf nodes in the database tree, which can equal the number of records. This</color>
<color=#75715e>   *     is calculated without locks or transactions, and therefore is only an accurate count of the</color>
<color=#75715e>   *     current number of records when the database is quiescent.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLeafNodeCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_LN_COUNT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the maximum depth of the main database tree.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The information is included only if the {@link Database#getStats Database.getStats} call was</color>
<color=#75715e>   * not configured by the {@link com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return maximum depth of the main database tree.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMainTreeMaxDepth</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_MAINTREE_MAXDEPTH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated as of 5.0, returns zero. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getDuplicateTreeMaxDepth</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the count of Internal Nodes per level, indexed by level.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The information is included only if the {@link Database#getStats Database.getStats} call was</color>
<color=#75715e>   * not configured by the {@link com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return count of Internal Nodes per level, indexed by level.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getINsByLevel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_INS_BYLEVEL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the count of Bottom Internal Nodes per level, indexed by level.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The information is included only if the {@link Database#getStats Database.getStats} call was</color>
<color=#75715e>   * not configured by the {@link com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return count of Bottom Internal Nodes per level, indexed by level.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getBINsByLevel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_BINS_BYLEVEL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an array representing a histogram of the number of Bottom Internal Nodes with various</color>
<color=#75715e>   * percentages of non-deleted entry counts. The array is 10 elements and each element represents a</color>
<color=#75715e>   * range of 10%.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   * element [0]: # BINs with 0% to 9% entries used by non-deleted values</color>
<color=#75715e>   * element [1]: # BINs with 10% to 19% entries used by non-deleted values</color>
<color=#75715e>   * element [2]: # BINs with 20% to 29% entries used by non-deleted values</color>
<color=#75715e>   * ...</color>
<color=#75715e>   * element [0]: # BINs with 90% to 100% entries used by non-deleted values</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an array representing a histogram of the number of BINs with various percentages of</color>
<color=#75715e>   *     non-deleted entries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getBINEntriesHistogram</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_BIN_ENTRIES_HISTOGRAM</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated as of 5.0, returns an empty array. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getDINsByLevel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated as of 5.0, returns an empty array. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getDBINsByLevel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of latch upgrades (relatches) required while operating on this database's</color>
<color=#75715e>   * BTree. Latch upgrades are required when an operation assumes that a shared (read) latch will be</color>
<color=#75715e>   * sufficient but later determines that an exclusive (write) latch will actually be required.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of latch upgrades (relatches) required.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getRelatches</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>treeStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_RELATCHES_REQUIRED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of times the root of the BTree was split.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of times the root was split.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getRootSplits</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>treeStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>BTREE_ROOT_SPLITS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For convenience, the BtreeStats class has a toString method that lists all the data fields. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\n"</color> <color=#f92672>+</color> <color=#f8f8f2>treeStats</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toStringVerbose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>toStringVerbose</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\n"</color> <color=#f92672>+</color> <color=#f8f8f2>treeStats</color><color=#f8f8f2>.</color><color=#a6e22e>toStringVerbose</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>