<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.SortedLSNTreeWalker.TreeNodeProcessor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchSupport</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.DbOperationType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.trigger.PersistentTrigger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.trigger.Trigger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.BasicLocker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.verify.BtreeVerifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.JVMSystemUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHookExecute</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.ClassResolver</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.ByteArrayInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ByteArrayOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicReference</color><color=#f8f8f2>;</color>

<color=#75715e>/** The underlying object for a given database. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DatabaseImpl</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Loggable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Delete processing states. See design note on database deletion and</color>
<color=#75715e>   * truncation</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>NOT_DELETED</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>DELETED_CLEANUP_INLIST_HARVEST</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>DELETED_CLEANUP_LOG_HARVEST</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>DELETED</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Flag bits are the persistent representation of boolean properties</color>
<color=#75715e>   * for this database.  The DUPS_ENABLED value is 1 for compatibility</color>
<color=#75715e>   * with earlier log entry versions where it was stored as a boolean.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Two bits are used to indicate whether this database is replicated or</color>
<color=#75715e>   * not.</color>
<color=#75715e>   * isReplicated = 0, notReplicated = 0 means replication status is</color>
<color=#75715e>   *   unknown, because the db was created in an standalone environment.</color>
<color=#75715e>   * isReplicated = 1, notReplicated = 0 means the db is replicated.</color>
<color=#75715e>   * isReplicated = 0, notReplicated = 1 means the db is not replicated.</color>
<color=#75715e>   * isReplicated = 1, notReplicated = 1 is an illegal combination.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color> <color=#f8f8f2>flags</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>DUPS_ENABLED</color> <color=#f92672>=</color> <color=#ae81ff>0x1</color><color=#f8f8f2>;</color> <color=#75715e>// getSortedDuplicates()</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>TEMPORARY_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x2</color><color=#f8f8f2>;</color> <color=#75715e>// isTemporary()</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>IS_REPLICATED_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x4</color><color=#f8f8f2>;</color> <color=#75715e>// isReplicated()</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>NOT_REPLICATED_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x8</color><color=#f8f8f2>;</color> <color=#75715e>// notReplicated()</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>PREFIXING_ENABLED</color> <color=#f92672>=</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color> <color=#75715e>// getKeyPrefixing()</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>UTILIZATION_REPAIR_DONE</color> <color=#f92672>=</color> <color=#ae81ff>0x20</color><color=#f8f8f2>;</color>
  <color=#75715e>// getUtilizationRepairDone()</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>DUPS_CONVERTED</color> <color=#f92672>=</color> <color=#ae81ff>0x40</color><color=#f8f8f2>;</color> <color=#75715e>// getKeyPrefixing()</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color> <color=#75715e>// unique id</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Tree</color> <color=#f8f8f2>tree</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color> <color=#75715e>// Tree operations find the env this way</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>;</color> <color=#75715e>// All open handles are transactional</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>duplicateKeys</color><color=#f8f8f2>;</color> <color=#75715e>// Handle duplicate keys</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>durableDeferredWrite</color><color=#f8f8f2>;</color> <color=#75715e>// Durable deferred write mode set</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dirty</color><color=#f8f8f2>;</color> <color=#75715e>// Utilization, root LSN, etc., changed</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color> <color=#f8f8f2>referringHandles</color><color=#f8f8f2>;</color> <color=#75715e>// Set of open Database handles</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>eofLsn</color><color=#f8f8f2>;</color> <color=#75715e>// Logical EOF LSN for range locking</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>short</color> <color=#f8f8f2>deleteState</color><color=#f8f8f2>;</color> <color=#75715e>// one of four delete states.</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>useCount</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>
  <color=#75715e>// If non-zero, eviction is prohibited</color>
  <color=#75715e>/*</color>
<color=#75715e>   * Tracks the number of write handle references to this impl. It's used</color>
<color=#75715e>   * to determine the when the Trigger.open/close methods must be invoked.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>writeCount</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>DbFileSummaryMap</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Log version when DB was created, or 0 if created prior to log version 6. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color> <color=#f8f8f2>createdAtLogVersion</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For unit testing, setting this field to true will force a walk of the tree to count utilization</color>
<color=#75715e>   * during truncate/remove, rather than using the per-database info. This is used to test the "old</color>
<color=#75715e>   * technique" for counting utilization, which is now used only if the database was created prior</color>
<color=#75715e>   * to log version 6.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forceTreeWalkForTruncateAndRemove</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The user defined Btree and duplicate comparison functions, if specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>btreeComparator</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>duplicateComparator</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>btreeComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>duplicateComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>btreeComparatorByClassName</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>duplicateComparatorByClassName</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>btreePartialComparator</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>duplicatePartialComparator</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>btreeBinaryEqualityComparator</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>duplicateBinaryEqualityComparator</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Key comparator uses the btree and dup comparators as needed. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>keyComparator</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The user defined triggers associated with this database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The triggers reference value contains all known triggers, persistent and</color>
<color=#75715e>   * transient, or null if it has not yet been constructed, which is done</color>
<color=#75715e>   * lazily.  It is constructed by unmarshalling the triggerBytes (persistent</color>
<color=#75715e>   * triggers) and adding them to the transientTriggers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * transientTriggers is null if there are none, and never an empty list.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>>></color> <color=#f8f8f2>triggers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>>></color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>transientTriggers</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>triggerBytes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Cache some configuration values.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>binDeltaPercent</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxTreeEntriesPerNode</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>debugDatabaseName</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Set to true when opened as a secondary DB. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>knownSecondary</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* For unit tests */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color><color=#f92672><?></color> <color=#f8f8f2>pendingDeletedHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The DbType of this DatabaseImpl.  Is determined lazily, so getDbType</color>
<color=#75715e>   * should always be called rather than referencing the field directly.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DbType</color> <color=#f8f8f2>dbType</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For debugging -- this gives the ability to force all non-internal</color>
<color=#75715e>   * databases to use key prefixing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Note that doing</color>
<color=#75715e>   *     ant -Dje.forceKeyPrefixing=true test</color>
<color=#75715e>   * does not work because ant does not pass the parameter down to JE.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forceKeyPrefixing</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>forceKeyPrefixingProp</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"je.forceKeyPrefixing"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>forceKeyPrefixing</color> <color=#f92672>=</color> <color=#e6db74>"true"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>forceKeyPrefixingProp</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Create a database object for a new database. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DatabaseImpl</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>id</color> <color=#f92672>=</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>createdAtLogVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>;</color>

    <color=#75715e>/* A new DB is implicitly converted to the new dups format. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setDupsConverted</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * New DB records do not need utilization repair.  Set this before</color>
<color=#75715e>     * calling initWithEnvironment to avoid repair overhead.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>setUtilizationRepairDone</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>commonInit</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>initWithEnvironment</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The tree needs the env, make sure we assign it before</color>
<color=#75715e>     * allocating the tree.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>tree</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Tree</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#75715e>/* For error messages only. */</color>
    <color=#f8f8f2>debugDatabaseName</color> <color=#f92672>=</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Set the DatabaseConfig properties for a DatabaseImpl. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setConfigProperties</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setBtreeComparator</color><color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparator</color><color=#f8f8f2>(),</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparatorByClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>setDuplicateComparator</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDuplicateComparator</color><color=#f8f8f2>(),</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDuplicateComparatorByClassName</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>setTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTriggers</color><color=#f8f8f2>(),</color> <color=#66d9ef>true</color> <color=#75715e>/*overridePersistentTriggers*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setSortedDuplicates</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>duplicateKeys</color> <color=#f92672>=</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixing</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>forceKeyPrefixing</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setKeyPrefixing</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearKeyPrefixing</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTemporary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setTemporary</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setIsReplicatedBit</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setNotReplicatedBit</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transactional</color> <color=#f92672>=</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>durableDeferredWrite</color> <color=#f92672>=</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDeferredWrite</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxTreeEntriesPerNode</color> <color=#f92672>=</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMaxEntries</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>commonInit</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>deleteState</color> <color=#f92672>=</color> <color=#f8f8f2>NOT_DELETED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>referringHandles</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>synchronizedSet</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color><color=#f8f8f2>());</color>
    <color=#f8f8f2>dbFileSummaries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbFileSummaryMap</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/* countParentMapEntry */</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDebugDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>debugName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>debugDatabaseName</color> <color=#f92672>=</color> <color=#f8f8f2>debugName</color><color=#f8f8f2>;</color>
    <color=#75715e>/* DbType may be wrong if name has not yet been set. */</color>
    <color=#f8f8f2>resetDbType</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the DB name for debugging and error messages. This method should be called rather than</color>
<color=#75715e>   * getName to avoid accessing the db mapping tree in error situations The name may not be</color>
<color=#75715e>   * transactionally correct, and may be unknown under certain circumstances (see</color>
<color=#75715e>   * DbTree.setDebugNameForDatabaseImpl) in which case a string containing the DB ID is returned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDebugName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugDatabaseName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>debugDatabaseName</color> <color=#f8f8f2>:</color> <color=#e6db74>"dBId="</color> <color=#f92672>+</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether getDebugName returns a DB name rather than a DB ID. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isDebugNameAvailable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugDatabaseName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Returns true if this DB has been opened as a secondary DB. Currently,</color>
<color=#75715e>   * secondary DB metadata is not persistent, so this is the best we can do.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>knownSecondary</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnownSecondary</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>knownSecondary</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPendingDeletedHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><?></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>pendingDeletedHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initialize configuration settings when creating a new instance or after reading an instance</color>
<color=#75715e>   * from the log. The envImpl field must be set before calling this method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initWithEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* The eof LSN must be unique for each database in memory. */</color>
    <color=#f8f8f2>eofLsn</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeSequence</color><color=#f8f8f2>().</color><color=#a6e22e>getNextTransientLsn</color><color=#f8f8f2>();</color>

    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>replicatedBitSet</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>notReplicatedBitSet</color><color=#f8f8f2>())</color>
        <color=#f8f8f2>:</color> <color=#e6db74>"The replicated AND notReplicated bits should never be set "</color> <color=#f92672>+</color> <color=#e6db74>" together"</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We'd like to assert that neither replication bit is set if</color>
<color=#75715e>     * the environmentImpl is not replicated, but can't do that.</color>
<color=#75715e>     * EnvironmentImpl.isReplicated() is not yet initialized if this</color>
<color=#75715e>     * environment is undergoing recovery during replication setup.</color>

<color=#75715e>    assert !((!envImpl.isReplicated() &&</color>
<color=#75715e>             (replicatedBitSet() || notReplicatedBitSet()))) :</color>
<color=#75715e>        "Neither the replicated nor notReplicated bits should be set " +</color>
<color=#75715e>        " in a non-replicated environment" +</color>
<color=#75715e>        " replicatedBitSet=" + replicatedBitSet() +</color>
<color=#75715e>        " notRepBitSet=" + notReplicatedBitSet();</color>
<color=#75715e>    */</color>

    <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configMgr</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>binDeltaPercent</color> <color=#f92672>=</color> <color=#f8f8f2>configMgr</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>BIN_DELTA_PERCENT</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If maxTreeEntriesPerNode is zero (for a newly created database),</color>
<color=#75715e>     * set it to the default config value.  When we write the DatabaseImpl</color>
<color=#75715e>     * to the log, we'll store the default.  That way, if the default</color>
<color=#75715e>     * changes, the fan out for existing databases won't change.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxTreeEntriesPerNode</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>maxTreeEntriesPerNode</color> <color=#f92672>=</color> <color=#f8f8f2>configMgr</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>NODE_MAX</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Budgets memory for the utilization info. */</color>
    <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Repair utilization info if necessary.  The repair flag will not be</color>
<color=#75715e>     * set for MapLNs written by JE 3.3.74 and earlier, and will be set for</color>
<color=#75715e>     * all MapLNs written thereafter.  Make the utilization dirty to force</color>
<color=#75715e>     * the MapLN to be flushed.  Even if no repair is performed, we want to</color>
<color=#75715e>     * write the updated flag.  [#16610]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>getUtilizationRepairDone</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>repair</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>setUtilizationRepairDone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Don't instantiate if comparators are unnecessary (DbPrintLog). */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNoComparators</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>ComparatorReader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>ComparatorReader</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>,</color> <color=#e6db74>"Btree"</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>btreeComparator</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>getComparator</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>btreeComparatorByClassName</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>isClass</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>btreePartialComparator</color> <color=#f92672>=</color> <color=#f8f8f2>btreeComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>btreeBinaryEqualityComparator</color> <color=#f92672>=</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>btreeComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>reader</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>ComparatorReader</color><color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>,</color> <color=#e6db74>"Duplicate"</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>duplicateComparator</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>getComparator</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>duplicateComparatorByClassName</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>isClass</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>duplicatePartialComparator</color> <color=#f92672>=</color> <color=#f8f8f2>duplicateComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>duplicateBinaryEqualityComparator</color> <color=#f92672>=</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>duplicateComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Key comparator is derived from dup and btree comparators. */</color>
      <color=#f8f8f2>resetKeyComparator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a clone of this database that can be used as the new empty database when truncating this</color>
<color=#75715e>   * database. setId and setTree must be called on the returned database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>cloneDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newDb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Re-initialize fields that should not be shared by the new DB. */</color>
    <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>id</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>tree</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>createdAtLogVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>dbFileSummaries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbFileSummaryMap</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*countParentMapEntry*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>useCount</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the database tree. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Tree</color> <color=#a6e22e>getTree</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>tree</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setTree</color><color=#f8f8f2>(</color><color=#f8f8f2>Tree</color> <color=#f8f8f2>tree</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>tree</color> <color=#f92672>=</color> <color=#f8f8f2>tree</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the database id. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseId</color> <color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>id</color> <color=#f92672>=</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getEofLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>eofLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this database is transactional. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transactional</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sets the transactional property for the first opened handle. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transactional</color> <color=#f92672>=</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this database is temporary. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTemporary</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>TEMPORARY_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTemporary</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>flagVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>flagVal</color> <color=#f92672>&</color> <color=#f8f8f2>TEMPORARY_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDuplicateKeys</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>duplicateKeys</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDuplicateKeys</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>duplicateKeys</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>duplicateKeys</color> <color=#f92672>=</color> <color=#f8f8f2>duplicateKeys</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInternalDb</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getDbType</color><color=#f8f8f2>().</color><color=#a6e22e>isInternal</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DbType</color> <color=#a6e22e>getDbType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dbType</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>resetDbType</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbType</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>resetDbType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>dbType</color> <color=#f92672>=</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>typeForDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>debugDatabaseName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setTemporary</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>TEMPORARY_BIT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this database was user configured for durable deferred write mode. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDurableDeferredWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>durableDeferredWrite</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return true if write operations are not logged immediately. This is true if the user</color>
<color=#75715e>   *     configured a durable DW database or a temporary database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isDurableDeferredWrite</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>isTemporary</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sets the deferred write property for the first opened handle. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDeferredWrite</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>durableDeferredWrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>durableDeferredWrite</color> <color=#f92672>=</color> <color=#f8f8f2>durableDeferredWrite</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if duplicates are allowed in this database. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>DUPS_ENABLED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>flagVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flagVal</color> <color=#f92672>&</color> <color=#f8f8f2>DUPS_ENABLED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSortedDuplicates</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>DUPS_ENABLED</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDupsConverted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>DUPS_CONVERTED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDupsConverted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>DUPS_CONVERTED</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether all LNs in this DB are "immediately obsolete", meaning two things: 1) They are</color>
<color=#75715e>   * counted obsolete when logged and can be ignored by the cleaner entirely. 2) As a consequence,</color>
<color=#75715e>   * they cannot be fetched by LSN, except under special circumstances where they are known to</color>
<color=#75715e>   * exist.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Currently, this is synonymous with whether all LNs in this DB must have zero length data,</color>
<color=#75715e>   * and partial comparators are not used. Currently only duplicate DBs are known to have zero</color>
<color=#75715e>   * length LNs, since there is no way in the API to specify that LNs are immutable. In the future</color>
<color=#75715e>   * we will also support "immediately obsolete" LNs that are mutable and embedded in the BIN in</color>
<color=#75715e>   * other ways, e.g., tiny data may be stored with the key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that deleted LNs (the logged deletion, not the prior version) are always immediately</color>
<color=#75715e>   * obsolete also. See LNLogEntry.isImmediatelyObsolete.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLNImmediatelyObsolete</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getSortedDuplicates</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>btreePartialComparator</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>duplicatePartialComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method should be the only method used to obtain triggers after reading the MapLN from the</color>
<color=#75715e>   * log. It unmarshalls the triggers lazily here to avoid a call to getName() during recovery, when</color>
<color=#75715e>   * the DbTree is not yet instantiated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#a6e22e>getTriggers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* When comparators are not needed, neither are triggers. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNoComparators</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* If no transient or persistent triggers, return null. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggerBytes</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>transientTriggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Just return them, if already constructed. */</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>myTriggers</color> <color=#f92672>=</color> <color=#f8f8f2>triggers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>myTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>myTriggers</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Unmarshall triggers, add transient triggers, and update the</color>
<color=#75715e>     * reference atomically. If another thread unmarshalls and updates it</color>
<color=#75715e>     * first, use the value set by the other thread.  This ensures that a</color>
<color=#75715e>     * single instance is always used.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>myTriggers</color> <color=#f92672>=</color> <color=#f8f8f2>TriggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>unmarshallTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>triggerBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>myTriggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>myTriggers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transientTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>myTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>transientTriggers</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggers</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>myTriggers</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>myTriggers</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>myTriggers</color> <color=#f92672>=</color> <color=#f8f8f2>triggers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>myTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>myTriggers</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasUserTriggers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggerBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>transientTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if key prefixing is enabled in this database. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getKeyPrefixing</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>PREFIXING_ENABLED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the flagVal enables the KeyPrefixing, used to create ReplicatedDatabaseConfig</color>
<color=#75715e>   * after reading a NameLNLogEntry.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getKeyPrefixing</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>flagVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flagVal</color> <color=#f92672>&</color> <color=#f8f8f2>PREFIXING_ENABLED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKeyPrefixing</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>PREFIXING_ENABLED</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clearKeyPrefixing</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forceKeyPrefixing</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>PREFIXING_ENABLED</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return true if this database is replicated. Note that we only need to check the</color>
<color=#75715e>   *     IS_REPLICATED_BIT, because we require that we never have both IS_REPLICATED and</color>
<color=#75715e>   *     NOT_REPLICATED set at the same time.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicatedBitSet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this database is replicated. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>unknownReplicated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IS_REPLICATED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>NOT_REPLICATED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>replicatedBitSet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IS_REPLICATED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setIsReplicatedBit</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IS_REPLICATED_BIT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this database's not replicated bit is set. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>notReplicatedBitSet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>NOT_REPLICATED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setNotReplicatedBit</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>NOT_REPLICATED_BIT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is public for unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getUtilizationRepairDone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>UTILIZATION_REPAIR_DONE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setUtilizationRepairDone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>UTILIZATION_REPAIR_DONE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is public for unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clearUtilizationRepairDone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>UTILIZATION_REPAIR_DONE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNodeMaxTreeEntries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>maxTreeEntriesPerNode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setNodeMaxTreeEntries</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>newNodeMaxTreeEntries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>maxTreeEntriesPerNode</color> <color=#f92672>=</color> <color=#f8f8f2>newNodeMaxTreeEntries</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to determine whether to throw ReplicaWriteException when a write to this database is</color>
<color=#75715e>   * attempted. For the most part, writes on a replica are not allowed to any replicated DB.</color>
<color=#75715e>   * However, an exception is the DB naming DB. The naming DB contains a mixture of LNs for</color>
<color=#75715e>   * replicated and non-replicated databases. Here, we allow all writes to the naming DB. DB naming</color>
<color=#75715e>   * operations for replicated databases on a replica, such as the creation of a replicated DB on a</color>
<color=#75715e>   * replica, are prohibited by DbTree methods (dbCreate, dbRemove, etc). [#20543]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>allowReplicaWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>getDbType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the default mode for this database (all handles). May be null to use Environment default.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color> <color=#f8f8f2>mode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>mode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the default cache mode for this database. If the database has a null cache mode and is</color>
<color=#75715e>   * not an internal database, the Environment default is returned. Null is never returned.</color>
<color=#75715e>   * CacheMode.DYNAMIC may be returned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CacheMode</color> <color=#a6e22e>getDefaultCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultCacheMode</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the tree memory size that should be added to MAPLN_OVERHEAD.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is a start at budgeting per-Database memory. For future reference, other things that</color>
<color=#75715e>   * could be budgeted are: - debugDatabaseName as it is set - Database handles as they are</color>
<color=#75715e>   * added/removed in referringHandles</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getAdditionalTreeMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the comparator object is non-null we double the size of the</color>
<color=#75715e>     * serialized form to account for the approximate size of the user's</color>
<color=#75715e>     * comparator object.  This is only an approximation of course, and is</color>
<color=#75715e>     * not a very good one if we have serialized the class name, but we</color>
<color=#75715e>     * have no way to know the size of the user's object.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>val</color> <color=#f92672>+=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>val</color> <color=#f92672>+=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the duplicate comparison function for this database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the comparator was actually changed</color>
<color=#75715e>   * @param comparator - The Duplicate Comparison function.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>setDuplicateComparator</color><color=#f8f8f2>(</color><color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>byClassName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newBytes</color> <color=#f92672>=</color> <color=#f8f8f2>comparatorToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>byClassName</color><color=#f8f8f2>,</color> <color=#e6db74>"Duplicate"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color>
        <color=#f92672>!</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>comparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>)</color>
                <color=#f92672>!=</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>))</color>
            <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>comparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>)</color>
                <color=#f92672>!=</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>duplicateComparator</color> <color=#f92672>=</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>duplicateComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>newBytes</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>duplicateComparatorByClassName</color> <color=#f92672>=</color> <color=#f8f8f2>byClassName</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>duplicatePartialComparator</color> <color=#f92672>=</color> <color=#f8f8f2>duplicateComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>duplicateBinaryEqualityComparator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>duplicateComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>changed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Key comparator is derived from dup and btree comparators. */</color>
      <color=#f8f8f2>resetKeyComparator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>changed</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the list of triggers associated with the database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dbName pass it in since it may not be available during database creation</color>
<color=#75715e>   * @param newTriggers the triggers to associate with the database</color>
<color=#75715e>   * @param overridePersistentTriggers whether to overwrite persistent triggers</color>
<color=#75715e>   * @return true if a {@link PersistentTrigger} was changed, and therefore may need to be stored.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>setTriggers</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>overridePersistentTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>newTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>newTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newTriggers</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Construct new persistent triggers. */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>newTriggerBytes</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>persistentChange</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>overridePersistentTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newTriggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newTriggerBytes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>persistentChange</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>triggerBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Create the new trigger bytes. */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>nTriggers</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>trigger</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>nTriggers</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTriggers</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newTriggerBytes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>persistentChange</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>triggerBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newTriggerBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>nTriggers</color><color=#f92672>][]</color><color=#f8f8f2>;</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>trigger</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>newTriggerBytes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>objectToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color><color=#f8f8f2>,</color> <color=#e6db74>"trigger "</color> <color=#f92672>+</color> <color=#f8f8f2>trigger</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
              <color=#f8f8f2>trigger</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>persistentChange</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>newTriggerBytes</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newTriggerBytes</color> <color=#f92672>=</color> <color=#f8f8f2>triggerBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>persistentChange</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Add transient triggers. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>newTransientTriggers</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>transientChange</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newTriggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newTransientTriggers</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>transientChange</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>transientTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newTransientTriggers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>diffs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IdentityHashMap</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>diffs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newTransientTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>trigger</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transientTriggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>transientChange</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>newTransientTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transientTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>newTransientTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>transientChange</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f8f8f2>:</color> <color=#f8f8f2>transientTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>diffs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>transientChange</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>diffs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>persistentChange</color> <color=#f92672>||</color> <color=#f8f8f2>transientChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>invokeAddRemoveTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTriggers</color><color=#f8f8f2>(),</color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>);</color>
      <color=#75715e>/* Don't change fields until after getTriggers() call above. */</color>
      <color=#f8f8f2>triggerBytes</color> <color=#f92672>=</color> <color=#f8f8f2>newTriggerBytes</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>transientTriggers</color> <color=#f92672>=</color>
          <color=#f8f8f2>((</color><color=#f8f8f2>newTransientTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>newTransientTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>))</color>
              <color=#f92672>?</color> <color=#f8f8f2>newTransientTriggers</color>
              <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>triggers</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>newTriggers</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>persistentChange</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called when a database is closed to clear all transient triggers and call their 'removeTrigger'</color>
<color=#75715e>   * methods.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clearTransientTriggers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>oldTriggers</color> <color=#f92672>=</color> <color=#f8f8f2>getTriggers</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldTriggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>newTriggers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>oldTriggers</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* The dbName param can be null because it is not used. */</color>
    <color=#f8f8f2>setTriggers</color><color=#f8f8f2>(</color>
        <color=#66d9ef>null</color> <color=#75715e>/*locker*/</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*dbName*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*overridePersistentTriggers*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the btree comparison function for this database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the comparator was actually changed</color>
<color=#75715e>   * @param comparator - The btree Comparison function.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>setBtreeComparator</color><color=#f8f8f2>(</color><color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>byClassName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newBytes</color> <color=#f92672>=</color> <color=#f8f8f2>comparatorToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>byClassName</color><color=#f8f8f2>,</color> <color=#e6db74>"Btree"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color>
        <color=#f92672>!</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>newBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>btreeComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>)</color>
                <color=#f92672>!=</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>))</color>
            <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>btreeComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>)</color>
                <color=#f92672>!=</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>btreeComparator</color> <color=#f92672>=</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>btreeComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>newBytes</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>btreeComparatorByClassName</color> <color=#f92672>=</color> <color=#f8f8f2>byClassName</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>btreePartialComparator</color> <color=#f92672>=</color> <color=#f8f8f2>btreeComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PartialComparator</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>btreeBinaryEqualityComparator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>btreeComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BinaryEqualityComparator</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>changed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Key comparator is derived from dup and btree comparators. */</color>
      <color=#f8f8f2>resetKeyComparator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>changed</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This comparator should not be used directly for comparisons. Use getKeyComparator instead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the btree Comparator object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#a6e22e>getBtreeComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>btreeComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This comparator should not be used directly for comparisons. Use getKeyComparator instead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the duplicate Comparator object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#a6e22e>getDuplicateComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>duplicateComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Key comparator is derived from the duplicate and btree comparator */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>resetKeyComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Initialize comparators. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DatabaseComparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>((</color><color=#f8f8f2>DatabaseComparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>btreeComparator</color><color=#f8f8f2>).</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DatabaseComparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>((</color><color=#f8f8f2>DatabaseComparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>duplicateComparator</color><color=#f8f8f2>).</color><color=#a6e22e>initialize</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Create derived comparator for duplicate database. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>keyComparator</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>TwoPartKeyComparator</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicateComparator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>keyComparator</color> <color=#f92672>=</color> <color=#f8f8f2>btreeComparator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Should always be used when comparing keys for this database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a duplicates database, the data is part two of the two-part database key. Therefore, the</color>
<color=#75715e>   * duplicates comparator and btree comparator are used for comparing keys. This synthetic</color>
<color=#75715e>   * comparator will call both of the other two user-defined comparators as necessary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#a6e22e>getKeyComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keyComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return whether Comparator is set by class name, not by serializable Comparator object. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getBtreeComparatorByClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>btreeComparatorByClassName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return whether Comparator is set by class name, not by serializable Comparator object. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDuplicateComparatorByClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>duplicateComparatorByClassName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return whether Comparator implements PartialComparator. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasBtreePartialComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>btreePartialComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return whether Comparator implements PartialComparator. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasDuplicatePartialComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>duplicatePartialComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>allowsKeyUpdates</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreePartialComparator</color> <color=#f92672>||</color> <color=#f8f8f2>duplicatePartialComparator</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return whether Comparator implements BinaryEqualityComparator. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasBtreeBinaryEqualityComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>btreeBinaryEqualityComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return whether Comparator implements BinaryEqualityComparator. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasDuplicateBinaryEqualityComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>duplicateBinaryEqualityComparator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set the db environment after reading in the DatabaseImpl from the log. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEnvironmentImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>initWithEnvironment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabase</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether one or more handles are open. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasOpenHandles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>referringHandles</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Add a referring handle */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>referringHandles</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Decrement the reference count. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>referringHandles</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of the referring database handles. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color> <color=#a6e22e>getReferringHandles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>referringHandles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>copy</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>referringHandles</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called after a handle onto this DB is closed. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>handleClosed</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>doSyncDw</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deleteTempDb</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>referringHandles</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Transient triggers are discarded when the last handle is</color>
<color=#75715e>       * closed.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>clearTransientTriggers</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Remove a temporary database with no handles open.</color>
<color=#75715e>       *</color>
<color=#75715e>       * We are not synchronized here in any way that would prevent</color>
<color=#75715e>       * another thread from opening a handle during this process, before</color>
<color=#75715e>       * the NameLN is locked.  So we use noWait locking.  If a lock is</color>
<color=#75715e>       * not granted, then another handle was opened and we cannot remove</color>
<color=#75715e>       * the database until later.</color>
<color=#75715e>       *</color>
<color=#75715e>       * We pass the database ID to dbRemove in order to remove the</color>
<color=#75715e>       * database only if the name matches the ID.  This accounts for the</color>
<color=#75715e>       * remote possibility that the database is renamed or another</color>
<color=#75715e>       * database is created with the same name during this process,</color>
<color=#75715e>       * before the NameLN is locked.</color>
<color=#75715e>       *</color>
<color=#75715e>       * We can use a BasicLocker because temporary databases are always</color>
<color=#75715e>       * non-transactional.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteTempDb</color> <color=#f92672>&&</color> <color=#f8f8f2>isTemporary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/* noWait */</color><color=#f8f8f2>);</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>dbRemove</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getId</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Should never happen; a temp db is never replicated. */</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Do nothing if DB was removed or renamed. */</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * We will have to remove this database later.  Note that</color>
<color=#75715e>           * we catch LockConflictException for simplicity but we</color>
<color=#75715e>           * expect either LockNotAvailableException or</color>
<color=#75715e>           * LockNotGrantedException.</color>
<color=#75715e>           */</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Sync a durable deferred write database with no handles open.  If</color>
<color=#75715e>       * a handle is opened during this process, then the sync may be</color>
<color=#75715e>       * unnecessary but it will not cause a problem.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doSyncDw</color> <color=#f92672>&&</color> <color=#f8f8f2>isDurableDeferredWrite</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sync</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Figure out how much memory is used by the DbFileSummaryMap. Usually this number is built up</color>
<color=#75715e>   * over time by the DbFileSummaryMap itself and added to the memory budget, but in this case we</color>
<color=#75715e>   * need to reinitialize it after recovery, when DbFileSummaryMaps may be cut adrift by the process</color>
<color=#75715e>   * of overlaying new portions of the btree.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTreeAdminMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update memory budgets when this databaseImpl is closed and will never be accessed again or when</color>
<color=#75715e>   * it is still open when its owning MapLN will be garbage collected, due to eviction or recovery.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseTreeAdminMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * There's no need to account for INs which belong to this database,</color>
<color=#75715e>     * because those are closed by the EnvironmentImpl when clearing</color>
<color=#75715e>     * the INList.  Do adjust memory budget for utilization info.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>subtractFromMemoryBudget</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the referring handle count. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getReferringHandleCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>referringHandles</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Increments the use count of this DB to prevent it from being evicted. Called by the</color>
<color=#75715e>   * DbTree.createDb/getDb methods that return a DatabaseImpl. Must be called while holding a lock</color>
<color=#75715e>   * on the MapLN. See isInUse. [#13415]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>incrementUseCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>useCount</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Increments the write count and returns the updated value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return updated write count</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>noteWriteHandleOpen</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>writeCount</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Decrements the write count and returns the updated value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return updated write count</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>noteWriteHandleClose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>writeCount</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>count</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Decrements the use count of this DB, allowing it to be evicted if the use count reaches zero.</color>
<color=#75715e>   * Called via DbTree.releaseDb to release a DatabaseImpl that was returned by a</color>
<color=#75715e>   * DbTree.createDb/getDb method. See isInUse. [#13415]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>decrementUseCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>useCount</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>useCount</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this DB is in use and cannot be evicted. Called by MapLN.isEvictable while</color>
<color=#75715e>   * holding a write-lock on the MapLN and a latch on its parent BIN. [#13415]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When isInUse returns false (while holding a write-lock on the MapLN and a latch on the</color>
<color=#75715e>   * parent BIN), it guarantees that the database object is not in use and cannot be acquired by</color>
<color=#75715e>   * another thread (via DbTree.createDb/getDb) until both the MapLN lock and BIN latch are</color>
<color=#75715e>   * released. This guarantee is due to the fact that DbTree.createDb/getDb only increment the use</color>
<color=#75715e>   * count while holding a read-lock on the MapLN. Therefore, it is safe to evict the MapLN when</color>
<color=#75715e>   * isInUse returns false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When isInUse returns true, it is possible that another thread may decrement the use count at</color>
<color=#75715e>   * any time, since no locking or latching is performed when calling DbTree.releaseDb (which calls</color>
<color=#75715e>   * decrementUseCount). Therefore, it is not guaranteed that the MapLN is in use when isInUse</color>
<color=#75715e>   * returns true. A true result means: the DB may be in use, so it is not safe to evict it.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInUse</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>useCount</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks whether a database is in use during a remove or truncate database operation. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isInUseDuringDbRemove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The use count is at least one here, because remove/truncate has</color>
<color=#75715e>     * called getDb but releaseDb has not yet been called.  Normally the</color>
<color=#75715e>     * database must be closed in order to remove or truncate it and</color>
<color=#75715e>     * referringHandles will be empty.  But when the deprecated</color>
<color=#75715e>     * Database.truncate is called, the database is open and the use count</color>
<color=#75715e>     * includes the number of open handles.  [#15805]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useCount</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>referringHandles</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flush all dirty nodes for this database to disk.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws UnsupportedOperationException via Database.sync.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>sync</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>flushLog</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isDurableDeferredWrite</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Database.sync() is only supported "</color> <color=#f92672>+</color> <color=#e6db74>"for deferred-write databases"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>rootExists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCheckpointer</color><color=#f8f8f2>().</color><color=#a6e22e>syncDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>flushLog</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For this secondary database return the primary that it is associated with, or null if not</color>
<color=#75715e>   * associated with any primary. Note that not all handles need be associated with a primary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>findPrimaryDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>referringHandles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>obj</color> <color=#f8f8f2>:</color> <color=#f8f8f2>referringHandles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj</color><color=#f8f8f2>).</color><color=#a6e22e>getPrimaryDatabase</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>getDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the DbFileSummary for the given file, allocates it if necessary and budgeted memory for</color>
<color=#75715e>   * any changes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param willModify if true, the caller will modify the utilization info.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DbFileSummary</color> <color=#a6e22e>getDbFileSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>willModify</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>willModify</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dirty</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>dbFileSummaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Pass true for checkResurrected to prevent memory/disk leaks caused</color>
<color=#75715e>     * by entries that could accumulate for deleted log files.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*adjustMemBudget*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*checkResurrected*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getFileManager</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes the DbFileSummary for the given set of files.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether a DbFileSummary for any of the given files was present and was removed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>removeDbFileSummaries</color><color=#f8f8f2>(</color><color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>fileNums</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>dbFileSummaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>removedAny</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileNums</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>removedAny</color> <color=#f92672>|=</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>removedAny</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>removedAny</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>></color> <color=#a6e22e>cloneDbFileSummaries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>cloneDbFileSummaries</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called under the log write latch, via cloneDbFileSummaries above. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>></color> <color=#a6e22e>cloneDbFileSummariesInternal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>cloneMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DbFileSummaryMap</color> <color=#a6e22e>getDbFileSummaries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this database has new (unflushed) utilization info or the root LSN was modified</color>
<color=#75715e>   * after it was last logged.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDirty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dirty</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets dirty in order to force the MapLN to be flushed later.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This flag is used when utilization is changed, the root LSN is changed, etc, in order to</color>
<color=#75715e>   * cause the MapLN to be flushed during the next checkpoint, or when utilization info is logged.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDirty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>dirty</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether this database's MapLN must be flushed during a checkpoint. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCheckpointNeeded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>isDeleted</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDirty</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>isTemporary</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this database is deleted. Delete cleanup may still be in progress. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDeleted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>deleteState</color> <color=#f92672>==</color> <color=#f8f8f2>NOT_DELETED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this database is deleted and all cleanup is finished. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDeleteFinished</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteState</color> <color=#f92672>==</color> <color=#f8f8f2>DELETED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The delete cleanup is starting. Set this before releasing any write locks held for a db</color>
<color=#75715e>   * operation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>startDeleteProcessing</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteState</color> <color=#f92672>==</color> <color=#f8f8f2>NOT_DELETED</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>deleteState</color> <color=#f92672>=</color> <color=#f8f8f2>DELETED_CLEANUP_INLIST_HARVEST</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Should be called by the SortedLSNTreeWalker when it is finished with the INList. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>finishedINListHarvest</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteState</color> <color=#f92672>==</color> <color=#f8f8f2>DELETED_CLEANUP_INLIST_HARVEST</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>deleteState</color> <color=#f92672>=</color> <color=#f8f8f2>DELETED_CLEANUP_LOG_HARVEST</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Perform the entire two-step database deletion. This method is used at non-transactional</color>
<color=#75715e>   * operation end. When a transaction is used (see Txn), startDeleteProcessing is called at commit</color>
<color=#75715e>   * before releasing write locks and finishDeleteProcessing is called after releasing write locks.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>startAndFinishDelete</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>startDeleteProcessing</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>finishDeleteProcessing</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Release the INs for the deleted database, count all log entries for this database as obsolete,</color>
<color=#75715e>   * delete the MapLN, and set the state to DELETED.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Used at transaction end or non-transactional operation end in these cases: - purge the</color>
<color=#75715e>   * deleted database after a commit of Environment.removeDatabase - purge the deleted database</color>
<color=#75715e>   * after a commit of Environment.truncateDatabase - purge the newly created database after an</color>
<color=#75715e>   * abort of Environment.truncateDatabase</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the processing of the naming tree means the MapLN is never actually accessible</color>
<color=#75715e>   * from the current tree, but deleting the MapLN will do two things: (a) mark it properly obsolete</color>
<color=#75715e>   * (b) null out the database tree, leaving the INList the only reference to the INs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>finishDeleteProcessing</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>pendingDeletedHook</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Delete MapLN before the walk.  Get the root LSN before deleting</color>
<color=#75715e>       * the MapLN, as that will null out the root.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>rootLsn</color> <color=#f92672>=</color> <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>getRootLsn</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Grab the in-cache root IN before we call deleteMapLN so that it</color>
<color=#75715e>       * gives us a starting point for the SortedLSNTreeWalk below.  The</color>
<color=#75715e>       * on-disk version is obsolete at this point.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>rootIN</color> <color=#f92672>=</color> <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>getResidentRootIN</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>deleteMapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Ensure that the MapLN deletion is flushed to disk, so that</color>
<color=#75715e>       * utilization information is not lost if we crash past this point.</color>
<color=#75715e>       * Note that the Commit entry has already been flushed for the</color>
<color=#75715e>       * transaction of the DB removal/truncation operation, so we cannot</color>
<color=#75715e>       * rely on the flush of the Commit entry to flush the MapLN.</color>
<color=#75715e>       * [#18696]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>flushSync</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>createdAtLogVersion</color> <color=#f92672>>=</color> <color=#ae81ff>6</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>forceTreeWalkForTruncateAndRemove</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * For databases created at log version 6 or after, the</color>
<color=#75715e>         * per-database utilization info is complete and can be counted</color>
<color=#75715e>         * as obsolete without walking the database.</color>
<color=#75715e>         *</color>
<color=#75715e>         * We do not need to flush modified file summaries because the</color>
<color=#75715e>         * obsolete amounts are logged along with the deleted MapLN and</color>
<color=#75715e>         * will be re-counted by recovery if necessary.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>countObsoleteDb</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * For databases created prior to log version 6, the</color>
<color=#75715e>         * per-database utilization info is incomplete.  Use the old</color>
<color=#75715e>         * method of counting utilization via SortedLSNTreeWalker.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Use a local tracker that is accumulated under the log write</color>
<color=#75715e>         * latch when we're done counting.  Start by recording the LSN</color>
<color=#75715e>         * of the root IN as obsolete.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>LocalUtilizationTracker</color> <color=#f8f8f2>localTracker</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LocalUtilizationTracker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>localTracker</color><color=#f8f8f2>.</color><color=#a6e22e>countObsoleteNodeInexact</color><color=#f8f8f2>(</color><color=#f8f8f2>rootLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_IN</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Fetch LNs to count LN sizes only if so configured. */</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>fetchLNSize</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCleaner</color><color=#f8f8f2>().</color><color=#a6e22e>getFetchObsoleteSize</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

        <color=#75715e>/* Use the tree walker to visit every child LSN in the tree. */</color>
        <color=#f8f8f2>ObsoleteProcessor</color> <color=#f8f8f2>obsoleteProcessor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ObsoleteProcessor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>localTracker</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>SortedLSNTreeWalker</color> <color=#f8f8f2>walker</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>ObsoleteTreeWalker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>rootLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>fetchLNSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>obsoleteProcessor</color><color=#f8f8f2>,</color> <color=#f8f8f2>rootIN</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * At this point, it's possible for the evictor to find an IN</color>
<color=#75715e>         * for this database on the INList. It should be ignored.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>walker</color><color=#f8f8f2>.</color><color=#a6e22e>walk</color><color=#f8f8f2>();</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Count obsolete nodes for a deleted database at transaction</color>
<color=#75715e>         * end time.  Write out the modified file summaries for</color>
<color=#75715e>         * recovery.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationProfile</color><color=#f8f8f2>().</color><color=#a6e22e>flushLocalTracker</color><color=#f8f8f2>(</color><color=#f8f8f2>localTracker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Remove all INs for this database from the INList. */</color>
      <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>INList</color> <color=#f8f8f2>inList</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>();</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>memoryChange</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>IN</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>inList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>IN</color> <color=#f8f8f2>thisIN</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisIN</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>memoryChange</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>thisIN</color><color=#f8f8f2>.</color><color=#a6e22e>getBudgetedMemorySize</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateTreeMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>memoryChange</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Adjust memory budget for utilization info. */</color>
      <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>subtractFromMemoryBudget</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>deleteState</color> <color=#f92672>=</color> <color=#f8f8f2>DELETED</color><color=#f8f8f2>;</color>
      <color=#75715e>/* releaseDb to balance getDb called by truncate/remove. */</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts all active LSNs in a database as obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param mapLnLsn is the LSN of the MapLN when called via recovery, otherwise is NULL_LSN.</color>
<color=#75715e>   *     <p>Must be called under the log write latch or during recovery.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>countObsoleteDb</color><color=#f8f8f2>(</color><color=#f8f8f2>BaseUtilizationTracker</color> <color=#f8f8f2>tracker</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>mapLnLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * Even though the check for createdAtLogVersion and</color>
<color=#75715e>     * forceTreeWalkForTruncateAndRemove is made in finishDeleteProcessing</color>
<color=#75715e>     * before calling this method, we must repeat the check here because</color>
<color=#75715e>     * this method is also called by recovery.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>createdAtLogVersion</color> <color=#f92672>>=</color> <color=#ae81ff>6</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>forceTreeWalkForTruncateAndRemove</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tracker</color><color=#f8f8f2>.</color><color=#a6e22e>countObsoleteDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>,</color> <color=#f8f8f2>mapLnLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ObsoleteTreeWalker</color> <color=#66d9ef>extends</color> <color=#f8f8f2>SortedLSNTreeWalker</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>rootIN</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>ObsoleteTreeWalker</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>rootLsn</color><color=#f8f8f2>,</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>fetchLNSize</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>TreeNodeProcessor</color> <color=#f8f8f2>callback</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>IN</color> <color=#f8f8f2>rootIN</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>},</color>
          <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// set INList finish harvest</color>
          <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>rootLsn</color><color=#f8f8f2>},</color>
          <color=#f8f8f2>callback</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* savedException */</color>
          <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>/* exception predicate */</color>

      <color=#f8f8f2>accumulateLNs</color> <color=#f92672>=</color> <color=#f8f8f2>fetchLNSize</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rootIN</color> <color=#f92672>=</color> <color=#f8f8f2>rootIN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#f8f8f2>IN</color> <color=#a6e22e>getResidentRootIN</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootIN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rootIN</color><color=#f8f8f2>.</color><color=#a6e22e>latchShared</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>rootIN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Mark each LSN obsolete in the utilization tracker. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ObsoleteProcessor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>TreeNodeProcessor</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LocalUtilizationTracker</color> <color=#f8f8f2>localTracker</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ObsoleteProcessor</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>LocalUtilizationTracker</color> <color=#f8f8f2>localTracker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>db</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>localTracker</color> <color=#f92672>=</color> <color=#f8f8f2>localTracker</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processLSN</color><color=#f8f8f2>(</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>childType</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>lnKey</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>childLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Count the LN log size if an LN node and key are available, i.e.,</color>
<color=#75715e>       * we are certain this is an LN. [#15365]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lnKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>node</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>localTracker</color><color=#f8f8f2>.</color><color=#a6e22e>countObsoleteNodeInexact</color><color=#f8f8f2>(</color><color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>childType</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processDirtyDeletedLN</color><color=#f8f8f2>(</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color> <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>lnKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>ln</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not count the size (pass zero) because the LN is dirty and</color>
<color=#75715e>       * the logged LN is not available.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>localTracker</color><color=#f8f8f2>.</color><color=#a6e22e>countObsoleteNodeInexact</color><color=#f8f8f2>(</color><color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ln</color><color=#f8f8f2>.</color><color=#a6e22e>getGenericLogType</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>noteMemoryExceeded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>BtreeStats</color> <color=#a6e22e>stat</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tree</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeStats</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BtreeStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getFast</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeStats</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Use verify() to get stats. This is fairly inexpensive and the</color>
<color=#75715e>       * performance of this method is not critical. In the future we</color>
<color=#75715e>       * could optimize a little by disabling basic btree verification.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>VerifyConfig</color> <color=#f8f8f2>verifyConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>VerifyConfig</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>verifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setShowProgressInterval</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getShowProgressInterval</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>verifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setShowProgressStream</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getShowProgressStream</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#f8f8f2>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>verifyConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>stats</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>BtreeStats</color> <color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>VerifyConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tree</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeStats</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BtreeVerifier</color> <color=#f8f8f2>verifier</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>setBtreeVerifyConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verifyDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>getDebugName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getId</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Preload the cache, using up to maxBytes bytes or maxMillsecs msec.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via Database.preload</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadStats</color> <color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#66d9ef>this</color><color=#f8f8f2>},</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The processLSN() code for CountProcessor. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DOSCountCallback</color> <color=#66d9ef>implements</color> <color=#f8f8f2>DiskOrderedScanner</color><color=#f8f8f2>.</color><color=#a6e22e>RecordProcessor</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>process</color><color=#f8f8f2>(</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dbIdx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f92672>++</color><color=#f8f8f2>count</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>canProcessWithoutBlocking</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>nRecords</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getCapacity</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Count entries in the database including dups, but don't dirty the cache. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memoryLimit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Must have at least 1MB of memory to be used by DOS (1MB is</color>
<color=#75715e>       * chosen rather arbitrarely).</color>
<color=#75715e>       */</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>minMem</color> <color=#f92672>=</color> <color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Use a heuristic to calculate the memory limit if none was</color>
<color=#75715e>       * provided by the user. This heuristic makes sure that the</color>
<color=#75715e>       * JE cache will not be affected, but otherwise, it is also</color>
<color=#75715e>       * rather arbitrary.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memoryLimit</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>memoryLimit</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>JVMSystemUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getRuntimeMaxMemory</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>())</color> <color=#f92672>/</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memoryLimit</color> <color=#f92672><</color> <color=#f8f8f2>minMem</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// System.out.println("Using skip-base Database.count()");</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DOSCountCallback</color> <color=#f8f8f2>counter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DOSCountCallback</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>dbs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>DiskOrderedScanner</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>dbs</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>counter</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*serialDBScan*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*binsOnly*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*keyOnly*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*countOnly*/</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#75715e>/*lsnBatchSize*/</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>memoryLimit</color><color=#f8f8f2>,</color>
              <color=#66d9ef>false</color> <color=#75715e>/*debug*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>scan</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>FileProtector</color><color=#f8f8f2>.</color><color=#a6e22e>DATABASE_COUNT_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeSequence</color><color=#f8f8f2>().</color><color=#a6e22e>getNextDatabaseCountId</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>counter</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For future use as API method. Implementation is incomplete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Counts entries in a key range by positioning a cursor on the beginning key and skipping</color>
<color=#75715e>   * entries until the ending key is encountered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>beginKey</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>beginInclusive</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>endKey</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>endInclusive</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>noData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>noData</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color> <color=#f92672>=</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>makeCursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*cursorConfig*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Position cursor on beginning key. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>beginKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>beginKey</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>beginKey</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>beginKey</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getSearchKeyRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>noData</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>beginInclusive</color> <color=#f92672>&&</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>beginKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>noData</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>noData</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Create RangeConstraint for ending key. */</color>
        <color=#f8f8f2>RangeConstraint</color> <color=#f8f8f2>rangeConstraint</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// INCOMPLETE</color>

        <color=#75715e>/* Skip entries to get count. */</color>
        <color=#66d9ef>return</color> <color=#ae81ff>1</color>
            <color=#f92672>+</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>).</color><color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*forward*/</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color> <color=#75715e>/*maxCount*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Dumping</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>nSpaces</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<database id=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" deleteState=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>deleteState</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" useCount=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>useCount</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" dupsort=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getSortedDuplicates</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" temporary=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isTemporary</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" deferredWrite=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isDurableDeferredWrite</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" keyPrefixing=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getKeyPrefixing</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" btc=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getComparatorClassName</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" btcPartial=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>btreePartialComparator</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" dupc=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getComparatorClassName</color><color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" dupcPartial=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>duplicatePartialComparator</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>">"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbFileSummaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>>></color> <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>DbFileSummary</color> <color=#f8f8f2>summary</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<file file=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>summary</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"/file>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</database>"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Logging support</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This log entry type is configured to perform marshaling (getLogSize and writeToLog) under the</color>
<color=#75715e>   * write log mutex. Otherwise, the size could change in between calls to these two methods as the</color>
<color=#75715e>   * result of utilizaton tracking.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Loggable#getLogSize</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color>
        <color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#ae81ff>1</color>
            <color=#f92672>+</color> <color=#75715e>// flags, 1 byte</color>
            <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getByteArrayLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getByteArrayLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>maxTreeEntriesPerNode</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// createdAtLogVersion</color>

    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>>></color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DbFileSummary</color> <color=#f8f8f2>summary</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedLongLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>.</color><color=#a6e22e>longValue</color><color=#f8f8f2>())</color> <color=#f92672>+</color> <color=#f8f8f2>summary</color><color=#f8f8f2>.</color><color=#a6e22e>getLogSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>TriggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logSize</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerBytes</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#writeToLog */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>flags</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxTreeEntriesPerNode</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>createdAtLogVersion</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>>></color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DbFileSummary</color> <color=#f8f8f2>summary</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>.</color><color=#a6e22e>longValue</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>summary</color><color=#f8f8f2>.</color><color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>TriggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>triggerBytes</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dirty</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#readFromLog */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>version6OrLater</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>6</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Versions < 6 have the duplicatesAllowed boolean rather than a flags</color>
<color=#75715e>     * byte here, but we don't need a special case because the old boolean</color>
<color=#75715e>     * value is 1 and replacement flag value is 1.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forceKeyPrefixing</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setKeyPrefixing</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>btreeComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>version6OrLater</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>duplicateComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>version6OrLater</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>btreeClassName</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readString</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>version6OrLater</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>dupClassName</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readString</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>version6OrLater</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>btreeClassName</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>btreeComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>btreeComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>objectToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeClassName</color><color=#f8f8f2>,</color> <color=#e6db74>"Btree"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dupClassName</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>duplicateComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>duplicateComparatorBytes</color> <color=#f92672>=</color> <color=#f8f8f2>objectToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>dupClassName</color><color=#f8f8f2>,</color> <color=#e6db74>"Duplicate"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>maxTreeEntriesPerNode</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>version6OrLater</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Discard maxDupTreeEntriesPerNode. */</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>version6OrLater</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>version6OrLater</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>createdAtLogVersion</color> <color=#f92672>=</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nFiles</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFiles</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>DbFileSummary</color> <color=#f8f8f2>summary</color> <color=#f92672>=</color>
            <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>),</color>
                <color=#66d9ef>false</color> <color=#75715e>/*adjustMemBudget*/</color><color=#f8f8f2>,</color>
                <color=#66d9ef>false</color> <color=#75715e>/*checkResurrected*/</color><color=#f8f8f2>,</color>
                <color=#66d9ef>null</color> <color=#75715e>/*fileManager*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>summary</color><color=#f8f8f2>.</color><color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>triggerBytes</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>TriggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Trigger list is unmarshalled lazily by getTriggers. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#dumpLog */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<database"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dumpFlags</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>,</color> <color=#f8f8f2>flags</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" btcmp=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getComparatorClassName</color><color=#f8f8f2>(</color><color=#f8f8f2>btreeComparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" dupcmp=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getComparatorClassName</color><color=#f8f8f2>(</color><color=#f8f8f2>duplicateComparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" > "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>verbose</color> <color=#f92672>&&</color> <color=#f8f8f2>dbFileSummaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>>></color> <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>DbFileSummary</color> <color=#f8f8f2>summary</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<file file=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>summary</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</file>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>TriggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>dumpTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>triggerBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>getTriggers</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</database>"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpFlags</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color> <color=#f8f8f2>flags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" dupsort=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>DUPS_ENABLED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" replicated=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IS_REPLICATED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" temp=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>TEMPORARY_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" "</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#getTransactionId */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTransactionId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#logicalEquals Always return false, this item should never be compared. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>logicalEquals</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>Loggable</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used for log dumping. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getComparatorClassName</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>comparatorBytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparatorBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>comparatorBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Output something for DbPrintLog when</color>
<color=#75715e>       * EnvironmentImpl.getNoComparators.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#e6db74>"byteLen: "</color> <color=#f92672>+</color> <color=#f8f8f2>comparatorBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used both to read from the log and to validate a comparator when set in DatabaseConfig. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#a6e22e>instantiateComparator</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Class</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]>></color> <color=#f8f8f2>comparatorClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparatorClass</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>comparatorClass</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Exception while trying to load "</color> <color=#f92672>+</color> <color=#f8f8f2>comparatorType</color> <color=#f92672>+</color> <color=#e6db74>" Comparator class."</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used to validate a comparator when set in DatabaseConfig. */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#a6e22e>instantiateComparator</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color><color=#f8f8f2>)</color>
        <color=#f8f8f2>bytesToObject</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>objectToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>),</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts a comparator object to a serialized byte array, converting to a class name String</color>
<color=#75715e>   * object if byClassName is true.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if the object cannot be serialized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>comparatorToBytes</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>byClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color> <color=#f92672>=</color> <color=#f8f8f2>byClassName</color> <color=#f92672>?</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>objectToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color><color=#f8f8f2>,</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts an arbitrary object to a serialized byte array. Assumes that the object given is</color>
<color=#75715e>   * non-null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>objectToBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>baos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ObjectOutputStream</color> <color=#f8f8f2>oos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ObjectOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>baos</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>oos</color><color=#f8f8f2>.</color><color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>baos</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Exception while trying to store "</color> <color=#f92672>+</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts an arbitrary serialized byte array to an object. Assumes that the byte array given is</color>
<color=#75715e>   * non-null and has a non-zero length.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>bytesToObject</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ByteArrayInputStream</color> <color=#f8f8f2>bais</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>ClassResolver</color><color=#f8f8f2>.</color><color=#a6e22e>Stream</color> <color=#f8f8f2>ois</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ClassResolver</color><color=#f8f8f2>.</color><color=#a6e22e>Stream</color><color=#f8f8f2>(</color><color=#f8f8f2>bais</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ois</color><color=#f8f8f2>.</color><color=#a6e22e>readObject</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Exception while trying to load "</color> <color=#f92672>+</color> <color=#f8f8f2>comparatorType</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compareEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry2</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>duplicates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>entry1</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>entry1</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>entry1</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>entry2</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>entry2</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>entry2</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>duplicates</color> <color=#f92672>?</color> <color=#f8f8f2>duplicateComparator</color> <color=#f8f8f2>:</color> <color=#f8f8f2>btreeComparator</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Utility class for converting bytes to compartor or Class. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ComparatorReader</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * True if comparator type is Class,</color>
<color=#75715e>     * false if comparator type is Comparator.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isClass</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Record the Class type for this Comparator,</color>
<color=#75715e>     * used by ReplicatedDatabaseConfig.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]>></color> <color=#f8f8f2>comparatorClass</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>;</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ComparatorReader</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>comparatorBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* No comparator. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparatorBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>comparatorClass</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>comparator</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>isClass</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Deserialize String class name or Comparator instance. */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color> <color=#f92672>=</color> <color=#f8f8f2>bytesToObject</color><color=#f8f8f2>(</color><color=#f8f8f2>comparatorBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Comparator is specified as a class name. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>className</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>comparatorClass</color> <color=#f92672>=</color>
              <color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]>></color><color=#f8f8f2>)</color> <color=#f8f8f2>ClassResolver</color><color=#f8f8f2>.</color><color=#a6e22e>resolveClass</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>ee</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>ee</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>comparator</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateComparator</color><color=#f8f8f2>(</color><color=#f8f8f2>comparatorClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>isClass</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Comparator is specified as an instance. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Comparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>comparatorClass</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>comparator</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color><color=#f8f8f2>)</color> <color=#f8f8f2>obj</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>isClass</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Should never happen. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Expected class name or Comparator instance, got: "</color> <color=#f92672>+</color> <color=#f8f8f2>obj</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>isClass</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Class</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]>></color> <color=#a6e22e>getComparatorClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>comparatorClass</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#a6e22e>getComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getBinDeltaPercent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>binDeltaPercent</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return a ReplicationContext that will indicate if this operation should broadcast data records</color>
<color=#75715e>   * for this database as part the replication stream.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationContext</color> <color=#a6e22e>getRepContext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * It's sufficient to base the decision on what to return solely on the</color>
<color=#75715e>     * isReplicated() value. We're guaranteed that the environment is</color>
<color=#75715e>     * currently opened w/replication. That's because we refuse to open</color>
<color=#75715e>     * rep'ed environments in standalone mode and we couldn't have created</color>
<color=#75715e>     * this db w/replication specified in a standalone environment.</color>
<color=#75715e>     *</color>
<color=#75715e>     * We also don't have to check if this is a client or master. If this</color>
<color=#75715e>     * method is called, we're executing a write operation that was</color>
<color=#75715e>     * instigated an API call on this node (as opposed to a write operation</color>
<color=#75715e>     * that was instigated by an incoming replication message). We enforce</color>
<color=#75715e>     * elsewhere that write operations are only conducted by the master.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Writes provoked by incoming replication messages are executed</color>
<color=#75715e>     * through the putReplicatedLN and deleteReplicatedLN methods.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return a ReplicationContext that includes information on how to logically replicate database</color>
<color=#75715e>   * operations. This kind of replication context must be used for any api call which logging a</color>
<color=#75715e>   * NameLN for that represents a database operation. However, NameLNs which are logged for other</color>
<color=#75715e>   * reasons, such as cleaner migration, don't need this special replication context.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DbOpReplicationContext</color> <color=#a6e22e>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>DbOperationType</color> <color=#f8f8f2>operationType</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>oldDbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If this method is called, we're executing a write operation that was</color>
<color=#75715e>     * instigated by an API call on this node (as opposed to a write</color>
<color=#75715e>     * operation that was instigated by an incoming replication</color>
<color=#75715e>     * message). We enforce elsewhere that write operations are only</color>
<color=#75715e>     * conducted by the master.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>context</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbOpReplicationContext</color><color=#f8f8f2>(</color><color=#f8f8f2>isReplicated</color><color=#f8f8f2>(),</color> <color=#f8f8f2>operationType</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbOperationType</color><color=#f8f8f2>.</color><color=#a6e22e>isWriteConfigType</color><color=#f8f8f2>(</color><color=#f8f8f2>operationType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldDbId</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>setCreateConfig</color><color=#f8f8f2>(</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>ReplicatedDatabaseConfig</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>flags</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>maxTreeEntriesPerNode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>btreeComparatorBytes</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>duplicateComparatorBytes</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>triggerBytes</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>operationType</color> <color=#f92672>==</color> <color=#f8f8f2>DbOperationType</color><color=#f8f8f2>.</color><color=#a6e22e>TRUNCATE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldDbId</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>setTruncateOldDbId</color><color=#f8f8f2>(</color><color=#f8f8f2>oldDbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>context</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience overloading.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getOperationRepContext(DbOperationType, DatabaseId)</color>
<color=#75715e>   * @param operationType</color>
<color=#75715e>   * @return</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DbOpReplicationContext</color> <color=#a6e22e>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>DbOperationType</color> <color=#f8f8f2>operationType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>operationType</color> <color=#f92672>!=</color> <color=#f8f8f2>DbOperationType</color><color=#f8f8f2>.</color><color=#a6e22e>TRUNCATE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>operationType</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>