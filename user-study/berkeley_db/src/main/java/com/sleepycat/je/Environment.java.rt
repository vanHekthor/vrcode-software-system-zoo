<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.ReplicaAckPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbTree.TruncateDbResult</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.StartupTracker.Phase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.HandleLocker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockerFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Txn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DatabaseUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.Pair</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.transaction.xa.Xid</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.Closeable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.ConcurrentHashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicReference</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A database environment. Environments include support for some or all of caching, locking, logging</color>
<color=#75715e> * and transactions.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To open an existing environment with default attributes the application may use a default</color>
<color=#75715e> * environment configuration object or null:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *      // Open an environment handle with default attributes.</color>
<color=#75715e> *     Environment env = new Environment(home, new EnvironmentConfig());</color>
<color=#75715e> *     </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * or</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     Environment env = new Environment(home, null);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that many Environment objects may access a single environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To create an environment or customize attributes, the application should customize the</color>
<color=#75715e> * configuration class. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     EnvironmentConfig envConfig = new EnvironmentConfig();</color>
<color=#75715e> *     envConfig.setTransactional(true);</color>
<color=#75715e> *     envConfig.setAllowCreate(true);</color>
<color=#75715e> *     envConfig.setCacheSize(1000000);</color>
<color=#75715e> *     Environment newlyCreatedEnv = new Environment(home, envConfig);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that environment configuration parameters can also be set through the &lt;environment</color>
<color=#75715e> * home&gt;/je.properties file. This file takes precedence over any programmatically specified</color>
<color=#75715e> * configuration parameters so that configuration changes can be made without recompiling.</color>
<color=#75715e> * Environment configuration follows this order of precedence:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>Configuration parameters specified in &lt;environment home&gt;/je.properties take first</color>
<color=#75715e> *       precedence.</color>
<color=#75715e> *   <li>Configuration parameters set in the EnvironmentConfig object used at Environment</color>
<color=#75715e> *       construction e tameters not set by the application are set to system defaults, described</color>
<color=#75715e> *       along with the parameter name String constants in the EnvironmentConfig class.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>An <em>environment handle</em> is an Environment instance. More than one Environment instance</color>
<color=#75715e> * may be created for the same physical directory, which is the same as saying that more than one</color>
<color=#75715e> * Environment handle may be open at one time for a given environment. The Environment handle should</color>
<color=#75715e> * not be closed while any other handle remains open that is using it as a reference (for example,</color>
<color=#75715e> * {@link Database Database} or {@link com.sleepycat.je.Transaction Transaction}. Once {@link</color>
<color=#75715e> * Environment#close Environment.close} is called, this object may not be accessed again.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Environment</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Closeable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * envImpl is a reference to the shared underlying environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The envImpl field is set to null during close to avoid OOME. It should normally only be</color>
<color=#75715e>   * accessed via the checkOpen and getNonNullEnvImpl methods. During close, while synchronized, it</color>
<color=#75715e>   * is safe to access it directly.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * If the env was invalided (even if the env is now closed) this contains</color>
<color=#75715e>   * the first EFE that invalidated it. Contains null if the env was not</color>
<color=#75715e>   * invalidated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * This reference is shared with EnvironmentImpl, to allow the invalidating</color>
<color=#75715e>   * exception to be returned after close, when environmentImpl is null.</color>
<color=#75715e>   * The EFE does not reference the EnvironmentImpl, so GC is not effected.</color>
<color=#75715e>   *</color>
<color=#75715e>   * This field cannot be declared as final because it is initialized by</color>
<color=#75715e>   * methods called by the ctor. However, after construction it is non-null</color>
<color=#75715e>   * and should be treated as final.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>EnvironmentFailureException</color><color=#f92672>></color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>handleConfig</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>appliedFinalConfig</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f8f8f2>,</color> <color=#f8f8f2>Database</color><color=#f92672>></color> <color=#f8f8f2>referringDbs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Transaction</color><color=#f92672>></color> <color=#f8f8f2>referringDbTxns</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden The name of the cleaner daemon thread. This constant is passed to an ExceptionEvent's</color>
<color=#75715e>   *     threadName argument when an exception is thrown in the cleaner daemon thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_NAME</color> <color=#f92672>=</color> <color=#e6db74>"Cleaner"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden The name of the IN Compressor daemon thread. This constant is passed to an</color>
<color=#75715e>   *     ExceptionEvent's threadName argument when an exception is thrown in the IN Compressor</color>
<color=#75715e>   *     daemon thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>INCOMP_NAME</color> <color=#f92672>=</color> <color=#e6db74>"INCompressor"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden The name of the Checkpointer daemon thread. This constant is passed to an</color>
<color=#75715e>   *     ExceptionEvent's threadName argument when an exception is thrown in the Checkpointer daemon</color>
<color=#75715e>   *     thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHECKPOINTER_NAME</color> <color=#f92672>=</color> <color=#e6db74>"Checkpointer"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden The name of the StatCapture daemon thread. This constant is passed to an</color>
<color=#75715e>   *     ExceptionEvent's threadName argument when an exception is thrown in the StatCapture daemon</color>
<color=#75715e>   *     thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STATCAPTURE_NAME</color> <color=#f92672>=</color> <color=#e6db74>"StatCapture"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @hidden The name of the log flusher daemon thread. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FLUSHER_NAME</color> <color=#f92672>=</color> <color=#e6db74>"LogFlusher"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @hidden The name of the deletion detector daemon thread. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FILE_DELETION_DETECTOR_NAME</color> <color=#f92672>=</color> <color=#e6db74>"FileDeletionDetector"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @hidden The name of the data corruption verifier daemon thread. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>DATA_CORRUPTION_VERIFIER_NAME</color> <color=#f92672>=</color> <color=#e6db74>"DataCorruptionVerifier"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a database environment handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param envHome The database environment's home directory.</color>
<color=#75715e>   * @param configuration The database environment attributes. If null, default attributes are used.</color>
<color=#75715e>   * @throws EnvironmentNotFoundException if the environment does not exist (does not contain at</color>
<color=#75715e>   *     least one log file) and the {@code EnvironmentConfig AllowCreate} parameter is false.</color>
<color=#75715e>   * @throws EnvironmentLockedException when an environment cannot be opened for write access</color>
<color=#75715e>   *     because another process has the same environment open for write access.</color>
<color=#75715e>   *     <strong>Warning:</strong> This exception should be handled when an environment is opened by</color>
<color=#75715e>   *     more than one process.</color>
<color=#75715e>   * @throws VersionMismatchException when the existing log is not compatible with the version of JE</color>
<color=#75715e>   *     that is running. This occurs when a later version of JE was used to create the log.</color>
<color=#75715e>   *     <strong>Warning:</strong> This exception should be handled when more than one version of JE</color>
<color=#75715e>   *     may be used to access an environment.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this environment was previously opened for replication</color>
<color=#75715e>   *     and is not being opened read-only.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, an invalid</color>
<color=#75715e>   *     {@code EnvironmentConfig} parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Environment</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color>
          <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*repConfigProxy*/</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*envImplParam*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Internal common constructor.</color>
<color=#75715e>   * @param envImpl is non-null only when used by EnvironmentImpl to create an InternalEnvironment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>Environment</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>referringDbs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f8f8f2>,</color> <color=#f8f8f2>Database</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>referringDbTxns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Transaction</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#e6db74>"envHome"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>appliedFinalConfig</color> <color=#f92672>=</color> <color=#f8f8f2>setupHandleConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* We're creating an InternalEnvironment in EnvironmentImpl. */</color>
      <color=#f8f8f2>environmentImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Open a new or existing environment in the shared pool. */</color>
      <color=#f8f8f2>environmentImpl</color> <color=#f92672>=</color> <color=#f8f8f2>makeEnvironmentImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden makeEnvironmentImpl() is called both by the Environment constructor and by the</color>
<color=#75715e>   *     ReplicatedEnvironment constructor when recreating the environment for a hard recovery.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>makeEnvironmentImpl</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>environmentImpl</color> <color=#f92672>=</color>
        <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>()</color>
            <color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>appliedFinalConfig</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envConfig</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#75715e>/*checkImmutableParams*/</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>setupRepConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>,</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>registerMBean</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>invalidatingEFE</color> <color=#f92672>=</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInvalidatingExceptionReference</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Validate the parameters specified in the environment config. Applies the configurations</color>
<color=#75715e>   * specified in the je.properties file to override any programmatically set configurations. Create</color>
<color=#75715e>   * a copy to save in this handle. The main reason to return a config instead of using the</color>
<color=#75715e>   * handleConfig field is to return an EnvironmentConfig instead of a EnvironmentMutableConfig.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setupHandleConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* If the user specified a null object, use the default */</color>
    <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>baseConfig</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>envConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Make a copy, apply je.properties, and init the handle config. */</color>
    <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>baseConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Apply the je.properties file. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getLoadPropertyFile</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>applyFileConfig</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getProps</color><color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color> <color=#75715e>// forReplication</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>copyToHandleConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Obtain a validated replication configuration. In a non-HA environment, return null. */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>RepConfigProxy</color> <color=#a6e22e>setupRepConfig</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The Environment.close method closes the Berkeley DB environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When the last environment handle is closed, allocated resources are freed, and daemon</color>
<color=#75715e>   * threads are stopped, even if they are performing work. For example, if the cleaner is still</color>
<color=#75715e>   * cleaning the log, it will be stopped at the next reasonable opportunity and perform no more</color>
<color=#75715e>   * cleaning operations. After stopping background threads, a final checkpoint is performed by this</color>
<color=#75715e>   * method, in order to reduce the time to recover the next time the environment is opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When minimizing recovery time is desired, it is often useful to stop all application</color>
<color=#75715e>   * activity and perform an additional checkpoint prior to calling {@code close}. This additional</color>
<color=#75715e>   * checkpoint will write most of dirty Btree information, so that that the final checkpoint is</color>
<color=#75715e>   * very small (and recovery is fast). To ensure that recovery time is minimized, the log cleaner</color>
<color=#75715e>   * threads should also be stopped prior to the extra checkpoint. This prevents log cleaning from</color>
<color=#75715e>   * dirtying the Btree, which can make the final checkpoint larger (and recovery time longer). The</color>
<color=#75715e>   * recommended procedure for minimizing recovery time is:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *     // Stop/finish all application operations that are using JE.</color>
<color=#75715e>   *     ...</color>
<color=#75715e>   *</color>
<color=#75715e>   *     // Stop the cleaner daemon threads.</color>
<color=#75715e>   *     EnvironmentMutableConfig config = env.getMutableConfig();</color>
<color=#75715e>   *     config.setConfigParam(EnvironmentConfig.ENV_RUN_CLEANER, "false");</color>
<color=#75715e>   *     env.setMutableConfig(config);</color>
<color=#75715e>   *</color>
<color=#75715e>   *     // Perform an extra checkpoint</color>
<color=#75715e>   *     env.checkpoint(new CheckpointConfig().setForce(true));</color>
<color=#75715e>   *</color>
<color=#75715e>   *     // Finally, close the environment.</color>
<color=#75715e>   *     env.close();</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The Environment handle should not be closed while any other handle that refers to it is not</color>
<color=#75715e>   * yet closed; for example, database environment handles must not be closed while database handles</color>
<color=#75715e>   * remain open, or transactions in the environment have not yet committed or aborted.</color>
<color=#75715e>   * Specifically, this includes {@link Database Database}, and {@link com.sleepycat.je.Transaction</color>
<color=#75715e>   * Transaction} handles.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this handle has already been closed, this method does nothing and returns without</color>
<color=#75715e>   * throwing an exception.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In multithreaded applications, only a single thread should call Environment.close.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The environment handle may not be used again after this method has been called, regardless</color>
<color=#75715e>   * of the method's success or failure, with one exception: the {@code close} method itself may be</color>
<color=#75715e>   * called any number of times.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentWedgedException when the current process must be shut down and restarted</color>
<color=#75715e>   *     before re-opening the Environment.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws DiskLimitException if the final checkpoint cannot be performed because a disk limit has</color>
<color=#75715e>   *     been violated. The Environment will be closed, but this exception will be thrown so that</color>
<color=#75715e>   *     the application is aware that a checkpoint was not performed.</color>
<color=#75715e>   * @throws IllegalStateException if any open databases or transactions refer to this handle. The</color>
<color=#75715e>   *     Environment will be closed, but this exception will be thrown so that the application is</color>
<color=#75715e>   *     aware that not all databases and transactions were closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>environmentImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>environmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We're trying to close on an environment that has seen a fatal</color>
<color=#75715e>       * exception. Try to do the minimum, such as closing file</color>
<color=#75715e>       * descriptors, to support re-opening the environment in the same</color>
<color=#75715e>       * JVM.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>closeAfterInvalid</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>clearEnvImpl</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f8f8f2>:</color> <color=#f8f8f2>referringDbs</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>minimalClose</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color><color=#f8f8f2>.</color><color=#a6e22e>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>errors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkForCloseErrors</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>);</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearEnvImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set environmentImpl to null during close, to allow GC when the app may hold on to a reference</color>
<color=#75715e>   * to the Environment handle for some time period.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>clearEnvImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>environmentImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Close an InternalEnvironment handle. We do not call EnvironmentImpl.close here, since an</color>
<color=#75715e>   * InternalEnvironment is not registered like a non-internal handle. However, we must call</color>
<color=#75715e>   * checkForCloseErrors to auto-close internal databases, as well as check for errors.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>closeInternalHandle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>errors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>checkForCloseErrors</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkForCloseErrors</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>errors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkOpenDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>checkOpenTxns</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isInternalHandle</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Only check for open XA transactions against user created</color>
<color=#75715e>       * environment handles.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>checkOpenXATransactions</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Appends error messages to the errors argument if there are open XA transactions associated with</color>
<color=#75715e>   * the underlying EnvironmentImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkOpenXATransactions</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>errors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Xid</color><color=#f92672>[]</color> <color=#f8f8f2>openXids</color> <color=#f92672>=</color> <color=#f8f8f2>getNonNullEnvImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>XARecover</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openXids</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>openXids</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"There "</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nXATxns</color> <color=#f92672>=</color> <color=#f8f8f2>openXids</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nXATxns</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"is 1 existing XA transaction opened"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" in the Environment.\n"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"It"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"are "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nXATxns</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" existing transactions opened in"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" the Environment.\n"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"They"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" will be left open ...\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Appends error messages to the errors argument if there are open transactions associated with</color>
<color=#75715e>   * the environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkOpenTxns</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>errors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nTxns</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>referringDbTxns</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>referringDbTxns</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTxns</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"There "</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nTxns</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"is 1 existing transaction opened"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" against the Environment.\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"are "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nTxns</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" existing transactions opened against"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" the Environment.\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Aborting open transactions ...\n"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>referringDbTxns</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"aborting "</color> <color=#f92672>+</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>environmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Propagate if env is invalidated. */</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\nWhile aborting transaction "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" encountered exception: "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Appends error messages to the errors argument if there are open database handles associated</color>
<color=#75715e>   * with the environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkOpenDbs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>errors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>referringDbs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>nOpenUserDbs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f8f8f2>:</color> <color=#f8f8f2>referringDbs</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Save the db name before we attempt the close, it's</color>
<color=#75715e>         * unavailable after the close.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>dbName</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>().</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nOpenUserDbs</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Unclosed Database: "</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>environmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Propagate if env is invalidated. */</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\nWhile closing Database "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" encountered exception: "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>)).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nOpenUserDbs</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Databases left open: "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nOpenUserDbs</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>Database</color> <color=#a6e22e>openDatabase</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseExistsException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbConfig</color> <color=#f92672>=</color> <color=#f8f8f2>DatabaseConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Database</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>setupDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isInternalDb*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens and optionally creates a <code>SecondaryDatabase</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the associations between primary and secondary databases are not stored</color>
<color=#75715e>   * persistently. Whenever a primary database is opened for write access by the application, the</color>
<color=#75715e>   * appropriate associated secondary databases should also be opened by the application. This is</color>
<color=#75715e>   * necessary to ensure data integrity when changes are made to the primary database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified, or null may</color>
<color=#75715e>   *     be specified to use auto-commit. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param databaseName The name of the database.</color>
<color=#75715e>   * @param primaryDatabase the primary database with which the secondary database will be</color>
<color=#75715e>   *     associated. The primary database must not be configured for duplicates.</color>
<color=#75715e>   * @param dbConfig The secondary database attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return Database handle.</color>
<color=#75715e>   * @throws DatabaseExistsException if the database already exists and the {@code DatabaseConfig</color>
<color=#75715e>   *     ExclusiveCreate} parameter is true.</color>
<color=#75715e>   * @throws DatabaseNotFoundException if the database does not exist and the {@code DatabaseConfig</color>
<color=#75715e>   *     AllowCreate} parameter is false.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs. If the database does not exist and the {@link DatabaseConfig#setAllowCreate</color>
<color=#75715e>   *     AllowCreate} parameter is true, then one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a> may</color>
<color=#75715e>   *     also occur.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, an invalid</color>
<color=#75715e>   *     {@code SecondaryConfig} property.</color>
<color=#75715e>   * @throws IllegalStateException if DatabaseConfig properties are changed and there are other open</color>
<color=#75715e>   *     handles for this database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#a6e22e>openSecondaryDatabase</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>primaryDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>SecondaryConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>writeLock</color><color=#f8f8f2>().</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbConfig</color> <color=#f92672>=</color> <color=#f8f8f2>SecondaryConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>primaryDatabase</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>setupDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isInternalDb*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>writeLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setupDatabase</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Database</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>isInternalDb</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseExistsException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#e6db74>"databaseName"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Environment.open: "</color> <color=#f92672>+</color> <color=#e6db74>" name="</color> <color=#f92672>+</color> <color=#f8f8f2>databaseName</color> <color=#f92672>+</color> <color=#e6db74>" dbConfig="</color> <color=#f92672>+</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>autoTxnIsReplicated</color> <color=#f92672>=</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check that the open configuration is valid and doesn't conflict with</color>
<color=#75715e>     * the envImpl configuration.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>validateOnDbOpen</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>autoTxnIsReplicated</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>validateDbConfigAgainstEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>isInternalDb</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Perform eviction before each operation that allocates memory. */</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>criticalEviction</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*backgroundIO*/</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>HandleLocker</color> <color=#f8f8f2>handleLocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color>
        <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#75715e>/*txn,*/</color> <color=#f8f8f2>isInternalDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>(),</color> <color=#f8f8f2>autoTxnIsReplicated</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Create the handle locker and lock the NameLN of an existing</color>
<color=#75715e>       * database.  A read lock on the NameLN is acquired for both locker</color>
<color=#75715e>       * and handleLocker.  Note: getDb may return a deleted database.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>handleLocker</color> <color=#f92672>=</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>initHandleLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>database</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>dbCreated</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>databaseExists</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>database</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>database</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseExists</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowCreate</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getExclusiveCreate</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseExistsException</color><color=#f8f8f2>(</color><color=#e6db74>"Database "</color> <color=#f92672>+</color> <color=#f8f8f2>databaseName</color> <color=#f92672>+</color> <color=#e6db74>" already exists"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>initExisting</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Release deleted DB. [#13415] */</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>database</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>database</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isInternalDb</color> <color=#f92672>&&</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>isReservedDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color> <color=#f92672>+</color> <color=#e6db74>" is a reserved database name."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowCreate</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>(</color><color=#e6db74>"Database "</color> <color=#f92672>+</color> <color=#f8f8f2>databaseName</color> <color=#f92672>+</color> <color=#e6db74>" not found."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Init a new DB. This calls DbTree.createDb and the new</color>
<color=#75715e>         * database is returned.  A write lock on the NameLN is</color>
<color=#75715e>         * acquired by locker and a read lock by the handleLocker.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>database</color> <color=#f92672>=</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>initNew</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#75715e>/*locker*/</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dbCreated</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The open is successful.  We add the opened database handle to</color>
<color=#75715e>       * this environment to track open handles in general, and to the</color>
<color=#75715e>       * locker so that it can be invalidated by a user txn abort.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>addReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>addOpenedDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Run triggers before any subsequent auto commits. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>firstWriteHandle</color> <color=#f92672>=</color>
          <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>isWritable</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>().</color><color=#a6e22e>noteWriteHandleOpen</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbCreated</color> <color=#f92672>||</color> <color=#f8f8f2>firstWriteHandle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runOpenTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbCreated</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the open fails, decrement the DB usage count, release</color>
<color=#75715e>       * handle locks and remove references from other objects.  In other</color>
<color=#75715e>       * cases this is done by Database.close() or invalidate(), the</color>
<color=#75715e>       * latter in the case of a user txn abort.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>database</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handleLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>handleLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>removeReferringAssociations</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Tell the locker that this operation is over. Some types of</color>
<color=#75715e>       * lockers (BasicLocker and auto Txn) will actually finish.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws IllegalArgumentException via openDatabase and openSecondaryDatabase */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>validateDbConfigAgainstEnv</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isInternalDb</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * R/W database handles on a replicated database must be transactional,</color>
<color=#75715e>     * for now. In the future we may support non-transactional database</color>
<color=#75715e>     * handles.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Read/Write Database instances for replicated "</color>
                <color=#f92672>+</color> <color=#e6db74>"database "</color>
                <color=#f92672>+</color> <color=#f8f8f2>databaseName</color>
                <color=#f92672>+</color> <color=#e6db74>" must be transactional."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check operation's transactional status against the Environment */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isInternalDb</color> <color=#f92672>&&</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Attempted to open Database "</color>
              <color=#f92672>+</color> <color=#f8f8f2>databaseName</color>
              <color=#f92672>+</color> <color=#e6db74>" transactionally, but parent Environment is"</color>
              <color=#f92672>+</color> <color=#e6db74>" not transactional"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check read/write status */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Attempted to open Database "</color>
              <color=#f92672>+</color> <color=#f8f8f2>databaseName</color>
              <color=#f92672>+</color> <color=#e6db74>" as writable but parent Environment is read only "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes a database from the environment, discarding all records in the database and removing</color>
<color=#75715e>   * the database name itself.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Compared to deleting all the records in a database individually, {@code removeDatabase} is a</color>
<color=#75715e>   * very efficient operation. Some internal housekeeping information is updated, but the database</color>
<color=#75715e>   * records are not read or written, and very little I/O is needed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When called on a database configured with secondary indices, the application is responsible</color>
<color=#75715e>   * for also removing all associated secondary indices. To guarantee integrity, a primary database</color>
<color=#75715e>   * and all of its secondary databases should be removed atomically using a single transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Applications should not remove a database with open {@link Database Database} handles. If</color>
<color=#75715e>   * the database is open with the same transaction as passed in the {@code txn} parameter, {@link</color>
<color=#75715e>   * IllegalStateException} is thrown by this method. If the database is open using a different</color>
<color=#75715e>   * transaction, this method will block until all database handles are closed, or until the</color>
<color=#75715e>   * conflict is resolved by throwing {@link LockConflictException}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional environment, an explicit transaction may be specified or null</color>
<color=#75715e>   *     may be specified to use auto-commit. For a non-transactional environment, null must be</color>
<color=#75715e>   *     specified.</color>
<color=#75715e>   * @param databaseName The database to be removed.</color>
<color=#75715e>   * @throws DatabaseNotFoundException if the database does not exist.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this is a read-only environment.</color>
<color=#75715e>   * @throws IllegalStateException if the database is currently open using the transaction passed in</color>
<color=#75715e>   *     the {@code txn} parameter, or if this handle or the underlying environment has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeDatabase</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#e6db74>"databaseName"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>new</color> <color=#f8f8f2>DbNameOperation</color><color=#f92672><</color><color=#f8f8f2>Void</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Void</color><color=#f92672>></color> <color=#a6e22e>runWork</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color>
          <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>dbRemove</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*checkId*/</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>void</color> <color=#a6e22e>runTriggers</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runRemoveTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}.</color><color=#a6e22e>run</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Renames a database, without removing the records it contains.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Applications should not rename a database with open {@link Database Database} handles. If</color>
<color=#75715e>   * the database is open with the same transaction as passed in the {@code txn} parameter, {@link</color>
<color=#75715e>   * IllegalStateException} is thrown by this method. If the database is open using a different</color>
<color=#75715e>   * transaction, this method will block until all database handles are closed, or until the</color>
<color=#75715e>   * conflict is resolved by throwing {@link LockConflictException}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional environment, an explicit transaction may be specified or null</color>
<color=#75715e>   *     may be specified to use auto-commit. For a non-transactional environment, null must be</color>
<color=#75715e>   *     specified.</color>
<color=#75715e>   * @param databaseName The new name of the database.</color>
<color=#75715e>   * @throws DatabaseNotFoundException if the database does not exist.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this is a read-only environment.</color>
<color=#75715e>   * @throws IllegalStateException if the database is currently open using the transaction passed in</color>
<color=#75715e>   *     the {@code txn} parameter, or if this handle or the underlying environment has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>renameDatabase</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#e6db74>"databaseName"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>,</color> <color=#e6db74>"newName"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>new</color> <color=#f8f8f2>DbNameOperation</color><color=#f92672><</color><color=#f8f8f2>Void</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Void</color><color=#f92672>></color> <color=#a6e22e>runWork</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color>
          <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>dbRename</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>void</color> <color=#a6e22e>runTriggers</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runRenameTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}.</color><color=#a6e22e>run</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Empties the database, discarding all the records it contains, without removing the database</color>
<color=#75715e>   * name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Compared to deleting all the records in a database individually, {@code truncateDatabase} is</color>
<color=#75715e>   * a very efficient operation. Some internal housekeeping information is updated, but the database</color>
<color=#75715e>   * records are not read or written, and very little I/O is needed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When called on a database configured with secondary indices, the application is responsible</color>
<color=#75715e>   * for also truncating all associated secondary indices. To guarantee integrity, a primary</color>
<color=#75715e>   * database and all of its secondary databases should be truncated atomically using a single</color>
<color=#75715e>   * transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Applications should not truncate a database with open {@link Database Database} handles. If</color>
<color=#75715e>   * the database is open with the same transaction as passed in the {@code txn} parameter, {@link</color>
<color=#75715e>   * IllegalStateException} is thrown by this method. If the database is open using a different</color>
<color=#75715e>   * transaction, this method will block until all database handles are closed, or until the</color>
<color=#75715e>   * conflict is resolved by throwing {@link LockConflictException}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional environment, an explicit transaction may be specified or null</color>
<color=#75715e>   *     may be specified to use auto-commit. For a non-transactional environment, null must be</color>
<color=#75715e>   *     specified.</color>
<color=#75715e>   * @param databaseName The database to be truncated.</color>
<color=#75715e>   * @param returnCount If true, count and return the number of records discarded.</color>
<color=#75715e>   * @return The number of records discarded, or -1 if returnCount is false.</color>
<color=#75715e>   * @throws DatabaseNotFoundException if the database does not exist.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this is a read-only environment.</color>
<color=#75715e>   * @throws IllegalStateException if the database is currently open using the transaction passed in</color>
<color=#75715e>   *     the {@code txn} parameter, or if this handle or the underlying environment has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>truncateDatabase</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>returnCount</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#e6db74>"databaseName"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>DbNameOperation</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>runWork</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color>
              <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>final</color> <color=#f8f8f2>TruncateDbResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>truncate</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>returnCount</color><color=#f8f8f2>);</color>

            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>newDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>recordCount</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>void</color> <color=#a6e22e>runTriggers</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runTruncateTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>})</color>
        <color=#f8f8f2>.</color><color=#a6e22e>run</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Runs a DB naming operation: remove, truncate or rename. The common code is factored out here.</color>
<color=#75715e>   * In particular this class handles non-replicated DBs in a replicated environment, when</color>
<color=#75715e>   * auto-commit is used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a non-replicated DB, an auto-commit txn must be created by calling</color>
<color=#75715e>   * LockerFactory.getWritableLocker with the autoTxnIsReplicated param set to false. If</color>
<color=#75715e>   * autoTxnIsReplicated is set to true in a replicated environment, HA consistency checks will be</color>
<color=#75715e>   * made when the txn is begun and acks will be enforced at commit. For example, for an HA node in</color>
<color=#75715e>   * an unknown state, the consistency checks would fail and prevent performing the operation on the</color>
<color=#75715e>   * local/non-replicated DB.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unfortunately, we need to create a txn/locker in order to query the DB metadata, to</color>
<color=#75715e>   * determine whether it is replicated. Therefore, we always attempt the operation initially with</color>
<color=#75715e>   * autoTxnIsReplicated set to false. The DbTree name operation methods (see DbTree.lockNameLN)</color>
<color=#75715e>   * will throw an internal exception (NeedRepLockerException) if a non-replicated auto-commit txn</color>
<color=#75715e>   * is used on a replicated DB. That signals this class to retry the operation with</color>
<color=#75715e>   * autoTxnIsReplicated set to true.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Via an unlikely series of DB renaming it is possible that on the 2nd try with a replicated</color>
<color=#75715e>   * txn, we find that the DB is non-replicated. However, there is little harm in proceeding, since</color>
<color=#75715e>   * the consistency check is already done.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>DbNameOperation</color><color=#f92672><</color><color=#f8f8f2>R</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DbTree</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DbNameOperation</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>txn</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>checkWritable</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>dbTree</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Run the DB name operation. */</color>
    <color=#66d9ef>abstract</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>R</color><color=#f92672>></color> <color=#a6e22e>runWork</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color><color=#f8f8f2>;</color>

    <color=#75715e>/** Run triggers after a successful DB name operation. */</color>
    <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>runTriggers</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Try the operation with autoTxnIsReplicated=false, and then again with</color>
<color=#75715e>     * autoTxnIsReplicated=true if NeedRepLockerException is thrown.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>R</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>runOnce</color><color=#f8f8f2>(</color><color=#f8f8f2>getWritableLocker</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>runOnce</color><color=#f8f8f2>(</color><color=#f8f8f2>getWritableLocker</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color> <color=#f8f8f2>e2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Should never happen. */</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>R</color> <color=#a6e22e>runOnce</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NeedRepLockerException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>R</color><color=#f92672>></color> <color=#f8f8f2>results</color> <color=#f92672>=</color> <color=#f8f8f2>runWork</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>results</color><color=#f8f8f2>.</color><color=#a6e22e>first</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Should never happen. */</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>results</color><color=#f8f8f2>.</color><color=#a6e22e>second</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>success</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Locker</color> <color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>autoTxnIsReplicated</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>Environment</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*isInternalDb*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>autoTxnIsReplicated</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing. Returns the current memory usage in bytes for all btrees in the envImpl. */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>getMemoryUsage</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>getCacheMemoryUsage</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the database environment's home directory.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called when the environment has been invalidated, but not yet closed. In</color>
<color=#75715e>   * other words, {@link EnvironmentFailureException} is never thrown by this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The database environment's home directory. environment-wide failure occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getHome</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getNonNullEnvImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentHome</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Transaction management</color>
<color=#75715e>   */</color>

  <color=#75715e>/** Returns the default txn config for this environment handle. */</color>
  <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>getDefaultTxnConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Copies the handle properties out of the config properties, and initializes the default</color>
<color=#75715e>   * transaction config.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>copyToHandleConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>initStaticConfig</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>initRepConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Create the new objects, initialize them, then change the instance</color>
<color=#75715e>     * fields. This avoids synchronization issues.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>newHandleConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentMutableConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>copyHandlePropsTo</color><color=#f8f8f2>(</color><color=#f8f8f2>newHandleConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>handleConfig</color> <color=#f92672>=</color> <color=#f8f8f2>newHandleConfig</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>newTxnConfig</color> <color=#f92672>=</color> <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setNoSync</color><color=#f8f8f2>(</color><color=#f8f8f2>handleConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnNoSync</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setWriteNoSync</color><color=#f8f8f2>(</color><color=#f8f8f2>handleConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnWriteNoSync</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setDurability</color><color=#f8f8f2>(</color><color=#f8f8f2>handleConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDurability</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>initStaticConfig</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setSerializableIsolation</color><color=#f8f8f2>(</color><color=#f8f8f2>initStaticConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnSerializableIsolation</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setReadCommitted</color><color=#f8f8f2>(</color><color=#f8f8f2>initStaticConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnReadCommitted</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setSerializableIsolation</color><color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSerializableIsolation</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setReadCommitted</color><color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getConsistencyPolicy</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>initRepConfig</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>initRepConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getConsistencyPolicy</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>defaultTxnConfig</color> <color=#f92672>=</color> <color=#f8f8f2>newTxnConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a new transaction in the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Transaction handles are free-threaded; transactions handles may be used concurrently by</color>
<color=#75715e>   * multiple threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Cursors may not span transactions; that is, each cursor must be opened and closed within a</color>
<color=#75715e>   * single transaction. The parent parameter is a placeholder for nested transactions, and must</color>
<color=#75715e>   * currently be null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txnConfig The transaction attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return The newly created transaction's handle.</color>
<color=#75715e>   * @throws com.sleepycat.je.rep.InsufficientReplicasException if the Master in a replicated</color>
<color=#75715e>   *     environment could not contact a quorum of replicas as determined by the {@link</color>
<color=#75715e>   *     ReplicaAckPolicy}.</color>
<color=#75715e>   * @throws com.sleepycat.je.rep.ReplicaConsistencyException if a replica in a replicated</color>
<color=#75715e>   *     environment cannot become consistent within the timeout period.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this is not a transactional environment.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, an invalid</color>
<color=#75715e>   *     {@code TransactionConfig} parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Transaction</color> <color=#a6e22e>beginTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>beginTransactionInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isInternalTxn*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Like beginTransaction, but does not require that the Environment is transactional. */</color>
  <color=#f8f8f2>Transaction</color> <color=#a6e22e>beginInternalTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>beginTransactionInternal</color><color=#f8f8f2>(</color><color=#66d9ef>null</color> <color=#75715e>/*parent*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*isInternalTxn*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @throws IllegalArgumentException via beginTransaction.</color>
<color=#75715e>   * @throws UnsupportedOperationException via beginTransaction.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Transaction</color> <color=#a6e22e>beginTransactionInternal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Transaction</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isInternalTxn</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Parent txn is non-null. "</color> <color=#f92672>+</color> <color=#e6db74>"Nested transactions are not supported."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isInternalTxn</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Transactions can not be used in a non-transactional "</color> <color=#f92672>+</color> <color=#e6db74>"environment"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>checkTxnConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Apply txn config defaults.  We don't need to clone unless we have to</color>
<color=#75715e>     * apply the env default, since we don't hold onto a txn config</color>
<color=#75715e>     * reference.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getNoSync</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteNoSync</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The environment sync settings have been set, check if any</color>
<color=#75715e>         * were set in the user's txn config. If none were set in the</color>
<color=#75715e>         * user's config, apply the environment defaults</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getNoSync</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSync</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteNoSync</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteNoSync</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setWriteNoSync</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setNoSync</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDurability</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDurability</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Inherit transaction durability from the environment in the</color>
<color=#75715e>         * absence of an explicit transaction config durability.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setDurability</color><color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDurability</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getConsistencyPolicy</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
          <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getConsistencyPolicy</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getConsistencyPolicy</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Apply isolation level default. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSerializableIsolation</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSerializableIsolation</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setSerializableIsolation</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>useConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setReadCommitted</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* No environment level defaults applied. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Txn</color> <color=#f8f8f2>internalTxn</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>txnBegin</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>useConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>internalTxn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>addReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks the txnConfig object to ensure that its correctly configured and is compatible with the</color>
<color=#75715e>   * configuration of the Environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txnConfig the configuration being checked.</color>
<color=#75715e>   * @throws IllegalArgumentException via beginTransaction</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkTxnConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSerializableIsolation</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>())</color>
        <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSerializableIsolation</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>())</color>
        <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Only one may be specified: SerializableIsolation, "</color>
              <color=#f92672>+</color> <color=#e6db74>"ReadCommitted or ReadUncommitted"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDurability</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSync</color><color=#f8f8f2>()</color>
            <color=#f92672>||</color> <color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getNoSync</color><color=#f8f8f2>()</color>
            <color=#f92672>||</color> <color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteNoSync</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Mixed use of deprecated durability API for the "</color>
              <color=#f92672>+</color> <color=#e6db74>"Environment with the new durability API for "</color>
              <color=#f92672>+</color> <color=#e6db74>"TransactionConfig.setDurability()"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>defaultTxnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDurability</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getSync</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getNoSync</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteNoSync</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Mixed use of new durability API for the "</color>
              <color=#f92672>+</color> <color=#e6db74>"Environment with the deprecated durability API for "</color>
              <color=#f92672>+</color> <color=#e6db74>"TransactionConfig."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Synchronously checkpoint the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is an optional action for the application since this activity is, by default, handled</color>
<color=#75715e>   * by a database environment owned background thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A checkpoint has the side effect of flushing all preceding non-transactional write</color>
<color=#75715e>   * operations, as well as any preceding transactions that were committed with {@link</color>
<color=#75715e>   * Durability.SyncPolicy#NO_SYNC no-sync durability}. However, for best performance, checkpoints</color>
<color=#75715e>   * should be used only to bound recovery time. {@link #flushLog} can be used to write buffered</color>
<color=#75715e>   * data for durability purposes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param ckptConfig The checkpoint attributes. If null, default attributes are used.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws DiskLimitException if the checkpoint cannot be performed because a disk limit has been</color>
<color=#75715e>   *     violated.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>CheckpointConfig</color> <color=#f8f8f2>ckptConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ckptConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ckptConfig</color> <color=#f92672>=</color> <color=#f8f8f2>CheckpointConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invokeCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>ckptConfig</color><color=#f8f8f2>,</color> <color=#e6db74>"api"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Synchronously flushes database environment databases to stable storage. Calling this method is</color>
<color=#75715e>   * equivalent to forcing a checkpoint and setting {@link CheckpointConfig#setMinimizeRecoveryTime}</color>
<color=#75715e>   * to true.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A checkpoint has the side effect of flushing all preceding non-transactional write</color>
<color=#75715e>   * operations, as well as any preceding transactions that were committed with {@link</color>
<color=#75715e>   * Durability.SyncPolicy#NO_SYNC no-sync durability}. However, for best performance, checkpoints</color>
<color=#75715e>   * should be used only to bound recovery time. {@link #flushLog} can be used to write buffered</color>
<color=#75715e>   * data for durability purposes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws DiskLimitException if the sync cannot be performed because a disk limit has been</color>
<color=#75715e>   *     violated.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>sync</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CheckpointConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CheckpointConfig</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setForce</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setMinimizeRecoveryTime</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invokeCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#e6db74>"sync"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes buffered data to the log, and optionally performs an fsync to guarantee that data is</color>
<color=#75715e>   * written to the physical device.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is used to make durable, by writing to the log, all preceding non-transactional</color>
<color=#75715e>   * write operations, as well as any preceding transactions that were committed with {@link</color>
<color=#75715e>   * Durability.SyncPolicy#NO_SYNC no-sync durability}. If the {@code fsync} parameter is true, it</color>
<color=#75715e>   * can also be used to flush all logged data to the physical storage device, by performing an</color>
<color=#75715e>   * fsync.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method <em>does not</em> flush previously unwritten data in deferred-write</color>
<color=#75715e>   * databases; that is done by calling {@link Database#sync} or performing a checkpoint.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param fsync is true to perform an fsync as well as a file write, or false to perform only a</color>
<color=#75715e>   *     file write.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>flushLog</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>fsync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>flushLog</color><color=#f8f8f2>(</color><color=#f8f8f2>fsync</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Synchronously invokes log file (data file) cleaning until the target disk space utilization has</color>
<color=#75715e>   * been reached; this method is called periodically by the cleaner background threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Zero or more log files will be cleaned as necessary to bring the current {@link</color>
<color=#75715e>   * EnvironmentStats#getCurrentMinUtilization disk space utilization} of the environment above the</color>
<color=#75715e>   * configured {@link EnvironmentConfig#CLEANER_MIN_UTILIZATION utilization threshold}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method does not perform the complete task of cleaning a log file. Eviction</color>
<color=#75715e>   * and checkpointing log Btree information that is marked dirty by the cleaner, and a full</color>
<color=#75715e>   * checkpoint is necessary, following cleaning, before cleaned files will be deleted (or renamed).</color>
<color=#75715e>   * Checkpoints occur periodically and when the environment is closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is an optional action for the application since this activity is, by default, handled</color>
<color=#75715e>   * by one or more Environment-owned background threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The intended use case for the {@code cleanLog} method is when the application wishes to</color>
<color=#75715e>   * disable the built-in cleaner threads using the {@link EnvironmentConfig#ENV_RUN_CLEANER}</color>
<color=#75715e>   * property. To replace the functionality of the cleaner threads, the application should call</color>
<color=#75715e>   * {@code cleanLog} periodically.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that because this method cleans multiple files before returning, in an attempt to reach</color>
<color=#75715e>   * the target utilization, it may not return for a long time when there is a large {@link</color>
<color=#75715e>   * EnvironmentStats#getCleanerBacklog backlog} of files to be cleaned. This method cannot be</color>
<color=#75715e>   * aborted except by closing the environment. If the application needs the ability to abort the</color>
<color=#75715e>   * cleaning process, the {@link #cleanLogFile} method should be used instead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that in certain unusual situations the cleaner may not be able to make forward progress</color>
<color=#75715e>   * and the target utilization will never be reached. For example, this can occur if the target</color>
<color=#75715e>   * utilization is set too high or checkpoints are performed too often. To guard against cleaning</color>
<color=#75715e>   * "forever", this method will return when all files have been cleaned, even when the target</color>
<color=#75715e>   * utilization has not been reached.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The number of log files that were cleaned, and that will be deleted (or renamed) when a</color>
<color=#75715e>   *     qualifying checkpoint occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this is a read-only or memory-only environment.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>cleanLog</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invokeCleaner</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*cleanMultipleFiles*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Synchronously invokes cleaning of a single log file (data file), if the target disk space</color>
<color=#75715e>   * utilization has not been reached.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>One log file will be cleaned if the current {@link EnvironmentStats#getCurrentMinUtilization</color>
<color=#75715e>   * disk space utilization} of the environment is below the configured {@link</color>
<color=#75715e>   * EnvironmentConfig#CLEANER_MIN_UTILIZATION utilization threshold}. No files will be cleaned if</color>
<color=#75715e>   * disk space utilization is currently above the threshold. The lowest utilized file is selected</color>
<color=#75715e>   * for cleaning, since it has the lowest cleaning cost.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method does not perform the complete task of cleaning a log file. Eviction</color>
<color=#75715e>   * and checkpointing log Btree information that is marked dirty by the cleaner, and a full</color>
<color=#75715e>   * checkpoint is necessary, following cleaning, before cleaned files will be deleted (or renamed).</color>
<color=#75715e>   * Checkpoints occur periodically and when the environment is closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The intended use case for the {@code cleanLog} method is "batch cleaning". This is when the</color>
<color=#75715e>   * application disables the cleaner threads (using the {@link EnvironmentConfig#ENV_RUN_CLEANER}</color>
<color=#75715e>   * property) for maximum performance during active periods, and calls {@code cleanLog} during</color>
<color=#75715e>   * periods when the application is quiescent or less active than usual. Similarly, there may be</color>
<color=#75715e>   * times when an application wishes to perform cleaning explicitly until the target utilization</color>
<color=#75715e>   * rather than relying on the cleaner's background threads. For example, some applications may</color>
<color=#75715e>   * wish to perform batch cleaning prior to closing the environment, to reclaim as much disk space</color>
<color=#75715e>   * as possible at that time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To clean until the target utilization threshold is reached, {@code cleanLogFile} can be</color>
<color=#75715e>   * called in a loop until it returns {@code false}. When there is a large {@link</color>
<color=#75715e>   * EnvironmentStats#getCleanerBacklog backlog} of files to be cleaned, the application may wish to</color>
<color=#75715e>   * limit the amount of cleaning. Batch cleaning can be aborted simply by breaking out of the loop.</color>
<color=#75715e>   * The cleaning of a single file is not a long operation; it should take several minutes at most.</color>
<color=#75715e>   * For example:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *     boolean cleaningAborted;</color>
<color=#75715e>   *     boolean anyCleaned = false;</color>
<color=#75715e>   *</color>
<color=#75715e>   *     while (!cleaningAborted && env.cleanLogFile()) {</color>
<color=#75715e>   *         anyCleaned = true;</color>
<color=#75715e>   *     }</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that in certain unusual situations the cleaner may not be able to make forward progress</color>
<color=#75715e>   * and the target utilization will never be reached. For example, this can occur if the target</color>
<color=#75715e>   * utilization is set too high or checkpoints are performed too often. To guard against cleaning</color>
<color=#75715e>   * "forever", the application may wish to cancel the batch cleaning (break out of the loop) when</color>
<color=#75715e>   * the cleaning time or number of files cleaned exceeds some reasonable limit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>As mentioned above, the cleaned log files will not be deleted until the next full</color>
<color=#75715e>   * checkpoint. If the application wishes to reclaim this disk space as soon as possible, an</color>
<color=#75715e>   * explicit checkpoint may be performed after the batch cleaning operation. For example:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *     if (anyCleaned) {</color>
<color=#75715e>   *         env.checkpoint(new CheckpointConfig().setForce(true));</color>
<color=#75715e>   *     }</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>However, even an explicit checkpoint is not guaranteed to delete the cleaned log files if,</color>
<color=#75715e>   * at the time the file was cleaned, records in the file were locked or were part of a database</color>
<color=#75715e>   * that was being removed, due to concurrent application activity that was accessing records or</color>
<color=#75715e>   * removing databases. In this case the files will be deleted only after these operations are</color>
<color=#75715e>   * complete and a subsequent checkpoint is performed. To guarantee that the cleaned files will be</color>
<color=#75715e>   * deleted, an application may stop all concurrent activity (ensure all operations and</color>
<color=#75715e>   * transactions have ended) and then perform a checkpoint.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When closing the environment and minimizing recovery time is desired (see {@link #close}),</color>
<color=#75715e>   * as well as reclaiming disk space, the recommended procedure is as follows:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *     // Stop/finish all application operations that are using JE.</color>
<color=#75715e>   *     ...</color>
<color=#75715e>   *</color>
<color=#75715e>   *     // Stop the cleaner daemon threads.</color>
<color=#75715e>   *     EnvironmentMutableConfig config = env.getMutableConfig();</color>
<color=#75715e>   *     config.setConfigParam(EnvironmentConfig.ENV_RUN_CLEANER, "false");</color>
<color=#75715e>   *     env.setMutableConfig(config);</color>
<color=#75715e>   *</color>
<color=#75715e>   *     // Perform batch cleaning.</color>
<color=#75715e>   *     while (!cleaningAborted && env.cleanLogFile()) {</color>
<color=#75715e>   *     }</color>
<color=#75715e>   *</color>
<color=#75715e>   *     // Perform an extra checkpoint</color>
<color=#75715e>   *     env.checkpoint(new CheckpointConfig().setForce(true));</color>
<color=#75715e>   *</color>
<color=#75715e>   *     // Finally, close the environment.</color>
<color=#75715e>   *     env.close();</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if one log was cleaned, or false if none were cleaned.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this is a read-only or memory-only environment.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>cleanLogFile</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invokeCleaner</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*cleanMultipleFiles*/</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Synchronously invokes the mechanism for keeping memory usage within the cache size boundaries.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is an optional action for the application since this activity is, by default, handled</color>
<color=#75715e>   * by a database environment owned background thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>evictMemory</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invokeEvictor</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Synchronously invokes the compressor mechanism which compacts in memory data structures after</color>
<color=#75715e>   * delete operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is an optional action for the application since this activity is, by default, handled</color>
<color=#75715e>   * by a database environment owned background thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>compress</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invokeCompressor</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Preloads the cache with multiple databases. This method should only be called when there are no</color>
<color=#75715e>   * operations being performed on the specified databases in other threads. Executing preload</color>
<color=#75715e>   * during concurrent updates of the specified databases may result in some or all of the tree</color>
<color=#75715e>   * being loaded into the JE cache. Executing preload during any other types of operations may</color>
<color=#75715e>   * result in JE exceeding its allocated cache size. preload() effectively locks all of the</color>
<color=#75715e>   * specified database and therefore will lock out the checkpointer, cleaner, and compressor, as</color>
<color=#75715e>   * well as not allow eviction to occur. If databases are replicated and the environment is in the</color>
<color=#75715e>   * replica state, then the replica may become temporarily disconnected from the master if the</color>
<color=#75715e>   * replica needs to replay changes against the database and is locked out because the time taken</color>
<color=#75715e>   * by the preload operation exceeds {@link com.sleepycat.je.rep.ReplicationConfig#FEEDER_TIMEOUT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The PreloadConfig object that specifies the parameters of the preload.</color>
<color=#75715e>   * @return A PreloadStats object with the result of the preload operation and various statistics</color>
<color=#75715e>   *     about the preload() operation.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if any of the databases has been closed.</color>
<color=#75715e>   * @see Database#preload(PreloadConfig)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadStats</color> <color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color><color=#f92672>[]</color> <color=#f8f8f2>databases</color><color=#f8f8f2>,</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForZeroLengthArrayParam</color><color=#f8f8f2>(</color><color=#f8f8f2>databases</color><color=#f8f8f2>,</color> <color=#e6db74>"databases"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nDbs</color> <color=#f92672>=</color> <color=#f8f8f2>databases</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>dbImpls</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[</color><color=#f8f8f2>nDbs</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nDbs</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>databases</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpls</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a DiskOrderedCursor to iterate over the records of a given set of databases. Because the</color>
<color=#75715e>   * retrieval is based on Log Sequence Number (LSN) order rather than key order, records are</color>
<color=#75715e>   * returned in unsorted order in exchange for generally faster retrieval. LSN order approximates</color>
<color=#75715e>   * disk sector order.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>See {@link DiskOrderedCursor} for more details and a description of the consistency</color>
<color=#75715e>   * guarantees provided by the scan.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>WARNING:</em> After calling this method, deletion of log files by the JE log cleaner</color>
<color=#75715e>   * will be disabled until {@link DiskOrderedCursor#close()} is called. To prevent unbounded growth</color>
<color=#75715e>   * of disk usage, be sure to call {@link DiskOrderedCursor#close()} to re-enable log file</color>
<color=#75715e>   * deletion.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param databases An array containing the handles to the database that are to be scanned. All</color>
<color=#75715e>   *     these handles must be currently open. Furthermore, all the databases must belong to this</color>
<color=#75715e>   *     environments, and they should all support duplicates or none of them should support</color>
<color=#75715e>   *     duplicates. Note: this method does not make a copy of this array, and as a result, the</color>
<color=#75715e>   *     contents of the array should not be modified while the returned DiskOrderedCursor is still</color>
<color=#75715e>   *     in use.</color>
<color=#75715e>   * @param config The DiskOrderedCursorConfig object that specifies the parameters of the disk</color>
<color=#75715e>   *     ordered scan.</color>
<color=#75715e>   * @return the new DiskOrderedCursor object.</color>
<color=#75715e>   * @throws IllegalArgumentException if (a) the databases parameter is null or an empty array, or</color>
<color=#75715e>   *     (b) any of the handles in the databases parameter is null, or (c) the databases do not all</color>
<color=#75715e>   *     belong to this environment, or (d) some databases support duplicates and some don't.</color>
<color=#75715e>   * @throws IllegalStateException if any of the databases has been closed or invalidated.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DiskOrderedCursor</color> <color=#a6e22e>openDiskOrderedCursor</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color><color=#f92672>[]</color> <color=#f8f8f2>databases</color><color=#f8f8f2>,</color> <color=#f8f8f2>DiskOrderedCursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForZeroLengthArrayParam</color><color=#f8f8f2>(</color><color=#f8f8f2>databases</color><color=#f8f8f2>,</color> <color=#e6db74>"databases"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>DiskOrderedCursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nDbs</color> <color=#f92672>=</color> <color=#f8f8f2>databases</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nDbs</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databases</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"The handle at position "</color> <color=#f92672>+</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#e6db74>" of the databases "</color> <color=#f92672>+</color> <color=#e6db74>"array is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databases</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"The handle at position "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>i</color>
                  <color=#f92672>+</color> <color=#e6db74>" of the databases "</color>
                  <color=#f92672>+</color> <color=#e6db74>"array points to a database that does not belong "</color>
                  <color=#f92672>+</color> <color=#e6db74>"to this environment"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DiskOrderedCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>databases</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns this object's configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return This object's configuration.</color>
<color=#75715e>   *     <p>Unlike most Environment methods, this method may be called if the environment is</color>
<color=#75715e>   *     invalid, but not yet closed.</color>
<color=#75715e>   * @throws IllegalStateException if this handle has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>getConfig</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getNonNullEnvImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>cloneConfig</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>handleConfig</color><color=#f8f8f2>.</color><color=#a6e22e>copyHandlePropsTo</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>fillInEnvironmentGeneratedProps</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets database environment attributes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Attributes only apply to a specific Environment object and are not necessarily shared by</color>
<color=#75715e>   * other Environment objects accessing this database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unlike most Environment methods, this method may be called if the environment is invalid,</color>
<color=#75715e>   * but not yet closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param mutableConfig The database environment attributes. If null, default attributes are used.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>mutableConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>mutableConfig</color><color=#f8f8f2>,</color> <color=#e6db74>"mutableConfig"</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This method is synchronized so that we atomically call both</color>
<color=#75715e>     * EnvironmentImpl.setMutableConfig and copyToHandleConfig. This</color>
<color=#75715e>     * ensures that the handle and the EnvironmentImpl properties match.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Change the mutable properties specified in the given</color>
<color=#75715e>       * configuration.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>mutableConfig</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Reset the handle config properties. */</color>
      <color=#f8f8f2>copyToHandleConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>mutableConfig</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns database environment attributes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unlike most Environment methods, this method may be called if the environment is invalid,</color>
<color=#75715e>   * but not yet closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return Environment attributes.</color>
<color=#75715e>   * @throws IllegalStateException if this handle has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>getMutableConfig</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getNonNullEnvImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>cloneMutableConfig</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>handleConfig</color><color=#f8f8f2>.</color><color=#a6e22e>copyHandlePropsTo</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>fillInEnvironmentGeneratedProps</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the general database environment statistics.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The general statistics attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return The general database environment statistics.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentStats</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>StatsConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the database environment's locking statistics.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The locking statistics attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return The database environment's locking statistics.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   * @deprecated as of 4.0.10, replaced by {@link Environment#getStats(StatsConfig)}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LockStats</color> <color=#a6e22e>getLockStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>StatsConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockStat</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the database environment's transactional statistics.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The transactional statistics attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return The database environment's transactional statistics.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionStats</color> <color=#a6e22e>getTransactionStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>StatsConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>txnStat</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a List of database names for the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Each element in the list is a String.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return A List of database names for the database environment.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getDatabaseNames</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>getDbNames</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns if the database environment is consistent and correct.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Verification is an expensive operation that should normally only be used for troubleshooting</color>
<color=#75715e>   * and debugging.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The verification attributes. If null, default attributes are used.</color>
<color=#75715e>   * @param out is unused. To specify the output stream for verification information, use {@link</color>
<color=#75715e>   *     VerifyConfig#setShowProgressStream}.</color>
<color=#75715e>   * @return true if the database environment is consistent and correct. Currently true is always</color>
<color=#75715e>   *     returned when this method returns normally, i.e., when no exception is thrown.</color>
<color=#75715e>   * @throws EnvironmentFailureException if a corruption is detected, or if an unexpected, internal</color>
<color=#75715e>   *     or environment-wide failure occurs. If a persistent corruption is detected, {@link</color>
<color=#75715e>   *     EnvironmentFailureException#isCorrupted()} will return true.</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>VerifyConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>VerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the transaction associated with this thread if implied transactions are being used.</color>
<color=#75715e>   * Implied transactions are used in an XA or JCA "Local Transaction" environment. In an XA</color>
<color=#75715e>   * environment the XAEnvironment.start() entrypoint causes a transaction to be created and become</color>
<color=#75715e>   * associated with the calling thread. Subsequent API calls implicitly use that transaction.</color>
<color=#75715e>   * XAEnvironment.end() causes the transaction to be disassociated with the thread. In a JCA Local</color>
<color=#75715e>   * Transaction environment, the call to JEConnectionFactory.getConnection() causes a new</color>
<color=#75715e>   * transaction to be created and associated with the calling thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Transaction</color> <color=#a6e22e>getThreadTransaction</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>getTxnForThread</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the transaction associated with this thread if implied transactions are being used.</color>
<color=#75715e>   * Implied transactions are used in an XA or JCA "Local Transaction" environment. In an XA</color>
<color=#75715e>   * environment the XAEnvironment.start() entrypoint causes a transaction to be created and become</color>
<color=#75715e>   * associated with the calling thread. Subsequent API calls implicitly use that transaction.</color>
<color=#75715e>   * XAEnvironment.end() causes the transaction to be disassociated with the thread. In a JCA Local</color>
<color=#75715e>   * Transaction environment, the call to JEConnectionFactory.getConnection() causes a new</color>
<color=#75715e>   * transaction to be created and associated with the calling thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setThreadTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>setTxnForThread</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this {@code Environment} is open, valid and can be used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When an {@link EnvironmentFailureException}, or one of its subclasses, is caught, the {@code</color>
<color=#75715e>   * isValid} method can be called to determine whether the {@code Environment} can continue to be</color>
<color=#75715e>   * used, or should be closed. Some EnvironmentFailureExceptions invalidate the environment and</color>
<color=#75715e>   * others do not.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this method returns false, the environment may have been closed by the application, or</color>
<color=#75715e>   * may have been invalidated by an exception and not yet closed. The {@link #isClosed()} method</color>
<color=#75715e>   * may be used to distinguish between these two cases, and {@link #getInvalidatingException()} can</color>
<color=#75715e>   * be used to return the exception. Note that it is safe to call {@link #close} redundantly, so it</color>
<color=#75715e>   * is safe to always call {@link #close} when this method returns false.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isValid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the environment has been closed by the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this method returns true, {@link #close()}} has been called. If the environment was</color>
<color=#75715e>   * previously invalidated by an exception, it will be returned by {@link</color>
<color=#75715e>   * #getInvalidatingException()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this method returns false, the environment may or may not be usable, since it may have</color>
<color=#75715e>   * been invalidated by an exception but not yet closed. To determine whether it was invalidated,</color>
<color=#75715e>   * call {@link #isValid()} or {@link #getInvalidatingException()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether the environment has been closed by the application.</color>
<color=#75715e>   * @since 7.2</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClosed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isClosed</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the exception that caused the environment to be invalidated, or null if the environment</color>
<color=#75715e>   * was not invalidated by an exception.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be used to determine whether the environment was invalidated by an</color>
<color=#75715e>   * exception, by checking for a non-null return value. This method will return the invalidating</color>
<color=#75715e>   * exception, regardless of whether the environment is closed. Note that {@link #isValid()} will</color>
<color=#75715e>   * return false when the environment is closed, even when it was not invalidated by an exception.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may also be used to identify and handle the original invalidating exception,</color>
<color=#75715e>   * when more than one exception is thrown. When an environment is first invalidated by an</color>
<color=#75715e>   * EnvironmentFailureException, the exception is saved so that it can be returned by this method.</color>
<color=#75715e>   * Other EnvironmentFailureExceptions may be thrown later as side effects of the original problem,</color>
<color=#75715e>   * or possibly as separate problems. It is normally the first invalidating exception that is most</color>
<color=#75715e>   * relevant.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the invalidating exception or null.</color>
<color=#75715e>   * @since 7.2</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#a6e22e>getInvalidatingException</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>invalidatingEFE</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Print a detailed report about the costs of different phases of environment startup. This report</color>
<color=#75715e>   * is by default logged to the je.info file if startup takes longer than je.env.startupThreshold.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unlike most Environment methods, this method may be called if the environment is invalid,</color>
<color=#75715e>   * but not yet closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if this handle or the underlying environment has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>printStartupInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getNonNullEnvImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getStartupTracker</color><color=#f8f8f2>().</color><color=#a6e22e>displayStats</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>TOTAL_ENV_OPEN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Non public api -- helpers</color>
<color=#75715e>   */</color>

  <color=#75715e>/** Let the Environment remember what's opened against it. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>referringDbs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Lets the Environment remember what's opened against it. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>referringDbTxns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The referring db has been closed. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>referringDbs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The referring Transaction has been closed. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeReferringHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>referringDbTxns</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @throws EnvironmentFailureException if the underlying environment is invalid.</color>
<color=#75715e>   * @throws IllegalStateException if the environment is not open.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>checkOpen</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getNonNullEnvImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkOpen</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the non-null, underlying EnvironmentImpl.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is called to access the environmentImpl field, to guard against NPE when the</color>
<color=#75715e>   * environment has been closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method does not check whether the env is valid. For API method calls, checkOpen is</color>
<color=#75715e>   * called at API entry points to check validity. The validity of the env should also be checked</color>
<color=#75715e>   * before critical operations (e.g., disk writes), after idle periods, and periodically during</color>
<color=#75715e>   * time consuming operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if the env has been closed.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Environment is closed."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the underlying EnvironmentImpl, or null if the env has been closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: This method will be phased out over time and normally getNonNullEnvImpl should be</color>
<color=#75715e>   * called instead.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getMaybeNullEnvImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Returns true, if this is a handle allocated internally by JE. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInternalHandle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @throws UnsupportedOperationException via the database operation methods (remove, truncate,</color>
<color=#75715e>   *     rename) and potentially other methods that require a writable environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkWritable</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"Environment is Read-Only."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>environmentImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>