<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.management.ManagementFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Uses com.sun.management (non-portable) APIs to detect whether compressed oops is actually in</color>
<color=#75715e> * effect. Uses reflection so that isEnabled simply returns null if the com.sun.management classes</color>
<color=#75715e> * are not available, rather than causing a class loading error during static initialization, which</color>
<color=#75715e> * would prevent the process from running. For the IBM J9 environment, which doesn't support the</color>
<color=#75715e> * MBean, checks the value of a system property for a known string.</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>CompressedOopsDetector</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>HOTSPOT_BEAN_CLASS</color> <color=#f92672>=</color> <color=#e6db74>"com.sun.management.HotSpotDiagnosticMXBean"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>HOTSPOT_BEAN_NAME</color> <color=#f92672>=</color> <color=#e6db74>"com.sun.management:type=HotSpotDiagnostic"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VMOPTION_CLASS</color> <color=#f92672>=</color> <color=#e6db74>"com.sun.management.VMOption"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For IBM J9, it appears that the best way to tell if compressed OOPs are in use is to see if the</color>
<color=#75715e>   * value of the java.vm.info system property contains this value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>IBM_VM_INFO_COMPRESSED_OOPS_SUBSTRING</color> <color=#f92672>=</color> <color=#e6db74>"Compressed References"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @return TRUE or FALSE if the status of compressed oops is known, or null if it is unknown. */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>Boolean</color> <color=#a6e22e>isEnabled</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>isEnabledInternal</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>vendor</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"java.vendor"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>vendor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>vendor</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"IBM"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"java.vm.info"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>IBM_VM_INFO_COMPRESSED_OOPS_SUBSTRING</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Throws exceptions rather than returning null. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Boolean</color> <color=#a6e22e>isEnabledInternal</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>hotspotMBeanClass</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>HOTSPOT_BEAN_CLASS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>hotspotMBean</color> <color=#f92672>=</color>
        <color=#f8f8f2>ManagementFactory</color><color=#f8f8f2>.</color><color=#a6e22e>newPlatformMXBeanProxy</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ManagementFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getPlatformMBeanServer</color><color=#f8f8f2>(),</color> <color=#f8f8f2>HOTSPOT_BEAN_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>hotspotMBeanClass</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * vmOption is an instance of com.sun.management.VMOption.</color>
<color=#75715e>     * HotSpotDiagnosticMXBean.getVMOption(String option) returns a</color>
<color=#75715e>     * VMOption, which has a "String getValue()" method.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>getVMOption</color> <color=#f92672>=</color> <color=#f8f8f2>hotspotMBeanClass</color><color=#f8f8f2>.</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#e6db74>"getVMOption"</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>vmOption</color> <color=#f92672>=</color> <color=#f8f8f2>getVMOption</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>hotspotMBean</color><color=#f8f8f2>,</color> <color=#e6db74>"UseCompressedOops"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>vmOptionClass</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>VMOPTION_CLASS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>getValue</color> <color=#f92672>=</color> <color=#f8f8f2>vmOptionClass</color><color=#f8f8f2>.</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#e6db74>"getValue"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>getValue</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>vmOption</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For manual testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"isEnabled(): "</color> <color=#f92672>+</color> <color=#f8f8f2>isEnabled</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>