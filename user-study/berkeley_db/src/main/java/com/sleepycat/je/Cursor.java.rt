<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.CursorImpl.LockStanding</color><color=#f8f8f2>;</color><color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.internal.IN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchSupport</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.ReplicationContext</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.BIN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.CountEstimator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.Key</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.LN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.BuddyLocker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Txn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DatabaseUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Collection</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Comparator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A database cursor. Cursors are used for operating on collections of records, for iterating over a</color>
<color=#75715e> * database, and for saving handles to individual records, so that they can be modified after they</color>
<color=#75715e> * have been read.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Cursors which are opened with a transaction instance are transactional cursors and may be used</color>
<color=#75715e> * by multiple threads, but only serially. That is, the application must serialize access to the</color>
<color=#75715e> * handle. Non-transactional cursors, opened with a null transaction instance, may not be used by</color>
<color=#75715e> * multiple threads.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If the cursor is to be used to perform operations on behalf of a transaction, the cursor must</color>
<color=#75715e> * be opened and closed within the context of that single transaction.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Once the cursor {@link #close} method has been called, the handle may not be accessed again,</color>
<color=#75715e> * regardless of the {@code close} method's success or failure, with one exception: the {@code</color>
<color=#75715e> * close} method itself may be called any number of times to simplify error handling.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To obtain a cursor with default attributes:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     Cursor cursor = myDatabase.openCursor(txn, null);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To customize the attributes of a cursor, use a CursorConfig object.</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     CursorConfig config = new CursorConfig();</color>
<color=#75715e> *     config.setReadUncommitted(true);</color>
<color=#75715e> *     Cursor cursor = myDatabase.openCursor(txn, config);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Modifications to the database during a sequential scan will be reflected in the scan; that is,</color>
<color=#75715e> * records inserted behind a cursor will not be returned while records inserted in front of a cursor</color>
<color=#75715e> * will be returned.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>By default, a cursor is "sticky", meaning that the prior position is maintained by cursor</color>
<color=#75715e> * movement operations, and the cursor stays at the prior position when the operation does not</color>
<color=#75715e> * succeed. However, it is possible to configure a cursor as non-sticky to enable certain</color>
<color=#75715e> * performance benefits. See {@link CursorConfig#setNonSticky} for details.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3><a name="partialEntry">Using Null and Partial DatabaseEntry Parameters</a></h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Null can be passed for DatabaseEntry output parameters if the value is not needed. The {@link</color>
<color=#75715e> * DatabaseEntry#setPartial DatabaseEntry Partial} property can also be used to optimize in certain</color>
<color=#75715e> * cases. These provide varying degrees of performance benefits that depend on the specific</color>
<color=#75715e> * operation, as described below.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When retrieving a record with a {@link Database} or {@link Cursor} method, if only the key is</color>
<color=#75715e> * needed by the application then the retrieval of the data item can be suppressed by passing null.</color>
<color=#75715e> * If null is passed as the data parameter, the data item will not be returned by the {@code</color>
<color=#75715e> * Database} or {@code Cursor} method.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Suppressing the return of the data item potentially has a large performance benefit. In this</color>
<color=#75715e> * case, if the record data is not already in the JE cache, it will not be read from disk. The</color>
<color=#75715e> * performance benefit is potentially large because random access disk reads may be reduced.</color>
<color=#75715e> * Examples use cases are:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Scanning all records in key order, when the data is not needed.</color>
<color=#75715e> *   <li>Skipping over records quickly with {@code READ_UNCOMMITTED} isolation to select records for</color>
<color=#75715e> *       further processing by examining the key value.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that by "record data" we mean both the {@code data} parameter for a regular or primary</color>
<color=#75715e> * DB, and the {@code pKey} parameter for a secondary DB. However, the performance advantage of a</color>
<color=#75715e> * key-only operation does not apply to databases configured for duplicates. For a duplicates DB,</color>
<color=#75715e> * the data is always available along with the key and does not have to be fetched separately.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The Partial property may also be used to retrieve or update only a portion of a data item.</color>
<color=#75715e> * This avoids copying the entire record between the JE cache and the application data parameter.</color>
<color=#75715e> * However, this feature has less of a performance benefit than one might assume, since the entire</color>
<color=#75715e> * record is always read or written to the database, and the entire record is cached. A partial</color>
<color=#75715e> * update may be performed only with {@link Cursor#putCurrent Cursor.putCurrent}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A null or partial DatabaseEntry output parameter may also be used in other cases, for example,</color>
<color=#75715e> * to retrieve a partial key item. However, in practice this has limited value since the entire key</color>
<color=#75715e> * is usually needed by the application, and the benefit of copying a portion of the key is</color>
<color=#75715e> * generally very small.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Historical note: Prior to JE 7.0, null could not be passed for output parameters. Instead,</color>
<color=#75715e> * {@code DatabaseEntry.setPartial(0, 0, true)} was called for a data parameter to avoid reading the</color>
<color=#75715e> * record's data. Now, null can be passed instead.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Cursor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ForwardCursor</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>DEFAULT_READ_OPTIONS</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReadOptions</color><color=#f8f8f2>();</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>DEFAULT_WRITE_OPTIONS</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WriteOptions</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>EMPTY_DUP_DATA</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>NO_RETURN_DATA</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The CursorConfig used to configure this cursor. */</color>
  <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>

  <color=#75715e>/* User Transacational, or null if none. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>transaction</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Handle under which this cursor was created; may be null when the cursor is used internally. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Database implementation. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The underlying cursor. */</color>
  <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>;</color> <color=#75715e>// Used by subclasses.</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>updateOperationsProhibited</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Attributes */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommittedDefault</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>serializableIsolationDefault</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nonSticky</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>defaultCacheMode</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For range searches, it establishes the upper bound (K2) of the search</color>
<color=#75715e>   * range via a function that returns false if a key is >= K2.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>RangeConstraint</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>Cursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursorConfig</color> <color=#f92672>=</color> <color=#f8f8f2>CursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check that Database is open for internal Cursor usage. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>locker</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>putMode</color> <color=#f92672>=</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>init</color><color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*retainNonTxnLocks*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>retainNonTxnLocks</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>locker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Allow locker to perform "open cursor" actions, such as consistency</color>
<color=#75715e>     * checks for a non-transactional locker on a Replica.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>openCursorHook</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>();</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>cursorImpl</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>retainNonTxnLocks</color><color=#f8f8f2>,</color> <color=#f8f8f2>isSecondaryCursor</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>transaction</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTransaction</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Perform eviction for user cursors. */</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setAllowEviction</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>readUncommittedDefault</color> <color=#f92672>=</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isReadUncommittedDefault</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>serializableIsolationDefault</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>().</color><color=#a6e22e>isSerializableIsolation</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Be sure to keep this logic in sync with checkUpdatesAllowed. */</color>
    <color=#f8f8f2>updateOperationsProhibited</color> <color=#f92672>=</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>isWritable</color><color=#f8f8f2>())</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>())</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isLocalWrite</color><color=#f8f8f2>());</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbHandle</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>addCursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>config</color> <color=#f92672>=</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>nonSticky</color> <color=#f92672>=</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getNonSticky</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>setCacheMode</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isSecondaryCursor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets non-sticky mode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see CursorConfig#setNonSticky</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nonSticky</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nonSticky</color> <color=#f92672>=</color> <color=#f8f8f2>nonSticky</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Internal entrypoint. */</color>
  <color=#f8f8f2>CursorImpl</color> <color=#a6e22e>getCursorImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Database handle associated with this Cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The Database handle associated with this Cursor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Always returns non-null, while getDatabase() returns null if no handle is associated with this</color>
<color=#75715e>   * cursor.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDatabaseImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns this cursor's configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This may differ from the configuration used to open this object if the cursor existed</color>
<color=#75715e>   * previously.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return This cursor's configuration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CursorConfig</color> <color=#a6e22e>getConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the default {@code CacheMode} used for subsequent operations performed using this</color>
<color=#75715e>   * cursor. If {@link #setCacheMode} has not been called with a non-null value, the configured</color>
<color=#75715e>   * Database or Environment default is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the {@code CacheMode} default used for subsequent operations using this cursor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CacheMode</color> <color=#a6e22e>getCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>defaultCacheMode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the {@code CacheMode} default used for subsequent operations performed using this cursor.</color>
<color=#75715e>   * This method may be used to override the defaults specified using {@link</color>
<color=#75715e>   * DatabaseConfig#setCacheMode} and {@link EnvironmentConfig#setCacheMode}. Note that the default</color>
<color=#75715e>   * is always overridden by a non-null cache mode that is specified via {@link ReadOptions} or</color>
<color=#75715e>   * {@link WriteOptions}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cacheMode is the default {@code CacheMode} used for subsequent operations using this</color>
<color=#75715e>   *     cursor, or null to configure the Database or Environment default.</color>
<color=#75715e>   * @see CacheMode for further details.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>defaultCacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>cacheMode</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultCacheMode</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only. Used by KVStore.</color>
<color=#75715e>   *     <p>A RangeConstraint is used by search-range and next/previous methods to prevent keys that</color>
<color=#75715e>   *     are not inside the range from being returned.</color>
<color=#75715e>   *     <p>This method is not yet part of the public API because it has not been designed with</color>
<color=#75715e>   *     future-proofing or generality in mind, and has not been reviewed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRangeConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>RangeConstraint</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"Not allowed with dups"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rangeConstraint</color> <color=#f92672>=</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyBytes2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>rangeConstraint</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>RangeConstraint</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>inBounds</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>checkKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>compareMainKey</color><color=#f8f8f2>(</color><color=#f8f8f2>checkKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyBytes2</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparator</color><color=#f8f8f2>())</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>rangeConstraint</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>RangeConstraint</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>inBounds</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>checkKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>compareMainKey</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>checkKey</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparator</color><color=#f8f8f2>())</color>
                <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkRangeConstraint</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>().</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rangeConstraint</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>.</color><color=#a6e22e>inBounds</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Discards the cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cursor handle may not be used again after this method has been called, regardless of the</color>
<color=#75715e>   * method's success or failure, with one exception: the {@code close} method itself may be called</color>
<color=#75715e>   * any number of times.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isClosed</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not call checkState here, to allow closing a cursor after an</color>
<color=#75715e>       * operation failure.  [#17015]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>removeCursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dbHandle</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a new cursor with the same transaction and locker ID as the original cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is useful when an application is using locking and requires two or more cursors in the</color>
<color=#75715e>   * same thread of control.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param samePosition If true, the newly created cursor is initialized to refer to the same</color>
<color=#75715e>   *     position in the database as the original cursor (if any) and hold the same locks (if any).</color>
<color=#75715e>   *     If false, or the original cursor does not hold a database position and locks, the returned</color>
<color=#75715e>   *     cursor is uninitialized and will behave like a newly created cursor.</color>
<color=#75715e>   * @return A new cursor with the same transaction and locker ID as the original cursor.</color>
<color=#75715e>   * @throws com.sleepycat.je.rep.DatabasePreemptedException in a replicated environment if the</color>
<color=#75715e>   *     master has truncated, removed or renamed the database.</color>
<color=#75715e>   * @throws OperationFailureException if this exception occurred earlier and caused the transaction</color>
<color=#75715e>   *     to be invalidated.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Cursor</color> <color=#a6e22e>dup</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>samePosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
<color=#75715e>//    try {</color>
<color=#75715e>//      checkOpenAndState(false);</color>
<color=#75715e>//      return new Cursor(this, samePosition);</color>
<color=#75715e>//    } catch (Error E) {</color>
<color=#75715e>//      dbImpl.getEnv().invalidate(E);</color>
<color=#75715e>//      throw E;</color>
<color=#75715e>//    }</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Deletes the record to which the cursor refers. When the database has associated secondary</color>
<color=#75715e>   * databases, this method also deletes the associated index records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cursor position is unchanged after a delete, and subsequent calls to cursor functions</color>
<color=#75715e>   * expecting the cursor to refer to an existing record will fail.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param options the WriteOptions, or null to use default options.</color>
<color=#75715e>   * @return the OperationResult if the record is deleted, else null if the record at the cursor</color>
<color=#75715e>   *     position has already been deleted.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if the database is transactional but this cursor was not</color>
<color=#75715e>   *     opened with a non-null transaction parameter, or the database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkOpenAndState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Cursor.delete: "</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>deleteInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepContext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Deletes the record to which the cursor refers. When the database has associated secondary</color>
<color=#75715e>   * databases, this method also deletes the associated index records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cursor position is unchanged after a delete, and subsequent calls to cursor functions</color>
<color=#75715e>   * expecting the cursor to refer to an existing record will fail.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #delete(WriteOptions)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the</color>
<color=#75715e>   *     record at the cursor position has already been deleted; otherwise, {@link</color>
<color=#75715e>   *     com.sleepycat.je.OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if the database is transactional but this cursor was not</color>
<color=#75715e>   *     opened with a non-null transaction parameter, or the database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>delete</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEMPTY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Inserts or updates a record according to the specified {@link Put} type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the operation succeeds, the record will be locked according to the {@link</color>
<color=#75715e>   * ReadOptions#getLockMode() lock mode} specified, the cursor will be positioned on the record,</color>
<color=#75715e>   * and a non-null OperationResult will be returned. If the operation fails because the record</color>
<color=#75715e>   * already exists (or does not exist, depending on the putType), null is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When the database has associated secondary databases, this method also inserts or deletes</color>
<color=#75715e>   * associated index records as necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The following table lists each allowed operation. See the individual {@link Put} operations</color>
<color=#75715e>   * for more information. <div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1" summary=""></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <th>Put operation</th></color>
<color=#75715e>   *     <th>Description</th></color>
<color=#75715e>   *     <th>Returns null when?</th></color>
<color=#75715e>   *     <th>Other special rules</th></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Put#OVERWRITE}</td></color>
<color=#75715e>   *     <td>Inserts or updates a record depending on whether a matching</color>
<color=#75715e>   *     record is already present.</td></color>
<color=#75715e>   *     <td>Never returns null.</td></color>
<color=#75715e>   *     <td>Without duplicates, a matching record is one with the same key;</color>
<color=#75715e>   *     with duplicates, it is one with the same key and data.</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Put#NO_OVERWRITE}</td></color>
<color=#75715e>   *     <td>Inserts a record if a record with a matching key is not already</color>
<color=#75715e>   *     present.</td></color>
<color=#75715e>   *     <td>When an existing record matches.</td></color>
<color=#75715e>   *     <td>If the database has duplicate keys, a record is inserted only if</color>
<color=#75715e>   *     there are no records with a matching key.</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Put#DUP_DATA}</td></color>
<color=#75715e>   *     <td>Inserts a record in a database with duplicate keys if a record</color>
<color=#75715e>   *     with a matching key and data is not already present.</td></color>
<color=#75715e>   *     <td>When an existing record matches.</td></color>
<color=#75715e>   *     <td>Without duplicates, this operation is not allowed.</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Put#CURRENT}</td></color>
<color=#75715e>   *     <td>Updates the data of the record at the cursor position.</td></color>
<color=#75715e>   *     <td>When the record at the cursor position has been deleted.</td></color>
<color=#75715e>   *     <td>With duplicates, the data must be considered equal by the</color>
<color=#75715e>   *     duplicate comparator, meaning that changing the data is only</color>
<color=#75715e>   *     possible if a custom duplicate comparator is configured.</color>
<color=#75715e>   *     <p></color>
<color=#75715e>   *     Cannot be used to update the key of an existing record and in</color>
<color=#75715e>   *     fact the key parameter must be null.</color>
<color=#75715e>   *     <p></color>
<color=#75715e>   *     A <a href="Cursor.html#partialEntry">partial data item</a> may be</color>
<color=#75715e>   *     specified to optimize for partial data update.</color>
<color=#75715e>   *     </td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * </div></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>. Must be null when</color>
<color=#75715e>   *     putType is {@code Put.CURRENT}.</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a>. May be partial</color>
<color=#75715e>   *     only when putType is {@code Put.CURRENT}.</color>
<color=#75715e>   * @param putType the Put operation type. May not be null.</color>
<color=#75715e>   * @param options the WriteOptions, or null to use default options.</color>
<color=#75715e>   * @return the OperationResult if the record is written, else null.</color>
<color=#75715e>   * @throws DuplicateDataException if putType is Put.CURRENT and the old and new data are not equal</color>
<color=#75715e>   *     according to the configured duplicate comparator or default comparator.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if the database is transactional but this cursor was not</color>
<color=#75715e>   *     opened with a non-null transaction parameter, or the database is read-only, or putType is</color>
<color=#75715e>   *     Put.NO_DUP_DATA and the database is not configured for duplicates.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified. This includes passing a</color>
<color=#75715e>   *     null putType, a null input key/data parameter, an input key/data parameter with a null data</color>
<color=#75715e>   *     array, a partial key/data input parameter.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Put</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Cursor.put: "</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>putType</color><color=#f8f8f2>),</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>putInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs the put() operation except for state checking and tracing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Allows passing a throughput stat index so it can be called for Database and SecondaryCursor</color>
<color=#75715e>   * operations.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Put</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#e6db74>"putType"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>putType</color> <color=#f92672>==</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"The key must be null for Put.Current"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#e6db74>"data"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#f8f8f2>putType</color> <color=#f92672>==</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>options</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>options</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_WRITE_OPTIONS</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>putInternal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ExpirationInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>options</color><color=#f8f8f2>)</color><color=#75715e>/*, putType.getPutMode()*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Stores a key/data pair into the database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #put(DatabaseEntry, DatabaseEntry, Put,</color>
<color=#75715e>   * WriteOptions)} with {@link Put#OVERWRITE}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the put method succeeds, the cursor is positioned to refer to the newly inserted item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the key already appears in the database and duplicates are supported, the new data value</color>
<color=#75715e>   * is inserted at the correct sorted location, unless the new data value also appears in the</color>
<color=#75715e>   * database already. In the later case, although the given key/data pair compares equal to an</color>
<color=#75715e>   * existing key/data pair, the two records may not be identical if custom comparators are used, in</color>
<color=#75715e>   * which case the existing record will be replaced with the new record. If the key already appears</color>
<color=#75715e>   * in the database and duplicates are not supported, the data associated with the key will be</color>
<color=#75715e>   * replaced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>..</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if the database is transactional but this cursor was not</color>
<color=#75715e>   *     opened with a non-null transaction parameter, or the database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>OVERWRITE</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>assertState</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Stores a key/data pair into the database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #put(DatabaseEntry, DatabaseEntry, Put,</color>
<color=#75715e>   * WriteOptions)} with {@link Put#NO_OVERWRITE}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the putNoOverwrite method succeeds, the cursor is positioned to refer to the newly</color>
<color=#75715e>   * inserted item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the key already appears in the database, putNoOverwrite will return {@link</color>
<color=#75715e>   * com.sleepycat.je.OperationStatus#KEYEXIST OperationStatus.KEYEXIST}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>..</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#KEYEXIST OperationStatus.KEYEXIST} if the key</color>
<color=#75715e>   *     already appears in the database, else {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if the database is transactional but this cursor was not</color>
<color=#75715e>   *     opened with a non-null transaction parameter, or the database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putNoOverwrite</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>NO_OVERWRITE</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEXIST</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Stores a key/data pair into the database. The database must be configured for duplicates.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #put(DatabaseEntry, DatabaseEntry, Put,</color>
<color=#75715e>   * WriteOptions)} with {@link Put#DUP_DATA}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the putNoDupData method succeeds, the cursor is positioned to refer to the newly inserted</color>
<color=#75715e>   * item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Insert the specified key/data pair into the database, unless a key/data pair comparing</color>
<color=#75715e>   * equally to it already exists in the database. If a matching key/data pair already exists in the</color>
<color=#75715e>   * database, {@link com.sleepycat.je.OperationStatus#KEYEXIST OperationStatus.KEYEXIST} is</color>
<color=#75715e>   * returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>..</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#KEYEXIST OperationStatus.KEYEXIST} if the</color>
<color=#75715e>   *     key/data pair already appears in the database, else {@link</color>
<color=#75715e>   *     com.sleepycat.je.OperationStatus#SUCCESS OperationStatus.SUCCESS}</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if the database is transactional but this cursor was not</color>
<color=#75715e>   *     opened with a non-null transaction parameter, or the database is read-only, or the database</color>
<color=#75715e>   *     is not configured for duplicates.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putNoDupData</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>DUP_DATA</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEXIST</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Replaces the data in the key/data pair at the current cursor position.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #put(DatabaseEntry, DatabaseEntry, Put,</color>
<color=#75715e>   * WriteOptions)} with {@link Put#CURRENT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Overwrite the data of the key/data pair to which the cursor refers with the specified data</color>
<color=#75715e>   * item. This method will return OperationStatus.NOTFOUND if the cursor currently refers to an</color>
<color=#75715e>   * already-deleted key/data pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a database that does not support duplicates, the data may be changed by this method. If</color>
<color=#75715e>   * duplicates are supported, the data may be changed only if a custom partial comparator is</color>
<color=#75715e>   * configured and the comparator considers the old and new data to be equal (that is, the</color>
<color=#75715e>   * comparator returns zero). For more information on partial comparators see {@link</color>
<color=#75715e>   * DatabaseConfig#setDuplicateComparator}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the old and new data are unequal according to the comparator, a {@link</color>
<color=#75715e>   * DuplicateDataException} is thrown. Changing the data in this case would change the sort order</color>
<color=#75715e>   * of the record, which would change the cursor position, and this is not allowed. To change the</color>
<color=#75715e>   * sort order of a record, delete it and then re-insert it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a>. A <a</color>
<color=#75715e>   *     href="Cursor.html#partialEntry">partial data item</a> may be specified to optimize for</color>
<color=#75715e>   *     partial data update.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the</color>
<color=#75715e>   *     key/pair at the cursor position has been deleted; otherwise, {@link</color>
<color=#75715e>   *     com.sleepycat.je.OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws DuplicateDataException if the old and new data are not equal according to the</color>
<color=#75715e>   *     configured duplicate comparator or default comparator.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if the database is transactional but this cursor was not</color>
<color=#75715e>   *     opened with a non-null transaction parameter, or the database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putCurrent</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEMPTY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to a record according to the specified {@link Get} type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the operation succeeds, the record at the resulting cursor position will be locked</color>
<color=#75715e>   * according to the {@link ReadOptions#getLockMode() lock mode} specified, the key and/or data</color>
<color=#75715e>   * will be returned via the (non-null) DatabaseEntry parameters, and a non-null OperationResult</color>
<color=#75715e>   * will be returned. If the operation fails because the record requested is not found, null is</color>
<color=#75715e>   * returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The following table lists each allowed operation and whether the key and data parameters are</color>
<color=#75715e>   * <a href="DatabaseEntry.html#params">input or output parameters</a>. Also specified is whether</color>
<color=#75715e>   * the cursor must be initialized (positioned on a record) before calling this method. See the</color>
<color=#75715e>   * individual {@link Get} operations for more information. <div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1" summary=""></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <th>Get operation</th></color>
<color=#75715e>   *     <th>Description</th></color>
<color=#75715e>   *     <th>'key' parameter</th></color>
<color=#75715e>   *     <th>'data' parameter</th></color>
<color=#75715e>   *     <th>Cursor position<br/>must be initialized?</th></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH_BOTH}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key and data.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH_GTE}</td></color>
<color=#75715e>   *     <td>Searches using a GTE match by key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input/output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH_BOTH_GTE}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key and a GTE match by data.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input/output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#CURRENT}</td></color>
<color=#75715e>   *     <td>Accesses the current record</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>yes</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#FIRST}</td></color>
<color=#75715e>   *     <td>Finds the first record in the database.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#LAST}</td></color>
<color=#75715e>   *     <td>Finds the last record in the database.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#NEXT}</td></color>
<color=#75715e>   *     <td>Moves to the next record.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#NEXT_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the next record with the same key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>yes</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#NEXT_NO_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the next record with a different key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#PREV}</td></color>
<color=#75715e>   *     <td>Moves to the previous record.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#PREV_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the previous record with the same key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>yes</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#PREV_NO_DUP}</td></color>
<color=#75715e>   *     <td>Moves to the previous record with a different key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   *     <td>no**</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * </div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>** - For these 'next' and 'previous' operations the cursor may be uninitialized, in which</color>
<color=#75715e>   * case the cursor will be moved to the first or last record, respectively.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key input or output parameter, depending on getType.</color>
<color=#75715e>   * @param data the data input or output parameter, depending on getType.</color>
<color=#75715e>   * @param getType the Get operation type. May not be null.</color>
<color=#75715e>   * @param options the ReadOptions, or null to use default options.</color>
<color=#75715e>   * @return the OperationResult if the record requested is found, else null.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record) and this is not permitted (see above), or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified. This includes passing a</color>
<color=#75715e>   *     null getType, a null input key/data parameter, an input key/data parameter with a null data</color>
<color=#75715e>   *     array, a partial key/data input parameter, and specifying a {@link</color>
<color=#75715e>   *     ReadOptions#getLockMode() lock mode} of READ_COMMITTED.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>options</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>options</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_READ_OPTIONS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getLockMode</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Cursor.get: "</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>),</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>getInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs the get() operation except for state checking and tracing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The LockMode is passed because for Database operations it is sometimes different than</color>
<color=#75715e>   * ReadOptions.getLockMode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Allows passing a throughput stat index so it can be called for Database and SecondaryCursor</color>
<color=#75715e>   * operations.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>getInternal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#e6db74>"getType"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>getSearchMode</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color><color=#f8f8f2>.</color><color=#a6e22e>isDataSearch</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#e6db74>"data"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#e6db74>"data"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>search</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>getGetMode</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowNextPrevUninitialized</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isNotInitialized</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>getMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>getType</color> <color=#f92672>=</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>isForward</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>LAST</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>getMode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>retrieveNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>getCurrentInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color> <color=#f92672>||</color> <color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>LAST</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*mustBeInitialized*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>position</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color> <color=#f92672>==</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the key/data pair to which the cursor refers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#CURRENT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the</color>
<color=#75715e>   *     key/pair at the cursor position has been deleted; otherwise, {@link</color>
<color=#75715e>   *     com.sleepycat.je.OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEMPTY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the first key/data pair of the database, and returns that pair. If the</color>
<color=#75715e>   * first key has duplicate values, the first data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#FIRST}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getFirst</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the last key/data pair of the database, and returns that pair. If the last</color>
<color=#75715e>   * key has duplicate values, the last data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#LAST}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getLast</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>LAST</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the next key/data pair and returns that pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#NEXT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the first key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the next key/data pair of the</color>
<color=#75715e>   * database, and that pair is returned. In the presence of duplicate key values, the value of the</color>
<color=#75715e>   * key may not change.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the next key/data pair of the database is a duplicate data record for the current key/data</color>
<color=#75715e>   * pair, moves the cursor to the next key/data pair of the database and returns that pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#NEXT_DUP}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNextDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the next non-duplicate key/data pair and returns that pair. If the matching</color>
<color=#75715e>   * key has duplicate values, the first data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#NEXT_NO_DUP}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the first key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the next non-duplicate key of</color>
<color=#75715e>   * the database, and that key/data pair is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNextNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_NO_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the previous key/data pair and returns that pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#PREV}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the last key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the previous key/data pair of</color>
<color=#75715e>   * the database, and that pair is returned. In the presence of duplicate key values, the value of</color>
<color=#75715e>   * the key may not change.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrev</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the previous key/data pair of the database is a duplicate data record for the current</color>
<color=#75715e>   * key/data pair, moves the cursor to the previous key/data pair of the database and returns that</color>
<color=#75715e>   * pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#PREV_DUP}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrevDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>PREV_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the previous non-duplicate key/data pair and returns that pair. If the</color>
<color=#75715e>   * matching key has duplicate values, the last data item in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#PREV_NO_DUP}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not yet initialized, move the cursor to the last key/data pair of the</color>
<color=#75715e>   * database, and return that pair. Otherwise, the cursor is moved to the previous non-duplicate</color>
<color=#75715e>   * key of the database, and that key/data pair is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getPrevNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>PREV_NO_DUP</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Skips forward a given number of key/data pairs and returns the number by which the cursor is</color>
<color=#75715e>   * moved.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Without regard to performance, calling this method is equivalent to repeatedly calling</color>
<color=#75715e>   * {@link #getNext getNext} with {@link LockMode#READ_UNCOMMITTED} to skip over the desired number</color>
<color=#75715e>   * of key/data pairs, and then calling {@link #getCurrent getCurrent} with the {@code lockMode}</color>
<color=#75715e>   * parameter to return the final key/data pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>With regard to performance, this method is optimized to skip over key/value pairs using a</color>
<color=#75715e>   * smaller number of Btree operations. When there is no contention on the bottom internal nodes</color>
<color=#75715e>   * (BINs) and all BINs are in cache, the number of Btree operations is reduced by roughly two</color>
<color=#75715e>   * orders of magnitude, where the exact number depends on the {@link</color>
<color=#75715e>   * EnvironmentConfig#NODE_MAX_ENTRIES} setting. When there is contention on BINs or fetching BINs</color>
<color=#75715e>   * is required, the scan is broken up into smaller operations to avoid blocking other threads for</color>
<color=#75715e>   * long time periods.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the returned count is greater than zero, then the key/data pair at the new cursor</color>
<color=#75715e>   * position is also returned. If zero is returned, then there are no key/value pairs that follow</color>
<color=#75715e>   * the cursor position and a key/data pair is not returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param maxCount the maximum number of key/data pairs to skip, i.e., the maximum number by which</color>
<color=#75715e>   *     the cursor should be moved; must be greater than zero.</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return the number of key/data pairs skipped, i.e., the number by which the cursor has moved;</color>
<color=#75715e>   *     if zero is returned, the cursor position is unchanged and the key/data pair is not</color>
<color=#75715e>   *     returned.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>skipNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxCount</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkOpenAndState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxCount</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"maxCount must be positive: "</color> <color=#f92672>+</color> <color=#f8f8f2>maxCount</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Cursor.skipNext: "</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>skipInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>maxCount</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*forward*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Skips backward a given number of key/data pairs and returns the number by which the cursor is</color>
<color=#75715e>   * moved.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Without regard to performance, calling this method is equivalent to repeatedly calling</color>
<color=#75715e>   * {@link #getPrev getPrev} with {@link LockMode#READ_UNCOMMITTED} to skip over the desired number</color>
<color=#75715e>   * of key/data pairs, and then calling {@link #getCurrent getCurrent} with the {@code lockMode}</color>
<color=#75715e>   * parameter to return the final key/data pair.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>With regard to performance, this method is optimized to skip over key/value pairs using a</color>
<color=#75715e>   * smaller number of Btree operations. When there is no contention on the bottom internal nodes</color>
<color=#75715e>   * (BINs) and all BINs are in cache, the number of Btree operations is reduced by roughly two</color>
<color=#75715e>   * orders of magnitude, where the exact number depends on the {@link</color>
<color=#75715e>   * EnvironmentConfig#NODE_MAX_ENTRIES} setting. When there is contention on BINs or fetching BINs</color>
<color=#75715e>   * is required, the scan is broken up into smaller operations to avoid blocking other threads for</color>
<color=#75715e>   * long time periods.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the returned count is greater than zero, then the key/data pair at the new cursor</color>
<color=#75715e>   * position is also returned. If zero is returned, then there are no key/value pairs that follow</color>
<color=#75715e>   * the cursor position and a key/data pair is not returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In a replicated environment, an explicit transaction must have been specified when opening</color>
<color=#75715e>   * the cursor, unless read-uncommitted isolation is specified via the {@link CursorConfig} or</color>
<color=#75715e>   * {@link LockMode} parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param maxCount the maximum number of key/data pairs to skip, i.e., the maximum number by which</color>
<color=#75715e>   *     the cursor should be moved; must be greater than zero.</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return the number of key/data pairs skipped, i.e., the number by which the cursor has moved;</color>
<color=#75715e>   *     if zero is returned, the cursor position is unchanged and the key/data pair is not</color>
<color=#75715e>   *     returned.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>skipPrev</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxCount</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkOpenAndState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxCount</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"maxCount must be positive: "</color> <color=#f92672>+</color> <color=#f8f8f2>maxCount</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Cursor.skipPrev: "</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>skipInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>maxCount</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*forward*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the given key of the database, and returns the datum associated with the</color>
<color=#75715e>   * given key. If the matching key has duplicate values, the first data item in the set of</color>
<color=#75715e>   * duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#SEARCH}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchKey</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the closest matching key of the database, and returns the data item</color>
<color=#75715e>   * associated with the matching key. If the matching key has duplicate values, the first data item</color>
<color=#75715e>   * in the set of duplicates is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#SEARCH_GTE}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The returned key/data pair is for the smallest key greater than or equal to the specified</color>
<color=#75715e>   * key (as determined by the key comparison function), permitting partial key matches and range</color>
<color=#75715e>   * searches.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a> and returned as</color>
<color=#75715e>   *     output.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchKeyRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_GTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the specified key/data pair, where both the key and data items must match.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#SEARCH_BOTH}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchBoth</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_BOTH</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves the cursor to the specified key and closest matching data item of the database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions)} with {@link Get#SEARCH_BOTH_GTE}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the case of any database supporting sorted duplicate sets, the returned key/data pair is</color>
<color=#75715e>   * for the smallest data item greater than or equal to the specified data item (as determined by</color>
<color=#75715e>   * the duplicate comparison function), permitting partial matches and range searches in duplicate</color>
<color=#75715e>   * data sets.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the case of databases that do not support sorted duplicate sets, this method is</color>
<color=#75715e>   * equivalent to getSearchBoth.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a> and returned as</color>
<color=#75715e>   *     output.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchBothRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_BOTH_GTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a count of the number of data items for the key to which the cursor refers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the database is configured for duplicates, the database is scanned internally, without</color>
<color=#75715e>   * taking any record locks, to count the number of non-deleted entries. Although the internal scan</color>
<color=#75715e>   * is more efficient under some conditions, the result is the same as if a cursor were used to</color>
<color=#75715e>   * iterate over the entries using {@link LockMode#READ_UNCOMMITTED}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the database is not configured for duplicates, the count returned is always zero or one,</color>
<color=#75715e>   * depending on the record at the cursor position is deleted or not.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cost of this method is directly proportional to the number of records scanned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return A count of the number of data items for the key to which the cursor refers.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>count</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkOpenAndState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Cursor.count: "</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>countInternal</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a rough estimate of the count of the number of data items for the key to which the</color>
<color=#75715e>   * cursor refers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the database is configured for duplicates, a quick estimate of the number of records is</color>
<color=#75715e>   * computed using information in the Btree. Because the Btree is unbalanced, in some cases the</color>
<color=#75715e>   * estimate may be off by a factor of two or more. The estimate is accurate when the number of</color>
<color=#75715e>   * records is less than the configured {@link DatabaseConfig#setNodeMaxEntries NodeMaxEntries}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the database is not configured for duplicates, the count returned is always zero or one,</color>
<color=#75715e>   * depending on the record at the cursor position is deleted or not.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cost of this method is fixed, rather than being proportional to the number of records</color>
<color=#75715e>   * scanned. Because its accuracy is variable, this method should normally be used when accuracy is</color>
<color=#75715e>   * not required, such as for query optimization, and a fixed cost operation is needed. For</color>
<color=#75715e>   * example, this method is used internally for determining the index processing order in a {@link</color>
<color=#75715e>   * JoinCursor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an estimate of the count of the number of data items for the key to which the cursor</color>
<color=#75715e>   *     refers.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the cursor is</color>
<color=#75715e>   *     uninitialized (not positioned on a record), or the non-transactional cursor was created in</color>
<color=#75715e>   *     a different thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>countEstimate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkOpenAndState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Cursor.countEstimate: "</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>countEstimateInternal</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Version of deleteInternal that does not check disk limits. Used for replication stream replay.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Notifies triggers and prevents phantoms. Note that although deleteNotify is called,</color>
<color=#75715e>   * secondaries are not populated because this cursor is internal and has no associated Database</color>
<color=#75715e>   * handle.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>deleteForReplay</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>deleteNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>repContext</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Internal version of delete() that does no parameter checking. Notify triggers, update</color>
<color=#75715e>   * secondaries and enforce foreign key constraints.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>deleteInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkUpdatesAllowed</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>deleteNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>repContext</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Implementation of deleteInternal that does not check disk limits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this algorithm is duplicated in Database and Cursor for efficiency reasons: in</color>
<color=#75715e>   * Cursor delete we must separately fetch the key and data, while in Database delete we know the</color>
<color=#75715e>   * key and have to search anyway so we can get the old data when we search. The two algorithms</color>
<color=#75715e>   * need to be kept in sync.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>deleteNotify</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasUserTriggers</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTriggers</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasAssociations</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>hasSecondaryOrForeignKeyAssociations</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* The key is needed if there are secondaries or triggers. */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color> <color=#f92672>||</color> <color=#f8f8f2>hasUserTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get secondaries from the association and determine whether the</color>
<color=#75715e>       * old data is needed.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#f8f8f2>secondaries</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#f8f8f2>fkSecondaries</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>needOldData</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>secondaries</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaries</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fkSecondaries</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>foreignKeySecondaries</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>needOldData</color> <color=#f92672>=</color> <color=#f8f8f2>hasUserTriggers</color> <color=#f92672>||</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>needOldDataForDelete</color><color=#f8f8f2>(</color><color=#f8f8f2>secondaries</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>secondaries</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>fkSecondaries</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>needOldData</color> <color=#f92672>=</color> <color=#f8f8f2>hasUserTriggers</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get old data only if needed.  Even if the old data is not</color>
<color=#75715e>       * needed, if there are associations we must lock the record with</color>
<color=#75715e>       * RMW before calling onForeignKeyDelete.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#f8f8f2>needOldData</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>())</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>readResult</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needOldData</color> <color=#f92672>||</color> <color=#f8f8f2>hasAssociations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readResult</color> <color=#f92672>=</color> <color=#f8f8f2>getCurrentInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readResult</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readResult</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Enforce foreign key constraints first, so that</color>
<color=#75715e>       * ForeignKeyDeleteAction.ABORT is applied before deletions.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fkSecondaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fkSecondaries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>onForeignKeyDelete</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The actual deletion.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>deleteResult</color> <color=#f92672>=</color> <color=#f8f8f2>deleteNoNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteResult</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Update secondaries after actual deletion, so that replica replay</color>
<color=#75715e>       * will lock the primary before the secondaries. This locking order</color>
<color=#75715e>       * is required for secondary deadlock avoidance.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secondaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>nWrites</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secondaries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nWrites</color> <color=#f92672>+=</color>
              <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>updateSecondary</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>null</color> <color=#75715e>/*cursor*/</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>null</color> <color=#75715e>/*newData*/</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
                  <color=#ae81ff>0</color> <color=#75715e>/*expirationTime*/</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>false</color> <color=#75715e>/*expirationUpdated*/</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>readResult</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationTime</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setNSecondaryWrites</color><color=#f8f8f2>(</color><color=#f8f8f2>nWrites</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Run triggers after actual deletion. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasUserTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runDeleteTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>deleteResult</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Delete at current position. Does not notify triggers (does not perform secondary updates). */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>deleteNoNotify</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * No need to use a dup cursor, since this operation does not</color>
<color=#75715e>       * change the cursor position.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>beginUseExistingCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>deleteCurrentRecord</color><color=#f8f8f2>(</color><color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incDeleteOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>endUseExistingCursor</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Version of putInternal that allows passing an existing LN, does not interpret duplicates, and</color>
<color=#75715e>   * does not check disk limits. Used for replication stream replay.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Notifies triggers and prevents phantoms. Note that although putNotify is called, secondaries</color>
<color=#75715e>   * are not populated because this cursor is internal and has no associated Database handle.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putForReplay</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>putMode</color> <color=#f92672>!=</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ExpirationInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*updateExpiration*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>putNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>putMode</color> <color=#f92672>==</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>DUP_DATA</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// Influenced by: DUPLICATES</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>locker</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// Influenced by: TRANSACTIONS</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>putHandleDupsSync</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>locker</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>putHandleDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>putNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Interpret duplicates for the various 'putXXX' operations. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putHandleDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>putMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>OVERWRITE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsPutOverwrite</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>NO_OVERWRITE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsPutNoOverwrite</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>DUP_DATA</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsPutNoDupData</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>CURRENT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsPutCurrent</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>putMode</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Interpret duplicates for the put() operation. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsPutOverwrite</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>combine</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>putNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>EMPTY_DUP_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>OVERWRITE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for putNoOverwrite() operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The main purpose of this method is to guarantee that when two threads call putNoOverwrite</color>
<color=#75715e>   * concurrently, only one of them will succeed. In other words, if putNoOverwrite is called for</color>
<color=#75715e>   * all dup insertions, there will always be at most one dup per key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Next key locking must be used to prevent two insertions, since there is no other way to</color>
<color=#75715e>   * block an insertion of dup Y in another thread, while inserting dup X in the current thread.</color>
<color=#75715e>   * This is tested by AtomicPutTest.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Although this method does extra searching and locking compared to putNoOverwrite for a</color>
<color=#75715e>   * non-dup DB (or to putNoDupData for a dup DB), that is not considered a significant issue</color>
<color=#75715e>   * because this method is rarely, if ever, used by applications (for dup DBs that is). It exists</color>
<color=#75715e>   * primarily for compatibility with the DB core API.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsPutNoOverwrite</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Lock next key (or EOF if none) exclusively, before we insert. */</color>
      <color=#f8f8f2>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>dupsGetSearchKeyRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>,</color> <color=#f8f8f2>data2</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Key exists, no need for further checks. */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* No next key exists, lock EOF. */</color>
        <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockEof</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* While next key is locked, check for key existence again. */</color>
      <color=#f8f8f2>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>dupsGetSearchKey</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>,</color> <color=#f8f8f2>data2</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Insertion can safely be done now. */</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>dupsPutNoDupData</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* We successfully inserted the first dup for the key. */</color>
      <color=#f8f8f2>swapCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Interpret duplicates for putNoDupData operation. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsPutNoDupData</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>combine</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>putNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>EMPTY_DUP_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>NO_OVERWRITE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for putCurrent operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Get old key/data, replace data portion, and put new key/data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Arguably we could skip the replacement if there is no user defined comparison function and</color>
<color=#75715e>   * the new data is the same.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsPutCurrent</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>newData</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>oldTwoPartKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>oldTwoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>newTwoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>combine</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>putNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>newTwoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>EMPTY_DUP_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Eventually, all insertions/updates are happening via this method. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putNoDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>putMode</color> <color=#f92672>==</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>LN</color><color=#f8f8f2>.</color><color=#a6e22e>makeLN</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>putNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepContext</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This single method is used for all put operations in order to notify triggers and perform</color>
<color=#75715e>   * secondary updates in one place. Prevents phantoms. Does not interpret duplicates.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: When the cursor has no Database handle, which is true when called from the</color>
<color=#75715e>   * replication replayer, this method notifies user triggers but does not do secondary updates.</color>
<color=#75715e>   * This is correct for replication because secondary updates are part of the replication stream.</color>
<color=#75715e>   * However, it is fragile because other operations, when no Database handle is used, will not</color>
<color=#75715e>   * perform secondary updates. This isn't currently a problem because a Database handle is present</color>
<color=#75715e>   * for all user operations. But it is fragile and needs work.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param putMode One of OVERWRITE, NO_OVERWITE, CURRENT. (NO_DUPS_DATA has been converted to</color>
<color=#75715e>   *     NO_OVERWRITE). Note: OVERWRITE may perform an insertion or an update, NO_OVERWRITE performs</color>
<color=#75715e>   *     insertion only, and CURRENT updates the slot where the cursor is currently positioned at.</color>
<color=#75715e>   * @param key The new key value for the BIN slot S to be inserted/updated. Cannot be partial. For</color>
<color=#75715e>   *     a no-dups DB, it is null if the putMode is CURRENT. For dups DBs it is a 2-part key: if the</color>
<color=#75715e>   *     putMode is CURRENT, it combines the current primary key of slot S with the original,</color>
<color=#75715e>   *     user-provided data; for OVERWRITE and NO_OVERWRITE, it combines the original, user-provided</color>
<color=#75715e>   *     key and data. In case of update, "key" must compare equal to S.key (otherwise</color>
<color=#75715e>   *     DuplicateDataException is thrown), but the 2 keys may not be identical if custom</color>
<color=#75715e>   *     comparators are used. So, S.key will actually be replaced by "key".</color>
<color=#75715e>   * @param data The new data for the LN associated with the BIN slot. For dups DBs it is</color>
<color=#75715e>   *     EMPTY_DUPS_DATA. Note: for dups DBs the original, user-provided "data" must not be partial.</color>
<color=#75715e>   * @param ln LN to be inserted, if insertion is allowed by putMode. null for CURRENT (since</color>
<color=#75715e>   *     insertion is not allowed), not null for other modes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putNotify</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasUserTriggers</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTriggers</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasAssociations</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>hasSecondaryOrForeignKeyAssociations</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>replaceKey</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>putMode</color> <color=#f92672>==</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * This is a no-dups DB. The slot key will not be affected</color>
<color=#75715e>           * by the update. However, if there are indexes/triggers,</color>
<color=#75715e>           * the value of the key is needed to update/apply the</color>
<color=#75715e>           * indexes/triggers after the update. So, it must be</color>
<color=#75715e>           * returned by the putCurrentNoNotify() call below.</color>
<color=#75715e>           * Furthermore, for indexes, the value of the key is needed</color>
<color=#75715e>           * before the update as well, to determine which indexes</color>
<color=#75715e>           * actually must be updated and whether the old data is</color>
<color=#75715e>           * also needed to do the index updates. So, we read the</color>
<color=#75715e>           * value of the key here by what is effectively a</color>
<color=#75715e>           * dirty-read.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color> <color=#f92672>||</color> <color=#f8f8f2>hasUserTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
            <color=#75715e>/*</color>
<color=#75715e>             * Latch this.bin and make "key" point to the</color>
<color=#75715e>             * slot key; then unlatch this.bin.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * This is a dups DB. The slot key must be replaced by the</color>
<color=#75715e>           * given 2-part key. We don't need the pre-update slot key.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>replaceKey</color> <color=#f92672>=</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * - oldData: if needed, will be set to the LN data before the</color>
<color=#75715e>       *   update.</color>
<color=#75715e>       * - newData: if needed, will be set to the full LN data after</color>
<color=#75715e>       *   the update; may be different than newData only if newData</color>
<color=#75715e>       *   is partial.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>newData</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get secondaries from the association and determine whether the</color>
<color=#75715e>       * old data and new data is needed.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#f8f8f2>secondaries</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color> <color=#f92672>||</color> <color=#f8f8f2>hasUserTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasUserTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>secondaries</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaries</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldData</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>SecondaryDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>needOldDataForUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>secondaries</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Even if the TTL is not specified or changed, we need the</color>
<color=#75715e>           * ExpirationUpdated and OldExpirationTime for the</color>
<color=#75715e>           * secondary update.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>expInfo</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ExpirationInfo</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Perform the actual put operation. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>putMode</color> <color=#f92672>==</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>putCurrentNoNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>replaceKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>putNoNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If returned data is null, then</color>
<color=#75715e>       * 1. this is an insertion not an update, or</color>
<color=#75715e>       * 2. an expired LN was purged and the data could not be fetched.</color>
<color=#75715e>       *</color>
<color=#75715e>       * The latter case is acceptable because the old data is needed</color>
<color=#75715e>       * only to delete secondary records, and if the LN expired then</color>
<color=#75715e>       * those secondary records will also expire naturally. The old</color>
<color=#75715e>       * expirationTime is passed to updateSecondary below, which will</color>
<color=#75715e>       * prevent secondary integrity errors.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldData</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>oldData</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newData</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newData</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Update secondaries and notify triggers.  Pass newData, not data,</color>
<color=#75715e>       * since data may be partial.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secondaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>nWrites</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secondaries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>isUpdate</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>updateMayChangeSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>nWrites</color> <color=#f92672>+=</color>
                <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>updateSecondary</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>null</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>newData</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationTime</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>expInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationUpdated</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>expInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getOldExpirationTime</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setNSecondaryWrites</color><color=#f8f8f2>(</color><color=#f8f8f2>nWrites</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasUserTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runPutTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAssociations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Search for the key and perform insertion or update. Does not notify triggers or perform</color>
<color=#75715e>   * secondary updates. Prevents phantoms.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param putMode is either OVERWRITE, NO_OEVERWRITE, or BLIND_INSERTION</color>
<color=#75715e>   * @param key The new key value for the BIN slot S to be inserted/updated. Cannot be partial. For</color>
<color=#75715e>   *     dups DBs it is a 2-part key combining the original, user-provided key and data. In case of</color>
<color=#75715e>   *     update, "key" must compare equal to S.key (otherwise DuplicateDataException is thrown), but</color>
<color=#75715e>   *     the 2 keys may not be identical if custom comparators are used. So, S.key will actually be</color>
<color=#75715e>   *     replaced by "key".</color>
<color=#75715e>   * @param data In case of update, the new data to (perhaps partially) replace the data of the LN</color>
<color=#75715e>   *     associated with the BIN slot. For dups DBs it is EMPTY_DUPS_DATA. Note: for dups DBs the</color>
<color=#75715e>   *     original, user-provided "data" must not be partial.</color>
<color=#75715e>   * @param ln is normally a new LN node that is created for insertion, and will be discarded if an</color>
<color=#75715e>   *     update occurs. However, HA will pass an existing node.</color>
<color=#75715e>   * @param returnOldData To receive, in case of update, the old LN data (before the update). It is</color>
<color=#75715e>   *     needed only by DBs with indexes/triggers; will be null otherwise.</color>
<color=#75715e>   * @param returnNewData To receive the full data of the new or updated LN. It is needed only by</color>
<color=#75715e>   *     DBs with indexes/triggers and only if "data" is partial; will be null otherwise. Note:</color>
<color=#75715e>   *     "returnNewData" may be different than "data" only if "data" is partial.</color>
<color=#75715e>   * @return OperationResult where isUpdate() distinguishes insertions and updates.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putNoNotify</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>returnOldData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>returnNewData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>ln</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>putMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>putMode</color> <color=#f92672>!=</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>Locker</color> <color=#f8f8f2>nextKeyLocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nextKeyCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If other transactions are serializable, lock the next key.</color>
<color=#75715e>       * BUG ???? What if a serializable txn starts after the check</color>
<color=#75715e>       * below returns false? At least, if this cursor is using a</color>
<color=#75715e>       * serializable txn, it SHOULD do next key locking unconditionally.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>cursorLocker</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>areOtherSerializableTransactionsActive</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorLocker</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * nextKeyCursor is created with retainNonTxnLocks == true,</color>
<color=#75715e>         * and as a result, releaseNonTxnLocks() will not be called</color>
<color=#75715e>         * on nextKeyLocker when nextKeyCursor is reset or closed.</color>
<color=#75715e>         * That's why in the finally clause below we explicitly call</color>
<color=#75715e>         * nextKeyLocker.operationEnd()</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>nextKeyLocker</color> <color=#f92672>=</color> <color=#f8f8f2>BuddyLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBuddyLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorLocker</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>nextKeyCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextKeyLocker</color><color=#f8f8f2>);</color>

        <color=#75715e>/* Perform eviction for user cursors. */</color>
        <color=#f8f8f2>nextKeyCursor</color><color=#f8f8f2>.</color><color=#a6e22e>setAllowEviction</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>nextKeyCursor</color><color=#f8f8f2>.</color><color=#a6e22e>lockNextKeyForInsert</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Perform operation. */</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>insertOrUpdateRecord</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>returnOldData</color><color=#f8f8f2>,</color> <color=#f8f8f2>returnNewData</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>putMode</color> <color=#f92672>==</color> <color=#f8f8f2>PutMode</color><color=#f8f8f2>.</color><color=#a6e22e>NO_OVERWRITE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>incInsertFailOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>isUpdate</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>incInsertOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>incUpdateOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Note that status is used in the finally. */</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dup</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextKeyCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nextKeyCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Release the next-key lock. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextKeyLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nextKeyLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Log the exception thrown by the cleanup actions and</color>
<color=#75715e>           * allow the original exception to be thrown</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>traceAndLogException</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#e6db74>"Cursor"</color><color=#f8f8f2>,</color> <color=#e6db74>"putNoNotify"</color><color=#f8f8f2>,</color> <color=#e6db74>""</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the data at the current position. No new LN, dup cursor, or phantom handling is needed.</color>
<color=#75715e>   * Does not interpret duplicates.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key The new key value for the BIN slot S to be updated. Cannot be partial. For a no-dups</color>
<color=#75715e>   *     DB, it is null. For dups DBs it is a 2-part key combining the current primary key of slot S</color>
<color=#75715e>   *     with the original, user-provided data. "key" (if not null) must compare equal to S.key</color>
<color=#75715e>   *     (otherwise DuplicateDataException is thrown), but the 2 keys may not be identical if custom</color>
<color=#75715e>   *     comparators are used. So, S.key will actually be replaced by "key".</color>
<color=#75715e>   * @param data The new data to (perhaps partially) replace the data of the LN associated with the</color>
<color=#75715e>   *     BIN slot. For dups DBs it is EMPTY_DUPS_DATA. Note: for dups DBs the original,</color>
<color=#75715e>   *     user-provided "data" must not be partial.</color>
<color=#75715e>   * @param returnOldData To receive the old LN data (before the update). It is needed only by DBs</color>
<color=#75715e>   *     with indexes/triggers; will be null otherwise.</color>
<color=#75715e>   * @param returnNewData To receive the full data of the updated LN. It is needed only by DBs with</color>
<color=#75715e>   *     indexes/triggers and only if "data" is partial; will be null otherwise. Note:</color>
<color=#75715e>   *     "returnNewData" may be different than "data" only if "data" is partial.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>putCurrentNoNotify</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>returnOldData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>returnNewData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>beginUseExistingCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>updateCurrentRecord</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>returnOldData</color><color=#f8f8f2>,</color> <color=#f8f8f2>returnNewData</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incUpdateOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>endUseExistingCursor</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the current key and data. There is no need to use a dup cursor or prevent phantoms. */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>getCurrentInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getCurrentHandleDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>getCurrentNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to lock without returning key/data. When called with LockMode.READ_UNCOMMITTED, it simply</color>
<color=#75715e>   * checks for a deleted record.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>checkCurrent</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getCurrentNoDups</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Interpret duplicates for getCurrent operation. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>getCurrentHandleDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>getCurrentNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>getCurrentNoDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>beginUseExistingCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color><color=#f8f8f2>,</color>
              <color=#66d9ef>false</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>false</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
          <color=#f92672>&&</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>().</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incBinDeltaGets</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>endUseExistingCursor</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Internal version of getFirst/getLast that does no parameter checking. Interprets duplicates.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>position</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>positionHandleDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>positionNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incPositionOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Interpret duplicates for getFirst and getLast operations. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>positionHandleDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>positionNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Does not interpret duplicates. Prevents phantoms. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>positionNoDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSerializableIsolation</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>positionAllowPhantoms</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*rangeLock*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Perform range locking to prevent phantoms and handle restarts.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Range lock the EOF node before getLast. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockEof</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* Perform operation. Use a range lock for getFirst. */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>positionAllowPhantoms</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color> <color=#75715e>/*rangeLock*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>first</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Range lock the EOF node when getFirst returns null.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>first</color> <color=#f92672>&&</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockEof</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// continue</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Positions without preventing phantoms. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>positionAllowPhantoms</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rangeLock</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>first</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Search for first or last slot. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>positionFirstOrLast</color><color=#f8f8f2>(</color><color=#f8f8f2>first</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Tree is empty. */</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Found and latched first/last BIN in this tree.</color>
<color=#75715e>         * BIN may be empty.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeLock</color><color=#f8f8f2>);</color>

        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dirtyReadAll</color> <color=#f92672>=</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * The BIN may be empty or the slot we're pointing at may</color>
<color=#75715e>           * be deleted.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>first</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>true</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>null</color> <color=#75715e>/*rangeConstraint*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Retrieves the next or previous record. Prevents phantoms. */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>retrieveNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>retrieveNextHandleDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>retrieveNextNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incPositionOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Interpret duplicates for getNext/Prev/etc operations. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>retrieveNextHandleDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>getMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>NEXT</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>PREV</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsGetNextOrPrev</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>NEXT_DUP</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsGetNextOrPrevDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>PREV_DUP</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsGetNextOrPrevDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>NEXT_NODUP</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsGetNextNoDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>PREV_NODUP</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dupsGetPrevNoDup</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Interpret duplicates for getNext and getPrev. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetNextOrPrev</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>retrieveNextNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for getNextDup and getPrevDup.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Move the cursor forward or backward by one record, and check the key prefix to detect going</color>
<color=#75715e>   * out of the bounds of the duplicate set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetNextOrPrevDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>currentKey</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>retrieveNextNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>swapCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for getNextNoDup.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Using a special comparator, search for first duplicate in the duplicate set following the</color>
<color=#75715e>   * one for the current key. For details see DupKeyData.NextNoDupComparator.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetNextNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>currentKey</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>removeData</color><color=#f8f8f2>(</color><color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>searchComparator</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>NextNoDupComparator</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparator</color><color=#f8f8f2>());</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>searchNoDups</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET_RANGE</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>searchComparator</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>swapCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for getPrevNoDup.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Move the cursor to the first duplicate in the duplicate set, then to the previous record. If</color>
<color=#75715e>   * this fails because all dups at the current position have been deleted, move the cursor backward</color>
<color=#75715e>   * to find the previous key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that we lock the first duplicate to enforce Serializable isolation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetPrevNoDup</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>currentKey</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>removeData</color><color=#f8f8f2>(</color><color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>searchNoDups</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET_RANGE</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>rangeConstraint</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>retrieveNextNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>swapCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>retrieveNextNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>haveSameDupPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>swapCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Does not interpret duplicates. Prevents phantoms. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>retrieveNextNoDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getModeParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>;</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>getModeParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>NEXT_DUP</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>PREV_DUP</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>NEXT_NODUP</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>getMode</color> <color=#f92672>=</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>PREV_NODUP</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>getMode</color> <color=#f92672>=</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>getMode</color> <color=#f92672>=</color> <color=#f8f8f2>getModeParam</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSerializableIsolation</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * No need to prevent phantoms.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>getMode</color> <color=#f92672>==</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color> <color=#f92672>||</color> <color=#f8f8f2>getMode</color> <color=#f92672>==</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>);</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>),</color>
                  <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>isForward</color><color=#f8f8f2>(),</color>
                  <color=#66d9ef>false</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>);</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Perform range locking to prevent phantoms and handle restarts.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Get a range lock for 'prev' operations. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>isForward</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>rangeLockCurrentPosition</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#75715e>/* Use a range lock if performing a 'next' operation. */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>isForward</color><color=#f8f8f2>());</color>

          <color=#75715e>/* Do not modify key/data params until SUCCESS. */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>tryKey</color> <color=#f92672>=</color> <color=#f8f8f2>cloneEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>tryData</color> <color=#f92672>=</color> <color=#f8f8f2>cloneEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>);</color>

          <color=#75715e>/* Perform the operation with a null rangeConstraint. */</color>
          <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>retrieveNextCheckForInsertion</color><color=#f8f8f2>(</color><color=#f8f8f2>tryKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>tryData</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>isForward</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* NEXT: lock the EOF node. */</color>
            <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockEof</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* Finally check rangeConstraint. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>checkRangeConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>tryKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Only overwrite key/data on SUCCESS, after all locking.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tryKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tryData</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// continue</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For 'prev' operations, upgrades to a range lock at the current position. If there are no</color>
<color=#75715e>   * records at the current position, get a range lock on the next record or, if not found, on the</color>
<color=#75715e>   * logical EOF node. Do not modify the current cursor position, use a separate cursor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>rangeLockCurrentPosition</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>tempKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>tempData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>tempKey</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>tempData</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>cloneCursor</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color><color=#f8f8f2>tempKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>tempData</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>tempKey</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>tempData</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>false</color> <color=#75715e>/*dirtyReadAll*/</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>true</color> <color=#75715e>/*forward*/</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>false</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>null</color> <color=#75715e>/*rangeConstraint*/</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkForInsertion</color><color=#f8f8f2>(</color><color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>dup</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>cloneCursor</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>);</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockEof</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Retrieves and checks for insertions, for serializable isolation. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>retrieveNextCheckForInsertion</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>GetMode</color> <color=#f8f8f2>getMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>getMode</color> <color=#f92672>==</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color> <color=#f92672>||</color> <color=#f8f8f2>getMode</color> <color=#f92672>==</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>);</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Force cloning of the cursor because the caller may need to</color>
<color=#75715e>       * restart the operation from the previous position.  In addition,</color>
<color=#75715e>       * checkForInsertion depends on having two CursorImpls for</color>
<color=#75715e>       * comparison, at the old and new position.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*forceClone*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>doEndMoveCursor</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
                <color=#66d9ef>false</color> <color=#75715e>/*dirtyReadAll*/</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>getMode</color><color=#f8f8f2>.</color><color=#a6e22e>isForward</color><color=#f8f8f2>(),</color>
                <color=#66d9ef>false</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color>
                <color=#66d9ef>null</color> <color=#75715e>/*rangeConstraint*/</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkForInsertion</color><color=#f8f8f2>(</color><color=#f8f8f2>getMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>dup</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>doEndMoveCursor</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doEndMoveCursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>skipInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxCount</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forward</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Force cloning of the cursor since we may need to restart</color>
<color=#75715e>         * the operation at the previous position.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color>
            <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*forceClone*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>forward</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxCount</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*rangeConstraint*/</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>getCurrentWithCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Retry if deletion occurs while unlatched. */</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>success</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method that does lockAndGetCurrent, with and without dups, using a CursorImpl. Does</color>
<color=#75715e>   * no setup or save/restore of cursor state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>getCurrentWithCursorImpl</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Performs search by key, data, or both. Prevents phantoms. */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>search</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>countOpStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>SET</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dupsGetSearchKey</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>SET_RANGE</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dupsGetSearchKeyRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>BOTH</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dupsGetSearchBoth</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>BOTH_RANGE</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dupsGetSearchBothRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>default</color><color=#f8f8f2>:</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color> <color=#f92672>==</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH_RANGE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>searchMode</color> <color=#f92672>=</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>searchNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>countOpStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incSearchOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incSearchFailOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Version of search that does not interpret duplicates. Used for replication stream replay.</color>
<color=#75715e>   * Prevents phantoms.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>searchForReplay</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>searchNoDups</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for getSearchKey operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Use key as prefix to find first duplicate using a range search. Compare result to prefix to</color>
<color=#75715e>   * see whether we went out of the bounds of the duplicate set, i.e., whether NOTFOUND should be</color>
<color=#75715e>   * returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Even if the user-provided "key" exists in the DB, the twoPartKey built here out of "key"</color>
<color=#75715e>   * compares < any of the BIN-slot keys that comprise the duplicates-set of "key". So there is no</color>
<color=#75715e>   * way to get an exact key match by a BTree search. Instead, we do a constrained range search: we</color>
<color=#75715e>   * forbid the cursor to advance past the duplicates-set of "key" by using an appropriate range</color>
<color=#75715e>   * constraint.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetSearchKey</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>makePrefixKey</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()));</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RangeConstraint</color> <color=#f8f8f2>savedRangeConstraint</color> <color=#f92672>=</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>searchNoDups</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET_RANGE</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>rangeConstraint</color> <color=#f92672>=</color> <color=#f8f8f2>savedRangeConstraint</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for getSearchKeyRange operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do range search for key prefix.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetSearchKeyRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>makePrefixKey</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()));</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>searchNoDups</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET_RANGE</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for getSearchBoth operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do exact search for combined key.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetSearchBoth</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>combine</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>searchNoDups</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Interpret duplicates for getSearchBothRange operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do range search for combined key. Compare result to prefix to see whether we went out of the</color>
<color=#75715e>   * bounds of the duplicate set, i.e., whether null should be returned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>dupsGetSearchBothRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>combine</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RangeConstraint</color> <color=#f8f8f2>savedRangeConstraint</color> <color=#f92672>=</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>searchNoDups</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET_RANGE</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>rangeConstraint</color> <color=#f92672>=</color> <color=#f8f8f2>savedRangeConstraint</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Does not interpret duplicates. Prevents phantoms. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>searchNoDups</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * searchMode cannot be BOTH_RANGE, because for non-dups DBs BOTH_RANGE</color>
<color=#75715e>     * is converted to BOTH, and for dup DBs BOTH_RANGE is converted to</color>
<color=#75715e>     * SET_RANGE.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color> <color=#f92672>!=</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH_RANGE</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSerializableIsolation</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color><color=#f8f8f2>.</color><color=#a6e22e>isExactSearch</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>searchRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// continue</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Perform range locking to prevent phantoms and handle restarts.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Do not use a range lock for the initial search, but</color>
<color=#75715e>           * switch to a range lock when advancing forward.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>searchLockType</color><color=#f8f8f2>;</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>advanceLockType</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>searchLockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>advanceLockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

          <color=#75715e>/* Do not modify key/data params until SUCCESS. */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>tryKey</color> <color=#f92672>=</color> <color=#f8f8f2>cloneEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>tryData</color> <color=#f92672>=</color> <color=#f8f8f2>cloneEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * If the searchMode is SET or BOTH (i.e., we are looking</color>
<color=#75715e>           * for an exact key match) we do a artificial range search</color>
<color=#75715e>           * to range lock the next key. If an exact match for the</color>
<color=#75715e>           * search key is not found, we still want to advance to the</color>
<color=#75715e>           * next slot in order to RANGE lock it, but contrary to a</color>
<color=#75715e>           * normal range scan, we want to return NOTFOUND to the</color>
<color=#75715e>           * caller and we want to consider this as an operation</color>
<color=#75715e>           * failure so that the position of the cursor won't change,</color>
<color=#75715e>           * even though we advance to the following slot in order</color>
<color=#75715e>           * to range lock it. We achieve this by passing true for</color>
<color=#75715e>           * the checkForExactKey parameter.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>searchRangeSerializable</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>tryKey</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>tryData</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>searchLockType</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>advanceLockType</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>searchMode</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tryKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tryData</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// continue</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Search for a "valid" BIN slot whose key is equal to the given "key". A slot is "valid" only if</color>
<color=#75715e>   * after locking it, neither its PD nor it KD flags are set. If no slot exists, return NOTFOUND.</color>
<color=#75715e>   * Otherwise, copy the key and the LN of the found slot into "key" and "data" respectively (if</color>
<color=#75715e>   * "key"/"data" request so) and return either NOTFOUND if searchMode == BOTH and "data" does not</color>
<color=#75715e>   * match the LN of the found slot, or SUCCESS otherwise.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: On return from this method no latches are held by this cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: If the method returns NOTFOUND or raises an exception, any non- transactional locks</color>
<color=#75715e>   * acquired by this method are released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: On SUCCESS, if this is a sticky cursor, any non-transactional locks held by this</color>
<color=#75715e>   * cursor before calling this method are released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: this method is never called when the desired isolation is "serializable", because in</color>
<color=#75715e>   * order to do next-slot-locking, a range search is required.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key It is used as the search key, as well as to receive the key of the BIN slot found by</color>
<color=#75715e>   *     this method, if any. If the DB contains duplicates, the key is in the "two-part-key" format</color>
<color=#75715e>   *     (see dbi/DupKeyData.java) so that it can be compared with the two-part keys stored in the</color>
<color=#75715e>   *     BTree (which contain both a primary key and a data portion). The search key itself may or</color>
<color=#75715e>   *     may not contain a data portion.</color>
<color=#75715e>   * @param data A DatabaseEntry to compare against the LN of the slot found by the search (if</color>
<color=#75715e>   *     searchMode == BOTH) as well as to receive the data of that LN. If the DB contains</color>
<color=#75715e>   *     duplicates, it is equal to NO_RETURN_DATA, because the LN will be emtpy (the full record is</color>
<color=#75715e>   *     contained in the key).</color>
<color=#75715e>   * @param searchMode Either SET or BOTH.</color>
<color=#75715e>   * @return NOTFOUND if (a) no valid slot exists with a key == the search key, or (b) searchMode ==</color>
<color=#75715e>   *     BOTH and "data" does not match the LN of the found slot. SUCCESS otherwise.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>searchExact</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color> <color=#f92672>==</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET</color> <color=#f92672>||</color> <color=#f8f8f2>searchMode</color> <color=#f92672>==</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>origData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dataRequested</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartialLength</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dirtyReadAll</color> <color=#f92672>=</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Search for a BIN slot whose key is == the search key. If such a</color>
<color=#75715e>       * slot is found, lock it and check whether it is valid.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataRequested</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The search found and locked a valid BIN slot whose key is</color>
<color=#75715e>       * equal to the search key. Copy into "data" the LN of this</color>
<color=#75715e>       * slot (if "data" requests so). Also copy into "key" the key of</color>
<color=#75715e>       * the found slot if a partial key comparator is used, since then</color>
<color=#75715e>       * it may be different than the given key.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>allowsKeyUpdates</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>key</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Check for data match, if asked so. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>searchMode</color> <color=#f92672>==</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>checkDataMatch</color><color=#f8f8f2>(</color><color=#f8f8f2>origData</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>().</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incBinDeltaGets</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Search for the 1st "valid" BIN slot whose key is in the range [K1, K2), where (a) K1 is a given</color>
<color=#75715e>   * key, (b) K2 is determined by this.rangeConstraint, or is +INFINITY if this.rangeConstraint ==</color>
<color=#75715e>   * null, and (c) a slot is "valid" only if after locking it, neither its PD nor its KD flags are</color>
<color=#75715e>   * set.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If such a slot is found, copy its key and its associated LN into "key" and "data"</color>
<color=#75715e>   * respectively (if "key"/"data" request so). Note that the fact that the slot is valid implies</color>
<color=#75715e>   * that it has been locked.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: On return from this method no latches are held by this cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: If the method returns NOTFOUND or raises an exception, any non- transactional locks</color>
<color=#75715e>   * acquired by this method are released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: On SUCCESS, if this is a sticky cursor, any non-transactional locks held by this</color>
<color=#75715e>   * cursor before calling this method are released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key It is used as the search key, as well as to receive the key of the BIN slot found by</color>
<color=#75715e>   *     this method, if any. If the DB contains duplicates, the key is in the "two-part-key" format</color>
<color=#75715e>   *     (see dbi/DupKeyData.java) so that it can be compared with the two-part keys stored in the</color>
<color=#75715e>   *     BTree (which contain both a primary key and a data portion). The search key itself may or</color>
<color=#75715e>   *     may not contain a data portion.</color>
<color=#75715e>   * @param data A DatabaseEntry to receive the data of the LN associated with the found slot, if</color>
<color=#75715e>   *     any. If the DB contains duplicates, it is equal to NO_RETURN_DATA, because the LN will be</color>
<color=#75715e>   *     empty (the full record is contained in the key).</color>
<color=#75715e>   * @param comparator Comparator to use to compare the search key against the BTree keys.</color>
<color=#75715e>   * @return NOTFOUND if no valid slot exists in the [K1, K2) range; SUCCESS otherwise.</color>
<color=#75715e>   * @throws RangeRestartException if the search should be restarted by the caller.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>searchRange</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>incStats</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dirtyReadAll</color> <color=#f92672>=</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Search for a BIN slot whose key is the max key <= K1. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>searchResult</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>searchRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>searchResult</color> <color=#f92672>&</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>FOUND</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* The tree is completely empty (has no nodes at all) */</color>
        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The search positioned dup on the BIN that should contain K1</color>
<color=#75715e>       * and this BIN is now latched. If the BIN does contain K1,</color>
<color=#75715e>       * dup.index points to K1's slot. Otherwise, dup.index points</color>
<color=#75715e>       * to the right-most slot whose key is < K1 (or dup.index is -1</color>
<color=#75715e>       * if K1 is < than all keys in the BIN). Note: if foundLast is</color>
<color=#75715e>       * true, dup is positioned on the very last slot of the BTree.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exactKeyMatch</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>searchResult</color> <color=#f92672>&</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>EXACT_KEY</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>foundLast</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>searchResult</color> <color=#f92672>&</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>FOUND_LAST</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If we found K1, lock the slot and check whether it is valid.</color>
<color=#75715e>       * If so, copy out its key and associated LN.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exactKeyMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If K1 is not in the BTree or its slot is not valid, advance</color>
<color=#75715e>       * dup until (a) the rangeConstraint (if any) returns false, or</color>
<color=#75715e>       * (b) there are no more slots, or (c) we find a valid slot. If</color>
<color=#75715e>       * (c), check whether the slot key is < K1. This can happen if</color>
<color=#75715e>       * K1 was not in the BTree (so dup is now on a key K0 < K1) and</color>
<color=#75715e>       * another txn inserted new keys < K1 while we were trying to</color>
<color=#75715e>       * advance dup. If so, a RestartException is thrown. Otherwise,</color>
<color=#75715e>       * the slot key and LN are copied into "key" and "data" (if</color>
<color=#75715e>       * "key"/"data" request so).</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>exactKeyMatch</color> <color=#f92672>||</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>foundLast</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>searchRangeAdvanceAndCheckKey</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Don't inc thput stats because the bin is released by</color>
<color=#75715e>           * searchRangeAdvanceAndCheckKey(). This is ok because</color>
<color=#75715e>           * searchRangeAdvanceAndCheckKey() will cause mutation</color>
<color=#75715e>           * to full bin anyway.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>incStats</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color> <color=#f92672>&&</color> <color=#f8f8f2>incStats</color> <color=#f92672>&&</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>().</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incBinDeltaGets</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Search for the 1st "valid" BIN slot whose key is in the range [K1, K2), where (a) K1 is a given</color>
<color=#75715e>   * key, (b) K2 is determined by this.rangeConstraint, or is +INFINITY if this.rangeConstraint ==</color>
<color=#75715e>   * null, and (c) a slot is "valid" only if after locking it, neither its PD nor its KD flags are</color>
<color=#75715e>   * set.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If such a slot is found, copy its key and it associated LN into "key" and "data"</color>
<color=#75715e>   * respectively (if "key"/"data" request so). Note that the fact that the slot is valid implies</color>
<color=#75715e>   * that it has been locked. If the key of the found slot is == K1, it is locked in a non-range</color>
<color=#75715e>   * lock. If the key is > K1, the slot is locked in a range lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If no slot is found, lock the EOF with a range lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: On return from this method no latches are held by this cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: This Cursor's locker should be a Txn, so there are no non- transactional locks to be</color>
<color=#75715e>   * released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key It is used as the search key, as well as to receive the key of the BIN slot found by</color>
<color=#75715e>   *     this method, if any. If the DB contains duplicates, the key is in the "two-part-key" format</color>
<color=#75715e>   *     (see dbi/DupKeyData.java) so that it can be compared with the two-part keys stored in the</color>
<color=#75715e>   *     BTree (which contain both a primary key and a data portion). The search key itself may or</color>
<color=#75715e>   *     may not contain a data portion.</color>
<color=#75715e>   * @param data A DatabaseEntry to receive the data of the LN associated with the found slot, if</color>
<color=#75715e>   *     any. If the DB contains duplicates, it is equal to NO_RETURN_DATA, because the LN will be</color>
<color=#75715e>   *     emtpy (the full record is contained in the key).</color>
<color=#75715e>   * @param searchLockType LockType to use for locking the slot if its key is == search key.</color>
<color=#75715e>   *     Normally, this is a READ or WRITE lock.</color>
<color=#75715e>   * @param advanceLockType LockType to use for locking the slot if its key is > search key.</color>
<color=#75715e>   *     Normally, this is a READ_RANGE or WRITE_RANGE lock.</color>
<color=#75715e>   * @param comparator Comparator to use to compare the search key against the BTree keys.</color>
<color=#75715e>   * @param searchMode If SET or BOTH, we are actually looking for an exact match on K1. If so and</color>
<color=#75715e>   *     K1 is not in the BTree, we want the cursor to advance temporarily to the next slot in order</color>
<color=#75715e>   *     to range-lock it, but then return NOTFOUND. NOTFOUND is returned also if K1 is found, but</color>
<color=#75715e>   *     searchMode is BOTH and the data associated with the K1 slot does not match the given data.</color>
<color=#75715e>   * @return NOTFOUND if no valid slot exists in the [K1, K2) range, or checkForExactKey == true and</color>
<color=#75715e>   *     the key of the found slot is > K1; SUCCESS otherwise.</color>
<color=#75715e>   * @throws RangeRestartException if the search should be restarted by the caller.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>searchRangeSerializable</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>searchLockType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>advanceLockType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SearchMode</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>incStats</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>exactSearch</color> <color=#f92672>=</color> <color=#f8f8f2>searchMode</color><color=#f8f8f2>.</color><color=#a6e22e>isExactSearch</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>keyChange</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>mustLockEOF</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>origData</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exactSearch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>origData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Search for a BIN slot whose key is the max key <= K1. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>searchResult</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>searchRange</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>searchResult</color> <color=#f92672>&</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>FOUND</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The search positioned dup on the BIN that should contain K1</color>
<color=#75715e>         * and this BIN is now latched. If the BIN does contain K1,</color>
<color=#75715e>         * dup.index points to K1's slot. Otherwise, dup.index points</color>
<color=#75715e>         * to the right-most slot whose key is < K1 (or dup.index is -1</color>
<color=#75715e>         * if K1 is < than all keys in the BIN). Note: if foundLast is</color>
<color=#75715e>         * true, dup is positioned on the very last slot of the BTree.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exactKeyMatch</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>searchResult</color> <color=#f92672>&</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>EXACT_KEY</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>foundLast</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>searchResult</color> <color=#f92672>&</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>FOUND_LAST</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If we found K1, lock the slot and check whether it is valid.</color>
<color=#75715e>         * If so, copy out its key and associated LN.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exactKeyMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>searchLockType</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>false</color> <color=#75715e>/*dirtyReadAll*/</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>true</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>false</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If K1 is not in the BTree or its slot is not valid, advance</color>
<color=#75715e>         * dup until (a) there are no more slots, or (b) we find a</color>
<color=#75715e>         * valid slot. If (b), check whether the slot key is < K1. This</color>
<color=#75715e>         * can happen if K1 was not in the BTree (so dup is now on a</color>
<color=#75715e>         * key K0 < K1) and another txn inserted new keys < K1 while we</color>
<color=#75715e>         * were trying to advance dup. If so, a RestartException is</color>
<color=#75715e>         * thrown. Otherwise, the slot key and LN are copied into "key"</color>
<color=#75715e>         * and "data" (if "key"/"data" request so).</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>exactKeyMatch</color> <color=#f92672>||</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>foundLast</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color>
                <color=#f8f8f2>searchRangeAdvanceAndCheckKey</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>dup</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>advanceLockType</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>false</color> <color=#75715e>/*dirtyReadAll*/</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>null</color> <color=#75715e>/*rangeConstraint*/</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>keyChange</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>incStats</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>mustLockEOF</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Consider this search op a failure if we are actually looking</color>
<color=#75715e>         * for an exact key match and we didn't find the search key.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>exactSearch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchMode</color> <color=#f92672>==</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>checkDataMatch</color><color=#f8f8f2>(</color><color=#f8f8f2>origData</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Finally check rangeConstraint. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>exactSearch</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>checkRangeConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* The tree is completely empty (has no nodes at all) */</color>
        <color=#f8f8f2>mustLockEOF</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color> <color=#f92672>&&</color> <color=#f8f8f2>incStats</color> <color=#f92672>&&</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>().</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incBinDeltaGets</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>endMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Lock the EOF node if no records follow the key.</color>
<color=#75715e>     *</color>
<color=#75715e>     * BUG ????? At this point no latches are held by this cursor, so</color>
<color=#75715e>     * another transaction can insert new slots at the end of the DB</color>
<color=#75715e>     * and then commit. I think the fix is to request the eof lock in</color>
<color=#75715e>     * non-blocking mode with the BIN latched and restart the search</color>
<color=#75715e>     * if the lock is denied.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mustLockEOF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockEof</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Helper method for searchRange and searchRangeSerializable</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws RangeRestartException if the search should be restarted by the</color>
<color=#75715e>   * caller.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>searchRangeAdvanceAndCheckKey</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>RangeConstraint</color> <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>comparator</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>origKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>nextKey</color> <color=#f92672>=</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nextKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>nextKey</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color>
            <color=#66d9ef>true</color> <color=#75715e>/*forward*/</color><color=#f8f8f2>,</color>
            <color=#66d9ef>true</color> <color=#75715e>/*isLatched*/</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>rangeConstraint</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check whether the dup.getNext() landed on slot whose key is < K1.</color>
<color=#75715e>     * This can happen if K1 was not in the BTree (so before dup.getNext()</color>
<color=#75715e>     * is called, dup is on a key K0 < K1) and another txn inserted new</color>
<color=#75715e>     * keys < K1 while we were trying to advance dup. Such an insertion is</color>
<color=#75715e>     * possible because if dup must move to the next BIN, it releases all</color>
<color=#75715e>     * latches for a while, so the inserter can come in, split the current</color>
<color=#75715e>     * BIN and insert its keys on the right split-sibling. Finally, dup</color>
<color=#75715e>     * moves to the right split-sibling and lands on a wrong slot.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>nextKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>origKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>origKey</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>origKey</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>origKey</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RangeRestartException</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LN</color><color=#f8f8f2>.</color><color=#a6e22e>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextKey</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For a non-duplicates database, the data must match exactly when getSearchBoth or</color>
<color=#75715e>   * getSearchBothRange is called.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkDataMatch</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data1</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>size1</color> <color=#f92672>=</color> <color=#f8f8f2>data1</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>size2</color> <color=#f92672>=</color> <color=#f8f8f2>data2</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size1</color> <color=#f92672>!=</color> <color=#f8f8f2>size2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareUnsignedBytes</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>data1</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data1</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>size1</color><color=#f8f8f2>,</color> <color=#f8f8f2>data2</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>data2</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>size2</color><color=#f8f8f2>)</color>
        <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts duplicates without parameter checking. No need to dup the cursor because we never change</color>
<color=#75715e>   * the position.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>countInternal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTxnSynchronizer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkTxnState</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>countHandleDups</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>countNoDups</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Count duplicates by skipping over the entries in the dup set key range. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>countHandleDups</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>currentKey</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>removeData</color><color=#f8f8f2>(</color><color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Move cursor to first key in this dup set. */</color>
      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>searchNoDups</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET_RANGE</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Skip over entries in the dup set. */</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*forward*/</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color> <color=#75715e>/*maxCount*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>rangeConstraint</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>></color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"count exceeded integer size: "</color> <color=#f92672>+</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** When there are no duplicates, the count is either 0 or 1, and is very cheap to determine. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>countNoDups</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>beginUseExistingCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color><color=#66d9ef>null</color> <color=#75715e>/*foundKey*/</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*foundData*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>endUseExistingCursor</color><color=#f8f8f2>();</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Estimates duplicate count without parameter checking. No need to dup the cursor because we</color>
<color=#75715e>   * never change the position.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>countEstimateInternal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>countEstimateHandleDups</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>countNoDups</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Estimate duplicate count using the end point positions. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>countEstimateHandleDups</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>currentKey</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentKey</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey</color> <color=#f92672>=</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>removeData</color><color=#f8f8f2>(</color><color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c1</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setPrefixConstraint</color><color=#f8f8f2>(</color><color=#f8f8f2>c1</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentKey</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Move cursor 1 to first key in this dup set. */</color>
      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>c1</color><color=#f8f8f2>.</color><color=#a6e22e>searchNoDups</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET_RANGE</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*comparator*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Move cursor 2 to first key in the following dup set. */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#f8f8f2>Cursor</color> <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>c1</color><color=#f8f8f2>.</color><color=#a6e22e>dup</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>c2</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>c2</color><color=#f8f8f2>.</color><color=#a6e22e>dupsGetNextNoDup</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>c2Inclusive</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>c2Inclusive</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>c2Inclusive</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

          <color=#75715e>/*</color>
<color=#75715e>           * There is no following dup set.  Go to the last record in</color>
<color=#75715e>           * the database.  If we land on a newly inserted dup set,</color>
<color=#75715e>           * go to the prev record until we find the last record in</color>
<color=#75715e>           * the original dup set.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color>
              <color=#f8f8f2>c2</color><color=#f8f8f2>.</color><color=#a6e22e>positionNoDups</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>false</color> <color=#75715e>/*first*/</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>haveSameDupPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color>
                <color=#f8f8f2>c2</color><color=#f8f8f2>.</color><color=#a6e22e>retrieveNextNoDups</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>twoPartKey</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>NO_RETURN_DATA</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>PREV</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Estimate the count between the two cursor positions. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>CountEstimator</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>c2</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>c2Inclusive</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the primary data for a primary key that was retrieved from a secondary DB via this</color>
<color=#75715e>   * secondary cursor ("this" may also be a regular Cursor in the role of a secondary cursor). This</color>
<color=#75715e>   * method is in the Cursor class, rather than in SecondaryCursor, to support joins with plain</color>
<color=#75715e>   * Cursors [#21258].</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a true status is returned by this method, the caller should return a successful result.</color>
<color=#75715e>   * When false is returned, the caller should treat this as a deleted record and either skip the</color>
<color=#75715e>   * record (in the case of position, search, and retrieveNext) or return failure/null (in the case</color>
<color=#75715e>   * of getCurrent). False can be returned only when read-uncommitted is used or the primary record</color>
<color=#75715e>   * has expired.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param priDb primary database as input.</color>
<color=#75715e>   * @param key secondary key as input.</color>
<color=#75715e>   * @param pKey key as input.</color>
<color=#75715e>   * @param data the data returned as output.</color>
<color=#75715e>   * @param lockMode the lock mode to use for the primary read; if null, use the default lock mode.</color>
<color=#75715e>   * @param secDirtyRead whether we used dirty-read for reading the secondary record. It is true if</color>
<color=#75715e>   *     the user's configured isolation mode (or lockMode param) is dirty-read, or we used</color>
<color=#75715e>   *     dirty-read for the secondary read to avoid deadlocks (this is done when the user's</color>
<color=#75715e>   *     isolation mode is READ_COMMITTED or REPEATABLE_READ).</color>
<color=#75715e>   * @param lockPrimaryOnly If false, then we are not using dirty-read for secondary deadlock</color>
<color=#75715e>   *     avoidance. If true, this secondary cursor's reference to the primary will be checked after</color>
<color=#75715e>   *     the primary record has been locked.</color>
<color=#75715e>   * @param verifyPrimary If true, we are only checking integrity and we read the primary even</color>
<color=#75715e>   *     though the data is not requested.</color>
<color=#75715e>   * @param locker is the Locker to use for accessing the primary record.</color>
<color=#75715e>   * @param secDb is the Database handle of the secondary database. Note that the dbHandle field may</color>
<color=#75715e>   *     be null and should not be used by this method.</color>
<color=#75715e>   * @param secAssoc is the SecondaryAssociation of the secondary database. It is used to check</color>
<color=#75715e>   *     whether the secondary database is still in the SecondaryAssociation before throwing</color>
<color=#75715e>   *     SecondaryIntegrityException. If not, we will not throw SecondaryIntegrityException.</color>
<color=#75715e>   * @return true if the primary was read successfully, or false in one of the following cases: +</color>
<color=#75715e>   *     When using read-uncommitted and the primary has been deleted. + When using read-uncommitted</color>
<color=#75715e>   *     and the primary has been updated and no longer contains the secondary key. + When the</color>
<color=#75715e>   *     primary record has expired (whether or not read-uncommitted is used).</color>
<color=#75715e>   * @throws SecondaryIntegrityException to indicate a corrupt secondary reference if the primary</color>
<color=#75715e>   *     record is deleted (as opposed to expired) and read-uncommitted is not used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>secDirtyRead</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verifyPrimary</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryAssociation</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>priDirtyRead</color> <color=#f92672>=</color> <color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>priDbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If we only lock the primary (and check the sec cursor), we must be</color>
<color=#75715e>     * using sec dirty-read for deadlock avoidance (whether or not the user</color>
<color=#75715e>     * requested dirty-read). Otherwise, we should be using sec dirty-read</color>
<color=#75715e>     * iff the user requested it.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>secDirtyRead</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>priDirtyRead</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>secDirtyRead</color> <color=#f92672>==</color> <color=#f8f8f2>priDirtyRead</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dataRequested</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartialLength</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * In most cases, there is no need to read the primary if no data is</color>
<color=#75715e>     * requested. In these case a lock on the secondary has been</color>
<color=#75715e>     * acquired (if the caller did not specify dirty-read).</color>
<color=#75715e>     *</color>
<color=#75715e>     * But for btree verification, we need to check whether the primary</color>
<color=#75715e>     * record still exists without requesting the data.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dataRequested</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>verifyPrimary</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ZERO_LENGTH_BYTE_ARRAY</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If partial data is requested along with read-uncommitted, then we</color>
<color=#75715e>     * must read all data in order to call the key creator below. [#14966]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>copyToPartialEntry</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priDirtyRead</color> <color=#f92672>&&</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>copyToPartialEntry</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do not release non-transactional locks when reading the primary</color>
<color=#75715e>     * cursor.  They are held until all locks for this operation are</color>
<color=#75715e>     * released by the secondary cursor [#15573].</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>priCursor</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>priDbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*retainNonTxnLocks*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isSecondaryCursor*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>priLockType</color> <color=#f92672>=</color> <color=#f8f8f2>getLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dirtyReadAll</color> <color=#f92672>=</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>LockStanding</color> <color=#f8f8f2>priLockStanding</color> <color=#f92672>=</color>
          <color=#f8f8f2>priCursor</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>priLockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>dirtyReadAll</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataRequested</color><color=#f8f8f2>);</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priLockStanding</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>priCursor</color><color=#f8f8f2>.</color><color=#a6e22e>revertLock</color><color=#f8f8f2>(</color><color=#f8f8f2>priLockStanding</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>priLockStanding</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>priCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priLockStanding</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>lockPrimaryOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ensureReferenceToPrimary</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>priLockType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>priCursor</color><color=#f8f8f2>.</color><color=#a6e22e>revertLock</color><color=#f8f8f2>(</color><color=#f8f8f2>priLockStanding</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>priLockStanding</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priLockStanding</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If using read-uncommitted and the primary is deleted, the</color>
<color=#75715e>         * primary must have been deleted after reading the secondary.</color>
<color=#75715e>         * We cannot verify this by checking if the secondary is</color>
<color=#75715e>         * deleted, because it may have been reinserted.  [#22603]</color>
<color=#75715e>         *</color>
<color=#75715e>         * If the secondary is expired (within TTL clock tolerance),</color>
<color=#75715e>         * then the record must have expired after the secondary read.</color>
<color=#75715e>         *</color>
<color=#75715e>         * In either case, return false to skip this record.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secDirtyRead</color> <color=#f92672>||</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isProbablyExpired</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * TODO: whether we need to do the following check for all</color>
<color=#75715e>         *       usage scenarios of readPrimaryAfterGet. If true, we</color>
<color=#75715e>         *       may get the SecondaryAssociation by the secDb.</color>
<color=#75715e>         *</color>
<color=#75715e>         * If secDb has been removed from SecondaryAssociation, the</color>
<color=#75715e>         * operations on the primary database after removing it</color>
<color=#75715e>         * may cause an inconsistency between the secondary record and</color>
<color=#75715e>         * the corresponding primary record. For this case, just return</color>
<color=#75715e>         * false to skip this record.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secAssoc</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>stillExist</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>db</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaries</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#f92672>==</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>stillExist</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>stillExist</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * When the primary is deleted, secondary keys are deleted</color>
<color=#75715e>         * first.  So if the above check fails, we know the secondary</color>
<color=#75715e>         * reference is corrupt.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>secondaryRefersToMissingPrimaryKey</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationTime</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If using read-uncommitted and the primary was found, check to</color>
<color=#75715e>       * see if primary was updated so that it no longer contains the</color>
<color=#75715e>       * secondary key.  If it has been, return false.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priDirtyRead</color> <color=#f92672>&&</color> <color=#f8f8f2>checkForPrimaryUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * When a partial entry was requested but we read all the data,</color>
<color=#75715e>       * copy the requested partial data to the caller's entry. [#14966]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>copyToPartialEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LN</color><color=#f8f8f2>.</color><color=#a6e22e>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>copyToPartialEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Copy primary record info to secondary cursor. */</color>
      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setPriInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>priCursor</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>priDbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incSearchOps</color><color=#f8f8f2>(</color><color=#f8f8f2>priDbImpl</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks whether this secondary cursor still refers to the primary key, and locks the secondary</color>
<color=#75715e>   * record if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is used for deadlock avoidance with secondary DBs. The initial secondary index read is</color>
<color=#75715e>   * done without locking. After the primary has been locked, we check here to insure that the</color>
<color=#75715e>   * primary/secondary relationship is still in place. There are two cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1. If the secondary DB has duplicates, the key contains the sec/pri relationship and the</color>
<color=#75715e>   * presence of the secondary record (that is not deleted) is sufficient to insure the sec/pri</color>
<color=#75715e>   * relationship.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>2. If the secondary DB does not allow duplicates, then the primary key (the data of the</color>
<color=#75715e>   * secondary record) must additionally be compared to the original search key. This detects the</color>
<color=#75715e>   * case where the secondary record was updated to refer to a different primary key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, this method locks the secondary record if it would expire within {@link</color>
<color=#75715e>   * EnvironmentParams#ENV_TTL_MAX_TXN_TIME}. This is needed to support repeatable-read. The lock</color>
<color=#75715e>   * prevents expiration of the secondary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>ensureReferenceToPrimary</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>matchPriKey</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>lockType</color> <color=#f92672>!=</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * To check whether the reference is still valid, because the primary</color>
<color=#75715e>     * is locked and the secondary can only be deleted after locking the</color>
<color=#75715e>     * primary, it is sufficient to check whether the secondary PD and KD</color>
<color=#75715e>     * flags are set. There is no need to lock the secondary, because it is</color>
<color=#75715e>     * protected from changes by the lock on the primary.</color>
<color=#75715e>     *</color>
<color=#75715e>     * If this technique were used with serializable isolation then</color>
<color=#75715e>     * checking the PD/KD flags wouldn't be sufficient -- locking the</color>
<color=#75715e>     * secondary would be necessary to prevent phantoms. With serializable</color>
<color=#75715e>     * isolation, a lock on the secondary record is acquired up front by</color>
<color=#75715e>     * SecondaryCursor.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>latchBIN</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBIN</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getIndex</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Additionally, lock the secondary if it expires soon. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color> <color=#f92672>=</color>
          <color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>expirationToSystemTime</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>),</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isExpirationInHours</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>expiresWithin</color><color=#f8f8f2>(</color><color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTtlMaxTxnTime</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockLN</color><color=#f8f8f2>(</color><color=#f8f8f2>lockType</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If there are no duplicates, check the secondary data (primary key).</color>
<color=#75715e>     * No need to actually lock (use LockType.NONE) since the primary lock</color>
<color=#75715e>     * protects the secondary from changes.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>hasDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrent</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>secData</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>secData</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>matchPriKey</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks for a secondary corruption caused by a primary record update during a read-uncommitted</color>
<color=#75715e>   * read. Checking in this method is not possible because there is no secondary key creator</color>
<color=#75715e>   * available. It is overridden by SecondaryCursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is in the Cursor class, rather than in SecondaryCursor, to support joins with</color>
<color=#75715e>   * plain Cursors [#21258].</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>checkForPrimaryUpdate</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the two keys have the same prefix.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param twoPartKey1 combined key with zero offset and size equal to the data array length.</color>
<color=#75715e>   * @param keyBytes2 combined key byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>haveSameDupPrefix</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>twoPartKey1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyBytes2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>twoPartKey1</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>twoPartKey1</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>().</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#f8f8f2>twoPartKey1</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>compareMainKey</color><color=#f8f8f2>(</color><color=#f8f8f2>twoPartKey1</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>keyBytes2</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparator</color><color=#f8f8f2>())</color>
        <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called to start an operation that potentially moves the cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is not initialized already, the method simply returns this.cursorImpl. This</color>
<color=#75715e>   * avoids the overhead of cloning this.cursorImpl when this is a sticky cursor or forceClone is</color>
<color=#75715e>   * true.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is initialized, the actions taken here depend on whether cloning is required</color>
<color=#75715e>   * (either because this is a sticky cursor or because forceClone is true).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>(a) No cloning: - If same position is true, (1) the current LN (if any) is evicted, if the</color>
<color=#75715e>   * cachemode so dictates, and (2) non-txn locks are released, if retainNonTxnLocks is false.</color>
<color=#75715e>   * this.cursorImpl remains registered at its current BIN. - If same position is false,</color>
<color=#75715e>   * this.cursorImpl is "reset", i.e., (1) it is deregistered from its current position, (2)</color>
<color=#75715e>   * cachemode eviction is performed, (3) non-txn locks are released, if retainNonTxnLocks is false,</color>
<color=#75715e>   * and (4) this.cursorImpl is marked uninitialized. - this.cursorImpl is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: In cases where only non-transactional locks are held, releasing them before the move</color>
<color=#75715e>   * prevents more than one lock from being held during a cursor move, which helps to avoid</color>
<color=#75715e>   * deadlocks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>(b) Cloning: - this.cursorImpl is cloned. - If same position is true, the clone is</color>
<color=#75715e>   * registered at the same position as this.cursorImpl. - If same position is false, the clone is</color>
<color=#75715e>   * marked uninitialized. - If this.cursorImpl uses a locker that may acquire non-txn locks and</color>
<color=#75715e>   * retainNonTxnLocks is false, the clone cursorImpl gets a new locker of the same kind as</color>
<color=#75715e>   * this.cursorImpl. This allows for the non-txn locks acquired by the clone to be released</color>
<color=#75715e>   * independently from the non-txn locks of this.cursorImpl. - The clone cursorImpl is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In all cases, critical eviction is performed, if necessary, before the method returns. This</color>
<color=#75715e>   * is done by CursorImpl.cloneCursor()/reset(), or is done here explicitly when the cursor is not</color>
<color=#75715e>   * cloned or reset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In all cases, the cursor returned must be passed to endMoveCursor() to close the correct</color>
<color=#75715e>   * cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param samePosition If true, this cursor's position is used for the new cursor and addCursor is</color>
<color=#75715e>   *     called on the new cursor; if non-sticky, this cursor's position is unchanged. If false, the</color>
<color=#75715e>   *     new cursor will be uninitialized; if non-sticky, this cursor is reset.</color>
<color=#75715e>   * @param forceClone is true to clone an initialized cursor even if non-sticky is configured. Used</color>
<color=#75715e>   *     when cloning is needed to support internal algorithms, namely when the algorithm may</color>
<color=#75715e>   *     restart the operation and samePosition is true.</color>
<color=#75715e>   * @see CursorImpl#performCacheModeEviction for a description of how the cache mode is used. This</color>
<color=#75715e>   *     method ensures that the correct cache mode is used before each operation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>CursorImpl</color> <color=#a6e22e>beginMoveCursor</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>samePosition</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forceClone</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * It don't make sense to force cloning if the new cursor will be</color>
<color=#75715e>     * uninitialized.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>forceClone</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>samePosition</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Must set cache mode before calling criticalEviction or reset. */</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>cacheMode</color> <color=#f8f8f2>:</color> <color=#f8f8f2>defaultCacheMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isNotInitialized</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>criticalEviction</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nonSticky</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>forceClone</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>samePosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>beforeNonStickyOp</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>cloneCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>samePosition</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>setClosingLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dup</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>CursorImpl</color> <color=#a6e22e>beginMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>samePosition</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>beginMoveCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>samePosition</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*forceClone*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called to end an operation that potentially moves the cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The actions taken here depend on whether cloning was done in beginMoveCursor() or not:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>(a) No cloning: - If the op is successfull, only critical eviction is done. - If the op is</color>
<color=#75715e>   * not successfull, this.cursorImpl is "reset", i.e., (1) it is deregistered from its current</color>
<color=#75715e>   * position, (2) cachemode eviction is performed, (3) non-txn locks are released, if</color>
<color=#75715e>   * retainNonTxnLocks is false, and (4) this.cursorImpl is marked unintialized.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>(b) Cloning: - If the op is successful, this.cursorImpl is closed and then it is set to the</color>
<color=#75715e>   * clone cursorImpl. - If the op is not successfull, the clone cursorImpl is closed. - In either</color>
<color=#75715e>   * case, closing a cursorImpl involves deregistering it from its current position, performing</color>
<color=#75715e>   * cachemode eviction, releasing its non-transactional locks and closing its locker, if</color>
<color=#75715e>   * retainNonTxnLocks is false and the locker is not a Txn, and finally marking the cursorImpl as</color>
<color=#75715e>   * closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In all cases, critical eviction is performed after each cursor operation. This is done by</color>
<color=#75715e>   * CursorImpl.reset() and close(), or is done here explicitly when the cursor is not cloned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>endMoveCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>dup</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>clearClosingLocker</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dup</color> <color=#f92672>==</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>afterNonStickyOp</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>dup</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>cursorImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dup</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called to start an operation that does not move the cursor, and therefore does not clone the</color>
<color=#75715e>   * cursor. Either beginUseExistingCursor / endUseExistingCursor or beginMoveCursor / endMoveCursor</color>
<color=#75715e>   * must be used for each operation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>beginUseExistingCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Must set cache mode before calling criticalEviction. */</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>cacheMode</color> <color=#f8f8f2>:</color> <color=#f8f8f2>defaultCacheMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>criticalEviction</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called to end an operation that does not move the cursor. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>endUseExistingCursor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>criticalEviction</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Swaps CursorImpl of this cursor and the other cursor given. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>swapCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>Cursor</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>otherImpl</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color> <color=#f92672>=</color> <color=#f8f8f2>otherImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>advanceCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>advanceCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>LockType</color> <color=#a6e22e>getLockType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>rangeLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>rangeLock</color> <color=#f92672>?</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color> <color=#f8f8f2>:</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>READ</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>rangeLock</color> <color=#f92672>?</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE</color> <color=#f8f8f2>:</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_COMMITTED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>lockMode</color>
              <color=#f92672>+</color> <color=#e6db74>" not allowed with Cursor methods, "</color>
              <color=#f92672>+</color> <color=#e6db74>"use CursorConfig.setReadCommitted instead."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the given lock mode will cause a read-uncommitted when used with this cursor,</color>
<color=#75715e>   * taking into account the default cursor configuration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color>
        <color=#f92672>||</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color>
        <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>readUncommittedDefault</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>)));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isSerializableIsolation</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>serializableIsolationDefault</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkUpdatesAllowed</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ExpirationInfo</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkUpdatesAllowed</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>expInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>expInfo</color><color=#f8f8f2>.</color><color=#a6e22e>expiration</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Throws IllegalStateException if TTL is not available. */</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>checkTTLAvailable</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkUpdatesAllowed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>updateOperationsProhibited</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>updatesProhibitedException</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbType</color><color=#f8f8f2>().</color><color=#a6e22e>isInternal</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>diskLimitViolation</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>diskLimitViolation</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DiskLimitException</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>(),</color> <color=#f8f8f2>diskLimitViolation</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>UnsupportedOperationException</color> <color=#a6e22e>updatesProhibitedException</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>str</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#ae81ff>200</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Write operation is not allowed because "</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Be sure to keep this logic in sync with init(). */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"the Transaction is configured as read-only."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>isWritable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"the Database is configured as read-only."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"a Transaction was not supplied to openCursor "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"and the Database is transactional."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isLocalWrite</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"the Database is replicated and Transaction is "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"configured as local-write."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isLocalWrite</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"the Database is not replicated and the "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Transaction is not configured as local-write."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks the cursor state. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>mustBeInitialized</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkCursorState</color><color=#f8f8f2>(</color><color=#f8f8f2>mustBeInitialized</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*mustNotBeInitialized*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks the environment, DB handle, and cursor state. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>checkOpenAndState</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>mustBeInitialized</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#f8f8f2>mustBeInitialized</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks the environment and DB handle. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>checkOpen</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbHandle</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws EnvironmentFailureException if the underlying environment is invalid. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>checkEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkEnv</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an object used for synchronizing transactions that are used in multiple threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a transactional locker, the Transaction is returned to prevent concurrent access using</color>
<color=#75715e>   * this transaction from multiple threads. The Transaction.commit and abort methods are</color>
<color=#75715e>   * synchronized so they do not run concurrently with operations using the Transaction. Note that</color>
<color=#75715e>   * the Txn cannot be used for synchronization because locking order is BIN first, then Txn.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a non-transactional locker, 'this' is returned because no special blocking is needed.</color>
<color=#75715e>   * Other mechanisms are used to prevent non-transactional usage access by multiple threads (see</color>
<color=#75715e>   * ThreadLocker). In the future we may wish to use the getTxnSynchronizer for synchronizing</color>
<color=#75715e>   * non-transactional access as well; however, note that a new locker is created for each</color>
<color=#75715e>   * operation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#a6e22e>getTxnSynchronizer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>transaction</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>transaction</color> <color=#f8f8f2>:</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkTxnState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transaction</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transaction</color><color=#f8f8f2>.</color><color=#a6e22e>checkOpen</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transaction</color><color=#f8f8f2>.</color><color=#a6e22e>getTxn</color><color=#f8f8f2>().</color><color=#a6e22e>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*calledByAbort*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trace</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>getOrPutType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getOrPutType</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>traceCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" key="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" data="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lockMode="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trace</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>traceCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" key="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" data="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lockMode="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trace</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>traceCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lockMode="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>traceCursorImpl</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" locker="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" bin="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" idx="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getIndex</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Clone entry contents in a new returned entry. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>DatabaseEntry</color> <color=#a6e22e>cloneEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>from</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>to</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>to</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Copy entry contents to another entry. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>to</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>to</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getPartialOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getPartialLength</color><color=#f8f8f2>(),</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getPartial</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>to</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>