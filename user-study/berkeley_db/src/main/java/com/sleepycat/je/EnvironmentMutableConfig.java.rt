<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.ConfigParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Enumeration</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Properties</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Specifies the environment attributes that may be changed after the environment has been opened.</color>
<color=#75715e> * EnvironmentMutableConfig is a parameter to {@link Environment#setMutableConfig} and is returned</color>
<color=#75715e> * by {@link Environment#getMutableConfig}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There are two types of mutable environment properties: per-environment handle properties, and</color>
<color=#75715e> * environment wide properties.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Per-Environment Handle Properties</h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Per-environment handle properties apply only to a single Environment instance. For example, to</color>
<color=#75715e> * change the default transaction commit behavior for a single environment handle, do this:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     // Specify no-sync behavior for a given handle.</color>
<color=#75715e> *     EnvironmentMutableConfig mutableConfig = env.getMutableConfig();</color>
<color=#75715e> *     mutableConfig.setDurability(Durability.COMMIT_NO_SYNC);</color>
<color=#75715e> *     env.setMutableConfig(mutableConfig);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The per-environment handle properties are listed below. These properties are accessed using</color>
<color=#75715e> * the setter and getter methods listed, as shown in the example above.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #setDurability}, {@link #getDurability}</color>
<color=#75715e> *   <li>{@link #setTxnNoSync}, {@link #getTxnNoSync} <em>deprecated</em></color>
<color=#75715e> *   <li>{@link #setTxnWriteNoSync}, {@link #getTxnWriteNoSync} <em>deprecated</em></color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Environment-Wide Mutable Properties</h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Environment-wide mutable properties are those that can be changed for an environment as a</color>
<color=#75715e> * whole, irrespective of which environment instance (for the same physical environment) is used.</color>
<color=#75715e> * For example, to stop the cleaner daemon thread, do this:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     // Stop the cleaner daemon threads for the environment.</color>
<color=#75715e> *     EnvironmentMutableConfig mutableConfig = env.getMutableConfig();</color>
<color=#75715e> *     mutableConfig.setConfigParam(EnvironmentConfig.ENV_RUN_CLEANER, "false");</color>
<color=#75715e> *     env.setMutableConfig(mutableConfig);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The environment-wide mutable properties are documented as such for each EnvironmentConfig</color>
<color=#75715e> * String constant.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Getting the Current Environment Properties</h4></color>
<color=#75715e> *</color>
<color=#75715e> * To get the current "live" properties of an environment after constructing it or changing its</color>
<color=#75715e> * properties, you must call {@link Environment#getConfig} or {@link Environment#getMutableConfig}.</color>
<color=#75715e> * The original EnvironmentConfig or EnvironmentMutableConfig object used to set the properties is</color>
<color=#75715e> * not kept up to date as properties are changed, and does not reflect property validation or</color>
<color=#75715e> * properties that are computed.</color>
<color=#75715e> *</color>
<color=#75715e> * @see EnvironmentConfig</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EnvironmentMutableConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Change copyHandlePropsTo and Environment.copyToHandleConfig when adding</color>
<color=#75715e>   * fields here.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>txnNoSync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>txnWriteNoSync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Cache size is a category of property that is calculated within the environment. It is only</color>
<color=#75715e>   * supplied when returning the cache size to the application and never used internally; internal</color>
<color=#75715e>   * code directly checks with the MemoryBudget class;</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>cacheSize</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>offHeapCacheSize</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Note that in the implementation we choose not to extend Properties in order to keep the</color>
<color=#75715e>   * configuration type safe.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>

  <color=#75715e>/** For unit testing, to prevent loading of je.properties. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>loadPropertyFile</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Internal boolean that says whether or not to validate params. Setting it to false means that</color>
<color=#75715e>   * parameter value validatation won't be performed during setVal() calls. Only should be set to</color>
<color=#75715e>   * false by unit tests using DbInternal.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>transient</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateParams</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>ExceptionListener</color> <color=#f8f8f2>exceptionListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An instance created using the default constructor is initialized with the system's default</color>
<color=#75715e>   * settings.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>EnvironmentMutableConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used by EnvironmentConfig to construct from properties. */</color>
  <color=#f8f8f2>EnvironmentMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>properties</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>validateProperties</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>properties</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// isRepConfigInstance</color>
        <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#75715e>/* For safety, copy the passed in properties. */</color>
    <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>putAll</color><color=#f8f8f2>(</color><color=#f8f8f2>properties</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the database environment for asynchronous transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param noSync If true, do not write or synchronously flush the log on transaction commit. This</color>
<color=#75715e>   *     means that transactions exhibit the ACI (Atomicity, Consistency, and Isolation) properties,</color>
<color=#75715e>   *     but not D (Durability); that is, database integrity is maintained, but if the JVM or</color>
<color=#75715e>   *     operating system fails, it is possible some number of the most recently committed</color>
<color=#75715e>   *     transactions may be undone during recovery. The number of transactions at risk is governed</color>
<color=#75715e>   *     by how many updates fit into a log buffer, how often the operating system flushes dirty</color>
<color=#75715e>   *     buffers to disk, and how often the database environment is checkpointed.</color>
<color=#75715e>   *     <p>This attribute is false by default for this class and for the database environment.</color>
<color=#75715e>   * @deprecated replaced by {@link #setDurability}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setTxnNoSync</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setTxnNoSyncVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>noSync</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTxnNoSyncVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>.</color><color=#a6e22e>checkMixedMode</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnWriteNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>getDurability</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>txnNoSync</color> <color=#f92672>=</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the database environment is configured for asynchronous transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the database environment is configured for asynchronous transactions.</color>
<color=#75715e>   * @deprecated replaced by {@link #getDurability}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getTxnNoSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnNoSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the database environment for transactions which write but do not flush the log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param writeNoSync If true, write but do not synchronously flush the log on transaction commit.</color>
<color=#75715e>   *     This means that transactions exhibit the ACI (Atomicity, Consistency, and Isolation)</color>
<color=#75715e>   *     properties, but not D (Durability); that is, database integrity is maintained, but if the</color>
<color=#75715e>   *     operating system fails, it is possible some number of the most recently committed</color>
<color=#75715e>   *     transactions may be undone during recovery. The number of transactions at risk is governed</color>
<color=#75715e>   *     by how often the operating system flushes dirty buffers to disk, and how often the database</color>
<color=#75715e>   *     environment is checkpointed.</color>
<color=#75715e>   *     <p>The motivation for this attribute is to provide a transaction that has more durability</color>
<color=#75715e>   *     than asynchronous (nosync) transactions, but has higher performance than synchronous</color>
<color=#75715e>   *     transactions.</color>
<color=#75715e>   *     <p>This attribute is false by default for this class and for the database environment.</color>
<color=#75715e>   * @deprecated replaced by {@link #setDurability}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setTxnWriteNoSync</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setTxnWriteNoSyncVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>writeNoSync</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTxnWriteNoSyncVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>.</color><color=#a6e22e>checkMixedMode</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>getDurability</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>txnWriteNoSync</color> <color=#f92672>=</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the database environment is configured for transactions which write but do not</color>
<color=#75715e>   * flush the log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the database environment is configured for transactions which write but do not</color>
<color=#75715e>   *     flush the log.</color>
<color=#75715e>   * @deprecated replaced by {@link #getDurability}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getTxnWriteNoSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnWriteNoSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method for setting {@link EnvironmentConfig#TXN_DURABILITY}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param durability the new durability definition</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @see Durability</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setDurability</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setDurabilityVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>durability</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDurabilityVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>.</color><color=#a6e22e>checkMixedMode</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnWriteNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>durability</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>durability</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>JE_DURABILITY</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setVal</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>JE_DURABILITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>durability</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method for setting {@link EnvironmentConfig#TXN_DURABILITY}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the durability setting currently associated with this config.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Durability</color> <color=#a6e22e>getDurability</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>JE_DURABILITY</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for setting {@link EnvironmentConfig#MAX_MEMORY}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param totalBytes The memory available to the database system, in bytes.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @see EnvironmentConfig#MAX_MEMORY</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setCacheSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>totalBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setCacheSizeVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>totalBytes</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCacheSizeVoid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>totalBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_MEMORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>totalBytes</color><color=#f8f8f2>),</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the memory available to the database system, in bytes. A valid value is only available</color>
<color=#75715e>   * if this EnvironmentConfig object has been returned from Environment.getConfig().</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The memory available to the database system, in bytes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCacheSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * CacheSize is filled in from the EnvironmentImpl by way of</color>
<color=#75715e>     * fillInEnvironmentGeneratedProps.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for setting {@link EnvironmentConfig#MAX_MEMORY_PERCENT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param percent The percent of JVM memory to allocate to the JE cache.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @see EnvironmentConfig#MAX_MEMORY_PERCENT</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setCachePercent</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>percent</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setCachePercentVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>percent</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCachePercentVoid</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>percent</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_MEMORY_PERCENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>percent</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for getting {@link EnvironmentConfig#MAX_MEMORY_PERCENT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the percentage value used in the JE cache size calculation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getCachePercent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_MEMORY_PERCENT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A convenience method for setting {@link EnvironmentConfig#MAX_OFF_HEAP_MEMORY}. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setOffHeapCacheSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>totalBytes</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setOffHeapCacheSizeVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>totalBytes</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOffHeapCacheSizeVoid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>totalBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_OFF_HEAP_MEMORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>totalBytes</color><color=#f8f8f2>),</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A convenience method for getting {@link EnvironmentConfig#MAX_OFF_HEAP_MEMORY}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapCacheSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * CacheSize is filled in from the EnvironmentImpl by way of</color>
<color=#75715e>     * fillInEnvironmentGeneratedProps.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapCacheSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for setting {@link EnvironmentConfig#MAX_DISK}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param totalBytes is an upper limit on the number of bytes used for data storage, or zero if no</color>
<color=#75715e>   *     limit is desired.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @see EnvironmentConfig#MAX_DISK</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setMaxDisk</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>totalBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setMaxDiskVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>totalBytes</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaxDiskVoid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>totalBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_DISK</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>totalBytes</color><color=#f8f8f2>),</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for getting {@link EnvironmentConfig#MAX_DISK}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the upper limit on the number of bytes used for data storage, or zero if no limit is</color>
<color=#75715e>   *     set.</color>
<color=#75715e>   * @see EnvironmentConfig#MAX_DISK</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getMaxDisk</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLongVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_DISK</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the exception listener for an Environment. The listener is called when a daemon thread</color>
<color=#75715e>   * throws an exception, in order to provide a notification mechanism for these otherwise</color>
<color=#75715e>   * asynchronous exceptions. Daemon thread exceptions are also printed through stderr.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Not all daemon exceptions are fatal, and the application bears responsibility for choosing</color>
<color=#75715e>   * how to respond to the notification. Since exceptions may repeat, the application should also</color>
<color=#75715e>   * choose how to handle a spate of exceptions. For example, the application may choose to act upon</color>
<color=#75715e>   * each notification, or it may choose to batch up its responses by implementing the listener so</color>
<color=#75715e>   * it stores exceptions, and only acts when a certain number have been received.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param exceptionListener the callback to be executed when an exception occurs.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setExceptionListener</color><color=#f8f8f2>(</color><color=#f8f8f2>ExceptionListener</color> <color=#f8f8f2>exceptionListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setExceptionListenerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>exceptionListener</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setExceptionListenerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>ExceptionListener</color> <color=#f8f8f2>exceptionListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionListener</color> <color=#f92672>=</color> <color=#f8f8f2>exceptionListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the exception listener, if set. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ExceptionListener</color> <color=#a6e22e>getExceptionListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>exceptionListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the default {@code CacheMode} used for operations performed in this environment. The</color>
<color=#75715e>   * default cache mode may be overridden on a per-database basis using {@link</color>
<color=#75715e>   * DatabaseConfig#setCacheMode}, and on a per-record or per-operation basis using {@link</color>
<color=#75715e>   * Cursor#setCacheMode}, {@link ReadOptions#setCacheMode(CacheMode)} or {@link</color>
<color=#75715e>   * WriteOptions#setCacheMode(CacheMode)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cacheMode is the default {@code CacheMode} used for operations performed in this</color>
<color=#75715e>   *     environment. If {@code null} is specified, {@link CacheMode#DEFAULT} will be used.</color>
<color=#75715e>   * @see CacheMode for further details.</color>
<color=#75715e>   * @since 4.0.97</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setCacheModeVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCacheModeVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the default {@code CacheMode} used for operations performed in this environment, or</color>
<color=#75715e>   * null if {@link CacheMode#DEFAULT} is used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the default {@code CacheMode} used for operations performed on this database, or null</color>
<color=#75715e>   *     if {@link CacheMode#DEFAULT} is used.</color>
<color=#75715e>   * @see #setCacheMode</color>
<color=#75715e>   * @since 4.0.97</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CacheMode</color> <color=#a6e22e>getCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set this configuration parameter. First validate the value specified for the configuration</color>
<color=#75715e>   * parameter; if it is valid, the value is set in the configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param paramName the configuration parameter name, one of the String constants in this class</color>
<color=#75715e>   * @param value The configuration value</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @throws IllegalArgumentException if the paramName or value is invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>value</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>/* require mutability. */</color>
        <color=#f8f8f2>validateParams</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/* forReplication */</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color> <color=#75715e>/* verifyForReplication */</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the value for this configuration parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param paramName a valid configuration parameter, one of the String constants in this class.</color>
<color=#75715e>   * @return the configuration value.</color>
<color=#75715e>   * @throws IllegalArgumentException if the paramName is invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden For internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isConfigParamSet</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Helpers</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setValidateParams</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>validateParams</color> <color=#f92672>=</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Used by unit tests. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getValidateParams</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks that the immutable values in the environment config used to open an environment match</color>
<color=#75715e>   * those in the config object saved by the underlying shared EnvironmentImpl.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param handleConfigProps are the config property values that were specified by configuration</color>
<color=#75715e>   *     object from the Environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>checkImmutablePropsForEquality</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>handleConfigProps</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>param</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMutable</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isForReplication</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>paramVal</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>useParamVal</color> <color=#f92672>=</color> <color=#f8f8f2>handleConfigProps</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>paramVal</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>paramVal</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>useParamVal</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>useParamVal</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>paramName</color>
                  <color=#f92672>+</color> <color=#e6db74>" is set to "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>useParamVal</color>
                  <color=#f92672>+</color> <color=#e6db74>" in the config parameter"</color>
                  <color=#f92672>+</color> <color=#e6db74>" which is incompatible"</color>
                  <color=#f92672>+</color> <color=#e6db74>" with the value of "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>paramVal</color>
                  <color=#f92672>+</color> <color=#e6db74>" in the"</color>
                  <color=#f92672>+</color> <color=#e6db74>" underlying environment"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only. Overrides Object.clone() to clone all properties, used by this</color>
<color=#75715e>   *     class and EnvironmentConfig.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentMutableConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>copy</color><color=#f8f8f2>.</color><color=#a6e22e>props</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>)</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>willNeverOccur</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used by Environment to create a copy of the application supplied configuration. Done this way</color>
<color=#75715e>   * to provide non-public cloning.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>cloneMutableConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#f8f8f2>clone</color><color=#f8f8f2>();</color>
    <color=#75715e>/* Remove all immutable properties. */</color>
    <color=#f8f8f2>copy</color><color=#f8f8f2>.</color><color=#a6e22e>clearImmutableProps</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Copies the per-handle properties of this object to the given config object. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copyHandlePropsTo</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>txnNoSync</color> <color=#f92672>=</color> <color=#f8f8f2>txnNoSync</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>txnWriteNoSync</color> <color=#f92672>=</color> <color=#f8f8f2>txnWriteNoSync</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>setDurability</color><color=#f8f8f2>(</color><color=#f8f8f2>getDurability</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Copies all mutable props to the given config object. Unchecked suppress here because Properties</color>
<color=#75715e>   * don't play well with generics in Java 1.5</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copyMutablePropsTo</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>toConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Properties</color> <color=#f8f8f2>toProps</color> <color=#f92672>=</color> <color=#f8f8f2>toConfig</color><color=#f8f8f2>.</color><color=#a6e22e>props</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Enumeration</color> <color=#f8f8f2>propNames</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>propertyNames</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>propNames</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreElements</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propNames</color><color=#f8f8f2>.</color><color=#a6e22e>nextElement</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>param</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMutable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>newVal</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>toProps</color><color=#f8f8f2>.</color><color=#a6e22e>setProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newVal</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>toConfig</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionListener</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionListener</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>toConfig</color><color=#f8f8f2>.</color><color=#a6e22e>cacheMode</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cacheMode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Fills in the properties calculated by the environment to the given config object. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>fillInEnvironmentGeneratedProps</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cacheSize</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>offHeapCacheSize</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes all immutable props. Unchecked suppress here because Properties don't play well with</color>
<color=#75715e>   * generics in Java 1.5</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clearImmutableProps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Enumeration</color> <color=#f8f8f2>propNames</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>propertyNames</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>propNames</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreElements</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propNames</color><color=#f8f8f2>.</color><color=#a6e22e>nextElement</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>param</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMutable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>Properties</color> <color=#a6e22e>getProps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent loading of je.properties. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setLoadPropertyFile</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>loadPropertyFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>loadPropertyFile</color> <color=#f92672>=</color> <color=#f8f8f2>loadPropertyFile</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent loading of je.properties. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getLoadPropertyFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>loadPropertyFile</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Testing support</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumExplicitlySetParams</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Display configuration values. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>" cacheSize="</color>
        <color=#f92672>+</color> <color=#f8f8f2>cacheSize</color>
        <color=#f92672>+</color> <color=#e6db74>" offHeapCacheSize="</color>
        <color=#f92672>+</color> <color=#f8f8f2>offHeapCacheSize</color>
        <color=#f92672>+</color> <color=#e6db74>" cacheMode="</color>
        <color=#f92672>+</color> <color=#f8f8f2>cacheMode</color>
        <color=#f92672>+</color> <color=#e6db74>" txnNoSync="</color>
        <color=#f92672>+</color> <color=#f8f8f2>txnNoSync</color>
        <color=#f92672>+</color> <color=#e6db74>" txnWriteNoSync="</color>
        <color=#f92672>+</color> <color=#f8f8f2>txnWriteNoSync</color>
        <color=#f92672>+</color> <color=#e6db74>" exceptionListener="</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptionListener</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" map="</color>
        <color=#f92672>+</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>