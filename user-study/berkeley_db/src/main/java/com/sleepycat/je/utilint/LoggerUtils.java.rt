<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.ConfigParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.Trace</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.StringWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.ConcurrentHashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Handler</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * <b>Logging Architecture</b> =========================== JE uses the java.util.logging package.</color>
<color=#75715e> * The ability to dynamically specify logging levels per component is important functionality for</color>
<color=#75715e> * the system. Logging output is directed to the console, to the je.info files, and in special</color>
<color=#75715e> * cases, to a MemoryHandler. The latter is meant for debugging and field support.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Logging output from multiple environments may end up going to the same handler, either because</color>
<color=#75715e> * a single process is executing multiple environments, or because the output of multiple</color>
<color=#75715e> * environments, such as a replication group, is combined in a single display. Because of that, it's</color>
<color=#75715e> * important for logging output to be prefixed with an environment id so it can be distinguished by</color>
<color=#75715e> * environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Loggers managed by java.util.logging.LogManager are supposed to be maintained with a weak</color>
<color=#75715e> * reference by the LogManager. In our experience, loggers do not seem to be released, and seem to</color>
<color=#75715e> * accumulate in memory. Because of that, we create a single logger per JE class, rather than a</color>
<color=#75715e> * logger per class instance.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The latter would be more convenient, because we wish to use environment specific information,</color>
<color=#75715e> * such as the environment name as a prefix, or the location of the je.info file, when creating</color>
<color=#75715e> * output. Restricting ourselves to a single per-class logger requires that we keep the logger and</color>
<color=#75715e> * its associated handlers and formatters stateless, because the logger may be shared by multiple</color>
<color=#75715e> * environments. To compensate for that, we use per-thread state to permit per-environment</color>
<color=#75715e> * customization of the logging output (that is the logging prefix) and file handler location.</color>
<color=#75715e> * Because we've seen some performance issues with ThreadLocals, we elected instead to maintain a</color>
<color=#75715e> * per-thread map to store state information needed by the logger.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This state information is:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- the environment impl from the envMap(from which one can obtain the prefix and the console,</color>
<color=#75715e> * file and memory handlers to use)</color>
<color=#75715e> *</color>
<color=#75715e> * <p>- or if the environment impl is null because the component executes without an environment,</color>
<color=#75715e> * the output will go to only a console handler. It will use a particular formatter to prefix the</color>
<color=#75715e> * output with a useful id. This is obtained from the formatter map.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>With this scheme, a JE process has a maximum of - N loggers, where N is the number of classes</color>
<color=#75715e> * which get loggers - 3 handlers * number of environments, because each environment creates a</color>
<color=#75715e> * Console, File and Memory handler.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><b>How To Use Logging in a JE Class</b> ======================================= Creating a</color>
<color=#75715e> * Logger: There are three kinds of loggers that a class may chose to use.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1. A class with a reference to EnvironmentImpl or RepImpl should use</color>
<color=#75715e> * LoggerUtils.getLogger(Class<?>) to create a logger which prefixes its output with an environment</color>
<color=#75715e> * id. When a logger is obtained this way, the logger should not be used directly. Instead,</color>
<color=#75715e> * LoggerUtils provides several methods like this: LoggerUtils.severe() equals to logger.severe</color>
<color=#75715e> * LoggerUtils.warning() equals to logger.warning etc LoggerUtils.logMsg(Logger, EnvironmentImpl,</color>
<color=#75715e> * Level, String) equals to logger.log(Level, String)</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2. A class without an EnvironmentImpl which still has some kind of custom information to</color>
<color=#75715e> * prepend to the logging output should use LoggerUtils.getFormatterNeeded(). For example,</color>
<color=#75715e> * com.sleepycat.je.rep.monitor.Monitor does not have an environment, but does have a NameIdPair,</color>
<color=#75715e> * and it can insert that information via a specific Formatter. When using this logger, the class</color>
<color=#75715e> * must create and maintain a Formatter instance to pass as a logging parameter. When using this</color>
<color=#75715e> * flavor, use: LoggerUtils.logMsg(Logger, Formatter, Level, String) where the formatter is the one</color>
<color=#75715e> * created by the using class.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3. A logger without an EnvironmentImpl does not prefix or customize the logging output, and</color>
<color=#75715e> * uses LoggerUtils.getLoggerFixedPrefix to create a logger. In this case, use the usual</color>
<color=#75715e> * java.util.logging.Logger logging methods.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note: there are some JE classes which only conditionally reference an environment. In that</color>
<color=#75715e> * case, the environment must also conditionally create a logger, and then use the wrapper methods</color>
<color=#75715e> * which use both an environmentImpl and a formatter. For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>if (envImpl != null) { logger = LoggerUtils.getLogger(getClass()); } else { logger =</color>
<color=#75715e> * LoggerUtils.getLoggerFormatterNeeded(); } formatter = new Formatter(.....);</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Then use LoggerUtils.logMsg(Logger, EnvironmentImpl, Formatter, Level, String) instead of</color>
<color=#75715e> * Logger.log(Level, String)</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LoggerUtils</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Environment state to be used by a logger. Must be set and released</color>
<color=#75715e>   * per logger call.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color> <color=#f8f8f2>envMap</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Formatter state to be used by a logger. Must be set and released</color>
<color=#75715e>   * per logger call. Used by logging calls that do not have an available</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>Formatter</color><color=#f92672>></color> <color=#f8f8f2>formatterMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>Formatter</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>NO_ENV</color> <color=#f92672>=</color> <color=#e6db74>".noEnv"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FIXED_PREFIX</color> <color=#f92672>=</color> <color=#e6db74>".fixedPrefix"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>PUSH_LEVEL</color> <color=#f92672>=</color> <color=#e6db74>".push.level"</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used to prevent multiple full thread dumps. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>fullThreadDumpMutex</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a logger which is configured to use the shared console, memory, and file handlers of an</color>
<color=#75715e>   * EnvironmentImpl and prefixes all messages with an environment identifier. Use this for classes</color>
<color=#75715e>   * which have a reference to an EnvironmentImpl (or RepImpl).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a logger is obtained this way, the logger should not be used directly. Instead, the</color>
<color=#75715e>   * wrapper methods in LoggerUtils which put and remove the environment from the envMap must be</color>
<color=#75715e>   * used, so that the logging output can be properly prefixed and redirected to the correct</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>cl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>createLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>cl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

    <color=#75715e>/* Check whether the logger already has existing handlers. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>hasConsoleHandler</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>hasFileHandler</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>hasConfiguredHandler</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * [#18277] Add null check of logger.getHandlers() because the Resin</color>
<color=#75715e>     * app server's implementation of logging can return null instead of an</color>
<color=#75715e>     * empty array.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Handler</color><color=#f92672>[]</color> <color=#f8f8f2>handlers</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>getHandlers</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handlers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Handler</color> <color=#f8f8f2>h</color> <color=#f8f8f2>:</color> <color=#f8f8f2>handlers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Intentionally check for java.util.logging.ConsoleHandler</color>
<color=#75715e>         * rather than ConsoleRedirectHandler, because the loggers that</color>
<color=#75715e>         * do not have a custom prefix use the ConsoleHandler</color>
<color=#75715e>         * directly. Having ConsoleRedirectHandler extend</color>
<color=#75715e>         * ConsoleHandler lets us have a model where the user only have</color>
<color=#75715e>         * to set com.sleepycat.je.util.ConsoleHandler in their logging</color>
<color=#75715e>         * properties file.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>logging</color><color=#f8f8f2>.</color><color=#a6e22e>ConsoleHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>hasConsoleHandler</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>FileRedirectHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>hasFileHandler</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ConfiguredRedirectHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>hasConfiguredHandler</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasConsoleHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>addHandler</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ConsoleRedirectHandler</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasFileHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>addHandler</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileRedirectHandler</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasConfiguredHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>addHandler</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ConfiguredRedirectHandler</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a logger which only publishes to a console handler. The logging output is prefixed in a</color>
<color=#75715e>   * custom way, using the formatter map to access the proper state. This should be used by a class</color>
<color=#75715e>   * that does not have an EnvironmentImpl, but still wishes to prepend some kind of custom prefix</color>
<color=#75715e>   * to the logging output.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a logger is obtained this way, the logger should not be used directly. Instead, the</color>
<color=#75715e>   * wrapper methods in LoggerUtils which use a Formatter parameter, and put and remove the</color>
<color=#75715e>   * environment from the formatterMap must be used, so that the logging output can be properly</color>
<color=#75715e>   * prefixed and redirected to the correct environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLoggerFormatterNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>cl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * By convention, loggers that use redirect handlers are named with the</color>
<color=#75715e>     * class name. Name logger that don't use redirecting differently, in</color>
<color=#75715e>     * order to avoid conflicts when a single class uses both redirecting</color>
<color=#75715e>     * and fixed prefix loggers.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>createLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>cl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>NO_ENV</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Add a new handler if a console handler does not already exist. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasConsoleHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>addHandler</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FormatterRedirectHandler</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Convenience method for getLoggerFixedPrefix. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLoggerFixedPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>cl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getLoggerFixedPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>cl</color><color=#f8f8f2>,</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a logger that uses the generic console handler, with no attempt to use thread local state</color>
<color=#75715e>   * to customize the message prefix.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLoggerFixedPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>cl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * By convention, loggers that use redirect handlers are named with the</color>
<color=#75715e>     * class name. Name logger that don't use redirecting differently, in</color>
<color=#75715e>     * order to avoid conflicts when a single class uses both redirecting</color>
<color=#75715e>     * and fixed prefix loggers.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>createLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>cl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>FIXED_PREFIX</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Check whether the logger already has this handler. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasConsoleHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>addHandler</color><color=#f8f8f2>(</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>com</color><color=#f8f8f2>.</color><color=#a6e22e>sleepycat</color><color=#f8f8f2>.</color><color=#a6e22e>je</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>ConsoleHandler</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>TracerFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>prefix</color><color=#f8f8f2>),</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Return true if this logger already has a console handler.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasConsoleHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * [#18277] Add null check of logger.getHandlers() because the Resin</color>
<color=#75715e>     * app server's implementation of logging can return null instead of an</color>
<color=#75715e>     * empty array.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Handler</color><color=#f92672>[]</color> <color=#f8f8f2>handlers</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>getHandlers</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handlers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Handler</color> <color=#f8f8f2>h</color> <color=#f8f8f2>:</color> <color=#f8f8f2>handlers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>logging</color><color=#f8f8f2>.</color><color=#a6e22e>ConsoleHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Create a logger for the specified class name. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>createLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * No need to set level values explicitly. This is managed in the</color>
<color=#75715e>     * standard way by java.util.logging.LogManager.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>Logger</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We've debated permitting the logger to use parental handlers, which</color>
<color=#75715e>     * would permit using the standard java.util.logging policy of setting</color>
<color=#75715e>     * tbe property com.sleepycat.je.handlers as a way of customizing</color>
<color=#75715e>     * handlers. This was not useful because of the need to specify</color>
<color=#75715e>     * handlers per environment, and also caused a process monitor echo</color>
<color=#75715e>     * issue within NoSQL DB.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>setUseParentHandlers</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the value of a specified Logger property. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getLoggerProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>property</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>logging</color><color=#f8f8f2>.</color><color=#a6e22e>LogManager</color> <color=#f8f8f2>mgr</color> <color=#f92672>=</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>logging</color><color=#f8f8f2>.</color><color=#a6e22e>LogManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>property</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get the push level for the MemoryHandler. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Level</color> <color=#a6e22e>getPushLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>propertyValue</color> <color=#f92672>=</color> <color=#f8f8f2>getLoggerProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#f8f8f2>PUSH_LEVEL</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>OFF</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>propertyValue</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#f8f8f2>propertyValue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Log a message using this logger. We expect that this logger is one that has been configured to</color>
<color=#75715e>   * expect an environment. This utility method should be used to ensure that the thread specific</color>
<color=#75715e>   * context is pushed before logging, and cleared afterwards.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Set thread specific context. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>(),</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>useLogger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Clear thread specific context. */</color>
      <color=#f8f8f2>envMap</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Use the environment logger. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Log a message using this logger. The logger may be either one that expects to use the state in</color>
<color=#75715e>   * the envMap (obtained via getLogger(), or it may be one that expects to use the state in the</color>
<color=#75715e>   * formatter map (obtained via getLoggerFormatterNeeded(). This method checks whether the</color>
<color=#75715e>   * EnvironmentImpl is null or not and choses the appropriate state type to use.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Some convenience methods. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>finer</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINER</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>finest</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Log a message with this logger. This utility method should be used in tandem with loggers</color>
<color=#75715e>   * obtained via getLoggerFormatterNeeded() to ensure that the thread specific Formatter is pushed</color>
<color=#75715e>   * before logging, and cleared afterwards.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Set thread specific Formatter. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>formatterMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>(),</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>useLogger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Clear thread specific Formatter. */</color>
      <color=#f8f8f2>formatterMap</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Logger method for recording an exception and stacktrace to both the java.util.logging system</color>
<color=#75715e>   * and the .jdb files.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>traceAndLogException</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>sourceClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>sourceMethod</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>traceMsg</color> <color=#f92672>=</color> <color=#f8f8f2>msg</color> <color=#f92672>+</color> <color=#e6db74>"\n"</color> <color=#f92672>+</color> <color=#f8f8f2>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>envMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>(),</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>().</color><color=#a6e22e>logp</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceMethod</color><color=#f8f8f2>,</color> <color=#f8f8f2>traceMsg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envMap</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Trace</color><color=#f8f8f2>.</color><color=#a6e22e>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>traceMsg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Records a message both to the java.util.logging loggers and through the trace system which</color>
<color=#75715e>   * writes to the .jdb files. The logLevel parameter only applies to the java.util.logging system.</color>
<color=#75715e>   * Trace messages are unconditionally written to the .jdb files.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Because of that, this method should be used sparingly, for critical messages.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>traceAndLog</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Trace</color><color=#f8f8f2>.</color><color=#a6e22e>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return a String version of a stack trace */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringWriter</color> <color=#f8f8f2>sw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringWriter</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>PrintWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>sw</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>stackTrace</color> <color=#f92672>=</color> <color=#f8f8f2>sw</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>stackTrace</color> <color=#f92672>=</color> <color=#f8f8f2>stackTrace</color><color=#f8f8f2>.</color><color=#a6e22e>replaceAll</color><color=#f8f8f2>(</color><color=#e6db74>"&lt"</color><color=#f8f8f2>,</color> <color=#e6db74>"<"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>stackTrace</color> <color=#f92672>=</color> <color=#f8f8f2>stackTrace</color><color=#f8f8f2>.</color><color=#a6e22e>replaceAll</color><color=#f8f8f2>(</color><color=#e6db74>"&gt"</color><color=#f8f8f2>,</color> <color=#e6db74>">"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>stackTrace</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return the stack trace of the caller, for debugging. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getStackTrace</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the level for ConsoleHandler and FileHandler. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Level</color> <color=#a6e22e>getHandlerLevel</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>levelName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Check if the level params are set. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Get the level from the java.util.logging configuration system. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>propertyLevel</color> <color=#f92672>=</color> <color=#f8f8f2>getLoggerProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>levelName</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the params are not set, and levels are set in the properties</color>
<color=#75715e>     * file, then set the level from properties file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>changed</color> <color=#f92672>&&</color> <color=#f8f8f2>propertyLevel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>propertyLevel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Logs a full thread dump as if jstack were piped to the je.info file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Only one dump per EnvironmentImpl lifetime is allowed. Allowing multiple dumps can causes</color>
<color=#75715e>   * them to be interleaved, and risks filling the je.info files with repeated dumps. The envImpl</color>
<color=#75715e>   * should be invalidated when this method is called, so one dump should be enough.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>fullThreadDump</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>fullThreadDumpMutex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDidFullThreadDump</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setDidFullThreadDump</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>StackTraceElement</color><color=#f92672>[]></color> <color=#f8f8f2>stackTraces</color> <color=#f92672>=</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>getAllStackTraces</color><color=#f8f8f2>();</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>StackTraceElement</color><color=#f92672>[]></color> <color=#f8f8f2>stme</color> <color=#f8f8f2>:</color> <color=#f8f8f2>stackTraces</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>stme</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StackTraceElement</color> <color=#f8f8f2>ste</color> <color=#f8f8f2>:</color> <color=#f8f8f2>stme</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#e6db74>"     "</color> <color=#f92672>+</color> <color=#f8f8f2>ste</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Displays both the exception class and the message. Use you wnat a relatively terse display of</color>
<color=#75715e>   * the exception (i.e. omitting stacktrace). Prefer to use this over exception.getMessage(), as</color>
<color=#75715e>   * some exceptions have null messages.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" : "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>