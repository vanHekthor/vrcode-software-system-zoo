<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryHeader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.SingleItemEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.VLSNRecoveryProxy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.RollbackStart</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The VLSNRecoveryTracker is used as a transient tracker at recovery time. It gathers up VLSN->LSN</color>
<color=#75715e> * mappings that are in the log, but not persisted to the mapping database. It has somewhat</color>
<color=#75715e> * different preconditions from the parent VLSNTracker which affect the semantics of tracking.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Unlike VLSNTracker, the track() method is guaranteed to be executed in a serial fashion. In</color>
<color=#75715e> * addition, this tracker needs to "discover" where the range for this tracker should start. For</color>
<color=#75715e> * example, suppose the on-disk VLSNIndex covers VLSNs 25 -> 200. Also, suppose that the recovery</color>
<color=#75715e> * portion of the log holds VLSNs 190 -> 210 (an overlap of 190 -> 200)</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The VLSNIndex will be initialized with a range of 25 -> 200. We want the recovery tracker to</color>
<color=#75715e> * hold VLSN mappings from 190 -> 210. We don't want it to just consult its range to determine where</color>
<color=#75715e> * the next bucket starts. If we did that, the recovery tracker would start at VLSN 1.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The VLSNRecoveryTracker must account for rollbacks and invisible log entries. It has the</color>
<color=#75715e> * authoritative view of what is in the recovery part of the log and will override what is in the</color>
<color=#75715e> * on-disk tracker. At merge time, the regular VLSNIndex must consult the VLSNRecoveryTracker's</color>
<color=#75715e> * notion of what the highest VLSN value is.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If we see a RollbackStart, the end of range is abruptly reset back to the matchpoint start. If</color>
<color=#75715e> * we see non-invisible entries, the end of range may be incrementing. For example, suppose the log</color>
<color=#75715e> * has:recovery tracker</color>
<color=#75715e> *</color>
<color=#75715e> * <p>VLSN 10 tracks 10 VLSN 11 (invisible) skips VLSN 12 (invisible) skips VLSN 13 (invisible)</color>
<color=#75715e> * skips rollback start to VLSN 9 truncates to 9, clear everything VLSN 10 tracks 10 VLSN 11 tracks</color>
<color=#75715e> * 11 VLSN 12 tracks 12 rollback start to VLSN 11 truncates to 11</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Suppose the on-disk VLSNIndex holds mappings for VLSN 1->13. A merge of the VLSN index and the</color>
<color=#75715e> * recovery tracker would 1) truncate any VLSN > than the recovery tracker's high point -- so the</color>
<color=#75715e> * VLSN index will drop mappings 12, 13 2) will replace any VLSN index mappings with those held in</color>
<color=#75715e> * the recovery tracker. The VLSNIndex should map 1 -> 11, with the 10 and 11 mapping provided by</color>
<color=#75715e> * the recovery tracker.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>VLSNRecoveryTracker</color> <color=#66d9ef>extends</color> <color=#f8f8f2>VLSNTracker</color> <color=#66d9ef>implements</color> <color=#f8f8f2>VLSNRecoveryProxy</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>rollbackType</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>lastMatchpointVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>lastMatchpointLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>VLSNRecoveryTracker</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>stride</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxMappings</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxDistance</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>stride</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxMappings</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxDistance</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>rollbackType</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_ROLLBACK_START</color><color=#f8f8f2>.</color><color=#a6e22e>getTypeNum</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* VLSNRecoveryProxy.trackMapping */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>trackMapping</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>targetLogEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>isInvisible</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color> <color=#f92672>=</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>track</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>rollbackType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RollbackStart</color> <color=#f8f8f2>rb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RollbackStart</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>SingleItemEntry</color><color=#f92672><?></color><color=#f8f8f2>)</color> <color=#f8f8f2>targetLogEntry</color><color=#f8f8f2>).</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>lastMatchpointVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>rb</color><color=#f8f8f2>.</color><color=#a6e22e>getMatchpointVLSN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>lastMatchpointLsn</color> <color=#f92672>=</color> <color=#f8f8f2>rb</color><color=#f8f8f2>.</color><color=#a6e22e>getMatchpoint</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>().</color><color=#a6e22e>isNull</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>().</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>lastMatchpointVLSN</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Throw away all mappings. */</color>
        <color=#f8f8f2>initEmpty</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>getLast</color><color=#f8f8f2>().</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>lastMatchpointVLSN</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Nothing to truncate. */</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>truncateFromTail</color><color=#f8f8f2>(</color><color=#f8f8f2>lastMatchpointVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lastMatchpointLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>bucketCache</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getLastMatchpointVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastMatchpointVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastMatchpointLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastMatchpointLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>