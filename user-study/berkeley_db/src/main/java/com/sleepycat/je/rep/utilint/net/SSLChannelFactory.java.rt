<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationSSLConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net.DataChannelFactoryBuilder.CtorArgSpec</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.net.ssl.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileNotFoundException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.SocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.SocketChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.cert.CertificateException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#75715e>/** A factory class for generating SSLDataChannel instances based on SocketChannel instances. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SSLChannelFactory</color> <color=#66d9ef>implements</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Protocol to use in call to SSLContext.getInstance.  This isn't a</color>
<color=#75715e>   * protocol per-se.  Actual protocol selection is chosen at the time</color>
<color=#75715e>   * a connection is established based on enabled protocol settings for</color>
<color=#75715e>   * both client and server.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>SSL_CONTEXT_PROTOCOL</color> <color=#f92672>=</color> <color=#e6db74>"TLS"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A system property to allow users to specify the correct X509 certificate algorithm name based</color>
<color=#75715e>   * on the JVMs they are using.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>X509_ALGO_NAME_PROPERTY</color> <color=#f92672>=</color> <color=#e6db74>"je.ssl.x509AlgoName"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The algorithm name of X509 certificate. It depends on the vendor of JVM. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>X509_ALGO_NAME</color> <color=#f92672>=</color> <color=#f8f8f2>getX509AlgoName</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An SSLContext that will hold all the interesting connection parameter information for session</color>
<color=#75715e>   * creation in server mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SSLContext</color> <color=#f8f8f2>serverSSLContext</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An SSLContext that will hold all the interesting connection parameter information for session</color>
<color=#75715e>   * creation in client mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SSLContext</color> <color=#f8f8f2>clientSSLContext</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The base SSLParameters for use in channel creation. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SSLParameters</color> <color=#f8f8f2>baseSSLParameters</color><color=#f8f8f2>;</color>

  <color=#75715e>/** An authenticator object for validating SSL session peers when acting in server mode */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SSLAuthenticator</color> <color=#f8f8f2>sslAuthenticator</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A host verifier object for validating SSL session peers when acting in client mode */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>HostnameVerifier</color> <color=#f8f8f2>sslHostVerifier</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>InstanceLogger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Constructor for use during creating based on access configuration */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SSLChannelFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>serverSSLContext</color> <color=#f92672>=</color> <color=#f8f8f2>constructSSLContext</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>clientSSLContext</color> <color=#f92672>=</color> <color=#f8f8f2>constructSSLContext</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>baseSSLParameters</color> <color=#f92672>=</color> <color=#f8f8f2>filterSSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>constructSSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>),</color> <color=#f8f8f2>serverSSLContext</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sslAuthenticator</color> <color=#f92672>=</color> <color=#f8f8f2>constructSSLAuthenticator</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sslHostVerifier</color> <color=#f92672>=</color> <color=#f8f8f2>constructSSLHostVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>().</color><color=#a6e22e>getLoggerFactory</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Constructor for use when SSL configuration objects have already been constructed. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SSLChannelFactory</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>SSLContext</color> <color=#f8f8f2>serverSSLContext</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SSLContext</color> <color=#f8f8f2>clientSSLContext</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SSLParameters</color> <color=#f8f8f2>baseSSLParameters</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SSLAuthenticator</color> <color=#f8f8f2>sslAuthenticator</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>HostnameVerifier</color> <color=#f8f8f2>sslHostVerifier</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>InstanceLogger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serverSSLContext</color> <color=#f92672>=</color> <color=#f8f8f2>serverSSLContext</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>clientSSLContext</color> <color=#f92672>=</color> <color=#f8f8f2>clientSSLContext</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>baseSSLParameters</color> <color=#f92672>=</color> <color=#f8f8f2>filterSSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>baseSSLParameters</color><color=#f8f8f2>,</color> <color=#f8f8f2>serverSSLContext</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sslAuthenticator</color> <color=#f92672>=</color> <color=#f8f8f2>sslAuthenticator</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sslHostVerifier</color> <color=#f92672>=</color> <color=#f8f8f2>sslHostVerifier</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Construct a DataChannel wrapping the newly accepted SocketChannel */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DataChannel</color> <color=#a6e22e>acceptChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>SocketChannel</color> <color=#f8f8f2>socketChannel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SocketAddress</color> <color=#f8f8f2>socketAddress</color> <color=#f92672>=</color> <color=#f8f8f2>socketChannel</color><color=#f8f8f2>.</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>getRemoteSocketAddress</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>host</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>socketAddress</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"socketChannel is not connected"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>socketAddress</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>host</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>)</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>).</color><color=#a6e22e>getAddress</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SSLEngine</color> <color=#f8f8f2>engine</color> <color=#f92672>=</color>
        <color=#f8f8f2>serverSSLContext</color><color=#f8f8f2>.</color><color=#a6e22e>createSSLEngine</color><color=#f8f8f2>(</color><color=#f8f8f2>host</color><color=#f8f8f2>,</color> <color=#f8f8f2>socketChannel</color><color=#f8f8f2>.</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>getPort</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>engine</color><color=#f8f8f2>.</color><color=#a6e22e>setSSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>baseSSLParameters</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>engine</color><color=#f8f8f2>.</color><color=#a6e22e>setUseClientMode</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sslAuthenticator</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>engine</color><color=#f8f8f2>.</color><color=#a6e22e>setWantClientAuth</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLDataChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>socketChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>engine</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>sslAuthenticator</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Construct a DataChannel wrapping a new connection to the specified address using the associated</color>
<color=#75715e>   * connection options.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DataChannel</color> <color=#a6e22e>connect</color><color=#f8f8f2>(</color><color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>addr</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConnectOptions</color> <color=#f8f8f2>connectOptions</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SocketChannel</color> <color=#f8f8f2>socketChannel</color> <color=#f92672>=</color> <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>openSocketChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>addr</color><color=#f8f8f2>,</color> <color=#f8f8f2>connectOptions</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Figure out a good host to specify.  This is used for session caching</color>
<color=#75715e>     * so it's not critical what answer we come up with, so long as it</color>
<color=#75715e>     * is relatively repeatable.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>host</color> <color=#f92672>=</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>host</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>host</color> <color=#f92672>=</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>getAddress</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SSLEngine</color> <color=#f8f8f2>engine</color> <color=#f92672>=</color> <color=#f8f8f2>clientSSLContext</color><color=#f8f8f2>.</color><color=#a6e22e>createSSLEngine</color><color=#f8f8f2>(</color><color=#f8f8f2>host</color><color=#f8f8f2>,</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>engine</color><color=#f8f8f2>.</color><color=#a6e22e>setSSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>baseSSLParameters</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>engine</color><color=#f8f8f2>.</color><color=#a6e22e>setUseClientMode</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLDataChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>socketChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>engine</color><color=#f8f8f2>,</color> <color=#f8f8f2>host</color><color=#f8f8f2>,</color> <color=#f8f8f2>sslHostVerifier</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Reads the KeyStore configured in the ReplicationNetworkConfig into memory. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>KeyStore</color> <color=#a6e22e>readKeyStore</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceContext</color> <color=#f8f8f2>context</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>KeyStoreInfo</color> <color=#f8f8f2>ksInfo</color> <color=#f92672>=</color> <color=#f8f8f2>readKeyStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ks</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>clearPassword</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks whether the auth string is a valid authenticator specification */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isValidAuthenticator</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>authSpec</color> <color=#f92672>=</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>trim</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"mirror"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"dnmatch("</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>")"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>SSLDNAuthenticator</color><color=#f8f8f2>.</color><color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks whether input string is a valid host verifier specification */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isValidHostVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>hvSpec</color> <color=#f92672>=</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>trim</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"mirror"</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"hostname"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"dnmatch("</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>")"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>SSLDNHostVerifier</color><color=#f8f8f2>.</color><color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Builds an SSLContext object for the specified access mode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param params general instantiation information</color>
<color=#75715e>   * @param clientMode set to true if the SSLContext is being created for the client side of an SSL</color>
<color=#75715e>   *     connection and false otherwise</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>SSLContext</color> <color=#a6e22e>constructSSLContext</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clientMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>().</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>KeyManager</color><color=#f92672>[]</color> <color=#f8f8f2>kmList</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>KeyStoreInfo</color> <color=#f8f8f2>ksInfo</color> <color=#f92672>=</color> <color=#f8f8f2>readKeyStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Determine whether a specific key is supposed to be used</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>ksAliasProp</color> <color=#f92672>=</color>
            <color=#f8f8f2>clientMode</color> <color=#f92672>?</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLClientKeyAlias</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLServerKeyAlias</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksAliasProp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>ksAliasProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ksAliasProp</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>kmList</color> <color=#f92672>=</color> <color=#f8f8f2>buildKeyManagerList</color><color=#f8f8f2>(</color><color=#f8f8f2>ksInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksAliasProp</color><color=#f8f8f2>,</color> <color=#f8f8f2>clientMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>clearPassword</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>TrustManager</color><color=#f92672>[]</color> <color=#f8f8f2>tmList</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>KeyStoreInfo</color> <color=#f8f8f2>tsInfo</color> <color=#f92672>=</color> <color=#f8f8f2>readTrustStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tsInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tmList</color> <color=#f92672>=</color> <color=#f8f8f2>buildTrustManagerList</color><color=#f8f8f2>(</color><color=#f8f8f2>tsInfo</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tsInfo</color><color=#f8f8f2>.</color><color=#a6e22e>clearPassword</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Get an SSLContext object</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>SSLContext</color> <color=#f8f8f2>newContext</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newContext</color> <color=#f92672>=</color> <color=#f8f8f2>SSLContext</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>SSL_CONTEXT_PROTOCOL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchAlgorithmException</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to find a suitable SSLContext"</color><color=#f8f8f2>,</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Put it all together into the SSLContext object</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newContext</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>kmList</color><color=#f8f8f2>,</color> <color=#f8f8f2>tmList</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyManagementException</color> <color=#f8f8f2>kme</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Error establishing SSLContext"</color><color=#f8f8f2>,</color> <color=#f8f8f2>kme</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>newContext</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Builds a list of KeyManagers for incorporation into an SSLContext.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param ksInfo a KeyStoreInfo referencing the Keystore for which the the key manager list is to</color>
<color=#75715e>   *     be built.</color>
<color=#75715e>   * @param ksAlias an optional KeyStore alias. If set, the key manager for X509 certs will always</color>
<color=#75715e>   *     select the certificate with the specified alias.</color>
<color=#75715e>   * @param clientMode set to true if this is for the client side of an SSL connection and fals</color>
<color=#75715e>   *     otherwise.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>KeyManager</color><color=#f92672>[]</color> <color=#a6e22e>buildKeyManagerList</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>KeyStoreInfo</color> <color=#f8f8f2>ksInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ksAlias</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clientMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Get a KeyManagerFactory</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>KeyManagerFactory</color> <color=#f8f8f2>kmf</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>kmf</color> <color=#f92672>=</color> <color=#f8f8f2>KeyManagerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>X509_ALGO_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchAlgorithmException</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to find a suitable KeyManagerFactory"</color><color=#f8f8f2>,</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Initialize the key manager factory</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>kmf</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ks</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ksPwd</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyStoreException</color> <color=#f8f8f2>kse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Error processing keystore file "</color> <color=#f92672>+</color> <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ksFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>kse</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchAlgorithmException</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unable to find appropriate algorithm for "</color> <color=#f92672>+</color> <color=#e6db74>"keystore file "</color> <color=#f92672>+</color> <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ksFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>UnrecoverableKeyException</color> <color=#f8f8f2>uke</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unable to recover key from keystore file "</color> <color=#f92672>+</color> <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ksFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>uke</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Get the list of key managers used</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>KeyManager</color><color=#f92672>[]</color> <color=#f8f8f2>kmList</color> <color=#f92672>=</color> <color=#f8f8f2>kmf</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyManagers</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If an alias was specified, we need to construct an</color>
<color=#75715e>     * AliasKeyManager, which will delegate to the correct</color>
<color=#75715e>     * underlying KeyManager, which we need to locate.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksAlias</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Locate the first appropriate keymanager in the list</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>X509ExtendedKeyManager</color> <color=#f8f8f2>x509KeyManager</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyManager</color> <color=#f8f8f2>km</color> <color=#f8f8f2>:</color> <color=#f8f8f2>kmList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>km</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>X509ExtendedKeyManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>x509KeyManager</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>X509ExtendedKeyManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>km</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x509KeyManager</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Unable to locate an X509ExtendedKeyManager "</color>
                <color=#f92672>+</color> <color=#e6db74>"corresponding to keyStore "</color>
                <color=#f92672>+</color> <color=#f8f8f2>ksInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ksFile</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>kmList</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>KeyManager</color><color=#f92672>[]</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>(</color><color=#f8f8f2>clientMode</color>
                <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>AliasKeyManager</color><color=#f8f8f2>(</color><color=#f8f8f2>x509KeyManager</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksAlias</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>AliasKeyManager</color><color=#f8f8f2>(</color><color=#f8f8f2>x509KeyManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksAlias</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color>
          <color=#f8f8f2>};</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>kmList</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Reads a KeyStore into memory based on the config. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>KeyStoreInfo</color> <color=#a6e22e>readKeyStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceContext</color> <color=#f8f8f2>context</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine what KeyStore file to access</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>ksProp</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLKeyStore</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksProp</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>ksProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ksProp</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"javax.net.ssl.keyStore"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksProp</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine what type of keystore to assume.  If not specified</color>
<color=#75715e>     * loadStore determines the default</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ksTypeProp</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLKeyStoreType</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>ksPw</color> <color=#f92672>=</color> <color=#f8f8f2>getKeyStorePassword</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPw</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to open keystore without a password"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get a KeyStore instance</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>KeyStore</color> <color=#f8f8f2>ks</color> <color=#f92672>=</color> <color=#f8f8f2>loadStore</color><color=#f8f8f2>(</color><color=#f8f8f2>ksProp</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksPw</color><color=#f8f8f2>,</color> <color=#e6db74>"keystore"</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksTypeProp</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>KeyStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>ksProp</color><color=#f8f8f2>,</color> <color=#f8f8f2>ks</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksPw</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPw</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>ksPw</color><color=#f8f8f2>,</color> <color=#e6db74>' '</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Finds the keystore password based on the input config. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#a6e22e>getKeyStorePassword</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceContext</color> <color=#f8f8f2>context</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>ksPw</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine the password for the keystore file</color>
<color=#75715e>     * Try first using a password source, either explicit or</color>
<color=#75715e>     * constructed.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>PasswordSource</color> <color=#f8f8f2>ksPwSource</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLKeyStorePasswordSource</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPwSource</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ksPwSource</color> <color=#f92672>=</color> <color=#f8f8f2>constructKSPasswordSource</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPwSource</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ksPw</color> <color=#f92672>=</color> <color=#f8f8f2>ksPwSource</color><color=#f8f8f2>.</color><color=#a6e22e>getPassword</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Next look for an explicit password setting */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>ksPwProp</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLKeyStorePassword</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPwProp</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>ksPwProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Finally, consider the standard Java Keystore</color>
<color=#75715e>         * password system property</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>ksPwProp</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"javax.net.ssl.keyStorePassword"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPwProp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ksPw</color> <color=#f92672>=</color> <color=#f8f8f2>ksPwProp</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ksPw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Builds a TrustManager list for the input Truststore for use in creating an SSLContext. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>TrustManager</color><color=#f92672>[]</color> <color=#a6e22e>buildTrustManagerList</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyStoreInfo</color> <color=#f8f8f2>tsInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>TrustManagerFactory</color> <color=#f8f8f2>tmf</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tmf</color> <color=#f92672>=</color> <color=#f8f8f2>TrustManagerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>X509_ALGO_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchAlgorithmException</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to find a suitable TrustManagerFactory"</color><color=#f8f8f2>,</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tmf</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>tsInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ks</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyStoreException</color> <color=#f8f8f2>kse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Error initializing truststore "</color> <color=#f92672>+</color> <color=#f8f8f2>tsInfo</color><color=#f8f8f2>.</color><color=#a6e22e>ksFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>kse</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>tmf</color><color=#f8f8f2>.</color><color=#a6e22e>getTrustManagers</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Based on the input config, read the configured TrustStore into memory. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>KeyStoreInfo</color> <color=#a6e22e>readTrustStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceContext</color> <color=#f8f8f2>context</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine what truststore file, if any, to use</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>tsProp</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLTrustStore</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tsProp</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>tsProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tsProp</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"javax.net.ssl.trustStore"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine what type of truststore to assume</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>tsTypeProp</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLTrustStoreType</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tsTypeProp</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>tsTypeProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tsTypeProp</color> <color=#f92672>=</color> <color=#f8f8f2>KeyStore</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Build a TrustStore, if specified</color>
<color=#75715e>     */</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tsProp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>KeyStore</color> <color=#f8f8f2>ts</color> <color=#f92672>=</color> <color=#f8f8f2>loadStore</color><color=#f8f8f2>(</color><color=#f8f8f2>tsProp</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#e6db74>"truststore"</color><color=#f8f8f2>,</color> <color=#f8f8f2>tsTypeProp</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>KeyStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>tsProp</color><color=#f8f8f2>,</color> <color=#f8f8f2>ts</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Create an SSLParameters base on the input configuration. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>SSLParameters</color> <color=#a6e22e>constructSSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>().</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine cipher suites configuration</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>cipherSuitesProp</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLCipherSuites</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>cipherSuites</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cipherSuitesProp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>cipherSuitesProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cipherSuites</color> <color=#f92672>=</color> <color=#f8f8f2>cipherSuitesProp</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#e6db74>","</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine protocols configuration</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>protocolsProp</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLProtocols</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>protocols</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>protocolsProp</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>protocolsProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>protocols</color> <color=#f92672>=</color> <color=#f8f8f2>protocolsProp</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#e6db74>","</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>cipherSuites</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocols</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Filter SSLParameter configuration to respect the supported configuration capabilities of the</color>
<color=#75715e>   * context.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>SSLParameters</color> <color=#a6e22e>filterSSLParameters</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>SSLParameters</color> <color=#f8f8f2>configParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>SSLContext</color> <color=#f8f8f2>filterContext</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>SSLParameters</color> <color=#f8f8f2>suppParams</color> <color=#f92672>=</color> <color=#f8f8f2>filterContext</color><color=#f8f8f2>.</color><color=#a6e22e>getSupportedSSLParameters</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Filter the cipher suite selection */</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>configCipherSuites</color> <color=#f92672>=</color> <color=#f8f8f2>configParams</color><color=#f8f8f2>.</color><color=#a6e22e>getCipherSuites</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configCipherSuites</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>suppCipherSuites</color> <color=#f92672>=</color> <color=#f8f8f2>suppParams</color><color=#f8f8f2>.</color><color=#a6e22e>getCipherSuites</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>configCipherSuites</color> <color=#f92672>=</color> <color=#f8f8f2>filterConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>configCipherSuites</color><color=#f8f8f2>,</color> <color=#f8f8f2>suppCipherSuites</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configCipherSuites</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"None of the configured SSL cipher suites are supported "</color> <color=#f92672>+</color> <color=#e6db74>"by the environment."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Filter the protocol selection */</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>configProtocols</color> <color=#f92672>=</color> <color=#f8f8f2>configParams</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocols</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configProtocols</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>suppProtocols</color> <color=#f92672>=</color> <color=#f8f8f2>suppParams</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocols</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>configProtocols</color> <color=#f92672>=</color> <color=#f8f8f2>filterConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>configProtocols</color><color=#f8f8f2>,</color> <color=#f8f8f2>suppProtocols</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configProtocols</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"None of the configured SSL protocols are supported "</color> <color=#f92672>+</color> <color=#e6db74>"by the environment."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>SSLParameters</color> <color=#f8f8f2>newParams</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLParameters</color><color=#f8f8f2>(</color><color=#f8f8f2>configCipherSuites</color><color=#f8f8f2>,</color> <color=#f8f8f2>configProtocols</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>newParams</color><color=#f8f8f2>.</color><color=#a6e22e>setWantClientAuth</color><color=#f8f8f2>(</color><color=#f8f8f2>configParams</color><color=#f8f8f2>.</color><color=#a6e22e>getWantClientAuth</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>newParams</color><color=#f8f8f2>.</color><color=#a6e22e>setNeedClientAuth</color><color=#f8f8f2>(</color><color=#f8f8f2>configParams</color><color=#f8f8f2>.</color><color=#a6e22e>getNeedClientAuth</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newParams</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return the intersection of configChoices and supported */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>filterConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>configChoices</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>supported</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>keep</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>choice</color> <color=#f8f8f2>:</color> <color=#f8f8f2>configChoices</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>supp</color> <color=#f8f8f2>:</color> <color=#f8f8f2>supported</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>choice</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>supp</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>keep</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>choice</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keep</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>keep</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Build an SSLAuthenticator or HostnameVerifier based on property configuration. This method</color>
<color=#75715e>   * looks up a class of the specified name, then finds a constructor that has a single argument of</color>
<color=#75715e>   * type InstanceParams and constructs an instance with that constructor, then validates that the</color>
<color=#75715e>   * instance extends or implements the mustImplement class specified.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param params the parameters for constructing this factory.</color>
<color=#75715e>   * @param checkerClassName the name of the class to instantiate</color>
<color=#75715e>   * @param checkerClassParams the value of the configured String params argument</color>
<color=#75715e>   * @param mustImplement a class denoting a required base class or required implemented interface</color>
<color=#75715e>   *     of the class whose name is specified by checkerClassName.</color>
<color=#75715e>   * @param miDesc a descriptive term for the class to be instantiated</color>
<color=#75715e>   * @return an instance of the specified class</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>constructSSLChecker</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>checkerClassName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>checkerClassParams</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>mustImplement</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>miDesc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>objParams</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>checkerClassParams</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DataChannelFactoryBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>constructObject</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>checkerClassName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>mustImplement</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>miDesc</color><color=#f8f8f2>,</color>
        <color=#75715e>/* class(InstanceParams) */</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>CtorArgSpec</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>InstanceParams</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>},</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>objParams</color><color=#f8f8f2>}));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Builds an SSLAuthenticator based on the input configuration referenced by params. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>SSLAuthenticator</color> <color=#a6e22e>constructSSLAuthenticator</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>().</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>authSpec</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLAuthenticator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>authClassName</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLAuthenticatorClass</color><color=#f8f8f2>();</color>

    <color=#75715e>/* check for conflicts */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>)</color>
        <color=#f92672>&&</color> <color=#f8f8f2>authClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>authClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Cannot specify both authenticator and authenticatorClass"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* construct an authenticator of a known type */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>constructStdAuthenticator</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authClassName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>authClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* construct an authenticator using the specified class */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>authParams</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLAuthenticatorParams</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>SSLAuthenticator</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>constructSSLChecker</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>authClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>authParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>SSLAuthenticator</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#e6db74>"authenticator"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Builds an SSLAuthenticator of a known type. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>SSLAuthenticator</color> <color=#a6e22e>constructStdAuthenticator</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>authSpec</color> <color=#f92672>=</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>trim</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"dnmatch("</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>")"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* a DN matching authenticator */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>match</color> <color=#f92672>=</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#e6db74>"dnmatch("</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>(),</color> <color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLDNAuthenticator</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>match</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"mirror"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* a mirroring  authenticator */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLMirrorAuthenticator</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>authSpec</color> <color=#f92672>+</color> <color=#e6db74>" is not a valid authenticator specification."</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Builds an HostnameVerifier based on the configuration referenced in params. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>HostnameVerifier</color> <color=#a6e22e>constructSSLHostVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>().</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>hvSpec</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLHostVerifier</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>hvClassName</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLHostVerifierClass</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Check for conflicts */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>hvClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>hvClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot specify both hostVerifier and hostVerifierClass"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* construct a host verifier of a known type */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>constructStdHostVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvClassName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>hvClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* construct a host verifier using the specified class */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>hvParams</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLHostVerifierParams</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>HostnameVerifier</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>constructSSLChecker</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>hvClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>hvParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>HostnameVerifier</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#e6db74>"hostname verifier"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Builds a HostnameVerifier of a known type. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>HostnameVerifier</color> <color=#a6e22e>constructStdHostVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>hvSpec</color> <color=#f92672>=</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>trim</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"dnmatch("</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>")"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* a DN matching host verifier */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>match</color> <color=#f92672>=</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#e6db74>"dnmatch("</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>(),</color> <color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLDNHostVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>match</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"mirror"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* a mirroring  host verifier */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLMirrorHostVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"hostname"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* a standard  hostname verifier */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLStdHostVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>hvSpec</color> <color=#f92672>+</color> <color=#e6db74>" is not a valid hostVerifier specification."</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Builds a PasswordSource instance via generic instantiation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param params the parameters driving the instantiation</color>
<color=#75715e>   * @param pwdSrcClassName the name of the class to instantiate</color>
<color=#75715e>   * @param pwSrcParams a possibly null String that has been configured as an argument to the</color>
<color=#75715e>   *     class's constructor.</color>
<color=#75715e>   * @return the new instance</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>PasswordSource</color> <color=#a6e22e>constructPasswordSource</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pwdSrcClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pwSrcParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>objParams</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pwSrcParams</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>PasswordSource</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>DataChannelFactoryBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>constructObject</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>pwdSrcClassName</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>PasswordSource</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color>
            <color=#e6db74>"password source"</color><color=#f8f8f2>,</color>
            <color=#75715e>/* class(InstanceParams) */</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>CtorArgSpec</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>InstanceParams</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>},</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>objParams</color><color=#f8f8f2>}));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Build a PasswordSource for the keystore based on the configuration referenced by params. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>PasswordSource</color> <color=#a6e22e>constructKSPasswordSource</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>().</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pwSrcClassName</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLKeyStorePasswordClass</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pwSrcClassName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pwSrcClassName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pwSrcParams</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLKeyStorePasswordParams</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>constructPasswordSource</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#f8f8f2>pwSrcClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pwSrcParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Load a keystore/truststore file into memory</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param storeName the name of the store file</color>
<color=#75715e>   * @param storeFlavor a descriptive name of store type</color>
<color=#75715e>   * @param storeType JKS, etc</color>
<color=#75715e>   * @throws IllegalArgumentException if the specified parameters do now allow a store to be</color>
<color=#75715e>   *     successfully loaded</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>KeyStore</color> <color=#a6e22e>loadStore</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>storePassword</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storeFlavor</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>storeType</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>storeType</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>storeType</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>storeType</color> <color=#f92672>=</color> <color=#f8f8f2>KeyStore</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>KeyStore</color> <color=#f8f8f2>ks</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ks</color> <color=#f92672>=</color> <color=#f8f8f2>KeyStore</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>storeType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyStoreException</color> <color=#f8f8f2>kse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unable to find a "</color> <color=#f92672>+</color> <color=#f8f8f2>storeFlavor</color> <color=#f92672>+</color> <color=#e6db74>" instance of type "</color> <color=#f92672>+</color> <color=#f8f8f2>storeType</color><color=#f8f8f2>,</color> <color=#f8f8f2>kse</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>FileInputStream</color> <color=#f8f8f2>fis</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fis</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>storeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>fnfe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unable to locate specified "</color> <color=#f92672>+</color> <color=#f8f8f2>storeFlavor</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>fnfe</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ks</color><color=#f8f8f2>.</color><color=#a6e22e>load</color><color=#f8f8f2>(</color><color=#f8f8f2>fis</color><color=#f8f8f2>,</color> <color=#f8f8f2>storePassword</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Error reading from "</color> <color=#f92672>+</color> <color=#f8f8f2>storeFlavor</color> <color=#f92672>+</color> <color=#e6db74>" file "</color> <color=#f92672>+</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchAlgorithmException</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unable to check "</color> <color=#f92672>+</color> <color=#f8f8f2>storeFlavor</color> <color=#f92672>+</color> <color=#e6db74>" integrity: "</color> <color=#f92672>+</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>nsae</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CertificateException</color> <color=#f8f8f2>ce</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Not all certificates could be loaded: "</color> <color=#f92672>+</color> <color=#f8f8f2>storeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>ce</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fis</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* ignored */</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ks</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Gets a proper algorithm name for the X.509 certificate key manager. If users already specify it</color>
<color=#75715e>   * via setting the system property of "je.ssl.x509AlgoName", use it directly. Otherwise, for IBM</color>
<color=#75715e>   * J9 VM, the name is "IbmX509". For Hotspot and other JVMs, the name of "SunX509" will be used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return algorithm name for X509 certificate manager</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getX509AlgoName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>x509Name</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>X509_ALGO_NAME_PROPERTY</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x509Name</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>x509Name</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>x509Name</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>jvmVendor</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"java.vendor"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>jvmVendor</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"IBM"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"IbmX509"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#e6db74>"SunX509"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Internal class for communicating a pair of KeyStore and password */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>KeyStoreInfo</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ksFile</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>KeyStore</color> <color=#f8f8f2>ks</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>ksPwd</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>KeyStoreInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>ksFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>KeyStore</color> <color=#f8f8f2>ks</color><color=#f8f8f2>,</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>ksPwd</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ksFile</color> <color=#f92672>=</color> <color=#f8f8f2>ksFile</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ks</color> <color=#f92672>=</color> <color=#f8f8f2>ks</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ksPwd</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPwd</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOf</color><color=#f8f8f2>(</color><color=#f8f8f2>ksPwd</color><color=#f8f8f2>,</color> <color=#f8f8f2>ksPwd</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clearPassword</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ksPwd</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>ksPwd</color><color=#f8f8f2>,</color> <color=#e6db74>' '</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>