<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.trigger.Trigger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DatabaseUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The configuration properties of a <code>SecondaryDatabase</code> extend those of a primary <code></color>
<color=#75715e> * Database</code>. The secondary database configuration is specified when calling {@link</color>
<color=#75715e> * Environment#openSecondaryDatabase Environment.openSecondaryDatabase}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To create a configuration object with default attributes:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     SecondaryConfig config = new SecondaryConfig();</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To set custom attributes:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     SecondaryConfig config = new SecondaryConfig();</color>
<color=#75715e> *     config.setAllowCreate(true);</color>
<color=#75715e> *     config.setSortedDuplicates(true);</color>
<color=#75715e> *     config.setKeyCreator(new MyKeyCreator());</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * @see Environment#openSecondaryDatabase Environment.openSecondaryDatabase @see SecondaryDatabase</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SecondaryConfig</color> <color=#66d9ef>extends</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For internal use, to allow null as a valid value for the config</color>
<color=#75715e>   * parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>SecondaryConfig</color> <color=#f8f8f2>DEFAULT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SecondaryConfig</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowPopulate</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>SecondaryKeyCreator</color> <color=#f8f8f2>keyCreator</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>SecondaryMultiKeyCreator</color> <color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>foreignKeyDatabase</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ForeignKeyDeleteAction</color> <color=#f8f8f2>foreignKeyDeleteAction</color> <color=#f92672>=</color> <color=#f8f8f2>ForeignKeyDeleteAction</color><color=#f8f8f2>.</color><color=#a6e22e>ABORT</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ForeignKeyNullifier</color> <color=#f8f8f2>foreignKeyNullifier</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ForeignMultiKeyNullifier</color> <color=#f8f8f2>foreignMultiKeyNullifier</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>extractFromPrimaryKeyOnly</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>immutableSecondaryKey</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates an instance with the system's default settings. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SecondaryConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the user-supplied object used for creating single-valued secondary keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unless the primary database is read-only, a key creator is required when opening a secondary</color>
<color=#75715e>   * database. Either a KeyCreator or MultiKeyCreator must be specified, but both may not be</color>
<color=#75715e>   * specified.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unless the primary database is read-only, a key creator is required when opening a secondary</color>
<color=#75715e>   * database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>WARNING:</em> Key creator instances are shared by multiple threads and key creator</color>
<color=#75715e>   * methods are called without any special synchronization. Therefore, key creators must be thread</color>
<color=#75715e>   * safe. In general no shared state should be used and any caching of computed values must be done</color>
<color=#75715e>   * with proper synchronization.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param keyCreator the user-supplied object used for creating single-valued secondary keys.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setKeyCreator</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyCreator</color> <color=#f8f8f2>keyCreator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setKeyCreatorVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>keyCreator</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKeyCreatorVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryKeyCreator</color> <color=#f8f8f2>keyCreator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keyCreator</color> <color=#f92672>=</color> <color=#f8f8f2>keyCreator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the user-supplied object used for creating single-valued secondary keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the user-supplied object used for creating single-valued secondary keys.</color>
<color=#75715e>   * @see #setKeyCreator</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryKeyCreator</color> <color=#a6e22e>getKeyCreator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keyCreator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the user-supplied object used for creating multi-valued secondary keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unless the primary database is read-only, a key creator is required when opening a secondary</color>
<color=#75715e>   * database. Either a KeyCreator or MultiKeyCreator must be specified, but both may not be</color>
<color=#75715e>   * specified.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>WARNING:</em> Key creator instances are shared by multiple threads and key creator</color>
<color=#75715e>   * methods are called without any special synchronization. Therefore, key creators must be thread</color>
<color=#75715e>   * safe. In general no shared state should be used and any caching of computed values must be done</color>
<color=#75715e>   * with proper synchronization.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param multiKeyCreator the user-supplied object used for creating multi-valued secondary keys.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setMultiKeyCreator</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryMultiKeyCreator</color> <color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setMultiKeyCreatorVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMultiKeyCreatorVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryMultiKeyCreator</color> <color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>multiKeyCreator</color> <color=#f92672>=</color> <color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the user-supplied object used for creating multi-valued secondary keys.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the user-supplied object used for creating multi-valued secondary keys.</color>
<color=#75715e>   * @see #setKeyCreator</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryMultiKeyCreator</color> <color=#a6e22e>getMultiKeyCreator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies whether automatic population of the secondary is allowed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If automatic population is allowed, when the secondary database is opened it is checked to</color>
<color=#75715e>   * see if it is empty. If it is empty, the primary database is read in its entirety and keys are</color>
<color=#75715e>   * added to the secondary database using the information read from the primary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is set to true and the database is transactional, the population of the</color>
<color=#75715e>   * secondary will be done within the explicit or auto-commit transaction that is used to open the</color>
<color=#75715e>   * database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param allowPopulate whether automatic population of the secondary is allowed.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setAllowPopulate</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowPopulate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setAllowPopulateVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>allowPopulate</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAllowPopulateVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowPopulate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowPopulate</color> <color=#f92672>=</color> <color=#f8f8f2>allowPopulate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether automatic population of the secondary is allowed. If {@link #setAllowPopulate}</color>
<color=#75715e>   * has not been called, this method returns false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether automatic population of the secondary is allowed.</color>
<color=#75715e>   * @see #setAllowPopulate</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowPopulate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>allowPopulate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Defines a foreign key integrity constraint for a given foreign key database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this property is non-null, a record must be present in the specified foreign database for</color>
<color=#75715e>   * every record in the secondary database, where the secondary key value is equal to the foreign</color>
<color=#75715e>   * database key value. Whenever a record is to be added to the secondary database, the secondary</color>
<color=#75715e>   * key is used as a lookup key in the foreign database. If the key is not found in the foreign</color>
<color=#75715e>   * database, a {@link ForeignConstraintException} is thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The foreign database must not have duplicates allowed. If duplicates are allowed, an</color>
<color=#75715e>   * IllegalArgumentException will be thrown when the secondary database is opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param foreignKeyDatabase the database used to check the foreign key integrity constraint, or</color>
<color=#75715e>   *     null if no foreign key constraint should be checked.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setForeignKeyDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>foreignKeyDatabase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setForeignKeyDatabaseVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignKeyDatabase</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setForeignKeyDatabaseVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>foreignKeyDatabase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>foreignKeyDatabase</color> <color=#f92672>=</color> <color=#f8f8f2>foreignKeyDatabase</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the database used to check the foreign key integrity constraint, or null if no foreign</color>
<color=#75715e>   * key constraint will be checked.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the foreign key database, or null.</color>
<color=#75715e>   * @see #setForeignKeyDatabase</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getForeignKeyDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>foreignKeyDatabase</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the action taken when a referenced record in the foreign key database is deleted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This property is ignored if the foreign key database property is null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param foreignKeyDeleteAction the action taken when a referenced record in the foreign key</color>
<color=#75715e>   *     database is deleted.</color>
<color=#75715e>   * @see ForeignKeyDeleteAction @see #setForeignKeyDatabase</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setForeignKeyDeleteAction</color><color=#f8f8f2>(</color><color=#f8f8f2>ForeignKeyDeleteAction</color> <color=#f8f8f2>foreignKeyDeleteAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setForeignKeyDeleteActionVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignKeyDeleteAction</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setForeignKeyDeleteActionVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>ForeignKeyDeleteAction</color> <color=#f8f8f2>foreignKeyDeleteAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignKeyDeleteAction</color><color=#f8f8f2>,</color> <color=#e6db74>"foreignKeyDeleteAction"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>foreignKeyDeleteAction</color> <color=#f92672>=</color> <color=#f8f8f2>foreignKeyDeleteAction</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the action taken when a referenced record in the foreign key database is deleted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the action taken when a referenced record in the foreign key database is deleted.</color>
<color=#75715e>   * @see #setForeignKeyDeleteAction</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ForeignKeyDeleteAction</color> <color=#a6e22e>getForeignKeyDeleteAction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>foreignKeyDeleteAction</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the user-supplied object used for setting single-valued foreign keys to null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may <em>not</em> be used along with {@link #setMultiKeyCreator}. When using a</color>
<color=#75715e>   * multi-key creator, use {@link #setForeignMultiKeyNullifier} instead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the foreign key database property is non-null and the foreign key delete action is <code></color>
<color=#75715e>   * NULLIFY</code>, this property is required to be non-null; otherwise, this property is ignored.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>WARNING:</em> Key nullifier instances are shared by multiple threads and key nullifier</color>
<color=#75715e>   * methods are called without any special synchronization. Therefore, key creators must be thread</color>
<color=#75715e>   * safe. In general no shared state should be used and any caching of computed values must be done</color>
<color=#75715e>   * with proper synchronization.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param foreignKeyNullifier the user-supplied object used for setting single-valued foreign keys</color>
<color=#75715e>   *     to null.</color>
<color=#75715e>   * @see ForeignKeyNullifier @see ForeignKeyDeleteAction#NULLIFY @see #setForeignKeyDatabase</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setForeignKeyNullifier</color><color=#f8f8f2>(</color><color=#f8f8f2>ForeignKeyNullifier</color> <color=#f8f8f2>foreignKeyNullifier</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setForeignKeyNullifierVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignKeyNullifier</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setForeignKeyNullifierVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>ForeignKeyNullifier</color> <color=#f8f8f2>foreignKeyNullifier</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>foreignKeyNullifier</color> <color=#f92672>=</color> <color=#f8f8f2>foreignKeyNullifier</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the user-supplied object used for setting single-valued foreign keys to null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the user-supplied object used for setting single-valued foreign keys to null.</color>
<color=#75715e>   * @see #setForeignKeyNullifier</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ForeignKeyNullifier</color> <color=#a6e22e>getForeignKeyNullifier</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>foreignKeyNullifier</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the user-supplied object used for setting multi-valued foreign keys to null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the foreign key database property is non-null and the foreign key delete action is <code></color>
<color=#75715e>   * NULLIFY</code>, this property is required to be non-null; otherwise, this property is ignored.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>WARNING:</em> Key nullifier instances are shared by multiple threads and key nullifier</color>
<color=#75715e>   * methods are called without any special synchronization. Therefore, key creators must be thread</color>
<color=#75715e>   * safe. In general no shared state should be used and any caching of computed values must be done</color>
<color=#75715e>   * with proper synchronization.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param foreignMultiKeyNullifier the user-supplied object used for setting multi-valued foreign</color>
<color=#75715e>   *     keys to null.</color>
<color=#75715e>   * @see ForeignMultiKeyNullifier @see ForeignKeyDeleteAction#NULLIFY @see #setForeignKeyDatabase</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setForeignMultiKeyNullifier</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ForeignMultiKeyNullifier</color> <color=#f8f8f2>foreignMultiKeyNullifier</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setForeignMultiKeyNullifierVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignMultiKeyNullifier</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setForeignMultiKeyNullifierVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>ForeignMultiKeyNullifier</color> <color=#f8f8f2>foreignMultiKeyNullifier</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>foreignMultiKeyNullifier</color> <color=#f92672>=</color> <color=#f8f8f2>foreignMultiKeyNullifier</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the user-supplied object used for setting multi-valued foreign keys to null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the user-supplied object used for setting multi-valued foreign keys to null.</color>
<color=#75715e>   * @see #setForeignMultiKeyNullifier</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ForeignMultiKeyNullifier</color> <color=#a6e22e>getForeignMultiKeyNullifier</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>foreignMultiKeyNullifier</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only.</color>
<color=#75715e>   *     <p>Specifies whether the key extractor/creator will only use the primary key.</color>
<color=#75715e>   *     <p>Specifying that only the primary key is needed can be used to optimize primary database</color>
<color=#75715e>   *     updates and deletions. If a primary record is updated or deleted, and all associated</color>
<color=#75715e>   *     secondaries have this property set to true, then the existing primary record will not be</color>
<color=#75715e>   *     read. This potentially saves an I/O. When this property is <em>not</em> set to true (it is</color>
<color=#75715e>   *     false by default), the existing primary record must be read if it is not already in cache,</color>
<color=#75715e>   *     order to pass the primary data to the key extractor/creator.</color>
<color=#75715e>   *     <p>Note that if this property is true, either null or a non-null value may be passed to the</color>
<color=#75715e>   *     key extractor/creator for the primary data parameter. The key extractor/creator is expected</color>
<color=#75715e>   *     to ignore this parameter.</color>
<color=#75715e>   *     <p></color>
<color=#75715e>   * @param extractFromPrimaryKeyOnly whether the key extractor/creator will only use the primary</color>
<color=#75715e>   *     key.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setExtractFromPrimaryKeyOnly</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>extractFromPrimaryKeyOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setExtractFromPrimaryKeyOnlyVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>extractFromPrimaryKeyOnly</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setExtractFromPrimaryKeyOnlyVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>extractFromPrimaryKeyOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>extractFromPrimaryKeyOnly</color> <color=#f92672>=</color> <color=#f8f8f2>extractFromPrimaryKeyOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only.</color>
<color=#75715e>   *     <p>Returns whether the key extractor/creator will only use the primary key. If {@link</color>
<color=#75715e>   *     #setExtractFromPrimaryKeyOnly} has not been called, this method returns false.</color>
<color=#75715e>   * @return whether the key extractor/creator will only use the primary key.</color>
<color=#75715e>   * @see #setExtractFromPrimaryKeyOnly</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getExtractFromPrimaryKeyOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>extractFromPrimaryKeyOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies whether the secondary key is immutable.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Specifying that a secondary key is immutable can be used to optimize updates when the</color>
<color=#75715e>   * secondary key in a primary record will never be changed after that primary record is inserted.</color>
<color=#75715e>   * For immutable secondary keys, a best effort is made to avoid calling <code></color>
<color=#75715e>   * SecondaryKeyCreator.createSecondaryKey</code> when a primary record is updated. This</color>
<color=#75715e>   * optimization may reduce the overhead of an update operation significantly if the <code></color>
<color=#75715e>   * createSecondaryKey</code> operation is expensive.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Be sure to set this property to true only if the secondary key in the primary record is</color>
<color=#75715e>   * never changed. If this rule is violated, the secondary index will become corrupted, that is, it</color>
<color=#75715e>   * will become out of sync with the primary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param immutableSecondaryKey whether the secondary key is immutable.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>setImmutableSecondaryKey</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>immutableSecondaryKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setImmutableSecondaryKeyVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>immutableSecondaryKey</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setImmutableSecondaryKeyVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>immutableSecondaryKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>immutableSecondaryKey</color> <color=#f92672>=</color> <color=#f8f8f2>immutableSecondaryKey</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the secondary key is immutable. If {@link #setImmutableSecondaryKey} has not</color>
<color=#75715e>   * been called, this method returns false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether the secondary key is immutable.</color>
<color=#75715e>   * @see #setImmutableSecondaryKey</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getImmutableSecondaryKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>immutableSecondaryKey</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of this configuration object. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SecondaryConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For JCA Database handle caching.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via JEConnection.openSecondaryDatabase.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>configArg</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>configArg</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configArg</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>configArg</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SecondaryConfig</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"The SecondaryConfig argument is null."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>SecondaryConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecondaryConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>configArg</color><color=#f8f8f2>;</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>kcMatch</color> <color=#f92672>=</color> <color=#f8f8f2>equalOrBothNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyCreator</color><color=#f8f8f2>(),</color> <color=#f8f8f2>keyCreator</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>mkcMatch</color> <color=#f92672>=</color> <color=#f8f8f2>equalOrBothNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getMultiKeyCreator</color><color=#f8f8f2>(),</color> <color=#f8f8f2>multiKeyCreator</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>fkdMatch</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getForeignKeyDatabase</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>foreignKeyDatabase</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>fkdaMatch</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getForeignKeyDeleteAction</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>foreignKeyDeleteAction</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>fknMatch</color> <color=#f92672>=</color> <color=#f8f8f2>equalOrBothNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getForeignKeyNullifier</color><color=#f8f8f2>(),</color> <color=#f8f8f2>foreignKeyNullifier</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>fmknMatch</color> <color=#f92672>=</color>
        <color=#f8f8f2>equalOrBothNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getForeignMultiKeyNullifier</color><color=#f8f8f2>(),</color> <color=#f8f8f2>foreignMultiKeyNullifier</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>imskMatch</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getImmutableSecondaryKey</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>immutableSecondaryKey</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>kcMatch</color> <color=#f92672>&&</color> <color=#f8f8f2>mkcMatch</color> <color=#f92672>&&</color> <color=#f8f8f2>fkdMatch</color> <color=#f92672>&&</color> <color=#f8f8f2>fkdaMatch</color> <color=#f92672>&&</color> <color=#f8f8f2>fknMatch</color> <color=#f92672>&&</color> <color=#f8f8f2>fmknMatch</color> <color=#f92672>&&</color> <color=#f8f8f2>imskMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
        <color=#f8f8f2>genSecondaryConfigMismatchMessage</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>kcMatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>mkcMatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>fkdMatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>fkdaMatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>fknMatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>fmknMatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>imskMatch</color><color=#f8f8f2>);</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden For internal use only. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseConfig</color> <color=#a6e22e>setTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>triggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>triggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Triggers may only be associated with a Primary database"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden For internal use only. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseConfig</color> <color=#a6e22e>setOverrideTriggers</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>override</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Triggers may only be associated with a Primary database"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equalOrBothNull</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o1</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>o1</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>o1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>o2</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>String</color> <color=#a6e22e>genSecondaryConfigMismatchMessage</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>kcMatch</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>mkcMatch</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>fkdMatch</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>fkdaMatch</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>fknMatch</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>fmknMatch</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>imskMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color>
            <color=#e6db74>"The following SecondaryConfig parameters for the\n"</color>
                <color=#f92672>+</color> <color=#e6db74>"cached Database do not match the parameters for the\n"</color>
                <color=#f92672>+</color> <color=#e6db74>"requested Database:\n"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>kcMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" SecondaryKeyCreator\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>mkcMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" SecondaryMultiKeyCreator\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fkdMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ForeignKeyDelete\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fkdaMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ForeignKeyDeleteAction\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fknMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ForeignKeyNullifier\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fknMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ForeignMultiKeyNullifier\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>imskMatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ImmutableSecondaryKey\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the values for each configuration attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the values for each configuration attribute.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"keyCreator="</color>
        <color=#f92672>+</color> <color=#f8f8f2>keyCreator</color>
        <color=#f92672>+</color> <color=#e6db74>"\nmultiKeyCreator="</color>
        <color=#f92672>+</color> <color=#f8f8f2>multiKeyCreator</color>
        <color=#f92672>+</color> <color=#e6db74>"\nallowPopulate="</color>
        <color=#f92672>+</color> <color=#f8f8f2>allowPopulate</color>
        <color=#f92672>+</color> <color=#e6db74>"\nforeignKeyDatabase="</color>
        <color=#f92672>+</color> <color=#f8f8f2>foreignKeyDatabase</color>
        <color=#f92672>+</color> <color=#e6db74>"\nforeignKeyDeleteAction="</color>
        <color=#f92672>+</color> <color=#f8f8f2>foreignKeyDeleteAction</color>
        <color=#f92672>+</color> <color=#e6db74>"\nforeignKeyNullifier="</color>
        <color=#f92672>+</color> <color=#f8f8f2>foreignKeyNullifier</color>
        <color=#f92672>+</color> <color=#e6db74>"\nforeignMultiKeyNullifier="</color>
        <color=#f92672>+</color> <color=#f8f8f2>foreignMultiKeyNullifier</color>
        <color=#f92672>+</color> <color=#e6db74>"\nimmutableSecondaryKey="</color>
        <color=#f92672>+</color> <color=#f8f8f2>immutableSecondaryKey</color>
        <color=#f92672>+</color> <color=#e6db74>"\n"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>