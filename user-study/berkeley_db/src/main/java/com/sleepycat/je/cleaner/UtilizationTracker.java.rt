<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.cleaner</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Tracks changes to the utilization profile since the last checkpoint. This is the "global" tracker</color>
<color=#75715e> * for an environment that tracks changes as they occur in live operations. Other "local" tracker</color>
<color=#75715e> * classes are used to count utilization locally and then later transfer the information to the</color>
<color=#75715e> * global tracker, this tracker.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>All changes to this object occur must under the log write latch. It is possible to read</color>
<color=#75715e> * tracked info without holding the latch. This is done by the cleaner when selecting a file and by</color>
<color=#75715e> * the checkpointer when determining what FileSummaryLNs need to be written. To read tracked info</color>
<color=#75715e> * outside the log write latch, call getTrackedFile or getTrackedFiles.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>UtilizationTracker</color> <color=#66d9ef>extends</color> <color=#f8f8f2>BaseUtilizationTracker</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an empty tracker. The cleaner field of the environment object must be initialized</color>
<color=#75715e>   * before using this constructor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>UtilizationTracker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getCleaner</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructor used by the cleaner constructor, prior to setting the cleaner field of the</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>UtilizationTracker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cleaner</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Evicts tracked detail if the budget for the tracker is exceeded. Evicts only one file summary</color>
<color=#75715e>   * LN at most to keep eviction batches small. Returns the number of bytes freed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When flushFileSummary is called, the TrackedFileSummary is cleared via its reset method,</color>
<color=#75715e>   * which is called by FileSummaryLN.writeToLog. This is how memory is subtracted from the budget.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>evictMemory</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* If not tracking detail, there is nothing to evict. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>trackDetail</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do not start eviction until after recovery, since the</color>
<color=#75715e>     * UtilizationProfile will not be initialized properly.  UP</color>
<color=#75715e>     * initialization requires that all LNs have been replayed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * In a read-only env, we cannot free memory by flushing a</color>
<color=#75715e>     * FileSummaryLN.  Normally utilization information is not accumulated</color>
<color=#75715e>     * in a read-only env, but this may ocur during recovery.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>totalEvicted</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>totalBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>largestBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>TrackedFileSummary</color> <color=#f8f8f2>bestFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ONE_MB</color> <color=#f92672>=</color> <color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>TrackedFileSummary</color> <color=#f8f8f2>tfs</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getTrackedFiles</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>mem</color> <color=#f92672>=</color> <color=#f8f8f2>tfs</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mem</color> <color=#f92672>>=</color> <color=#f8f8f2>ONE_MB</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationProfile</color><color=#f8f8f2>().</color><color=#a6e22e>flushFileSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>tfs</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>totalEvicted</color> <color=#f92672>+=</color> <color=#f8f8f2>mem</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>totalBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>mem</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mem</color> <color=#f92672>></color> <color=#f8f8f2>largestBytes</color> <color=#f92672>&&</color> <color=#f8f8f2>tfs</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowFlush</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>largestBytes</color> <color=#f92672>=</color> <color=#f8f8f2>mem</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>bestFile</color> <color=#f92672>=</color> <color=#f8f8f2>tfs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bestFile</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>totalBytes</color> <color=#f92672>></color> <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>getTrackerBudget</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationProfile</color><color=#f8f8f2>().</color><color=#a6e22e>flushFileSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>bestFile</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>totalEvicted</color> <color=#f92672>+=</color> <color=#f8f8f2>largestBytes</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totalEvicted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts the addition of all new log entries including LNs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>countNewLogEntry</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>countNew</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts a node that has become obsolete and tracks the LSN offset, if non-zero, to avoid a</color>
<color=#75715e>   * lookup during cleaning.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A zero LSN offset is used as a special value when obsolete offset tracking is not desired.</color>
<color=#75715e>   * [#15365] The file header entry (at offset zero) is never counted as obsolete, it is assumed to</color>
<color=#75715e>   * be obsolete by the cleaner.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should only be called for LNs and INs (i.e, only for nodes). If type is null we</color>
<color=#75715e>   * assume it is an LN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>countObsoleteNode</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>countObsolete</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// countPerFile</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// countPerDb</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// trackOffset</color>
        <color=#66d9ef>true</color><color=#f8f8f2>);</color> <color=#75715e>// checkDupOffsets</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts as countObsoleteNode does, but since the LSN may be inexact, does not track the obsolete</color>
<color=#75715e>   * LSN offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should only be called for LNs and INs (i.e, only for nodes). If type is null we</color>
<color=#75715e>   * assume it is an LN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>countObsoleteNodeInexact</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>countObsolete</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// countPerFile</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// countPerDb</color>
        <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// trackOffset</color>
        <color=#66d9ef>false</color><color=#f8f8f2>);</color> <color=#75715e>// checkDupOffsets</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts as countObsoleteNode does, tracks the obsolete LSN offset, but does not fire an assert</color>
<color=#75715e>   * if the offset has already been counted. Use this method when the same LSN offset may be counted</color>
<color=#75715e>   * twice in certain circumstances.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should only be called for LNs and INs (i.e, only for nodes). If type is null we</color>
<color=#75715e>   * assume it is an LN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>countObsoleteNodeDupsAllowed</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>countObsolete</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// countPerFile</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// countPerDb</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// trackOffset</color>
        <color=#66d9ef>false</color><color=#f8f8f2>);</color> <color=#75715e>// checkDupOffsets</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a tracked summary for the given file which will not be flushed. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TrackedFileSummary</color> <color=#a6e22e>getUnflushableTrackedSummary</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TrackedFileSummary</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>getFileSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>setAllowFlush</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Allocates DbFileSummary information in the DatabaseImpl, which is the database key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Must be called under the log write latch, and the returned object may only be accessed under</color>
<color=#75715e>   * the log write latch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the summary, or null if the DB should not be tracked because the file has been deleted,</color>
<color=#75715e>   *     or null if the databaseKey param is null.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DbFileSummary</color> <color=#a6e22e>getDbFileSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>databaseKey</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>databaseKey</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbFileSummary</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*willModify*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>