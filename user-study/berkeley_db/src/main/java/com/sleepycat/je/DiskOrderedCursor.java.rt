<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DiskOrderedCursorImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * DiskOrderedCursor returns records in unsorted order in exchange for generally faster retrieval</color>
<color=#75715e> * times. Instead of key order, an approximation of disk order is used, which results in less I/O.</color>
<color=#75715e> * This can be useful when the application needs to scan all records in one or more databases, and</color>
<color=#75715e> * will be applying filtering logic which does not need key ordered retrieval. A DiskOrderedCursor</color>
<color=#75715e> * is created using the {@link Database#openCursor(DiskOrderedCursorConfig)} method or the {@link</color>
<color=#75715e> * Environment#openDiskOrderedCursor(Database[], DiskOrderedCursorConfig)} method.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>WARNING:</em> After opening a DiskOrderedCursor, deletion of log files by the JE log</color>
<color=#75715e> * cleaner will be disabled until {@link #close()} is called. To prevent unbounded growth of disk</color>
<color=#75715e> * usage, be sure to call {@link #close()} to re-enable log file deletion.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>Optional configurations:</em> the following options are available to tune the</color>
<color=#75715e> * DiskOrderedCursor.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The DiskOrderedCursor creates a background producer thread which prefetches some target</color>
<color=#75715e> * records and inserts them in a queue for use by the cursor. The parameter {@link</color>
<color=#75715e> * EnvironmentConfig#DOS_PRODUCER_QUEUE_TIMEOUT} applies to this background thread, and controls the</color>
<color=#75715e> * timeout which governs the blocking queue.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>See {@link DiskOrderedCursorConfig} for additional options.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Consistency Guarantees</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The consistency guarantees provided by a DiskOrderedCursor are, at best, the same as those</color>
<color=#75715e> * provided by READ_UNCOMMITTED (see {@link LockMode}). With READ_UNCOMMITTED, changes made by all</color>
<color=#75715e> * transactions, including uncommitted transactions, may be returned by the scan. Also, a record</color>
<color=#75715e> * returned by the scan is not locked, and may be modified or deleted by the application after it is</color>
<color=#75715e> * returned, including modification or deletion of the record at the cursor position.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In other words, the records returned by the scan correspond to the state of the database (as</color>
<color=#75715e> * if READ_UNCOMMITTED were used) at the beginning of the scan plus some, but not all, changes made</color>
<color=#75715e> * by the application after the start of the scan. The user should not rely on the scan returning</color>
<color=#75715e> * any changes made after the start of the scan. For example, if the record referred to by the</color>
<color=#75715e> * DiskOrderedCursor is deleted after the DiskOrderedCursor is positioned at that record,</color>
<color=#75715e> * getCurrent() will still return the key and value of that record and OperationStatus.SUCCESS.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If a transactionally correct data set is required (as defined by READ_COMMITTED), the</color>
<color=#75715e> * application must ensure that all transactions that write to the database are committed before the</color>
<color=#75715e> * beginning of the scan. During the scan, no records in the database of the scan may be inserted,</color>
<color=#75715e> * deleted, or modified. While this is possible, it is not the expected use case for a</color>
<color=#75715e> * DiskOrderedCursor.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Performance Considerations</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The internal algorithm used to approximate disk ordered reads is as follows. For simplicity,</color>
<color=#75715e> * the algorithm description assumes that a single database is being scanned, but the algorithm is</color>
<color=#75715e> * almost the same when multiple databases are involved. An internal producer thread is used to scan</color>
<color=#75715e> * the database. This thread is created and started when the {@code DiskOrderedCursor} is created,</color>
<color=#75715e> * and is destroyed by {@link DiskOrderedCursor#close}. Scanning consists of two phases. In phase I</color>
<color=#75715e> * the in-cache Btree of the scanned database is traversed in key order. The LSNs (physical record</color>
<color=#75715e> * addresses) of the data to be fetched are accumulated in a memory buffer. Btree latches are held</color>
<color=#75715e> * during the traversal, but only for short durations. In phase II the accumulated LSNs are sorted</color>
<color=#75715e> * into disk order, fetched one at a time in that order, and the fetched data is added to a blocking</color>
<color=#75715e> * queue. The {@code getNext} method in this class removes the next entry from the queue. This</color>
<color=#75715e> * approach allows concurrent access to the Database during both phases of the scan, including</color>
<color=#75715e> * access by the application's consumer thread (the thread calling {@code getNext}).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Phase I does not always process the entire Btree. During phase I if the accumulation of LSNs</color>
<color=#75715e> * causes the {@link DiskOrderedCursorConfig#setInternalMemoryLimit internal memory limit} or {@link</color>
<color=#75715e> * DiskOrderedCursorConfig#setLSNBatchSize LSN batch size} to be exceeded, phase I is ended and</color>
<color=#75715e> * phase II begins. In this case, after phase II finishes, phase I resumes where it left off in the</color>
<color=#75715e> * Btree traversal. Phase I and II are repeated until the entire database is scanned.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>By default, the internal memory limit and LSN batch size are unbounded (see {@link</color>
<color=#75715e> * DiskOrderedCursorConfig}). For a database with a large number of records, this could cause an</color>
<color=#75715e> * {@code OutOfMemoryError}. Therefore, it is strongly recommended that either the internal memory</color>
<color=#75715e> * limit or LSN batch size is configured to limit the use of memory during the scan. On the other</color>
<color=#75715e> * hand, the efficiency of the scan is proportional to the amount of memory used. If enough memory</color>
<color=#75715e> * is available, the ideal case would be that the database is scanned in in a single iteration of</color>
<color=#75715e> * phase I and II. The more iterations, the more random IO will occur.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another factor is the {@link DiskOrderedCursorConfig#setQueueSize queue size}. During the</color>
<color=#75715e> * phase I Btree traversal, data that is resident in the JE cache will be added to the queue</color>
<color=#75715e> * immediately, rather than waiting until phase II and fetching it, but only if the queue is not</color>
<color=#75715e> * full. Therefore, increasing the size of the queue can avoid fetching data that is resident in the</color>
<color=#75715e> * JE cache. Also, increasing the queue size can improve parallelism of the work done by the</color>
<color=#75715e> * producer and consumer threads.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Also note that a {@link DiskOrderedCursorConfig#setKeysOnly keys-only} scan is much more</color>
<color=#75715e> * efficient than the default keys-and-data scan. With a keys-only scan, only the BINs (bottom</color>
<color=#75715e> * internal nodes) of the Btree need to be fetched; the LNs (leaf nodes) do not. This is also true</color>
<color=#75715e> * of databases {@link DatabaseConfig#setSortedDuplicates configured for duplicates}, even for a</color>
<color=#75715e> * keys-and-data scan, since internally the key and data are both contained in the BIN.</color>
<color=#75715e> *</color>
<color=#75715e> * @since 5.0</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DiskOrderedCursor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ForwardCursor</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Database</color><color=#f92672>[]</color> <color=#f8f8f2>dbHandles</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>dbImpls</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DiskOrderedCursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DiskOrderedCursorImpl</color> <color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>DiskOrderedCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color><color=#f92672>[]</color> <color=#f8f8f2>dbHandles</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DiskOrderedCursorConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbHandles</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandles</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>config</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbHandles</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dbHandles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dbImpls</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[</color><color=#f8f8f2>dbHandles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>dups</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>dbHandles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>dbHandles</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>

        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>addCursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dups</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>dups</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"In a multi-database disk ordered cursor "</color>
                  <color=#f92672>+</color> <color=#e6db74>"either all or none of the databases should support "</color>
                  <color=#f92672>+</color> <color=#e6db74>"duplicates"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>dosCursorImpl</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DiskOrderedCursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpls</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbHandles</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>removeCursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Database handle for the database that contains the latest record returned by</color>
<color=#75715e>   * getNext().</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The Database handle associated with this Cursor.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbHandles</color><color=#f92672>[</color><color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrDb</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Discards the cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cursor handle may not be used again after this method has been called, regardless of the</color>
<color=#75715e>   * method's success or failure.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isClosed</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkEnv</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>dbHandles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbHandles</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>removeCursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @param options the ReadOptions, or null to use default options. For DiskOrderedCursors, {@link</color>
<color=#75715e>   *     ReadOptions#getLockMode} must return null, {@link LockMode#DEFAULT} or {@link</color>
<color=#75715e>   *     LockMode#READ_UNCOMMITTED}, and no locking is performed.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>checkLockMode</color><color=#f8f8f2>((</color><color=#f8f8f2>options</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getLockMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>);</color>

      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>CURRENT</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>NEXT</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Get type not allowed: "</color> <color=#f92672>+</color> <color=#f8f8f2>getType</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @param lockMode the locking attributes. For DiskOrderedCursors this parameter must be either</color>
<color=#75715e>   *     null, {@link LockMode#DEFAULT} or {@link LockMode#READ_UNCOMMITTED}, and no locking is</color>
<color=#75715e>   *     performed.</color>
<color=#75715e>   * @return {@link OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if there are no more records</color>
<color=#75715e>   *     in the DiskOrderedCursor set, otherwise, {@link OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}. If the record referred to by a DiskOrderedCursor is deleted after</color>
<color=#75715e>   *     the ForwardCursor is positioned at that record, getCurrent() will still return the key and</color>
<color=#75715e>   *     value of that record and OperationStatus.SUCCESS.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEMPTY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @param lockMode the locking attributes. For DiskOrderedCursors this parameter must be either</color>
<color=#75715e>   *     null, {@link LockMode#DEFAULT} or {@link LockMode#READ_UNCOMMITTED}, and no locking is</color>
<color=#75715e>   *     performed.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns this cursor's configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This may differ from the configuration used to open this object if the cursor existed</color>
<color=#75715e>   * previously.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return This cursor's configuration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DiskOrderedCursorConfig</color> <color=#a6e22e>getConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkLockMode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color> <color=#f92672>||</color> <color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"lockMode must be null or LockMode.READ_UNCOMMITTED"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Checks the environment and cursor state. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkEnv</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>trace</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For testing and other internal use. */</color>
  <color=#f8f8f2>DiskOrderedCursorImpl</color> <color=#a6e22e>getCursorImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dosCursorImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>