<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.evictor</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>sun.misc.Unsafe</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Field</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicLong</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The default implementation of the off-heap allocator.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Uses the sun.misc.Unsafe class to call the native 'malloc' and 'free' functions to allocate</color>
<color=#75715e> * memory from the 'C' runtime heap.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class should not be referenced symbolically by any other other class. This is necessary</color>
<color=#75715e> * to avoid a linkage error if JE is run on a JVM without the Unsafe class. The {@link</color>
<color=#75715e> * OffHeapAllocatorFactory} loads this class by name, using reflection.</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>CHeapAllocator</color> <color=#66d9ef>implements</color> <color=#f8f8f2>OffHeapAllocator</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * We should probably always perform bounds checking, since going out of</color>
<color=#75715e>   * bounds is likely to crash the JVM.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>CHECK_BOUNDS</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of bytes for storing the int block size. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SIZE_BYTES</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Unsafe</color> <color=#f8f8f2>unsafe</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>usedBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#a6e22e>CHeapAllocator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We cannot call Unsafe.getUnsafe because it throws</color>
<color=#75715e>     * SecurityException when called from a non-bootstrap class. Getting</color>
<color=#75715e>     * the static field (that would be returned by Unsafe.getUnsafe) is</color>
<color=#75715e>     * better than calling the Unsafe private constructor, since Unsafe</color>
<color=#75715e>     * is intended to have a singleton instance.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Field</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>Unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaredField</color><color=#f8f8f2>(</color><color=#e6db74>"theUnsafe"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>setAccessible</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>unsafe</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Unsafe</color><color=#f8f8f2>)</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to get Unsafe object"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>unsafe</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"Unsafe singleton is null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check for seemingly obvious byte and int sizes, to ensure that the</color>
<color=#75715e>     * JVM isn't doing something strange.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY_BYTE_INDEX_SCALE</color> <color=#f92672>!=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unexpected Unsafe.ARRAY_BYTE_INDEX_SCALE: "</color> <color=#f92672>+</color> <color=#f8f8f2>Unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY_BYTE_INDEX_SCALE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY_INT_INDEX_SCALE</color> <color=#f92672>!=</color> <color=#f8f8f2>SIZE_BYTES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unexpected Unsafe.ARRAY_INT_INDEX_SCALE: "</color> <color=#f92672>+</color> <color=#f8f8f2>Unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY_INT_INDEX_SCALE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaxBytes</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getUsedBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>usedBytes</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>allocSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>memId</color> <color=#f92672>=</color> <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>allocateMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>allocSize</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>setMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>usedBytes</color><color=#f8f8f2>.</color><color=#a6e22e>addAndGet</color><color=#f8f8f2>(</color><color=#f8f8f2>addOverhead</color><color=#f8f8f2>(</color><color=#f8f8f2>allocSize</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>memId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>free</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>totalSize</color> <color=#f92672>=</color> <color=#f8f8f2>addOverhead</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>freeMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>usedBytes</color><color=#f8f8f2>.</color><color=#a6e22e>addAndGet</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>totalSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totalSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>addOverhead</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>allocSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* TODO: There is 70 bytes added overhead when using the IBM JDK. */</color>

    <color=#75715e>/* Blocks are aligned on 8 byte boundaries with a 16 byte header. */</color>
    <color=#f8f8f2>allocSize</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>allocSize</color> <color=#f92672>%</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The minimum block size is 24 bytes. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>allocSize</color> <color=#f92672><</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>24</color> <color=#f8f8f2>:</color> <color=#f8f8f2>allocSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>totalSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>addOverhead</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memOff</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufOff</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>CHECK_BOUNDS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memId</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"memId is 0"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"buf is null"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memOff</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>memOff</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>></color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"memOff="</color> <color=#f92672>+</color> <color=#f8f8f2>memOff</color> <color=#f92672>+</color> <color=#e6db74>" memSize="</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" copyLen="</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bufOff</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>bufOff</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>></color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"bufOff="</color> <color=#f92672>+</color> <color=#f8f8f2>bufOff</color> <color=#f92672>+</color> <color=#e6db74>" bufSize="</color> <color=#f92672>+</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" copyLen="</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>copyMemory</color><color=#f8f8f2>(</color>
        <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>memId</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color> <color=#f92672>+</color> <color=#f8f8f2>memOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>Unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY_BYTE_BASE_OFFSET</color> <color=#f92672>+</color> <color=#f8f8f2>bufOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufOff</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memOff</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>CHECK_BOUNDS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memId</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"memId is 0"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"buf is null"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memOff</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>memOff</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>></color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"memOff="</color> <color=#f92672>+</color> <color=#f8f8f2>memOff</color> <color=#f92672>+</color> <color=#e6db74>" memSize="</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>memId</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" copyLen="</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bufOff</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>bufOff</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>></color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"bufOff="</color> <color=#f92672>+</color> <color=#f8f8f2>bufOff</color> <color=#f92672>+</color> <color=#e6db74>" bufSize="</color> <color=#f92672>+</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" copyLen="</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>copyMemory</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>Unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY_BYTE_BASE_OFFSET</color> <color=#f92672>+</color> <color=#f8f8f2>bufOff</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>memId</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color> <color=#f92672>+</color> <color=#f8f8f2>memOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fromMemId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>fromMemOff</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>toMemId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>toMemOff</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>CHECK_BOUNDS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fromMemId</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>toMemId</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"memId is 0"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fromMemOff</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>fromMemOff</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>></color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>fromMemId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"memOff="</color> <color=#f92672>+</color> <color=#f8f8f2>fromMemOff</color> <color=#f92672>+</color> <color=#e6db74>" memSize="</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>fromMemId</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" copyLen="</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>toMemOff</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>toMemOff</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>></color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>toMemId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"memOff="</color> <color=#f92672>+</color> <color=#f8f8f2>toMemOff</color> <color=#f92672>+</color> <color=#e6db74>" memSize="</color> <color=#f92672>+</color> <color=#f8f8f2>size</color><color=#f8f8f2>(</color><color=#f8f8f2>toMemId</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" copyLen="</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>unsafe</color><color=#f8f8f2>.</color><color=#a6e22e>copyMemory</color><color=#f8f8f2>(</color>
        <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>fromMemId</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color> <color=#f92672>+</color> <color=#f8f8f2>fromMemOff</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>toMemId</color> <color=#f92672>+</color> <color=#f8f8f2>SIZE_BYTES</color> <color=#f92672>+</color> <color=#f8f8f2>toMemOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>