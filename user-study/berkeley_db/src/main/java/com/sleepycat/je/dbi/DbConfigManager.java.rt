<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DbInternal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.PropUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileNotFoundException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Enumeration</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Properties</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * DbConfigManager holds the configuration parameters for an environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In general, all configuration parameters are represented by a ConfigParam defined in</color>
<color=#75715e> * com.sleepycat.je.config.EnvironmentParams and can be represented by a property described by the</color>
<color=#75715e> * EnvironmentConfig String constants. Environment parameters have some interesting twists because</color>
<color=#75715e> * there are some attributes that are scoped by handle, such as the commit durability (txnSync,</color>
<color=#75715e> * txnNoSync, etc) parameters.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>DbConfigManager is instantiated first by the EnvironmentImpl, and is loaded with the base</color>
<color=#75715e> * configuration parameters. If replication is enabled, additional properties are added when the</color>
<color=#75715e> * ReplicatedEnvironment is instantiated. In order to keep replication code out of the base code,</color>
<color=#75715e> * replication parameters are loaded by way of the addConfigurations method.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DbConfigManager</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The name of the JE properties file, to be found in the environment</color>
<color=#75715e>   * directory.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>PROPFILE_NAME</color> <color=#f92672>=</color> <color=#e6db74>"je.properties"</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * All properties in effect for this JE instance, both environment</color>
<color=#75715e>   * and replication environment scoped, are stored in this Properties field.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Save a reference to the environment config to access debug properties</color>
<color=#75715e>   * that are fields in EnvironmentConfig, must be set before the</color>
<color=#75715e>   * environment is created, and are not represented as JE properties.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>environmentConfig</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>DbConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>environmentConfig</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getProps</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>getEnvironmentConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>environmentConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Parameter Access</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this parameter is specified by the user's configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Can be used to determine whether to apply another param, if this param is not specified, for</color>
<color=#75715e>   * example, when this param is deprecated and another param takes its place.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return whether this parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSpecified</color><color=#f8f8f2>(</color><color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>configParam</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if param wasn't explicitly set</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>String</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if param wasn't explicitly set</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>String</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>configParamName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>configParamName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if it wasn't explicitly set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>BooleanConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* See if it's specified. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>configParam</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>parseBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if it wasn't explicitly set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>short</color> <color=#a6e22e>getShort</color><color=#f8f8f2>(</color><color=#f8f8f2>ShortConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* See if it's specified. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>configParam</color><color=#f8f8f2>);</color>
    <color=#66d9ef>short</color> <color=#f8f8f2>shortValue</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>shortValue</color> <color=#f92672>=</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>parseShort</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * This should never happen if we put error checking into</color>
<color=#75715e>         * the loading of config values.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>shortValue</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if it wasn't explicitly set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>IntConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* See if it's specified. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>configParam</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>intValue</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>intValue</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * This should never happen if we put error checking into</color>
<color=#75715e>         * the loading of config values.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>intValue</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if it wasn't explicitly set</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LongConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* See if it's specified. */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>configParam</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>longValue</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>longValue</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * This should never happen if we put error checking</color>
<color=#75715e>         * into the loading of config values.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>longValue</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if it wasn't explicitly set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>DurationConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>configParam</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>millis</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>millis</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * This should never happen if we put error checking into</color>
<color=#75715e>         * the loading of config values.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>millis</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get this parameter from the environment wide configuration settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return default for param if it wasn't explicitly set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDurationNS</color><color=#f8f8f2>(</color><color=#f8f8f2>DurationConfigParam</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>configParam</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>nanos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nanos</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDurationNS</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * This should never happen if we put error checking into</color>
<color=#75715e>         * the loading of config values.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nanos</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Helper methods used by EnvironmentConfig and ReplicationConfig.</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Validate a collection of configurations, checking that - the name and value are valid - a</color>
<color=#75715e>   * replication param is not being set through an EnvironmentConfig class, and a non-rep param is</color>
<color=#75715e>   * not set through a ReplicationConfig instance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This may happen at Environment start time, or when configurations have been mutated. The</color>
<color=#75715e>   * configurations have been collected from a file, or from a Properties object, and haven't gone</color>
<color=#75715e>   * through the usual validation path that occurs when XXXConfig.setConfigParam is called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>SuppressWarnings is used here because Enumeration doesn't work well with Properties in Java</color>
<color=#75715e>   * 1.5</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via XxxConfig(Properties) ctor.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>validateProperties</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isRepConfigInstance</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>configClassName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Check that the properties have valid names and values. */</color>
    <color=#f8f8f2>Enumeration</color> <color=#f8f8f2>propNames</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>propertyNames</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>propNames</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreElements</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propNames</color><color=#f8f8f2>.</color><color=#a6e22e>nextElement</color><color=#f8f8f2>();</color>
      <color=#75715e>/* Is this a valid property name? */</color>
      <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* See if the parameter is an multi-value parameter. */</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>mvParamName</color> <color=#f92672>=</color> <color=#f8f8f2>ConfigParam</color><color=#f8f8f2>.</color><color=#a6e22e>multiValueParamName</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>mvParamName</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Remove the property only if:</color>
<color=#75715e>           * 1. The parameter name indicates it's a replication</color>
<color=#75715e>           *    parameter</color>
<color=#75715e>           * 2. The Environment is being opened in standalone mode</color>
<color=#75715e>           * 3. The parameter is being initialized in the properties</color>
<color=#75715e>           *    file</color>
<color=#75715e>           * See SR [#19080].</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configClassName</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
              <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isRepConfigInstance</color>
              <color=#f92672>&&</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_PARAM_PREFIX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>" is not a valid BDBJE environment configuration"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Only verify that the parameter is "for replication" if this is</color>
<color=#75715e>       * being validated on behalf of a FooConfig class, not a</color>
<color=#75715e>       * je.properties file.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configClassName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* We're validating a config instance, not a file. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRepConfigInstance</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isForReplication</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>name</color>
                    <color=#f92672>+</color> <color=#e6db74>" is not a replication parameter and cannot "</color>
                    <color=#f92672>+</color> <color=#e6db74>" be set through "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>configClassName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isForReplication</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>name</color>
                    <color=#f92672>+</color> <color=#e6db74>" is a replication parameter and cannot be set "</color>
                    <color=#f92672>+</color> <color=#e6db74>" through "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>configClassName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Is this a valid property value? */</color>
      <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>validateValue</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Apply the configurations specified in the je.properties file to override the programmatically</color>
<color=#75715e>   * set configuration values held in the property bag.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via XxxConfig(Properties) ctor.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>applyFileConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReplication</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>File</color> <color=#f8f8f2>paramFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>fileProps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envHome</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>.</color><color=#a6e22e>isFile</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>paramFile</color> <color=#f92672>=</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>paramFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>PROPFILE_NAME</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>FileInputStream</color> <color=#f8f8f2>fis</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>paramFile</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fileProps</color><color=#f8f8f2>.</color><color=#a6e22e>load</color><color=#f8f8f2>(</color><color=#f8f8f2>fis</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fis</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Validate the existing file. No config instance name is used</color>
<color=#75715e>       * because we're validating a je.properties file.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>validateProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>fileProps</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>/* config instance name, don't use. */</color>

      <color=#75715e>/* Add them to the configuration object. */</color>
      <color=#f8f8f2>Iterator</color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>fileProps</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color> <color=#f8f8f2>propPair</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propPair</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propPair</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>setConfigParam</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>props</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>value</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>/* don't need mutability, we're</color>
<color=#75715e>                   initializing */</color>
            <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>/* value already validated when set in</color>
<color=#75715e>                   config object */</color>
            <color=#f8f8f2>forReplication</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color><color=#f8f8f2>);</color> <color=#75715e>/* verifyForReplication */</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Klockwork - ok</color>
<color=#75715e>       * Eat the exception, okay if the file doesn't exist.</color>
<color=#75715e>       */</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>e2</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"An error occurred when reading "</color> <color=#f92672>+</color> <color=#f8f8f2>paramFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Helper method for environment and replication configuration classes. Set a configuration</color>
<color=#75715e>   * parameter. Check that the name is valid. If specified, also check that the value is valid.Value</color>
<color=#75715e>   * checking may be disabled for unit testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param props Property bag held within the configuration object.</color>
<color=#75715e>   * @throws IllegalArgumentException via XxxConfig.setXxx methods and XxxConfig(Properties) ctor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>requireMutability</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>forReplication</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>verifyForReplication</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>isMVParam</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Is this a valid property name? */</color>
    <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* See if the parameter is an multi-value parameter. */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>mvParamName</color> <color=#f92672>=</color> <color=#f8f8f2>ConfigParam</color><color=#f8f8f2>.</color><color=#a6e22e>multiValueParamName</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>mvParamName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMultiValueParam</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>paramName</color> <color=#f92672>+</color> <color=#e6db74>" is not a valid BDBJE environment parameter"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>isMVParam</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMultiValueParam</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Only verify that the parameter is "for replication" if this is</color>
<color=#75715e>     * being validated on behalf of a FooConfig class, not a</color>
<color=#75715e>     * je.properties file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>verifyForReplication</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forReplication</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isForReplication</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color> <color=#f92672>+</color> <color=#e6db74>" is not a replication parameter."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isForReplication</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>paramName</color>
                  <color=#f92672>+</color> <color=#e6db74>" is a replication parameter and cannot be "</color>
                  <color=#f92672>+</color> <color=#e6db74>" set through this configuration class."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Is this a mutable property? */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requireMutability</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMutable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>paramName</color> <color=#f92672>+</color> <color=#e6db74>" is not a mutable BDBJE environment configuration"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMVParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Helper method for environment and replication configuration classes. Get the configuration</color>
<color=#75715e>   * value for the specified parameter, checking that the parameter name is valid.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param props Property bag held within the configuration object.</color>
<color=#75715e>   * @throws IllegalArgumentException via XxxConfig.getConfigParam.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>isMVParam</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Is this a valid property name? */</color>
    <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* See if the parameter is an multi-value parameter. */</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>mvParamName</color> <color=#f92672>=</color> <color=#f8f8f2>ConfigParam</color><color=#f8f8f2>.</color><color=#a6e22e>multiValueParamName</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUPPORTED_PARAMS</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>mvParamName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>paramName</color> <color=#f92672>+</color> <color=#e6db74>" is not a valid BDBJE environment configuration"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>isMVParam</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMultiValueParam</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isMultiValueParam</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Use getMultiValueValues() to retrieve Multi-Value "</color> <color=#f92672>+</color> <color=#e6db74>"parameter values."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMVParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Helper method for environment and replication configuration classes. Gets either the value</color>
<color=#75715e>   * stored in this configuration or the default value for this param.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Helper method for environment and replication configuration classes. Gets either the value</color>
<color=#75715e>   * stored in this configuration or the default value for this param.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Helper method for environment and replication configuration classes. Set and validate the value</color>
<color=#75715e>   * for the specified parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>validateValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>validateValue</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>setProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Helper method for environment and replication configuration classes. Set and validate the value</color>
<color=#75715e>   * for the specified parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setVal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>validateValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>validateValue</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>setProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Helper method for getting integer values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>IntConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"No value for "</color> <color=#f92672>+</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Bad value for "</color> <color=#f92672>+</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>": "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Helper method for setting integer values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setIntVal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>IntConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>),</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Helper method for getting long values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>getLongVal</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>LongConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"No value for "</color> <color=#f92672>+</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Bad value for "</color> <color=#f92672>+</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>": "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Helper method for getting boolean values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getBooleanVal</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>BooleanConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"No value for "</color> <color=#f92672>+</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>parseBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Helper method for setting boolean values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setBooleanVal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>BooleanConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>),</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Helper method for getting duration values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>DurationConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>unit</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"TimeUnit argument may not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"No value for "</color> <color=#f92672>+</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>unit</color><color=#f8f8f2>.</color><color=#a6e22e>convert</color><color=#f8f8f2>(</color><color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>),</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Bad value for "</color> <color=#f92672>+</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>": "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Helper method for setting duration values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setDurationVal</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>DurationConfigParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>formatDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>),</color> <color=#f8f8f2>validateValue</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ensures that leading and trailing whitespace is ignored when parsing a boolean. It is ignored</color>
<color=#75715e>   * by BooleanConfigParam.validateValue, so it must be ignored here also. [#22212]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>parseBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>parseBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>.</color><color=#a6e22e>trim</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>