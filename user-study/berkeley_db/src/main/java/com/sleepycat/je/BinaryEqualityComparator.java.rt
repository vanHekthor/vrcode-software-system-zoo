<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A tag interface used to mark a BTree or duplicate comparator class as a <em>binary equality</em></color>
<color=#75715e> * comparator, that is, a comparator that considers two keys (byte arrays) to be equal if and only</color>
<color=#75715e> * if they have the same length and they are equal byte-per-byte.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If both the BTree and duplicate comparators used by a databse are binary-equality comparators,</color>
<color=#75715e> * then certain internal optimizations can be enabled. Specifically, the "BIN-delta blind-puts"</color>
<color=#75715e> * optimization described below is made possible.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>We say that a record operation (insertion, update, or deletion) is performed blindly in a</color>
<color=#75715e> * BIN-delta when the delta does not contain a slot with the operation's key and we don't need to</color>
<color=#75715e> * access the full BIN to check whether such a slot exists there or to extract any information from</color>
<color=#75715e> * the full-BIN slot, if it exists. Performing a blind operation involves inserting the record in</color>
<color=#75715e> * the BIN-delta, and in case of deletion, marking the BIN slot as deleted. When the delta and the</color>
<color=#75715e> * full BIN are merged at a later time, the blind operation will be translated to an insertion,</color>
<color=#75715e> * update, or delete depending on whether the full BIN contained the record or not.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Normally, blind puts are not possible: we need to know whether the put is actually an update</color>
<color=#75715e> * or an insertion, i.e., whether the key exists in the full BIN or not. Furthermore, in case of</color>
<color=#75715e> * update we also need to know the location of the previous record version to make the current</color>
<color=#75715e> * update abortable. However, it is possible to answer at least the key existence question by adding</color>
<color=#75715e> * a small amount of extra information in the deltas. If we do so, puts that are actual insertions</color>
<color=#75715e> * can be done blindly.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To answer whether a key exists in a full BIN or not, each BIN-delta stores a bloom filter,</color>
<color=#75715e> * which is a very compact, approximate representation of the set of keys in the full BIN. Bloom</color>
<color=#75715e> * filters can answer set membership questions with no false negatives and very low probability of</color>
<color=#75715e> * false positives. As a result, put operation that are actual insertions can almost always be</color>
<color=#75715e> * performed blindly.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because bloom filters work by applying hash functions on keys (where each key byte</color>
<color=#75715e> * participates in the hash computation), an additional requirement for blind puts is that a</color>
<color=#75715e> * database uses "binary equality" comparators, that is, a comparator that considers two keys to be</color>
<color=#75715e> * equal if and only if they have the same length and they are equal byte-per-byte. Inheriting from</color>
<color=#75715e> * the BinaryEqualityComparator interface marks an actual comparator as having the "binary equality"</color>
<color=#75715e> * property.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Comparators are configured using {@link</color>
<color=#75715e> * DatabaseConfig#setBtreeComparator(java.util.Comparator)} or {@link</color>
<color=#75715e> * DatabaseConfig#setBtreeComparator(Class)}, and {@link</color>
<color=#75715e> * DatabaseConfig#setDuplicateComparator(java.util.Comparator)} or {@link</color>
<color=#75715e> * DatabaseConfig#setDuplicateComparator(Class)}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>As described in the javadoc for these methods, comparators must be used with great caution,</color>
<color=#75715e> * since a badly behaved comparator can cause B-tree corruption.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>BinaryEqualityComparator</color> <color=#f8f8f2>{}</color>