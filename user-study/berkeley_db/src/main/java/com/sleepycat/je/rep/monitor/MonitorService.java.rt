<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.monitor</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationGroup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.RequestMessage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.ResponseMessage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.monitor.Protocol.GroupChange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.monitor.Protocol.JoinGroup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.monitor.Protocol.LeaveGroup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ReplicationFormatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher.ExecutingRunnable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher.ExecutingService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHookExecute.doHookIfSet</color><color=#f8f8f2>;</color>

<color=#75715e>/** @hidden For internal use only. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>MonitorService</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ExecutingService</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Test hooks that are run before processing various events.  If the hooks</color>
<color=#75715e>   * throw IllegalStateException, then the event will not be processed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>GroupChangeEvent</color><color=#f92672>></color> <color=#f8f8f2>processGroupChangeHook</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>JoinGroupEvent</color><color=#f92672>></color> <color=#f8f8f2>processJoinGroupHook</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>LeaveGroupEvent</color><color=#f92672>></color> <color=#f8f8f2>processLeaveGroupHook</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Monitor</color> <color=#f8f8f2>monitor</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Identifies the Group Service. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>SERVICE_NAME</color> <color=#f92672>=</color> <color=#e6db74>"Monitor"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>MonitorService</color><color=#f8f8f2>(</color><color=#f8f8f2>Monitor</color> <color=#f8f8f2>monitor</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>monitor</color> <color=#f92672>=</color> <color=#f8f8f2>monitor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>protocol</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Protocol</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>getMonitorNameIdPair</color><color=#f8f8f2>(),</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>dispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>getChannelFactory</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerFormatterNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>formatter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>getMonitorNameIdPair</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Dynamically invoked process methods */</color>

  <color=#75715e>/** Notify the monitor about the group change (add/remove a node) event. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ResponseMessage</color> <color=#a6e22e>process</color><color=#f8f8f2>(</color><color=#f8f8f2>GroupChange</color> <color=#f8f8f2>groupChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>GroupChangeEvent</color> <color=#f8f8f2>event</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>GroupChangeEvent</color><color=#f8f8f2>(</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>groupChange</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>()),</color>
            <color=#f8f8f2>groupChange</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>groupChange</color><color=#f8f8f2>.</color><color=#a6e22e>getOpType</color><color=#f8f8f2>());</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>processGroupChangeHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>notifyGroupChange</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Notify the monitor about a node has joined the group. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ResponseMessage</color> <color=#a6e22e>process</color><color=#f8f8f2>(</color><color=#f8f8f2>JoinGroup</color> <color=#f8f8f2>joinGroup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>JoinGroupEvent</color> <color=#f8f8f2>event</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>JoinGroupEvent</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>joinGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>joinGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getMasterName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>joinGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getJoinTime</color><color=#f8f8f2>());</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>processJoinGroupHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>notifyJoin</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Notify the monitor about a node has left the group. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ResponseMessage</color> <color=#a6e22e>process</color><color=#f8f8f2>(</color><color=#f8f8f2>LeaveGroup</color> <color=#f8f8f2>leaveGroup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LeaveGroupEvent</color> <color=#f8f8f2>event</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>LeaveGroupEvent</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>leaveGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>leaveGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getMasterName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>leaveGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getLeaveReason</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>leaveGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getJoinTime</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>leaveGroup</color><color=#f8f8f2>.</color><color=#a6e22e>getLeaveTime</color><color=#f8f8f2>());</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>processLeaveGroupHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>monitor</color><color=#f8f8f2>.</color><color=#a6e22e>notifyLeave</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Runnable</color> <color=#a6e22e>getRunnable</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>dataChannel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MonitorServiceRunnable</color><color=#f8f8f2>(</color><color=#f8f8f2>dataChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>class</color> <color=#a6e22e>MonitorServiceRunnable</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ExecutingRunnable</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MonitorServiceRunnable</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>dataChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>dataChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>ResponseMessage</color> <color=#a6e22e>getResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>process</color><color=#f8f8f2>(</color><color=#f8f8f2>MonitorService</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>request</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>logMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>