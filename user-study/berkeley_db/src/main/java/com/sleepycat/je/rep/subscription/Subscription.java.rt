<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeoutException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Object to represent a subscription to receive and process replication streams from Feeder. It</color>
<color=#75715e> * defines the public subscription APIs which can be called by clients.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Subscription</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* configuration parameters */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionConfig</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>;</color>
  <color=#75715e>/* logger */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#75715e>/* subscription dummy environment */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReplicatedEnvironment</color> <color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>;</color>
  <color=#75715e>/* subscription statistics */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionStat</color> <color=#f8f8f2>statistics</color><color=#f8f8f2>;</color>

  <color=#75715e>/* main subscription thread */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>SubscriptionThread</color> <color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create an instance of subscription from configuration</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param configuration configuration parameters</color>
<color=#75715e>   * @param logger logging handler</color>
<color=#75715e>   * @throws IllegalArgumentException if env directory does not exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Subscription</color><color=#f8f8f2>(</color><color=#f8f8f2>SubscriptionConfig</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>,</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>configuration</color> <color=#f92672>=</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

    <color=#75715e>/* init environment and parameters */</color>
    <color=#f8f8f2>dummyRepEnv</color> <color=#f92672>=</color> <color=#f8f8f2>createDummyRepEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>configuration</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>subscriptionThread</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>statistics</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SubscriptionStat</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Start subscription main thread, subscribe from the very first VLSN from the feeder. The</color>
<color=#75715e>   * subscriber will stay alive and consume all entries until it shuts down.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InsufficientLogException if feeder is unable to stream from start VLSN</color>
<color=#75715e>   * @throws GroupShutdownException if subscription receives group shutdown</color>
<color=#75715e>   * @throws InternalException if internal exception</color>
<color=#75715e>   * @throws TimeoutException if subscription initialization timeout</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>start</color><color=#f8f8f2>()</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InsufficientLogException</color><color=#f8f8f2>,</color> <color=#f8f8f2>GroupShutdownException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>InternalException</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeoutException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>start</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST_VLSN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Start subscription main thread, subscribe from a specific VLSN from the feeder. The subscriber</color>
<color=#75715e>   * will stay alive and consume all entries until it shuts down.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param vlsn the start VLSN of subscription. It cannot be NULL_VLSN otherwise an</color>
<color=#75715e>   *     IllegalArgumentException will be raised.</color>
<color=#75715e>   * @throws InsufficientLogException if feeder is unable to stream from start VLSN</color>
<color=#75715e>   * @throws GroupShutdownException if subscription receives group shutdown</color>
<color=#75715e>   * @throws InternalException if internal exception</color>
<color=#75715e>   * @throws TimeoutException if subscription initialization timeout</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>start</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InsufficientLogException</color><color=#f8f8f2>,</color> <color=#f8f8f2>GroupShutdownException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>InternalException</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeoutException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Start VLSN cannot be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>subscriptionThread</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>SubscriptionThread</color><color=#f8f8f2>(</color><color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>,</color> <color=#f8f8f2>statistics</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
    <color=#75715e>/* fire the subscription thread */</color>
    <color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>waitForSubscriptionInitDone</color><color=#f8f8f2>(</color><color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>RepInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullRepImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>),</color>
          <color=#e6db74>"Timeout in initialization, shut down "</color> <color=#f92672>+</color> <color=#e6db74>"subscription."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimeoutException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Subscription initialization timeout "</color>
              <color=#f92672>+</color> <color=#e6db74>"after "</color>
              <color=#f92672>+</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getPollTimeoutMs</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" ms"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* if not success, throw exception to caller */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>exp</color> <color=#f92672>=</color> <color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>.</color><color=#a6e22e>getStoredException</color><color=#f8f8f2>();</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>.</color><color=#a6e22e>getStatus</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SUCCESS</color><color=#f8f8f2>:</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>VLSN_NOT_AVAILABLE</color><color=#f8f8f2>:</color>
        <color=#75715e>/* shutdown and close env before throw exception to client */</color>
        <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>InsufficientLogException</color><color=#f8f8f2>)</color> <color=#f8f8f2>exp</color><color=#f8f8f2>;</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>GRP_SHUTDOWN</color><color=#f8f8f2>:</color>
        <color=#75715e>/* shutdown and close env before throw exception to client */</color>
        <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>GroupShutdownException</color><color=#f8f8f2>)</color> <color=#f8f8f2>exp</color><color=#f8f8f2>;</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>UNKNOWN_ERROR</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>CONNECTION_ERROR</color><color=#f8f8f2>:</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#75715e>/* shutdown and close env before throw exception to client */</color>
        <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InternalException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"internal exception from "</color> <color=#f92672>+</color> <color=#e6db74>"subscription thread, err:"</color> <color=#f92672>+</color> <color=#f8f8f2>exp</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>(),</color> <color=#f8f8f2>exp</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Shutdown a subscription completely */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subscriptionThread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>.</color><color=#a6e22e>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>subscriptionThread</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dummyRepEnv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>NodeType</color> <color=#f8f8f2>nodeType</color> <color=#f92672>=</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeType</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>.</color><color=#a6e22e>isClosed</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>RepInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullRepImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>).</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>revertToNull</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Closed env "</color>
              <color=#f92672>+</color> <color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"(forget transient id? "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get subscription thread status, if thread does not exit, return subscription not yet started.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return status of subscription</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SubscriptionStatus</color> <color=#a6e22e>getSubscriptionStatus</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subscriptionThread</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>SubscriptionStatus</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>.</color><color=#a6e22e>getStatus</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get subscription statistics</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return statistics</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SubscriptionStat</color> <color=#a6e22e>getStatistics</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>statistics</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For unit test only</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return dummy env</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>ReplicatedEnvironment</color> <color=#a6e22e>getDummyRepEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dummyRepEnv</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For unit test only</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param testHook test hook</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setExceptionHandlingTestHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>SubscriptionThread</color><color=#f92672>></color> <color=#f8f8f2>testHook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subscriptionThread</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>subscriptionThread</color><color=#f8f8f2>.</color><color=#a6e22e>setExceptionHandlingTestHook</color><color=#f8f8f2>(</color><color=#f8f8f2>testHook</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a dummy replicated env used by subscription. The dummy env will be used in the</color>
<color=#75715e>   * SubscriptionThread, SubscriptionProcessMessageThread and SubscriptionOutputThread to connect to</color>
<color=#75715e>   * feeder.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param conf subscription configuration</color>
<color=#75715e>   * @param logger logger</color>
<color=#75715e>   * @return a replicated environment</color>
<color=#75715e>   * @throws IllegalArgumentException if env directory does not exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>ReplicatedEnvironment</color> <color=#a6e22e>createDummyRepEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>SubscriptionConfig</color> <color=#f8f8f2>conf</color><color=#f8f8f2>,</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicatedEnvironment</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getSubscriberHome</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envHome</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Env directory "</color> <color=#f92672>+</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" does not exist."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>ret</color> <color=#f92672>=</color>
        <color=#f8f8f2>RepInternal</color><color=#f8f8f2>.</color><color=#a6e22e>createInternalEnvHandle</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>createReplicationConfig</color><color=#f8f8f2>(),</color> <color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>createEnvConfig</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * A safety check and clear id if necessary, to prevent env with</color>
<color=#75715e>     * existing id from failing the subscription</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>pair</color> <color=#f92672>=</color> <color=#f8f8f2>RepInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullRepImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>).</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeType</color><color=#f8f8f2>().</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>pair</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#e6db74>"Env has a non-null id, clear its id(name id: "</color> <color=#f92672>+</color> <color=#f8f8f2>pair</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>pair</color><color=#f8f8f2>.</color><color=#a6e22e>revertToNull</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#e6db74>"Env created with name id pair "</color> <color=#f92672>+</color> <color=#f8f8f2>pair</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Wait for subscription thread to finish initialization</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param t thread of subscription</color>
<color=#75715e>   * @return true if init done successfully, false if timeout</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>waitForSubscriptionInitDone</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionThread</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>PollCondition</color><color=#f8f8f2>(</color><color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getPollIntervalMs</color><color=#f8f8f2>(),</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getPollTimeoutMs</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#a6e22e>@Override</color>
      <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>condition</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getStatus</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>SubscriptionStatus</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}.</color><color=#a6e22e>await</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>