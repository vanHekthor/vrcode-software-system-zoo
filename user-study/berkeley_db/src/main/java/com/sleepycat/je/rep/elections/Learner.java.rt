<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.elections</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.UnknownMasterException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.Proposal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.WinningProposal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Protocol.MasterQueryResponse</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Protocol.Result</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Protocol.Value</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Utils.FutureTrackingCompService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThread</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThreadFactory</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.BufferedReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStreamReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.Channels</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.LinkedList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.ExecutorService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.Executors</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The Learner agent. It runs in its own dedicated thread, listening for messages announcing the</color>
<color=#75715e> * results of elections and, in turn, invoking Listeners within the process to propagate the result.</color>
<color=#75715e> * It also listens for requests asking for elections results, and provides static methods for</color>
<color=#75715e> * requesting those results.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Learner</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ElectionAgentThread</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* The service dispatcher used by the Learner */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The listeners interested in Election outcomes. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Listener</color><color=#f92672>></color> <color=#f8f8f2>listeners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><></color><color=#f8f8f2>();</color>

  <color=#75715e>/* The latest winning proposal and value propagated to Listeners. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Proposal</color> <color=#f8f8f2>currentProposal</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Value</color> <color=#f8f8f2>currentValue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Identifies the Learner Service. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>SERVICE_NAME</color> <color=#f92672>=</color> <color=#e6db74>"Learner"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an instance of a Learner which will listen for election results to propagate to local</color>
<color=#75715e>   * listeners, and for requests asking for election results.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this constructor does not take a repNode as an argument, so that it can be used as</color>
<color=#75715e>   * the basis for the standalone Monitor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param protocol the protocol used for message exchange</color>
<color=#75715e>   * @param serviceDispatcher the service dispatcher used by the agent</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Learner</color><color=#f8f8f2>(</color><color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#a6e22e>Learner</color><color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#e6db74>"Learner Thread "</color> <color=#f92672>+</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceDispatcher</color> <color=#f92672>=</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Add a listener for logging. */</color>
    <color=#f8f8f2>addListener</color><color=#f8f8f2>(</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Listener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Value</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Learner notified. Proposal:"</color> <color=#f92672>+</color> <color=#f8f8f2>proposal</color> <color=#f92672>+</color> <color=#e6db74>" Value: "</color> <color=#f92672>+</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a Listener to the existing set of listeners, so that it can be informed of the outcome of</color>
<color=#75715e>   * election results.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param listener the new listener to be added</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addListener</color><color=#f8f8f2>(</color><color=#f8f8f2>Listener</color> <color=#f8f8f2>listener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>listeners</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>listener</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>listener</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes a Listeners from the existing set of listeners.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param listener the listener to be removed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeListener</color><color=#f8f8f2>(</color><color=#f8f8f2>Listener</color> <color=#f8f8f2>listener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>listeners</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>listener</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Processes a result message</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param proposal the winning proposal</color>
<color=#75715e>   * @param value the winning value</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>processResult</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Value</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>currentProposal</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>proposal</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>currentProposal</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Ignoring obsolete winner: "</color> <color=#f92672>+</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>currentProposal</color> <color=#f92672>=</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>currentValue</color> <color=#f92672>=</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

    <color=#75715e>/* We have a new winning proposal and value, inform the listeners */</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>listeners</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Listener</color> <color=#f8f8f2>listener</color> <color=#f8f8f2>:</color> <color=#f8f8f2>listeners</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>listener</color><color=#f8f8f2>.</color><color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>currentProposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentValue</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
          <color=#75715e>/* Report the exception and keep going. */</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Exception in Learner Listener: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The main Learner loop. It accepts requests and propagates them to its Listeners, if the</color>
<color=#75715e>   * proposal isn't out of date.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelQueue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Learner started"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>channel</color> <color=#f92672>=</color>
            <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>takeChannel</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/* blocking socket */</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getReadTimeout</color><color=#f8f8f2>());</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* A soft shutdown. */</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>BufferedReader</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedReader</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InputStreamReader</color><color=#f8f8f2>(</color><color=#f8f8f2>Channels</color><color=#f8f8f2>.</color><color=#a6e22e>newInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>)));</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>requestLine</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readLine</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requestLine</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>;</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>requestMessage</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>parseRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>requestLine</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>ime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>processIME</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ime</color><color=#f8f8f2>);</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>op</color> <color=#f92672>=</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>.</color><color=#a6e22e>getOp</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color>
              <color=#e6db74>"learner request: "</color> <color=#f92672>+</color> <color=#f8f8f2>op</color> <color=#f92672>+</color> <color=#e6db74>" sender: "</color> <color=#f92672>+</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>.</color><color=#a6e22e>getSenderId</color><color=#f8f8f2>());</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>op</color> <color=#f92672>==</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>RESULT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Result</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Result</color><color=#f8f8f2>)</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>processResult</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getProposal</color><color=#f8f8f2>(),</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>op</color> <color=#f92672>==</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER_QUERY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>processMasterQuery</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>op</color> <color=#f92672>==</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>SHUTDOWN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Learner thread exiting"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
                <color=#e6db74>"Malformed request: '"</color> <color=#f92672>+</color> <color=#f8f8f2>requestLine</color> <color=#f92672>+</color> <color=#e6db74>"'"</color> <color=#f92672>+</color> <color=#e6db74>" Unexpected op:"</color> <color=#f92672>+</color> <color=#f8f8f2>op</color><color=#f8f8f2>;</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>ime</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>InvalidMessageException</color><color=#f8f8f2>(</color><color=#f8f8f2>MessageError</color><color=#f8f8f2>.</color><color=#a6e22e>BAD_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>processIME</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ime</color><color=#f8f8f2>);</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"IO exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>cleanup</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Treat it like a shutdown, exit the thread. */</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color> <color=#e6db74>"Learner unexpected interrupted"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>SERVICE_NAME</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>cleanup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Responds to a query for the current master. A response is only generated if the node is</color>
<color=#75715e>   * currently in the Master or Replica state to ensure that the information is reasonably current.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>processMasterQuery</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>currentProposal</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Don't have any election results to share. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>((</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>).</color><color=#a6e22e>getState</color><color=#f8f8f2>().</color><color=#a6e22e>isActive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Knowledge of master is potentially obsolete */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PrintWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>Channels</color><color=#f8f8f2>.</color><color=#a6e22e>newOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>MasterQueryResponse</color> <color=#f8f8f2>responseMessage</color> <color=#f92672>=</color>
          <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>MasterQueryResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>currentProposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentValue</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The request message may be of an earlier version. If so, this</color>
<color=#75715e>       * node transparently read the older version. JE only throws out</color>
<color=#75715e>       * InvalidMessageException when the version of the request message</color>
<color=#75715e>       * is newer than the current protocol. To avoid sending a response</color>
<color=#75715e>       * that the requester cannot understand, we send a response in the</color>
<color=#75715e>       * same version as that of the original request message.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>responseMessage</color><color=#f8f8f2>.</color><color=#a6e22e>setSendVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>requestMessage</color><color=#f8f8f2>.</color><color=#a6e22e>getSendVersion</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>responseMessage</color><color=#f8f8f2>.</color><color=#a6e22e>wireFormat</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Queries other learners, in parallel, to determine whether they know of an existing master in</color>
<color=#75715e>   * the group. If one is found, the result is processed via {@link #processResult} as though it</color>
<color=#75715e>   * were an election result that was sent to the Learner, resulting in the node transitioning to</color>
<color=#75715e>   * the master or replica state as appropriate.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this node itself is not allowed to become a master as a result of such a query. It</color>
<color=#75715e>   * must only do so via an election.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param learnerSockets the sockets associated with learners at other nodes. The nodes are</color>
<color=#75715e>   *     queried on these sockets.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>queryForMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learnerSockets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>learnerSockets</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>threadPoolSize</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>learnerSockets</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(),</color> <color=#ae81ff>10</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ExecutorService</color> <color=#f8f8f2>pool</color> <color=#f92672>=</color>
        <color=#f8f8f2>Executors</color><color=#f8f8f2>.</color><color=#a6e22e>newFixedThreadPool</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>threadPoolSize</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>StoppableThreadFactory</color><color=#f8f8f2>(</color><color=#e6db74>"JE Learner"</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>));</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>masterQuery</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>MasterQuery</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#f8f8f2>compService</color> <color=#f92672>=</color>
          <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>broadcastMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>learnerSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterQuery</color><color=#f8f8f2>,</color> <color=#f8f8f2>pool</color><color=#f8f8f2>);</color>
      <color=#75715e>/*</color>
<color=#75715e>       * 2 * read timeout below to roughly cover the max time for a</color>
<color=#75715e>       * message exchange.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>WithFutureExceptionHandler</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color><color=#f8f8f2>(</color>
          <color=#f8f8f2>compService</color><color=#f8f8f2>,</color>
          <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getReadTimeout</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>processResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>me</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>getResponseMessage</color><color=#f8f8f2>().</color><color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER_QUERY_RESPONSE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>MasterQueryResponse</color> <color=#f8f8f2>accept</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterQueryResponse</color><color=#f8f8f2>)</color> <color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>getResponseMessage</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>MasterValue</color> <color=#f8f8f2>masterValue</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>accept</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>masterValue</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>masterValue</color><color=#f8f8f2>.</color><color=#a6e22e>getNameId</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

              <color=#75715e>/*</color>
<color=#75715e>               * Should not transition to master as a result</color>
<color=#75715e>               * of a query it risks imposing a hard recovery</color>
<color=#75715e>               * on the replicas.</color>
<color=#75715e>               */</color>
              <color=#66d9ef>return</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>processResult</color><color=#f8f8f2>(</color><color=#f8f8f2>accept</color><color=#f8f8f2>.</color><color=#a6e22e>getProposal</color><color=#f8f8f2>(),</color> <color=#f8f8f2>masterValue</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}.</color><color=#a6e22e>execute</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownNow</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the socket address for the current master, or null if one could not be determined from</color>
<color=#75715e>   * the available set of learners. This API is suitable for tools which need to contact the master</color>
<color=#75715e>   * for a specific service, e.g. to delete a replication node, or to add a monitor. This method</color>
<color=#75715e>   * could be used in principle to establish other types of nodes as well via a tool, but that is</color>
<color=#75715e>   * currently done by the handshake process.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param protocol the protocol to be used when determining the master</color>
<color=#75715e>   * @param learnerSockets the learner to be queried for the master</color>
<color=#75715e>   * @param logger for log messages</color>
<color=#75715e>   * @return the MasterValue identifying the master</color>
<color=#75715e>   * @throws UnknownMasterException if no master could be established</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>MasterValue</color> <color=#a6e22e>findMaster</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learnerSockets</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>learnerSockets</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>threadPoolSize</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>learnerSockets</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(),</color> <color=#ae81ff>10</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ExecutorService</color> <color=#f8f8f2>pool</color> <color=#f92672>=</color> <color=#f8f8f2>Executors</color><color=#f8f8f2>.</color><color=#a6e22e>newFixedThreadPool</color><color=#f8f8f2>(</color><color=#f8f8f2>threadPoolSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#f8f8f2>compService</color> <color=#f92672>=</color>
          <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>broadcastMessage</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>learnerSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>MasterQuery</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pool</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>MasterQueryResponse</color><color=#f92672>></color> <color=#f8f8f2>results</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><></color><color=#f8f8f2>();</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>WithFutureExceptionHandler</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color><color=#f8f8f2>(</color>
          <color=#f8f8f2>compService</color><color=#f8f8f2>,</color>
          <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getReadTimeout</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>processResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>me</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>ResponseMessage</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>getResponseMessage</color><color=#f8f8f2>();</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER_QUERY_RESPONSE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>results</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>((</color><color=#f8f8f2>MasterQueryResponse</color><color=#f8f8f2>)</color> <color=#f8f8f2>response</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Unexpected MasterQuery response:"</color> <color=#f92672>+</color> <color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>wireFormat</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}.</color><color=#a6e22e>execute</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>MasterQueryResponse</color> <color=#f8f8f2>bestResponse</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterQueryResponse</color> <color=#f8f8f2>result</color> <color=#f8f8f2>:</color> <color=#f8f8f2>results</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>bestResponse</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getProposal</color><color=#f8f8f2>().</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>bestResponse</color><color=#f8f8f2>.</color><color=#a6e22e>getProposal</color><color=#f8f8f2>())</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>bestResponse</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bestResponse</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Could not determine master from helpers at:"</color> <color=#f92672>+</color> <color=#f8f8f2>learnerSockets</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>bestResponse</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownNow</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A method to re-broadcast this Learner's notion of the master. This re-broadcast is done</color>
<color=#75715e>   * primarily to inform an obsolete master that it's no longer the current master. Obsolete master</color>
<color=#75715e>   * situations arise in network partition scenarios, where a current master is not able to</color>
<color=#75715e>   * participate in an election, nor is it informed about the results. The re-broadcast is the</color>
<color=#75715e>   * mechanism for rectifying such a situation. When the obsolete master receives the new results</color>
<color=#75715e>   * after the network partition has been fixed, it will revert to being a replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param learners the learners that must be informed</color>
<color=#75715e>   * @param threadPool the pool used to dispatch broadcast requests in in parallel</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reinformLearners</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learners</color><color=#f8f8f2>,</color> <color=#f8f8f2>ExecutorService</color> <color=#f8f8f2>threadPool</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Proposer</color><color=#f8f8f2>.</color><color=#a6e22e>WinningProposal</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>currentProposal</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>winningProposal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WinningProposal</color><color=#f8f8f2>(</color><color=#f8f8f2>currentProposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentValue</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>informLearners</color><color=#f8f8f2>(</color><color=#f8f8f2>learners</color><color=#f8f8f2>,</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadPool</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A utility method used to broadcast the results of an election to Listeners.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param learners that need to be informed.</color>
<color=#75715e>   * @param winningProposal the result that needs to be propagated</color>
<color=#75715e>   * @param protocol to be used for communication</color>
<color=#75715e>   * @param threadPool used to supply threads for the broadcast</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>informLearners</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>learners</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Proposer</color><color=#f8f8f2>.</color><color=#a6e22e>WinningProposal</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Protocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ExecutorService</color> <color=#f8f8f2>threadPool</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>learners</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>learners</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"There must be at least one learner"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Informing "</color> <color=#f92672>+</color> <color=#f8f8f2>learners</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" learners."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#f8f8f2>compService</color> <color=#f92672>=</color>
        <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>broadcastMessage</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>learners</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>Result</color><color=#f8f8f2>(</color><color=#f8f8f2>winningProposal</color><color=#f8f8f2>.</color><color=#a6e22e>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>winningProposal</color><color=#f8f8f2>.</color><color=#a6e22e>chosenValue</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>threadPool</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Consume the futures. */</color>

    <color=#75715e>/* Atomic to provide incrementable "final" to nested method. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>new</color> <color=#f8f8f2>Utils</color><color=#f8f8f2>.</color><color=#a6e22e>WithFutureExceptionHandler</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color><color=#f8f8f2>(</color>
        <color=#f8f8f2>compService</color><color=#f8f8f2>,</color>
        <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getReadTimeout</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#a6e22e>@Override</color>
      <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>processResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>me</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Do nothing, just consume the futures. */</color>
        <color=#f8f8f2>count</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#a6e22e>@Override</color>
      <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>processNullResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>me</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>getException</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>count</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#a6e22e>@Override</color>
      <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}.</color><color=#a6e22e>execute</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Informed learners: "</color> <color=#f92672>+</color> <color=#f8f8f2>count</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see StoppableThread#getLogger */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Notifies the listener that a new proposal has been accepted. Note that</color>
<color=#75715e>   * the value may be unchanged. The proposals may be out of sequence, it's</color>
<color=#75715e>   * up to the listener to deal with it appropriately.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>Listener</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Value</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>