<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Extends BasicLocker to share locks with another Locker that is being used to open a database.</color>
<color=#75715e> * HandleLocker holds a read lock on the NameLN for the Database object, to prevent rename, removal</color>
<color=#75715e> * or truncation of a database while it is open. The HandleLocker and the Locker used to open the</color>
<color=#75715e> * database both hold a NameLN lock at the same time, so they must share locks to avoid conflicts.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Accounts for the fact that the Txn may end before this locker ends by only keeping the Txn ID</color>
<color=#75715e> * rather than a reference to the Txn object. A reference to a non-tnxl Locker is OK, OTOH, because</color>
<color=#75715e> * it is short lived.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Handle Locking Overview ------------------------ Environment.openDatabase calls</color>
<color=#75715e> * Environment.setupDatabase, which calls Database.initHandleLocker to create the HandleLocker.</color>
<color=#75715e> * setupDatabase ensures that the HandleLocker is passed to DbTree.getDb and createDb. These latter</color>
<color=#75715e> * methods acquire a read lock on the NameLN for the HandleLocker, in addition to acquiring a read</color>
<color=#75715e> * or write lock for the openDatabase locker.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If setupDatabase is not successful, it ensures that locks are released via</color>
<color=#75715e> * HandleLocker.endOperation. If setupDatabase is successful, the handle is returned by</color>
<color=#75715e> * openDatabase, and Database.close must be called to release the lock. The handle lock is released</color>
<color=#75715e> * by calling HandleLocker.endOperation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A special case is when a user txn is passed to openDatabase. If the txn aborts, the Database</color>
<color=#75715e> * handle must be invalidated. When setupDatabase succeeds it passes the handle to</color>
<color=#75715e> * Txn.addOpenedDatabase, which remembers the handle. Txn.abort invalidates the handle.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>NameLN Migration and LSN Changes [#20617] ----------------------------------------- When the</color>
<color=#75715e> * log cleaner migrates a NameLN, its LSN changes and the new LSN is locked on behalf of all</color>
<color=#75715e> * existing lockers by CursorImpl.lockAfterLsnChange. lockAfterLsnChange is also used when a dirty</color>
<color=#75715e> * deferred-write LN is logged by BIN.logDirtyLN, as part of flushing a BIN during a checkpoint or</color>
<color=#75715e> * eviction.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because handle lockers are legitimately very long lived, it is important that</color>
<color=#75715e> * lockAfterLsnChange releases the locks on the old LSN, to avoid a steady accumulation of locks in</color>
<color=#75715e> * a HandleLocker. Therefore, lockAfterLsnChange will release the lock on the old LSN, for</color>
<color=#75715e> * HandleLockers only. Although it may be desirable to release the old LSN lock on other long lived</color>
<color=#75715e> * lockers, it is too risky. In an experiment, this caused problems with demotion and upgrade, when</color>
<color=#75715e> * a lock being demoted or upgraded was released.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because LSNs can change, it is also important that we don't rely on a single NameLN locker ID</color>
<color=#75715e> * (LSN) as a data structure key for handle locks. This was acceptable when a stable Node ID was</color>
<color=#75715e> * used as a lock ID, but is no longer appropriate now that mutable LSNs are used as lock IDs.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>HandleLocker</color> <color=#66d9ef>extends</color> <color=#f8f8f2>BasicLocker</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>shareWithTxnId</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>shareWithNonTxnlLocker</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a HandleLocker. */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>HandleLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>shareWithTxnId</color> <color=#f92672>=</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>TxnManager</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_TXN_ID</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>shareWithNonTxnlLocker</color> <color=#f92672>=</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>HandleLocker</color> <color=#a6e22e>createHandleLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HandleLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether this locker can share locks with the given locker. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shareWithTxnId</color> <color=#f92672>!=</color> <color=#f8f8f2>TxnManager</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_TXN_ID</color> <color=#f92672>&&</color> <color=#f8f8f2>shareWithTxnId</color> <color=#f92672>==</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>shareWithNonTxnlLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>shareWithNonTxnlLocker</color> <color=#f92672>==</color> <color=#f8f8f2>other</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Because handle lockers are legitimately very long lived, it is important that</color>
<color=#75715e>   * lockAfterLsnChange releases the locks on the old LSN, to avoid a steady accumulation of locks</color>
<color=#75715e>   * in a HandleLocker</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>allowReleaseLockAfterLsnChange</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>