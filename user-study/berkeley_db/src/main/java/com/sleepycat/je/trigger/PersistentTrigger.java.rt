<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.trigger</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Transaction</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Placeholder to be used when persistent triggers are supported in the future. See warning at the</color>
<color=#75715e> * top of Trigger.java</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that all subtypes of PersistentTrigger must be serializable, because they are stored</color>
<color=#75715e> * persistently in the environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following table captures the relationship between the database granularity operations and</color>
<color=#75715e> * their associated trigger methods.</color>
<color=#75715e> *</color>
<color=#75715e> * <table BORDER CELLPADDING=3 CELLSPACING=1 width="50%" align="center"></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td ALIGN=CENTER><b>Database Operation</b></td></color>
<color=#75715e> * <td ALIGN=CENTER><b>Trigger Method</b></td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td>{@link Environment#openDatabase Environment.openDatabase} resulting in</color>
<color=#75715e> * the creation of a new primary database. Or the first open of a database for</color>
<color=#75715e> * write operations.</td></color>
<color=#75715e> * <td>{@link #open open}</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td>{@link Database#close Database.close} the close of a database that was</color>
<color=#75715e> * opened for write operations.</td></color>
<color=#75715e> * <td>{@link #close close}</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td>{@link Environment#removeDatabase Environment.removeDatabase}</td></color>
<color=#75715e> * <td>{@link PersistentTrigger#remove remove}</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td>{@link Environment#truncateDatabase Environment.truncateDatabase}</td></color>
<color=#75715e> * <td>{@link PersistentTrigger#truncate truncate}</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td>{@link Environment#renameDatabase Environment.renameDatabase}</td></color>
<color=#75715e> * <td>{@link PersistentTrigger#rename rename}</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * </table></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>PersistentTrigger</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Trigger</color><color=#f8f8f2>,</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* Database operations */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked after the open of the first {@link Database} writable handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A call to the open trigger always precedes any subsequent calls to the {@link #put} and</color>
<color=#75715e>   * {@link #delete} triggers defined below, since the <code>put</code> and <code>delete</code></color>
<color=#75715e>   * operations can only be invoked on a database handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the database is replicated, the replay mechanism on a <code>Replica</code> may open and</color>
<color=#75715e>   * close databases as it replays the replication stream. The maximum number of databases that may</color>
<color=#75715e>   * be open at any given time and the duration for which they can be left open can be controlled by</color>
<color=#75715e>   * configuring <code>ReplicationConfig.REPLAY_MAX_OPEN_DB_HANDLES</code> and <code></color>
<color=#75715e>   * ReplicationConfig.REPLAY_DB_HANDLE_TIMEOUT</code> respectively.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The method may be invoked when the database is first created, or subsequently when a new</color>
<color=#75715e>   * trigger is added to an existing database. As a result, a call to this trigger is always</color>
<color=#75715e>   * preceded by a call to the {@link #addTrigger(Transaction) addTrigger} trigger method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the active transaction associated with the operation. The argument is null if the</color>
<color=#75715e>   *     operation is not transactional.</color>
<color=#75715e>   * @param environment a handle to the environment associated with the database being opened. The</color>
<color=#75715e>   *     trigger code must not close the environment handle.</color>
<color=#75715e>   * @param isNew is true if the database was newly created as a result of the call to {@link</color>
<color=#75715e>   *     Environment#openDatabase}</color>
<color=#75715e>   * @see Environment#openDatabase</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>open</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>environment</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNew</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method associated with the close of the last writable {@link Database} handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the database is replicated, the replay mechanism on a <code>Replica</code> may open and</color>
<color=#75715e>   * close databases as it replays the replication stream. The maximum number of databases that may</color>
<color=#75715e>   * be open at any given time and the duration for which they can be left open can be controlled by</color>
<color=#75715e>   * configuring <code>ReplicationConfig.REPLAY_MAX_OPEN_DB_HANDLES</code> and <code></color>
<color=#75715e>   * ReplicationConfig.REPLAY_DB_HANDLE_TIMEOUT</code> respectively.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Database#close</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked after the successful removal of a primary {@link Database}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction associated with the operation. The argument is null if the</color>
<color=#75715e>   *     environment is non-transactional.</color>
<color=#75715e>   * @see Environment#removeDatabase</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked after the successful truncation of a {@link Database}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction associated with the operation. The argument is null if the</color>
<color=#75715e>   *     environment is non-transactional.</color>
<color=#75715e>   * @see Environment#truncateDatabase</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>truncate</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked after the successful renaming of a primary {@link Database}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction associated with the operation. The argument is null if the</color>
<color=#75715e>   *     environment is non-transactional.</color>
<color=#75715e>   * @param newName it's current (new) name</color>
<color=#75715e>   * @see Environment#renameDatabase</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>