<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationNetworkConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TracerFormatter</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Constructor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/** Class for creating DataChannel instances. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DataChannelFactoryBuilder</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** A count of the number of factories for which construction was attempted. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>factoryCount</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Construct the "default" DataChannelFactory that arises from an empty DataChannelFactory</color>
<color=#75715e>   * configuration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>constructDefault</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleChannelFactory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Construct a DataChannelFactory from the specified network configuration. The choice of</color>
<color=#75715e>   * DataChannelFactory type is determined by the setting of {@link</color>
<color=#75715e>   * ReplicationNetworkConfig#CHANNEL_TYPE je.rep.channelType}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If set to <code>ssl</code>then the internal SSL implementation is is used. If set to <code></color>
<color=#75715e>   * custom</code> then a custom channel factory is constructed based on the setting of {@link</color>
<color=#75715e>   * ReplicationNetworkConfig#CHANNEL_FACTORY_CLASS je.rep.dataChannelFactoryClass}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If set to <code>basic</code> or not set, SimpleChannelFactory is instantiated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param repNetConfig The configuration to control factory building</color>
<color=#75715e>   * @return a DataChannelFactory</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid configuration property value or combination of</color>
<color=#75715e>   *     values was specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Construct a DataChannelFactory from the specified access configuration. The choice of</color>
<color=#75715e>   * DataChannelFactory type is determined by the setting of {@link</color>
<color=#75715e>   * ReplicationNetworkConfig#CHANNEL_TYPE je.rep.channelType}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If set to <code>ssl</code>then the internal SSL implementation is is used. If set to <code></color>
<color=#75715e>   * custom</code> then a custom channel factory is constructed based on the setting of {@link</color>
<color=#75715e>   * ReplicationNetworkConfig#CHANNEL_FACTORY_CLASS je.rep.dataChannelFactoryClass}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If set to <code>basic</code> or not set, SimpleChannelFactory is instantiated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param repNetConfig The configuration to control factory building</color>
<color=#75715e>   * @param logContext A null-allowable String that contributes to the logging identifier for the</color>
<color=#75715e>   *     factory.</color>
<color=#75715e>   * @return a DataChannelFactory</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid configuration property value or combination of</color>
<color=#75715e>   *     values was specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>construct</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>logName</color> <color=#f92672>=</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getLogName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logName</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>logContext</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>LoggerFactory</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>logId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logName</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logId</color> <color=#f92672>=</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logContext</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logId</color> <color=#f92672>=</color> <color=#f8f8f2>logName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logId</color> <color=#f92672>=</color> <color=#f8f8f2>logName</color> <color=#f92672>+</color> <color=#e6db74>":"</color> <color=#f92672>+</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LoggerFactory</color> <color=#f8f8f2>loggerFactory</color> <color=#f92672>=</color> <color=#f8f8f2>makeLoggerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>logId</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>loggerFactory</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Construct a DataChannelFactory from the specified access configuration. The choice of</color>
<color=#75715e>   * DataChannelFactory type is determined by the setting of {@link</color>
<color=#75715e>   * ReplicationNetworkConfig#CHANNEL_TYPE je.rep.channelType}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If set to <code>ssl</code>then the internal SSL implementation is is used. If set to <code></color>
<color=#75715e>   * custom</code> then a custom channel factory is constructed based on the setting of {@link</color>
<color=#75715e>   * ReplicationNetworkConfig#CHANNEL_FACTORY_CLASS je.rep.dataChannelFactoryClass}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If set to <code>basic</code> or not set, SimpleChannelFactory is instantiated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param repNetConfig The configuration to control factory building</color>
<color=#75715e>   * @param loggerFactory A null-allowable LoggerFactory for use in channel factory construction</color>
<color=#75715e>   * @return a DataChannelFactory</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid configuration property value or combination of</color>
<color=#75715e>   *     values was specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>construct</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>LoggerFactory</color> <color=#f8f8f2>loggerFactory</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>channelType</color> <color=#f92672>=</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getChannelType</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>factoryIndex</color> <color=#f92672>=</color> <color=#f8f8f2>factoryCount</color><color=#f8f8f2>.</color><color=#a6e22e>getAndIncrement</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Build the LoggerFactory if not provided by the caller</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>loggerFactory</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>logName</color> <color=#f92672>=</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getLogName</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logName</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>logName</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>factoryIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>loggerFactory</color> <color=#f92672>=</color> <color=#f8f8f2>makeLoggerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>logName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>InstanceContext</color> <color=#f8f8f2>context</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InstanceContext</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>loggerFactory</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>factoryClass</color> <color=#f92672>=</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getChannelFactoryClass</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>factoryClass</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>factoryClass</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channelType</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"basic"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleChannelFactory</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channelType</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"ssl"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SSLChannelFactory</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The channelType setting '"</color> <color=#f92672>+</color> <color=#f8f8f2>channelType</color> <color=#f92672>+</color> <color=#e6db74>"' is not valid"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>classParams</color> <color=#f92672>=</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getChannelFactoryParams</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>factoryParams</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InstanceParams</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>classParams</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>factoryClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>factoryParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a DataChannelFactory implementation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param factoryClassName the name of the class to instantiate, which must implement</color>
<color=#75715e>   *     DataChannelFactory</color>
<color=#75715e>   * @param factoryParams the context and factory arguments</color>
<color=#75715e>   * @return a newly constructed instance</color>
<color=#75715e>   * @throws IllegalArgumentException if the arguments are invalid</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>factoryClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>factoryParams</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>DataChannelFactory</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>constructObject</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>factoryClassName</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>DataChannelFactory</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color>
            <color=#e6db74>"data channel factory"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>CtorArgSpec</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>InstanceParams</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>},</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>factoryParams</color><color=#f8f8f2>}));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Instantiates a class based on a configuration specification. This method looks up a class of</color>
<color=#75715e>   * the specified name, then finds a constructor with an argument list that matches the caller's</color>
<color=#75715e>   * specification, and constructs an instance using that constructor and validates that the</color>
<color=#75715e>   * instance extends or implements the mustImplement class specified.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param instClassName the name of the class to instantiate</color>
<color=#75715e>   * @param mustImplement a class denoting a required base class or required implemented interface</color>
<color=#75715e>   *     of the class whose name is specified by instClassName.</color>
<color=#75715e>   * @param miDesc a descriptive term for the mustImplement class</color>
<color=#75715e>   * @param ctorArgSpec specifies the required constructor signature and the values to be passed</color>
<color=#75715e>   * @return an instance of the specified class</color>
<color=#75715e>   * @throws IllegalArgumentException if any of the input arguments are invalid</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>constructObject</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>instClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>mustImplement</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>miDesc</color><color=#f8f8f2>,</color> <color=#f8f8f2>CtorArgSpec</color> <color=#f8f8f2>ctorArgSpec</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Resolve the class</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>instClass</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>instClass</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>instClassName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>cnfe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Error resolving "</color> <color=#f92672>+</color> <color=#f8f8f2>miDesc</color> <color=#f92672>+</color> <color=#e6db74>" class "</color> <color=#f92672>+</color> <color=#f8f8f2>instClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>cnfe</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Find an appropriate constructor for the class.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Constructor</color><color=#f92672><?></color> <color=#f8f8f2>constructor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>constructor</color> <color=#f92672>=</color> <color=#f8f8f2>instClass</color><color=#f8f8f2>.</color><color=#a6e22e>getConstructor</color><color=#f8f8f2>(</color><color=#f8f8f2>ctorArgSpec</color><color=#f8f8f2>.</color><color=#a6e22e>argTypes</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>nsme</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unable to find an appropriate constructor for "</color> <color=#f92672>+</color> <color=#f8f8f2>miDesc</color> <color=#f92672>+</color> <color=#e6db74>" class "</color> <color=#f92672>+</color> <color=#f8f8f2>instClassName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Get an instance of the class.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>instObject</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>instObject</color> <color=#f92672>=</color> <color=#f8f8f2>constructor</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>ctorArgSpec</color><color=#f8f8f2>.</color><color=#a6e22e>argValues</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Constructor is not accessible */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Error instantiating "</color> <color=#f92672>+</color> <color=#f8f8f2>miDesc</color> <color=#f92672>+</color> <color=#e6db74>" class "</color> <color=#f92672>+</color> <color=#f8f8f2>instClassName</color> <color=#f92672>+</color> <color=#e6db74>".  Not accessible?"</color><color=#f8f8f2>,</color> <color=#f8f8f2>iae</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Wrong arguments - should not be possible here */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Error instantiating "</color> <color=#f92672>+</color> <color=#f8f8f2>miDesc</color> <color=#f92672>+</color> <color=#e6db74>" class "</color> <color=#f92672>+</color> <color=#f8f8f2>instClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>iae</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InstantiationException</color> <color=#f8f8f2>ie</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Class is abstract */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Error instantiating "</color> <color=#f92672>+</color> <color=#f8f8f2>miDesc</color> <color=#f92672>+</color> <color=#e6db74>" class "</color> <color=#f92672>+</color> <color=#f8f8f2>instClassName</color> <color=#f92672>+</color> <color=#e6db74>". Class is abstract?"</color><color=#f8f8f2>,</color> <color=#f8f8f2>ie</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>ite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Exception thrown within constructor */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Error instantiating "</color>
              <color=#f92672>+</color> <color=#f8f8f2>miDesc</color>
              <color=#f92672>+</color> <color=#e6db74>" class "</color>
              <color=#f92672>+</color> <color=#f8f8f2>instClassName</color>
              <color=#f92672>+</color> <color=#e6db74>". Exception within constructor"</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>ite</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * In this context, the class must implement the specified</color>
<color=#75715e>     * interface.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>mustImplement</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>instObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>())))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The "</color>
              <color=#f92672>+</color> <color=#f8f8f2>miDesc</color>
              <color=#f92672>+</color> <color=#e6db74>" class "</color>
              <color=#f92672>+</color> <color=#f8f8f2>instClassName</color>
              <color=#f92672>+</color> <color=#e6db74>" does not implement "</color>
              <color=#f92672>+</color> <color=#f8f8f2>mustImplement</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>instObject</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a logger factory based on an EnvironmentImpl</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param envImpl a non-null EnvironmentImpl</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>LoggerFactory</color> <color=#a6e22e>makeLoggerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"envImpl must not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChannelLoggerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/* formatter */</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a logger factory based on a fixed string</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param prefix a fixed string to be used as logger prefix</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>LoggerFactory</color> <color=#a6e22e>makeLoggerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"prefix must not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChannelFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>prefix</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChannelLoggerFactory</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/* envImpl */</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A simple class that captures the proposed formal and actual argument lists to match against</color>
<color=#75715e>   * possible constructors.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>CtorArgSpec</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>argTypes</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>argValues</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>CtorArgSpec</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>argTypes</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>argValues</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>argTypes</color> <color=#f92672>=</color> <color=#f8f8f2>argTypes</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>argValues</color> <color=#f92672>=</color> <color=#f8f8f2>argValues</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A simple implementation of LoggerFactory that encapsulates the necessary information to do JE</color>
<color=#75715e>   * environment-friendly logging without needing to know JE HA internal logging.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ChannelLoggerFactory</color> <color=#66d9ef>implements</color> <color=#f8f8f2>LoggerFactory</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a LoggerFactory for use in construction of channel objects. The caller should supply</color>
<color=#75715e>     * either an EnvironmentImpl or a Formatter object.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param envImpl a possibly-null EnvironmentImpl</color>
<color=#75715e>     * @param formatter a possible null formatter</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ChannelLoggerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>formatter</color> <color=#f92672>=</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** @see LoggerFactory#getLogger(Class) */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>InstanceLogger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>clazz</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerFormatterNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>clazz</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>clazz</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChannelInstanceLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A simple implementation of InstanceLogger that encapuslates the necessary information to do JE</color>
<color=#75715e>   * environment-friendly logging without needing to know JE logging rules.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ChannelInstanceLogger</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InstanceLogger</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a ChannelInstanceLogger for use in construction of channel objects. The caller should</color>
<color=#75715e>     * supply either an EnvironmentImpl or a Formatter object.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param envImpl a possibly-null EnvironmentImpl</color>
<color=#75715e>     * @param formatter a possible null formatter</color>
<color=#75715e>     * @param logger a logger created via LoggerUtils.getLogger()</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ChannelInstanceLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>formatter</color> <color=#f92672>=</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** @see InstanceLogger#log(Level, String) */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>logLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Formatter for log messages */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ChannelFormatter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TracerFormatter</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ChannelFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>id</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>id</color> <color=#f92672>=</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>appendEnvironmentName</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ["</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>"]"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>