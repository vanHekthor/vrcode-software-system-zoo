<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.RepNode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNIndex</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The methods in this class are disabled if the GlobalCBVLSN is defunct -- see {@link</color>
<color=#75715e> * GlobalCBVLSN}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When GlobalCBVLSN} is not defunct, the LocalCBVLSNTracker tracks this node's local CBVLSN.</color>
<color=#75715e> * Each node has a single tracker instance.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The GlobalCBVLSN must be durable. Since the GlobalCBVLSN is derived from the LocalCBVLSN, we</color>
<color=#75715e> * need to make the LocalCBVLSN durable too. [#18728]</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>For HA, the GlobalCbvlsn is supposed to ensure that the replication stream is always</color>
<color=#75715e> *       available for replay, across failovers.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The local CBVLSN is maintained by each node. Replicas periodically update the Master with</color>
<color=#75715e> * their current CBVLSN via a response to a heartbeat message from the Master, where it is managed</color>
<color=#75715e> * by the LocalCBVLSNUpdater and flushed out to RepGroup database, whenever the updater notices that</color>
<color=#75715e> * it has changed. The change is then effectively broadcast to all the Replicas including the</color>
<color=#75715e> * originating Replica, via the replication stream. For this reason, the CBVLSN for the node as</color>
<color=#75715e> * represented in the RepGroup database will generally lag the value contained in the tracker.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that track() api is invoked in critical code with locks being held and must be</color>
<color=#75715e> * lightweight.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Local CBVLSNs are used only to contribute to the calculation of the global CBVLSN. The global</color>
<color=#75715e> * CBVLSN acts as the cleaner throttle on old nodes. Any invariants, such as the rule that the</color>
<color=#75715e> * cleaner throttle cannot regress, are applied when doing the global calculation. In addition, we</color>
<color=#75715e> * enforce the rule against regressing local CBVLSNs here.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LocalCBVLSNTracker</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Note that all reference fields below are null when then GlobalCBVLSN is</color>
<color=#75715e>   * defunct.</color>
<color=#75715e>   */</color>

  <color=#75715e>/* Used to keep track of the last fsynced matchable VLSN. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>lastSyncableVLSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Final syncable VLSN from the penultimate log file. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>currentLocalCBVLSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * We really only need to update the localCBVLSN once per file. currentFile</color>
<color=#75715e>   * is used to determine if this is the first VLSN in the file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>currentFile</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Test hook for disabling LocalCBVLSN changes. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowUpdate</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Same value as GlobalCBVLSN.defunct. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>defunct</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>LocalCBVLSNTracker</color><color=#f8f8f2>(</color><color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GlobalCBVLSN</color> <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>defunct</color> <color=#f92672>=</color> <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>isDefunct</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>defunct</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>VLSNIndex</color> <color=#f8f8f2>vlsnIndex</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Initialize the currentLocalCBVLSN and lastSyncableVLSN. */</color>
      <color=#f8f8f2>currentLocalCBVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>().</color><color=#a6e22e>getLastSync</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>lastSyncableVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>currentLocalCBVLSN</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Approximation good enough to start with. */</color>
      <color=#f8f8f2>currentFile</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Test hook, disable the LocalCBVLSN updates. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAllowUpdate</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowUpdate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowUpdate</color> <color=#f92672>=</color> <color=#f8f8f2>allowUpdate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If GlobalCBVLSN is defunct, does nothing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If GlobalCBVLSN is defunct, tracks barrier VLSNs, updating the local CBVLSN if the</color>
<color=#75715e>   * associated log file has changed. When tracking is done on a replica, the currentLocalCBVLSN</color>
<color=#75715e>   * value is ultimately sent via heartbeat response to the master, which updates the RepGroupDb.</color>
<color=#75715e>   * When tracking is done on a master, the update is done on this node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The update is only done once per file in order to decrease the cost of tracking. Since we</color>
<color=#75715e>   * want the local cbvlsn to be durable, we use the last vlsn in the penultimate log file as the</color>
<color=#75715e>   * local cbvlsn value. We know the penultimate log file has been fsynced, and therefore the last</color>
<color=#75715e>   * vlsn within that file has also been fsynced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Tracking can be called quite often, and should be lightweight.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newVLSN</color>
<color=#75715e>   * @param lsn</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>track</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defunct</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>allowUpdate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>lastSyncableVLSN</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>VLSN</color> <color=#f8f8f2>old</color> <color=#f92672>=</color> <color=#f8f8f2>lastSyncableVLSN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>lastSyncableVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>currentFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>currentFile</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>currentLocalCBVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>old</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the GlobalVLSN is not defunct, initialize the local CBVLSN with the syncup matchpoint, so</color>
<color=#75715e>   * that the heartbeat responses sent before the node has replayed any log entries are still valid</color>
<color=#75715e>   * for saving a place in the replication stream. If the GlobalVLSN is defunct, do nothing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param matchpoint</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerMatchpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>matchpoint</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defunct</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>currentLocalCBVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>matchpoint</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lastSyncableVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>matchpoint</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return the local CBVLSN for broadcast from replica to master on the heartbeat response, or a</color>
<color=#75715e>   *     null VLSN if the GlobalVLSN is defunct.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getBroadcastCBVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>defunct</color> <color=#f92672>?</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color> <color=#f8f8f2>:</color> <color=#f8f8f2>currentLocalCBVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return last syncable VLSN seen by this tracker, or a null VLSN if the GlobalVLSN is defunct.</color>
<color=#75715e>   *     Note that this VLSN has not yet been broadcast -- see {@link #track}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getLastSyncableVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>defunct</color> <color=#f92672>?</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lastSyncableVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>