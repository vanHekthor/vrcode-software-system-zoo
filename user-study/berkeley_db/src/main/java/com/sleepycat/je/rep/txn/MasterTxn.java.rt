<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.ReplicaAckPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogItem</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.ReplicationContext</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.InsufficientAcksException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicaWriteException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicatedEnvironment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.UnknownMasterException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.Replay</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.Replica</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A MasterTxn represents: - a user initiated Txn executed on the Master node, when local-write and</color>
<color=#75715e> * read-only are not configured, or - an auto-commit Txn on the Master node for a replicated DB.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class uses the hooks defined by Txn to support the durability requirements of a</color>
<color=#75715e> * replicated transaction on the Master.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>MasterTxn</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Txn</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* Holds the commit VLSN after a successful commit. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>commitVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>UUID</color> <color=#f8f8f2>envUUID</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The number of acks required by this txn commit. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>requiredAckCount</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/* If this transaction requests an Arbiter ack. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>needsArbiterAck</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to measure replicated transaction commit performance. All deltas</color>
<color=#75715e>   * are measured relative to the start time, to minimize storage overhead.</color>
<color=#75715e>   */</color>

  <color=#75715e>/* The time the transaction was started. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startMs</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

  <color=#75715e>/* The start relative delta time when the commit pre hook exited. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>preLogCommitEndDeltaMs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The start relative delta time when the commit message was written to</color>
<color=#75715e>   * the rep stream.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>repWriteStartDeltaMs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to keep track of whether this transaction has taken the read lock that protects access to</color>
<color=#75715e>   * the blocking latch used by Master Transfer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>locked</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to prevent any change to the txn's contents. Used in master->replica transition.</color>
<color=#75715e>   * Intentionally volatile, so it can be interleaved with use of the MasterTxn mutex.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>freeze</color><color=#f8f8f2>;</color>

  <color=#75715e>/* For unit testing */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>convertHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The default factory used to create MasterTxns */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>MasterTxnFactory</color> <color=#f8f8f2>DEFAULT_FACTORY</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>MasterTxnFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>MasterTxn</color> <color=#a6e22e>create</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>MasterTxn</color> <color=#a6e22e>createNullTxn</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#a6e22e>@Override</color>
            <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateLoggedForTxn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
              <color=#75715e>/*</color>
<color=#75715e>               * Return true so that the commit will be logged even</color>
<color=#75715e>               * though there are no changes associated with this txn</color>
<color=#75715e>               */</color>
              <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>};</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>};</color>

  <color=#75715e>/* The current Txn Factory. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>MasterTxnFactory</color> <color=#f8f8f2>factory</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_FACTORY</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>MasterTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envUUID</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>).</color><color=#a6e22e>getUUID</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalWrite</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLocalWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the transaction commit token used to identify the transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see com.sleepycat.je.txn.Txn#getCommitToken()</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CommitToken</color> <color=#a6e22e>getCommitToken</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>commitVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>isNull</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>CommitToken</color><color=#f8f8f2>(</color><color=#f8f8f2>envUUID</color><color=#f8f8f2>,</color> <color=#f8f8f2>commitVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>getSequence</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getCommitVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>commitVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * MasterTxns use txn ids from a reserved negative space. So override the default generation of</color>
<color=#75715e>   * ids.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>generateId</color><color=#f8f8f2>(</color><color=#f8f8f2>TxnManager</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>ignore</color> <color=#75715e>/* mandatedId */</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>ignore</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>.</color><color=#a6e22e>getNextReplicatedTxnId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Causes the transaction to wait until we have sufficient replicas to acknowledge the commit. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>txnBeginHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>txnBeginHook</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogCommitHook</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ReplicaAckPolicy</color> <color=#f8f8f2>ackPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>getCommitDurability</color><color=#f8f8f2>().</color><color=#a6e22e>getReplicaAck</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>requiredAckCount</color> <color=#f92672>=</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>getDurabilityQuorum</color><color=#f8f8f2>().</color><color=#a6e22e>getCurrentRequiredAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * TODO: An optimization we'd like to do is to identify transactions</color>
<color=#75715e>     * that only modify non-replicated databases, so they can avoid waiting</color>
<color=#75715e>     * for Replica commit acks and avoid checks like the one that requires</color>
<color=#75715e>     * that the node be a master before proceeding with the transaction.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>preLogCommitHook</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>preLogCommitEndDeltaMs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>startMs</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogCommitHook</color><color=#f8f8f2>(</color><color=#f8f8f2>LogItem</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>commitVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>.</color><color=#a6e22e>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>postLogCommitHook</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogAbortHook</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>preLogAbortHook</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogCommitAbortHook</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>postLogCommitAbortHook</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogAbortHook</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>postLogAbortHook</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Prevent this MasterTxn from taking locks if the node becomes a replica. The application has a</color>
<color=#75715e>   * reference to this Txn, and may attempt to use it well after the node has transitioned from</color>
<color=#75715e>   * master to replica.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LockResult</color> <color=#a6e22e>lockInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>nodeState</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>).</color><color=#a6e22e>getState</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>lockInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>,</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>throwNotMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>/* not reached */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>throwNotMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>isReplica</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicaWriteException</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>((</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>).</color><color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Transaction "</color>
            <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#e6db74>" cannot execute write operations because this node is"</color>
            <color=#f92672>+</color> <color=#e6db74>" no longer a master"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** If logging occurs before locking, we must screen out write locks here. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogWithoutLock</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>nodeState</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>).</color><color=#a6e22e>getState</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>preLogWithoutLock</color><color=#f8f8f2>(</color><color=#f8f8f2>database</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>throwNotMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Determines whether we should lock the block-latch lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We acquire the lock during pre-log hook, and release it during post-log hook. Specifically,</color>
<color=#75715e>   * there are the following cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ol></color>
<color=#75715e>   *   <li>For a normal commit, we acquire it in {@code preLogCommitHook()} and release it in {@code</color>
<color=#75715e>   *       postLogCommitHook()}</color>
<color=#75715e>   *   <li>For a normal abort (invoked by the application on the {@code Txn.abort()} API), we</color>
<color=#75715e>   *       acquire the lock in {@code preLogAbortHook()} and release it in {@code</color>
<color=#75715e>   *       postLogAbortHook()}.</color>
<color=#75715e>   *   <li>When a commit fails in such a way as to call {@code Txn.throwPreCommitException()}, we go</color>
<color=#75715e>   *       through the abort path as well. In this case:</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>we will of course already have called {@code preLogCommitHook()};</color>
<color=#75715e>   *         <li>the abort path calls {@code preLogAbortHook()} and {@code postLogAbortHook()} as</color>
<color=#75715e>   *             always;</color>
<color=#75715e>   *         <li>finally we call {@code postLogCommitAbortHook()}</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   *       Fortunately we can avoid the complexity of dealing with a second (recursive) lock</color>
<color=#75715e>   *       acquisition here, because by the time either post-hook is called we've done any writing</color>
<color=#75715e>   *       of VLSNs. Thus, when we want to take the lock, we take it if it hasn't already been</color>
<color=#75715e>   *       taken, and do nothing if it has; when releasing, we release it if we have it, and do</color>
<color=#75715e>   *       nothing if we don't.</color>
<color=#75715e>   * </ol></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>See additional javadoc at {@code RepImpl.blockLatchLock}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>lockOnce</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locked</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>locked</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Determines whether we should unlock the block-latch lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #lockOnce</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>unlockOnce</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locked</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locked</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getRequiredAckCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>requiredAckCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resetRequiredAckCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>requiredAckCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A masterTxn always writes its own id into the commit or abort. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>getReplicatorNodeId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>getDTVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * For the master transaction, it should always be null, and will</color>
<color=#75715e>     * be corrected under the write log latch on its way to disk.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getStartMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>startMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>stampRepWriteTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repWriteStartDeltaMs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>startMs</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the amount of time it took to copy the commit record from the log buffer to the rep</color>
<color=#75715e>   * stream. It's measured as the time interval starting with the time the preCommit hook completed,</color>
<color=#75715e>   * to the time the message write to the replication stream was initiated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>messageTransferMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repWriteStartDeltaMs</color> <color=#f92672>></color> <color=#ae81ff>0</color>
        <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>repWriteStartDeltaMs</color> <color=#f92672>-</color> <color=#f8f8f2>preLogCommitEndDeltaMs</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>:</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The message was invoked before the post commit hook fired.</color>
<color=#75715e>         */</color>
        <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>propagatePostCommitException</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>postCommitException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>postCommitException</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>InsufficientAcksException</color> <color=#f92672>||</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>propagatePostCommitException</color><color=#f8f8f2>(</color><color=#f8f8f2>postCommitException</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* The Txn factory interface. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>MasterTxnFactory</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MasterTxn</color> <color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Create a special "null" txn that does not result in any changes to the environment. It's sole</color>
<color=#75715e>     * purpose is to persist and communicate DTVLSN values.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>MasterTxn</color> <color=#a6e22e>createNullTxn</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* The method used to create user Master Txns via the factory. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>MasterTxn</color> <color=#a6e22e>create</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>factory</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>MasterTxn</color> <color=#a6e22e>createNullTxn</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>factory</color><color=#f8f8f2>.</color><color=#a6e22e>createNullTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Method used for unit testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Sets the factory to the one supplied. If the argument is null it restores the factory to the</color>
<color=#75715e>   * original default value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxnFactory</color> <color=#f8f8f2>factory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>MasterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>factory</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>factory</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>DEFAULT_FACTORY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>factory</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convert a MasterTxn that has any write locks into a ReplayTxn, and close the MasterTxn after it</color>
<color=#75715e>   * is disemboweled. A MasterTxn that only has read locks is unchanged and is still usable by the</color>
<color=#75715e>   * application. To be clear, the application can never use a MasterTxn to obtain a lock if the</color>
<color=#75715e>   * node is in Replica mode, but may indeed be able to use a read-lock-only MasterTxn if the node</color>
<color=#75715e>   * cycles back into Master status.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For converted MasterTxns, all write locks are transferred to a replay transaction, read</color>
<color=#75715e>   * locks are released, and the txn is closed. Used when a node is transitioning from master to</color>
<color=#75715e>   * replica mode without recovery, which may happen for an explicit master transfer request, or</color>
<color=#75715e>   * merely for a network partition/election of new master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The newly created replay transaction will need to be in the appropriate state, holding all</color>
<color=#75715e>   * write locks, so that the node in replica form can execute the proper syncups. Note that the</color>
<color=#75715e>   * resulting replay txn will only be aborted, and will never be committed, because the txn</color>
<color=#75715e>   * originated on this node, which is transitioning from master -> replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We only transfer write locks. We need not transfer read locks, because replays only operate</color>
<color=#75715e>   * on writes, and are never required to obtain read locks. Read locks are released though, because</color>
<color=#75715e>   * (a) this txn is now only abortable, and (b) although the Replay can preempt any read locks held</color>
<color=#75715e>   * by the MasterTxn, such preemption will add delay.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a ReplayTxn, if there were locks in this transaction, and there's a need to create a</color>
<color=#75715e>   *     ReplayTxn.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplayTxn</color> <color=#a6e22e>convertToReplayTxnAndClose</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>Replay</color> <color=#f8f8f2>replay</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Assertion */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>freeze</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" should be frozen when converting to replay txn"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This is an important and relatively rare operation, and worth</color>
<color=#75715e>     * logging.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Transforming txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" from MasterTxn to ReplayTxn"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>hookCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ReplayTxn</color> <color=#f8f8f2>replayTxn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>needToClose</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isClosed</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" is closed, no tranform needed"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>needToClose</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Get the list of write locks, and process them in lsn order,</color>
<color=#75715e>         * so we properly maintain the lastLoggedLsn and firstLoggedLSN</color>
<color=#75715e>         * fields of the newly created ReplayTxn.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>lockedLSNs</color> <color=#f92672>=</color> <color=#f8f8f2>getWriteLockIds</color><color=#f8f8f2>();</color>

        <color=#75715e>/*</color>
<color=#75715e>         * This transaction may not actually have any write locks. In</color>
<color=#75715e>         * that case, we permit it to live on.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockedLSNs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" had no write locks, didn't create"</color> <color=#f92672>+</color> <color=#e6db74>" ReplayTxn"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>needToClose</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * We have write locks. Make sure that this txn can now</color>
<color=#75715e>         * only be aborted. Otherwise, there could be this window</color>
<color=#75715e>         * in this method:</color>
<color=#75715e>         *  t1: locks stolen, no locks left in this txn</color>
<color=#75715e>         *  t2: txn unfrozen, commits and aborts possible</color>
<color=#75715e>         *    -- at this point, another thread could sneak in and</color>
<color=#75715e>         *    -- try to commit. The txn would commmit successfully,</color>
<color=#75715e>         *    -- because a commit w/no write locks is a no-op.</color>
<color=#75715e>         *    -- but that would convey the false impression that the</color>
<color=#75715e>         *    -- txn's write operations had commmitted.</color>
<color=#75715e>         *  t3: txn is closed</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>setOnlyAbortable</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" is no longer a master"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>replayTxn</color> <color=#f92672>=</color> <color=#f8f8f2>replay</color><color=#f8f8f2>.</color><color=#a6e22e>getReplayTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>getId</color><color=#f8f8f2>(),</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Order the lsns, so that the locks are taken in the proper</color>
<color=#75715e>         * order, and the txn's firstLoggedLsn and lastLoggedLsn fields</color>
<color=#75715e>         * are properly set.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>sortedLsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>lockedLSNs</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>sortedLsns</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" has "</color> <color=#f92672>+</color> <color=#f8f8f2>lockedLSNs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" locks to transform"</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Transfer each lock. Note that ultimately, since mastership</color>
<color=#75715e>         * is changing, and replicated commits will only be executed</color>
<color=#75715e>         * when a txn has originated on that node, the target ReplayTxn</color>
<color=#75715e>         * can never be committed, and will only be aborted.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sortedLsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" is transferring lock "</color> <color=#f92672>+</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Use a special method to steal the lock. Another approach</color>
<color=#75715e>           * might have been to have the replayTxn merely attempt a</color>
<color=#75715e>           * lock(); as an importunate txn, the replayTxn would</color>
<color=#75715e>           * preempt the MasterTxn's lock. However, that path doesn't</color>
<color=#75715e>           * work because lock() requires having a databaseImpl in</color>
<color=#75715e>           * hand, and that's not available here.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>replayTxn</color><color=#f8f8f2>.</color><color=#a6e22e>stealLockFromMasterTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Copy all the lock's info into the Replay and remove it</color>
<color=#75715e>           * from the master. Normally, undo clears write locks, but</color>
<color=#75715e>           * this MasterTxn will not be executing undo.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>WriteLockInfo</color> <color=#f8f8f2>replayWLI</color> <color=#f92672>=</color> <color=#f8f8f2>replayTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteLockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>WriteLockInfo</color> <color=#f8f8f2>masterWLI</color> <color=#f92672>=</color> <color=#f8f8f2>getWriteLockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>replayWLI</color><color=#f8f8f2>.</color><color=#a6e22e>copyAllInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>masterWLI</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>removeLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Txns have collections of undoDatabases and deletedDatabases.</color>
<color=#75715e>         * Undo databases are normally incrementally added to the txn</color>
<color=#75715e>         * as locks are obtained Unlike normal locking or recovery</color>
<color=#75715e>         * locking, in this case we don't have a reference to the</color>
<color=#75715e>         * databaseImpl that goes with this lock, so we copy the undo</color>
<color=#75715e>         * collection in one fell swoop.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>replayTxn</color><color=#f8f8f2>.</color><color=#a6e22e>copyDatabasesForConversion</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * This txn is no longer responsible for databaseImpl</color>
<color=#75715e>         * cleanup, as that issue now lies with the ReplayTxn, so</color>
<color=#75715e>         * remove the collection.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>deletedDatabases</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * All locks have been removed from this transaction. Clear</color>
<color=#75715e>         * the firstLoggedLsn and lastLoggedLsn so there's no danger</color>
<color=#75715e>         * of attempting to undo anything; this txn is no longer</color>
<color=#75715e>         * responsible for any records.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>firstLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>

        <color=#75715e>/* If this txn also had read locks, clear them */</color>
        <color=#f8f8f2>clearReadLocks</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>convertHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>hookCount</color><color=#f92672>++</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>unfreeze</color><color=#f8f8f2>();</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>convertHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>hookCount</color><color=#f92672>++</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We need to abort the txn, but we can't call abort() because that</color>
<color=#75715e>       * method checks whether we are the master! Instead, call the</color>
<color=#75715e>       * internal method, close(), in order to end this transaction and</color>
<color=#75715e>       * unregister it from the transactionManager. Must be called</color>
<color=#75715e>       * outside the synchronization block.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needToClose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"About to close txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" state="</color> <color=#f92672>+</color> <color=#f8f8f2>getState</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*isCommit */</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Closed txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" state="</color> <color=#f92672>+</color> <color=#f8f8f2>getState</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>convertHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>hookCount</color><color=#f92672>++</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>replayTxn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>freeze</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>freeze</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>unfreeze</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>freeze</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to hold the transaction stable while it is being cloned as a ReplayTxn, during</color>
<color=#75715e>   * master->replica transitions. Essentially, there are two parties that now have a reference to</color>
<color=#75715e>   * this transaction -- the originating application thread, and the RepNode thread that is trying</color>
<color=#75715e>   * to set up internal state so it can begin to act as a replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The transaction will throw UnknownMasterException or ReplicaWriteException if the</color>
<color=#75715e>   * transaction is frozen, so that the application knows that the transaction is no longer viable,</color>
<color=#75715e>   * but it doesn't attempt to do most of the follow-on cleanup and release of locks that failed</color>
<color=#75715e>   * aborts and commits normally attempt. One aspect of transaction cleanup can't be skipped though.</color>
<color=#75715e>   * It is necessary to do the post log hooks to free up the block txn latch lock so that the</color>
<color=#75715e>   * transaction can be closed by the RepNode thread. For example: - application thread starts</color>
<color=#75715e>   * transaction - application takes the block txn latch lock and attempts commit or abort, but is</color>
<color=#75715e>   * stopped because the txn is frozen by master transfer. - the application must release the block</color>
<color=#75715e>   * txn latch lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Replica#replicaTransitionCleanup</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>checkIfFrozen</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>freeze</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>((</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>).</color><color=#a6e22e>checkIfMaster</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>postLogCommitAbortHook</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>postLogAbortHook</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setConvertHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>convertHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMasterTxn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setArbiterAck</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>needsArbiterAck</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getArbiterAck</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>needsArbiterAck</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>