<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.ReplicaAckPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.InsufficientAcksException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.InsufficientReplicasException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.arbitration.Arbiter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepNodeImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederTxns</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.txn.MasterTxn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>java.util.logging.Level.FINE</color><color=#f8f8f2>;</color>

<color=#75715e>/** Provides information about quorums needed for durability decisions. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DurabilityQuorum</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>DurabilityQuorum</color><color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * See if there are a sufficient number of replicas alive to support the commit for this</color>
<color=#75715e>   * transaction. Used as an optimizing step before any writes are executed, to reduce the number of</color>
<color=#75715e>   * outstanding writes that suffer from insufficient ack problems.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this node is not the master, just return. A different kind of check will catch the fact</color>
<color=#75715e>   * that this node cannot support writes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>TODO: Read only transactions on the master should not have to wait. In the future, introduce</color>
<color=#75715e>   * either a read-only attribute as part of TransactionConfig or a read only transaction class to</color>
<color=#75715e>   * optimize this.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param insufficientReplicasTimeout timeout in ms</color>
<color=#75715e>   * @throws InsufficientReplicasException if there are not enough replicas connected to this feeder</color>
<color=#75715e>   *     to be able to commit the transaction.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>ensureReplicasForCommit</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>insufficientReplicasTimeout</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>ReplicaAckPolicy</color> <color=#f8f8f2>ackPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultDurability</color><color=#f8f8f2>().</color><color=#a6e22e>getReplicaAck</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>requiredReplicaAckCount</color> <color=#f92672>=</color> <color=#f8f8f2>getCurrentRequiredAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>FINE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Txn "</color>
              <color=#f92672>+</color> <color=#f8f8f2>txn</color>
              <color=#f92672>+</color> <color=#e6db74>": checking that "</color>
              <color=#f92672>+</color> <color=#f8f8f2>requiredReplicaAckCount</color>
              <color=#f92672>+</color> <color=#e6db74>" feeders exist before starting commit"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* No need to wait for anyone else, only this node is needed. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requiredReplicaAckCount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color>
        <color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>.</color><color=#a6e22e>awaitFeederReplicaConnections</color><color=#f8f8f2>(</color><color=#f8f8f2>requiredReplicaAckCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>insufficientReplicasTimeout</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Wait was successful */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Timed out, not enough replicas connected, or feeder was shutdown</color>
<color=#75715e>     * normally, that is, without any exceptions while waiting.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Continue if we are no longer the master after the wait. The</color>
<color=#75715e>       * transaction will fail if it tries to acquire write locks, or</color>
<color=#75715e>       * at commit.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SIMPLE_MAJORITY</color><color=#f8f8f2>)</color>
        <color=#f92672>&&</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiter</color><color=#f8f8f2>().</color><color=#a6e22e>activateArbitration</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>includeArbiters</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>ALL</color><color=#f8f8f2>);</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InsufficientReplicasException</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ackPolicy</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>requiredReplicaAckCount</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>().</color><color=#a6e22e>activeAckReplicas</color><color=#f8f8f2>(</color><color=#f8f8f2>includeArbiters</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Determine whether acknowledgments from the specified replica should be counted against</color>
<color=#75715e>   * transaction durability requirements.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param replica the replica node</color>
<color=#75715e>   * @return whether acknowledgments from the replica should be counted</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>replicaAcksQualify</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>replica</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Only acknowledgments from electable nodes should be counted */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isElectable</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Determine if this transaction has been adequately acknowledged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InsufficientAcksException if the transaction's durability requirements have not been</color>
<color=#75715e>   *     met.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>ensureSufficientAcks</color><color=#f8f8f2>(</color><color=#f8f8f2>FeederTxns</color><color=#f8f8f2>.</color><color=#a6e22e>TxnInfo</color> <color=#f8f8f2>txnInfo</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>timeoutMs</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InsufficientAcksException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>pendingAcks</color> <color=#f92672>=</color> <color=#f8f8f2>txnInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getPendingAcks</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pendingAcks</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#f8f8f2>txnInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getTxn</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>requiredAcks</color> <color=#f92672>=</color> <color=#f8f8f2>getCurrentRequiredAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitDurability</color><color=#f8f8f2>().</color><color=#a6e22e>getReplicaAck</color><color=#f8f8f2>());</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>requiredAckDelta</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getRequiredAckCount</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>requiredAcks</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requiredAckDelta</color> <color=#f92672>>=</color> <color=#f8f8f2>pendingAcks</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The group size was reduced while waiting for acks and the</color>
<color=#75715e>       * acks received are sufficient given the new reduced group</color>
<color=#75715e>       * size.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Snapshot the state to be used in the error message */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dumpState</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>dumpAckFeederState</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Repeat the check to ensure that acks have not been received in</color>
<color=#75715e>     * the time between the completion of the await() call above and</color>
<color=#75715e>     * the creation of the exception message. This tends to happen when</color>
<color=#75715e>     * there are lots of threads in the process thus potentially</color>
<color=#75715e>     * delaying the resumption of this thread following the timeout</color>
<color=#75715e>     * resulting from the await.</color>
<color=#75715e>     *</color>
<color=#75715e>     * It should be noted that some transactions may be setup to not</color>
<color=#75715e>     * decrement the wait latch count for Arbiter acks. Checking an</color>
<color=#75715e>     * Arbiters feeder VLSN here will account for the Arbiter ack.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FeederManager</color> <color=#f8f8f2>feederManager</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>feederManager</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>currentFeederCount</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getNumCurrentAckFeeders</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitVLSN</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentFeederCount</color> <color=#f92672>>=</color> <color=#f8f8f2>requiredAcks</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
          <color=#e6db74>"txn "</color>
              <color=#f92672>+</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" commit vlsn:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>txnInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitVLSN</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" acknowledged after explicit feeder check"</color>
              <color=#f92672>+</color> <color=#e6db74>" latch count:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>txnInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getPendingAcks</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" state:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>dumpState</color>
              <color=#f92672>+</color> <color=#e6db74>" required acks:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>requiredAcks</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We can avoid the exception if it's possible for this node to enter</color>
<color=#75715e>     * activate arbitration. It's useful to check for this again here in</color>
<color=#75715e>     * case we happen to lose connections to replicas in the (brief)</color>
<color=#75715e>     * period since the pre-log hook.  Note that in this case we merely</color>
<color=#75715e>     * want to check; we don't want to switch into active arbitration</color>
<color=#75715e>     * unless/until we actually lose the connection to the replica at</color>
<color=#75715e>     * commit time. TODO: this doesn't seem right! Shouldn't we require</color>
<color=#75715e>     * activation at this point!!!</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>getArbiter</color><color=#f8f8f2>().</color><color=#a6e22e>activationPossible</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InsufficientAcksException</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>pendingAcks</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeoutMs</color><color=#f8f8f2>,</color> <color=#f8f8f2>dumpState</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the minimum number of acknowledgments required to satisfy the ReplicaAckPolicy for a</color>
<color=#75715e>   * given group size. Does not include the master. The method factors in considerations like the</color>
<color=#75715e>   * current arbitration status of the environment and the composition of the replication group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>TODO: it seems sufficient to return a number, as opposed to a set of qualified ack nodes, as</color>
<color=#75715e>   * long as {@link #replicaAcksQualify} will only count qualified acks against the required count.</color>
<color=#75715e>   * That does mean that getCurrentRequiredAckCount and noteReplicaAcks for a transaction must be</color>
<color=#75715e>   * kept consistent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of nodes that are needed, not including the master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getCurrentRequiredAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaAckPolicy</color> <color=#f8f8f2>ackPolicy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the electableGroupSizeOverride is determining the size of the</color>
<color=#75715e>     * election quorum, let it also influence the durability quorum.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>electableGroupSizeOverride</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getElectionQuorum</color><color=#f8f8f2>().</color><color=#a6e22e>getElectableGroupSizeOverride</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electableGroupSizeOverride</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Use the override-defined group size to determine the</color>
<color=#75715e>       * number of acks.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ackPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>minAckNodes</color><color=#f8f8f2>(</color><color=#f8f8f2>electableGroupSizeOverride</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Arbiter</color> <color=#f8f8f2>arbiter</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiter</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>isApplicable</color><color=#f8f8f2>(</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>arbiter</color><color=#f8f8f2>.</color><color=#a6e22e>getAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ackPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>minAckNodes</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>().</color><color=#a6e22e>getAckGroupSize</color><color=#f8f8f2>())</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>