<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DbInternal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LogVerifier</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.ReadableByteChannel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Verifies the checksums in a {@link ReadableByteChannel} for a log file in a JE {@link</color>
<color=#75715e> * Environment}. This class is similar to the {@link LogVerificationInputStream} class, but permits</color>
<color=#75715e> * using NIO channels and direct buffers to provide better copying performance.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This {@code ReadableByteChannel} reads input from some other given {@code</color>
<color=#75715e> * ReadableByteChannel}, and verifies checksums while reading. Its primary intended use is to verify</color>
<color=#75715e> * log files that are being copied as part of a programmatic backup. It is critical that invalid</color>
<color=#75715e> * files are not added to a backup set, since then both the live environment and the backup will be</color>
<color=#75715e> * invalid.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following example verifies log files as they are being copied. The {@link DbBackup} class</color>
<color=#75715e> * should normally be used to obtain the array of files to be copied.</color>
<color=#75715e> * <!-- NOTE: Whenever the method below is changed, update the copy in</color>
<color=#75715e> * VerifyLogTest to match, so that it will be tested. --></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *  void copyFilesNIO(final Environment env,</color>
<color=#75715e> *                    final String[] fileNames,</color>
<color=#75715e> *                    final File destDir,</color>
<color=#75715e> *                    final int bufSize)</color>
<color=#75715e> *      throws IOException, DatabaseException {</color>
<color=#75715e> *</color>
<color=#75715e> *      final File srcDir = env.getHome();</color>
<color=#75715e> *</color>
<color=#75715e> *      for (final String fileName : fileNames) {</color>
<color=#75715e> *</color>
<color=#75715e> *          final File destFile = new File(destDir, fileName);</color>
<color=#75715e> *          final FileOutputStream fos = new FileOutputStream(destFile);</color>
<color=#75715e> *          final FileChannel foc = fos.getChannel();</color>
<color=#75715e> *</color>
<color=#75715e> *          final File srcFile = new File(srcDir, fileName);</color>
<color=#75715e> *          final FileInputStream fis = new FileInputStream(srcFile);</color>
<color=#75715e> *          final FileChannel fic = fis.getChannel();</color>
<color=#75715e> *          final LogVerificationReadableByteChannel vic =</color>
<color=#75715e> *              new LogVerificationReadableByteChannel(env, fic, fileName);</color>
<color=#75715e> *</color>
<color=#75715e> *          final ByteBuffer buf = ByteBuffer.allocateDirect(bufSize);</color>
<color=#75715e> *</color>
<color=#75715e> *          try {</color>
<color=#75715e> *              while (true) {</color>
<color=#75715e> *                  final int len = vic.read(buf);</color>
<color=#75715e> *                  if (len &lt; 0) {</color>
<color=#75715e> *                      break;</color>
<color=#75715e> *                  }</color>
<color=#75715e> *                  buf.flip();</color>
<color=#75715e> *                  foc.write(buf);</color>
<color=#75715e> *                  buf.clear();</color>
<color=#75715e> *              }</color>
<color=#75715e> *          } finally {</color>
<color=#75715e> *              fos.close();</color>
<color=#75715e> *              vic.close();</color>
<color=#75715e> *          }</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>It is important to read the entire underlying input stream until the end-of-file is reached to</color>
<color=#75715e> * detect incomplete entries at the end of the log file.</color>
<color=#75715e> *</color>
<color=#75715e> * @see DbBackup</color>
<color=#75715e> * @see DbVerifyLog</color>
<color=#75715e> * @see LogVerificationInputStream</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LogVerificationReadableByteChannel</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ReadableByteChannel</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TEMP_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>8192</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReadableByteChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogVerifier</color> <color=#f8f8f2>verifier</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>tempArray</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a verification input stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param env the {@code Environment} associated with the log</color>
<color=#75715e>   * @param channel the underlying {@code ReadableByteChannel} for the log to be read</color>
<color=#75715e>   * @param fileName the file name of the input stream, for reporting in the {@code</color>
<color=#75715e>   *     LogVerificationException}. This should be a simple file name of the form {@code</color>
<color=#75715e>   *     NNNNNNNN.jdb}, where NNNNNNNN is the file number in hexadecimal format.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LogVerificationReadableByteChannel</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReadableByteChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>),</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a verification input stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param envImpl the {@code EnvironmentImpl} associated with the log</color>
<color=#75715e>   * @param channel the underlying {@code ReadableByteChannel} for the log to be read</color>
<color=#75715e>   * @param fileName the file name of the input stream, for reporting in the {@code</color>
<color=#75715e>   *     LogVerificationException}. This should be a simple file name of the form {@code</color>
<color=#75715e>   *     NNNNNNNN.jdb}, where NNNNNNNN is the file number in hexadecimal format.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LogVerificationReadableByteChannel</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReadableByteChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channel</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>verifier</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method reads the underlying {@code ReadableByteChannel} and verifies the contents of</color>
<color=#75715e>   * the stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws LogVerificationException if a checksum cannot be verified or a log entry is determined</color>
<color=#75715e>   *     to be invalid by examining its contents</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verifyAtEof</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>hasArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>arrayOffset</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tempArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>tempArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>TEMP_SIZE</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>chunk</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>TEMP_SIZE</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>tempArray</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chunk</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>tempArray</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chunk</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>len</color> <color=#f92672>-=</color> <color=#f8f8f2>chunk</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method calls {@code close} on the underlying channel.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method calls {@code isOpen} on the underlying channel.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOpen</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>isOpen</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>