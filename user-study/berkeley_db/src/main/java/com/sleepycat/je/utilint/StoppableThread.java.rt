<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DbInternal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentWedgedException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ExceptionListener</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentFailureReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.management.ManagementFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.management.ThreadMXBean</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicBoolean</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A StoppableThread is a daemon that obeys the following mandates: - it sets the daemon property</color>
<color=#75715e> * for the thread - an uncaught exception handler is always registered - the thread registers with</color>
<color=#75715e> * the JE exception listener mechanism. - its shutdown method can only be executed once.</color>
<color=#75715e> * StoppableThreads are not required to implement shutdown() methods, because in some cases their</color>
<color=#75715e> * shutdown processing must be coordinated by an owning, parent thread.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>StoppableThread is an alternative to the DaemonThread. It also assumes that the thread's run()</color>
<color=#75715e> * method may be more complex than that of the work-queue, task oriented DaemonThread.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A StoppableThread's run method should catch and handle all exceptions. By default, unhandled</color>
<color=#75715e> * exceptions are considered programming errors, and invalidate the environment, but</color>
<color=#75715e> * StoppableThreads may supply alternative uncaught exception handling.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>StoppableThreads usually are created with an EnvironmentImpl, but on occasion an environment</color>
<color=#75715e> * may not be available (for components that can execute without an environment). In that case, the</color>
<color=#75715e> * thread obviously does not invalidate the environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the StoppableThread.cleanup must be invoked upon, or soon after, thread exit.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>StoppableThread</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Thread</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* The environment, if any, that's associated with this thread. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Shutdown can only be executed once. The shutdown field protects against</color>
<color=#75715e>   * multiple invocations.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicBoolean</color> <color=#f8f8f2>shutdown</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#75715e>/* The exception (if any) that forced this node to shut down. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>savedShutdownException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Total cpu time used by thread */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>totalCpuTime</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Total user time used by thread */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>totalUserTime</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The default wait period for an interrupted thread to exit as part of a hard shutdown. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_INTERRUPT_WAIT_MS</color> <color=#f92672>=</color> <color=#ae81ff>10</color> <color=#f92672>*</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The wait period for joining a thread in which shutdown is running. Use a large timeout since we</color>
<color=#75715e>   * want the shutdown to complete normally, if at all possible.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WAIT_FOR_SHUTDOWN_MS</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_INTERRUPT_WAIT_MS</color> <color=#f92672>*</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

  <color=#66d9ef>protected</color> <color=#a6e22e>StoppableThread</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#a6e22e>StoppableThread</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/* handler */</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/* runnable */</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#a6e22e>StoppableThread</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>UncaughtExceptionHandler</color> <color=#f8f8f2>handler</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>handler</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/* runnable */</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#a6e22e>StoppableThread</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>UncaughtExceptionHandler</color> <color=#f8f8f2>handler</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Runnable</color> <color=#f8f8f2>runnable</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>runnable</color><color=#f8f8f2>,</color> <color=#f8f8f2>threadName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set the daemon property so this thread will not hang up the</color>
<color=#75715e>     * application.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>setDaemon</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setUncaughtExceptionHandler</color><color=#f8f8f2>((</color><color=#f8f8f2>handler</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>UncaughtHandler</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>handler</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return a logger to use when logging uncaught exceptions. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the exception if any that provoked the shutdown</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the exception, or null if it was a normal shutdown</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Exception</color> <color=#a6e22e>getSavedShutdownException</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>savedShutdownException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>shutdownException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>savedShutdownException</color> <color=#f92672>=</color> <color=#f8f8f2>shutdownException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the shutdown flag is false, set it to true and return false; in this case the caller should</color>
<color=#75715e>   * perform shutdown, including calling {@link #shutdownThread}. If the shutdown flag is true, wait</color>
<color=#75715e>   * for this thread to exit and return true; in this case the caller should not perform shutdown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When shutdownDone is initially called by thread X (including from the run method of the</color>
<color=#75715e>   * thread being shutdown), then a thread Y calling shutdownDone should simply return without</color>
<color=#75715e>   * performing shutdown (this is when shutdownDone returns true). In this case it is important that</color>
<color=#75715e>   * this method calls {@link #waitForExit} in thread Y to ensure that thread X really dies, or that</color>
<color=#75715e>   * an EnvironmentWedgedException is thrown if X does not die. In particular it is important that</color>
<color=#75715e>   * all JE threads have died and released their resources when Environment.close returns to the app</color>
<color=#75715e>   * thread, or that EWE is thrown if any JE threads have not died. This allows the app to reliably</color>
<color=#75715e>   * re-open the env, or exit the process if necessary. [#25648]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note than when thread X has sub-components and manages their threads, thread X's shutdown</color>
<color=#75715e>   * method will call shutdown for its managed threads. Waiting for exit of thread X will therefore</color>
<color=#75715e>   * wait for exit of its managed threads, assuming that all shutdown methods calls shutdownDone as</color>
<color=#75715e>   * described.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param logger the logger on which to log messages</color>
<color=#75715e>   * @return true if shutdown is already set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>shutdownDone</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>waitForExit</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Must be invoked upon, or soon after, exit from the thread to perform any cleanup, and ensure</color>
<color=#75715e>   * that any allocated resources are freed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>cleanup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A static method to handle the uncaught exception. This method</color>
<color=#75715e>   * can be called in other places, such as in FileManager.</color>
<color=#75715e>   *</color>
<color=#75715e>   * When an uncaught exception occurs, log it, publish it to the</color>
<color=#75715e>   * exception handler, and invalidate the environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>handleUncaughtException</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Thread</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>envName</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#e6db74>""</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color> <color=#f8f8f2>envName</color> <color=#f92672>+</color> <color=#e6db74>":"</color> <color=#f92672>+</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" exited unexpectedly with exception "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>message</color> <color=#f92672>+=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If we have an environment, log this to all three</color>
<color=#75715e>         * handlers.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * We don't have an environment, but at least log this</color>
<color=#75715e>         * to the console.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>useLogger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If not already invalid, invalidate environment by creating an</color>
<color=#75715e>     * EnvironmentFailureException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Create the exception to invalidate the environment, but do</color>
<color=#75715e>       * not throw it since the handle is invoked in some internal</color>
<color=#75715e>       * JVM thread and the exception is not meaningful to the</color>
<color=#75715e>       * invoker.</color>
<color=#75715e>       */</color>
      <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
      <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>unused</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>UNCAUGHT_EXCEPTION</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ExceptionListener</color> <color=#f8f8f2>exceptionListener</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getExceptionListener</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptionListener</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>exceptionListener</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionThrown</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>makeExceptionEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInvalidatingException</color><color=#f8f8f2>(),</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An uncaught exception should invalidate the environment. Check if the environmentImpl is null,</color>
<color=#75715e>   * because there are a few cases where a StoppableThread is created for components that work both</color>
<color=#75715e>   * in replicated nodes and independently.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>UncaughtHandler</color> <color=#66d9ef>implements</color> <color=#f8f8f2>UncaughtExceptionHandler</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * When an uncaught exception occurs, log it, publish it to the exception handler, and</color>
<color=#75715e>     * invalidate the environment.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>uncaughtException</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>useLogger</color> <color=#f92672>=</color> <color=#f8f8f2>getLogger</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>handleUncaughtException</color><color=#f8f8f2>(</color><color=#f8f8f2>useLogger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is invoked from another thread of control to shutdown this thread. The method tries</color>
<color=#75715e>   * shutting down the thread using a variety of techniques, starting with the gentler techniques in</color>
<color=#75715e>   * order to limit of stopping the thread on the overall process and proceeding to harsher</color>
<color=#75715e>   * techniques:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1) It first tries a "soft" shutdown by invoking <code>initiateSoftShutdown()</code>. This is</color>
<color=#75715e>   * the technique of choice. Each StoppableThread is expected to make provisions for a clean</color>
<color=#75715e>   * shutdown via this method. The techniques used to implement this method may vary based upon the</color>
<color=#75715e>   * specifics of the thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>2) If that fails it interrupts the thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>3) If the thread does not respond to the interrupt, it invalidates the environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>All Stoppable threads are expected to catch an interrupt, clean up and then exit. The</color>
<color=#75715e>   * cleanup may involve invalidation of the environment, if the thread is not in a position to</color>
<color=#75715e>   * handle the interrupt cleanly.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the method has to resort to step 3, it means that thread and other resources may not have</color>
<color=#75715e>   * been freed and it would be best to exit and restart the process itself to ensure they are</color>
<color=#75715e>   * freed. In this case an EnvironmentWedgedException is used to invalidate the env, and the EWE</color>
<color=#75715e>   * will be thrown when the app calls Environment.close.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param logger the logger on which to log messages</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownThread</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Save resource usage, since it will not be available once the</color>
<color=#75715e>     * thread has exited.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ThreadMXBean</color> <color=#f8f8f2>threadBean</color> <color=#f92672>=</color> <color=#f8f8f2>ManagementFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getThreadMXBean</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadBean</color><color=#f8f8f2>.</color><color=#a6e22e>isThreadCpuTimeSupported</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>totalCpuTime</color> <color=#f92672>=</color> <color=#f8f8f2>threadBean</color><color=#f8f8f2>.</color><color=#a6e22e>getThreadCpuTime</color><color=#f8f8f2>(</color><color=#f8f8f2>getId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>totalUserTime</color> <color=#f92672>=</color> <color=#f8f8f2>threadBean</color><color=#f8f8f2>.</color><color=#a6e22e>getThreadUserTime</color><color=#f8f8f2>(</color><color=#f8f8f2>getId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadBean</color><color=#f8f8f2>.</color><color=#a6e22e>isCurrentThreadCpuTimeSupported</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>totalCpuTime</color> <color=#f92672>=</color> <color=#f8f8f2>threadBean</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentThreadCpuTime</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>totalUserTime</color> <color=#f92672>=</color> <color=#f8f8f2>threadBean</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentThreadUserTime</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Shutdown was called from this thread's run method. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" soft shutdown initiated."</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>waitMs</color> <color=#f92672>=</color> <color=#f8f8f2>initiateSoftShutdown</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Wait for a soft shutdown to take effect, the preferred method</color>
<color=#75715e>       * for thread shutdown.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waitMs</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>join</color><color=#f8f8f2>(</color><color=#f8f8f2>waitMs</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color> <color=#f92672>+</color> <color=#e6db74>" has exited."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Soft shutdown failed for thread:"</color>
              <color=#f92672>+</color> <color=#66d9ef>this</color>
              <color=#f92672>+</color> <color=#e6db74>" after waiting for "</color>
              <color=#f92672>+</color> <color=#f8f8f2>waitMs</color>
              <color=#f92672>+</color> <color=#e6db74>"ms resorting to interrupt."</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>interrupt</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The thread must make provision to handle and exit on an</color>
<color=#75715e>       * interrupt.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>joinWaitTime</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>waitMs</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>waitMs</color> <color=#f8f8f2>:</color> <color=#f8f8f2>DEFAULT_INTERRUPT_WAIT_MS</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>join</color><color=#f8f8f2>(</color><color=#f8f8f2>joinWaitTime</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color> <color=#f92672>+</color> <color=#e6db74>" shutdown via interrupt."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Failed to shutdown thread despite all attempts. It's</color>
<color=#75715e>       * possible that the thread has a bug and/or is unable to</color>
<color=#75715e>       * to get to an interruptible point.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
          <color=#66d9ef>this</color>
              <color=#f92672>+</color> <color=#e6db74>" shutdown via interrupt FAILED. "</color>
              <color=#f92672>+</color> <color=#e6db74>"Thread still alive despite waiting for "</color>
              <color=#f92672>+</color> <color=#f8f8f2>joinWaitTime</color>
              <color=#f92672>+</color> <color=#e6db74>"ms."</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fullThreadDump</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>unused</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentWedgedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Interrupted while shutting down thread:"</color> <color=#f92672>+</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to wait for thread shutdown, when {@link #shutdownDone} returns true because it has been</color>
<color=#75715e>   * called by another thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>waitForExit</color><color=#f8f8f2>(</color><color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Shutdown was called from this thread's run method. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>join</color><color=#f8f8f2>(</color><color=#f8f8f2>WAIT_FOR_SHUTDOWN_MS</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * For some reason, shutdown has not finished. This is unlikely,</color>
<color=#75715e>       * but possible. As in shutdownThread, we try interrupting the</color>
<color=#75715e>       * thread before giving up.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Soft shutdown failed for thread:"</color>
              <color=#f92672>+</color> <color=#66d9ef>this</color>
              <color=#f92672>+</color> <color=#e6db74>" after waiting for "</color>
              <color=#f92672>+</color> <color=#f8f8f2>WAIT_FOR_SHUTDOWN_MS</color>
              <color=#f92672>+</color> <color=#e6db74>"ms, resorting to interrupt in wait-for-shutdown."</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>interrupt</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>join</color><color=#f8f8f2>(</color><color=#f8f8f2>WAIT_FOR_SHUTDOWN_MS</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Failed to shutdown thread despite all attempts. It's</color>
<color=#75715e>       * possible that the thread has a bug and/or is unable to</color>
<color=#75715e>       * to get to an interruptible point.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
          <color=#66d9ef>this</color>
              <color=#f92672>+</color> <color=#e6db74>" shutdown via interrupt FAILED during wait-for-shutdown. "</color>
              <color=#f92672>+</color> <color=#e6db74>"Thread still alive despite waiting for "</color>
              <color=#f92672>+</color> <color=#f8f8f2>WAIT_FOR_SHUTDOWN_MS</color>
              <color=#f92672>+</color> <color=#e6db74>"ms."</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fullThreadDump</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>unused</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentWedgedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Interrupted during wait-for-shutdown:"</color> <color=#f92672>+</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Threads that use shutdownThread() must define this method. It's invoked by shutdownThread as an</color>
<color=#75715e>   * attempt at a soft shutdown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method makes provisions for this thread to exit on its own. The technique used to make</color>
<color=#75715e>   * the thread exit can vary based upon the nature of the service being provided by the thread. For</color>
<color=#75715e>   * example, the thread may be known to poll some shutdown flag on a periodic basis, or it may</color>
<color=#75715e>   * detect that a channel that it waits on has been closed by this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the amount of time in ms that the shutdownThread method will wait for the thread to</color>
<color=#75715e>   *     exit. A -ve value means that the method will not wait. A zero value means it will wait</color>
<color=#75715e>   *     indefinitely.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>initiateSoftShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the total cpu time associated with the thread, after the thread has been shutdown. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTotalCpuTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totalCpuTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the total cpu time associated with the thread, after the thread has been shutdown. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTotalUserTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totalUserTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>