<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * ProgressListener provides feedback to the application that progress is being made on a</color>
<color=#75715e> * potentially long running or asynchronous JE operation. The listener itself is general and</color>
<color=#75715e> * abstract, and more details about the meaning of the progress callback can be found by reading</color>
<color=#75715e> * about the entry points where specific ProgressListeners can be specified. For example, see:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link PreloadConfig#setProgressListener}, which accepts a</color>
<color=#75715e> *       ProgressListener&lt;PreloadConfig.Phase&gt;, and reports on Environment.preload() or</color>
<color=#75715e> *       Database.preload()</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#setRecoveryProgressListener}, which accepts a</color>
<color=#75715e> *       ProgressListener&lt;RecoveryProgress&gt;, and reports on environment startup.</color>
<color=#75715e> *   <li>{@link com.sleepycat.je.rep.ReplicationConfig#setSyncupProgressListener}, which accepts a</color>
<color=#75715e> *       ProgressListener&lt;SyncupProgress&gt;, and reports on replication stream syncup.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * @since 5.0</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>T</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Enum</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by BDB JE to indicate to the user that progress has been made on a potentially long</color>
<color=#75715e>   * running or asynchronous operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should do the minimal amount of work, queuing any resource intensive operations</color>
<color=#75715e>   * for processing by another thread before returning to the caller, so that it does not unduly</color>
<color=#75715e>   * delay the target operation, which invokes this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The applicaton should also be aware that the method has potential to disrupt the</color>
<color=#75715e>   * reported-upon operation. If the progress() throws a RuntimeException, the operation for which</color>
<color=#75715e>   * the progress is being reported will be aborted and the exception propagated back to the</color>
<color=#75715e>   * original caller. Also, if progress() returns false, the operation will be halted. For recovery</color>
<color=#75715e>   * and syncup listeners, a false return value can invalidate and close the environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param phase an enum indicating the phase of the operation for which progress is being</color>
<color=#75715e>   *     reported.</color>
<color=#75715e>   * @param n indicates the number of units that have been processed so far. If this does not apply,</color>
<color=#75715e>   *     -1 is returned.</color>
<color=#75715e>   * @param total indicates the total number of units that will be processed if it is known by JE.</color>
<color=#75715e>   *     If total is < 0, then the total number is unknown. When total == n, this indicates that</color>
<color=#75715e>   *     processing of this operation is 100% complete, even if all previous calls to progress</color>
<color=#75715e>   *     passed a negative value for total.</color>
<color=#75715e>   * @return true to continue the operation, false to stop it.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>progress</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>phase</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>total</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>