<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.TransactionStats.Active</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.SortedLSNTreeWalker.TreeNodeProcessor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.StartupTracker.Phase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.Evictor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.OffHeapCache</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.incomp.INCompressor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.Latch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchSupport</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.RestoreRequired</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.SingleItemEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.TraceLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.Checkpointer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.RecoveryInfo</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.RecoveryManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.VLSNRecoveryProxy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.statcap.EnvStatsLogger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.statcap.StatCapture</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.statcap.StatCaptureDefinitions</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.statcap.StatManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.dupConvert.DupConvert</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbBackup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.verify.BtreeVerifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.verify.DataVerifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.verify.VerifierUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.StringWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicReference</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.locks.ReentrantReadWriteLock</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbiStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Underlying Environment implementation. There is a single instance for any database environment</color>
<color=#75715e> * opened by the application.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EnvironmentImpl</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EnvConfigObserver</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Set true and run unit tests for NO_LOCKING_MODE test.</color>
<color=#75715e>   * EnvironmentConfigTest.testInconsistentParams will fail. [#13788]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>TEST_NO_LOCKING_MODE</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Attributes of the entire environment */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>DbEnvState</color> <color=#f8f8f2>envState</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>closing</color><color=#f8f8f2>;</color> <color=#75715e>// true if close has begun</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>openCount</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#75715e>// count of open environment handles</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>backupCount</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#75715e>// count of in-progress dbBackup</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isTransactional</color><color=#f8f8f2>;</color> <color=#75715e>// true if env opened with DB_INIT_TRANS</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNoLocking</color><color=#f8f8f2>;</color> <color=#75715e>// true if env has no locking</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isReadOnly</color><color=#f8f8f2>;</color> <color=#75715e>// true if env opened with the read only flag.</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isMemOnly</color><color=#f8f8f2>;</color> <color=#75715e>// true if je.log.memOnly=true</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>sharedCache</color><color=#f8f8f2>;</color> <color=#75715e>// true if je.sharedCache=true</color>
  <color=#75715e>/* true if offset tracking should be used for deferred write dbs. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dbEviction</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useOffHeapChecksums</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationEnabled</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exposeUserData</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowBlindOps</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowBlindPuts</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxEmbeddedLN</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Whether or not initialization succeeded. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>initializedSuccessfully</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Represents whether this environment needs to be converted from</color>
<color=#75715e>   * standalone to replicated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>needRepConvert</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>adler32ChunkSize</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Save so we don't have to look it up in the config manager frequently. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnTimeout</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Deadlock detection. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deadlockDetection</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>deadlockDetectionDelay</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Directory of databases */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>DbTree</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>mapTreeRootLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Latch</color> <color=#f8f8f2>mapTreeRootLatch</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>INList</color> <color=#f8f8f2>inMemoryINs</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Services */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>EnvConfigObserver</color><color=#f92672>></color> <color=#f8f8f2>configObservers</color><color=#f8f8f2>;</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>envLogger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogManager</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogFlusher</color> <color=#f8f8f2>logFlusher</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataVerifier</color> <color=#f8f8f2>dataVerifier</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileManager</color> <color=#f8f8f2>fileManager</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>TxnManager</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>;</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatManager</color> <color=#f8f8f2>statManager</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Daemons */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>INCompressor</color> <color=#f8f8f2>inCompressor</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Checkpointer</color> <color=#f8f8f2>checkpointer</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Cleaner</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatCapture</color> <color=#f8f8f2>statCapture</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Stats, debug information */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>StartupTracker</color> <color=#f8f8f2>startupTracker</color><color=#f8f8f2>;</color>

  <color=#75715e>/* If true, call Thread.yield() at strategic points (stress test aid) */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forcedYield</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used by Database, SecondaryDatabase and Cursor to protect changes to</color>
<color=#75715e>   * secondary associations during operations that use the associations.  A</color>
<color=#75715e>   * single latch for all databases is used to prevent deadlocks and to</color>
<color=#75715e>   * support associations involving multiple primary databases.</color>
<color=#75715e>   *</color>
<color=#75715e>   * A ReentrantReadWriteLock is used directly rather than via a SharedLatch.</color>
<color=#75715e>   * This is because reentrancy is required but not supported by SharedLatch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReentrantReadWriteLock</color> <color=#f8f8f2>secondaryAssociationLock</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The exception listener for this environment, if any has been specified. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ExceptionListener</color> <color=#f8f8f2>exceptionListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The recovery progress listener for this environment, if any has been specified. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>RecoveryProgress</color><color=#f92672>></color> <color=#f8f8f2>recoveryProgressListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** ClassLoader used to load user-supplied classes by name. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Used for duplicate database conversion. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>dupConvertPreloadConfig</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Configuration and tracking of background IO limits.  Managed by the</color>
<color=#75715e>   * updateBackgroundReads, updateBackgroundWrites and sleepAfterBackgroundIO</color>
<color=#75715e>   * methods.  The limits and the backlog are volatile because we check them</color>
<color=#75715e>   * outside the synchronized block.  Other fields are updated and checked</color>
<color=#75715e>   * while synchronized on the tracking mutex object.  The sleep mutex is</color>
<color=#75715e>   * used to block multiple background threads while sleeping.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>backgroundSleepBacklog</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>backgroundReadLimit</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>backgroundWriteLimit</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>backgroundSleepInterval</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>backgroundReadCount</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>backgroundWriteBytes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color><color=#f92672><?></color> <color=#f8f8f2>backgroundSleepHook</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>backgroundTrackingMutex</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f8f8f2>();</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>backgroundSleepMutex</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * ThreadLocal.get() is not cheap so we want to minimize calls to it.  We</color>
<color=#75715e>   * only use ThreadLocals for the TreeStatsAccumulator which are only called</color>
<color=#75715e>   * in limited circumstances.  Use this reference count to indicate that a</color>
<color=#75715e>   * thread has set a TreeStatsAccumulator.  When it's done, it decrements</color>
<color=#75715e>   * the counter.  It's static so that we don't have to pass around the</color>
<color=#75715e>   * EnvironmentImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>threadLocalReferenceCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used to prevent multiple full thread dumps. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>didFullThreadDump</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * DbPrintLog doesn't need btree and dup comparators to function properly don't require any</color>
<color=#75715e>   * instantiations. This flag, if true, indicates that we've been called from DbPrintLog or a</color>
<color=#75715e>   * similar utility.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noComparators</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A preallocated EnvironmentFailureException that is used in OOME and</color>
<color=#75715e>   * other java.lang.Error situations so that allocation does not need to be</color>
<color=#75715e>   * done in the OOME context.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>preallocatedEFE</color> <color=#f92672>=</color>
      <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>makeJavaErrorWrapper</color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * If the env was invalidated (even if envState is now CLOSED) this</color>
<color=#75715e>   * contains the first EFE that invalidated it. This == preallocatedEFE when</color>
<color=#75715e>   * an Error caused the invalidation. Contains null if the env was not</color>
<color=#75715e>   * invalidated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>EnvironmentFailureException</color><color=#f92672>></color> <color=#f8f8f2>invalidatingEFE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><></color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The first EWE that occurred, or null. If this EWE was the first EFE to</color>
<color=#75715e>   * invalidate the env, then wedgedEFE.get() == invalidatingEFE.get().</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>EnvironmentWedgedException</color><color=#f92672>></color> <color=#f8f8f2>wedgedEFE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><></color><color=#f8f8f2>();</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>USE_JAVA5_ADLER32</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>DISABLE_JAVA_ADLER32_NAME</color> <color=#f92672>=</color> <color=#e6db74>"je.disable.java.adler32"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>USE_JAVA5_ADLER32</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>DISABLE_JAVA_ADLER32_NAME</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * JE MBeans.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Note that MBeans are loaded dynamically in order to support platforms</color>
<color=#75715e>   * that do not include javax.management.  TODO: Since Dalvik is no longer</color>
<color=#75715e>   * supported, we may want to remove this abstraction.</color>
<color=#75715e>   */</color>

  <color=#75715e>/* The property name of setting these two MBeans. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>REGISTER_MONITOR</color> <color=#f92672>=</color> <color=#e6db74>"JEMonitor"</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The two MBeans registered or not. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isMBeanRegistered</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Log handlers used in java.util.logging. Handlers are per-environment,</color>
<color=#75715e>   * and must not be static, because the output is tagged with an identifier</color>
<color=#75715e>   * that associates the information with that environment. Handlers should</color>
<color=#75715e>   * be closed to release resources when the environment is closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Note that handlers are not statically attached to loggers. See</color>
<color=#75715e>   * LoggerUtils.java for information on how redirect loggers are used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>INFO_FILES</color> <color=#f92672>=</color> <color=#e6db74>"je.info"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILEHANDLER_LIMIT</color> <color=#f92672>=</color> <color=#ae81ff>10000000</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILEHANDLER_COUNT</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ConsoleHandler</color> <color=#f8f8f2>consoleHandler</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileHandler</color> <color=#f8f8f2>fileHandler</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A Handler that was specified by the application through</color>
<color=#75715e>   * EnvironmentConfig</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Handler</color> <color=#f8f8f2>configuredHandler</color><color=#f8f8f2>;</color>
  <color=#75715e>/* cache this value as a performance optimization. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dbLoggingDisabled</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Formatter for java.util.logging. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The internal environment handle that is passed to triggers invoked as a</color>
<color=#75715e>   * result of AutoTransactions where no environment handle is available, and</color>
<color=#75715e>   * in all cases of triggers involving replicated environments.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>envInternal</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to coordinate getting stats and shutting down the threads</color>
<color=#75715e>   * that provide the stats. The shutdown of the statistics capture</color>
<color=#75715e>   * thread will get statistics right before shutting down. The</color>
<color=#75715e>   * acquisition of stats must be done without synchronizing on the</color>
<color=#75715e>   * EnvironmentImpl to avoid a deadlock between the shutdown thread</color>
<color=#75715e>   * (has the EnvironmentImpl lock) and the stat capture thread calling</color>
<color=#75715e>   * getStats().</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>statSynchronizer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f8f8f2>();</color>

  <color=#75715e>/* Stat base key used for loadStats api */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Integer</color> <color=#f8f8f2>statKey</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>creationTime</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * To support platforms that do not have any javax.management classes, we load JEMonitor</color>
<color=#75715e>   * dynamically to ensure that there are no explicit references to com.sleepycat.je.jmx.*.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>MBeanRegistrar</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>void</color> <color=#a6e22e>doRegister</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>;</color>

    <color=#66d9ef>void</color> <color=#a6e22e>doUnregister</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>MBeanRegistrar</color><color=#f92672>></color> <color=#f8f8f2>mBeanRegList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>MBeanRegistrar</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#75715e>/* NodeId sequence counters */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NodeSequence</color> <color=#f8f8f2>nodeSequence</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Stats */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>envStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>relatchesRequired</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>thrputStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priSearchOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priSearchFailOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>secSearchOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>secSearchFailOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priPositionOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>secPositionOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priInsertOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priInsertFailOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>secInsertOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priUpdateOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>secUpdateOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priDeleteOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>priDeleteFailOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>secDeleteOps</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>binDeltaGets</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>binDeltaInserts</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>binDeltaUpdates</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongStat</color> <color=#f8f8f2>binDeltaDeletes</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>EnvStatsLogger</color> <color=#f8f8f2>envStatLogger</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Refer to comment near declaration of these static LockUpgrades. */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>.</color><color=#a6e22e>setUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>.</color><color=#a6e22e>setUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE_PROMOTE</color><color=#f8f8f2>.</color><color=#a6e22e>setUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ_IMMED</color><color=#f8f8f2>.</color><color=#a6e22e>setUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE_IMMED</color><color=#f8f8f2>.</color><color=#a6e22e>setUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE_PROMOTE</color><color=#f8f8f2>.</color><color=#a6e22e>setUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* May be null, see getOptionalNodeName. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>optionalNodeName</color><color=#f8f8f2>;</color>

  <color=#75715e>/* EnvironmentConfig.TREE_COMPACT_MAX_KEY_LENGTH. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>compactMaxKeyLength</color><color=#f8f8f2>;</color>

  <color=#75715e>/* EnvironmentParams.ENV_LATCH_TIMEOUT. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>latchTimeoutMs</color><color=#f8f8f2>;</color>

  <color=#75715e>/** {@link EnvironmentParams#ENV_TTL_CLOCK_TOLERANCE}. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>ttlClockTolerance</color><color=#f8f8f2>;</color>

  <color=#75715e>/** {@link EnvironmentParams#ENV_TTL_MAX_TXN_TIME}. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>ttlMaxTxnTime</color><color=#f8f8f2>;</color>

  <color=#75715e>/** {@link EnvironmentParams#ENV_TTL_LN_PURGE_DELAY}. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>ttlLnPurgeDelay</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>EnvironmentImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentLockedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a database environment to represent the data in envHome. dbHome. Properties from the</color>
<color=#75715e>   * je.properties file in that directory are used to initialize the system wide property bag.</color>
<color=#75715e>   * Properties passed to this method are used to influence the open itself.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param envHome absolute path of the database environment home directory</color>
<color=#75715e>   * @param envConfig is the configuration to be used. It's already had the je.properties file</color>
<color=#75715e>   *     applied, and has been validated.</color>
<color=#75715e>   * @param sharedCacheEnv if non-null, is another environment that is sharing the cache with this</color>
<color=#75715e>   *     environment; if null, this environment is not sharing the cache or is the first environment</color>
<color=#75715e>   *     to share the cache.</color>
<color=#75715e>   * @throws DatabaseException on all other failures</color>
<color=#75715e>   * @throws IllegalArgumentException via Environment ctor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>EnvironmentImpl</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentLockedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>startupTracker</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StartupTracker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>startupTracker</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>TOTAL_ENV_OPEN</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envHome</color> <color=#f92672>=</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>envState</color> <color=#f92672>=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>mapTreeRootLatch</color> <color=#f92672>=</color>
          <color=#f8f8f2>LatchFactory</color><color=#f8f8f2>.</color><color=#a6e22e>createExclusiveLatch</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"MapTreeRoot"</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*collectStats*/</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Do the stats definition. */</color>
      <color=#f8f8f2>envStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENV_GROUP_DESC</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>relatchesRequired</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>envStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENV_RELATCHES_REQUIRED</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>creationTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>binDeltaGets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>envStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENV_BIN_DELTA_GETS</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>binDeltaInserts</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>envStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENV_BIN_DELTA_INSERTS</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>binDeltaUpdates</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>envStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENV_BIN_DELTA_UPDATES</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>binDeltaDeletes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>envStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENV_BIN_DELTA_DELETES</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>thrputStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_GROUP_DESC</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>priSearchOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_SEARCH</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priSearchFailOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_SEARCH_FAIL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>secSearchOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_SEC_SEARCH</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>secSearchFailOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_SEC_SEARCH_FAIL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priPositionOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_POSITION</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>secPositionOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_SEC_POSITION</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priInsertOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_INSERT</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priInsertFailOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_INSERT_FAIL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>secInsertOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_SEC_INSERT</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priUpdateOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_UPDATE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>secUpdateOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_SEC_UPDATE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priDeleteOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_DELETE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priDeleteFailOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_PRI_DELETE_FAIL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>secDeleteOps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>THROUGHPUT_SEC_DELETE</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Set up configuration parameters */</color>
      <color=#f8f8f2>configManager</color> <color=#f92672>=</color> <color=#f8f8f2>initConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>configObservers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>EnvConfigObserver</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>addConfigObserver</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>initConfigParams</color><color=#f8f8f2>(</color><color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Create essential services that must exist before recovery.</color>
<color=#75715e>       */</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Set up java.util.logging handlers and their environment specific</color>
<color=#75715e>       * formatters. These are used by the redirect handlers, rather</color>
<color=#75715e>       * than specific loggers.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>formatter</color> <color=#f92672>=</color> <color=#f8f8f2>initFormatter</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>consoleHandler</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>com</color><color=#f8f8f2>.</color><color=#a6e22e>sleepycat</color><color=#f8f8f2>.</color><color=#a6e22e>je</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>ConsoleHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>fileHandler</color> <color=#f92672>=</color> <color=#f8f8f2>initFileHandler</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>configuredHandler</color> <color=#f92672>=</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggingHandler</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>envLogger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Decide on memory budgets based on environment config params and</color>
<color=#75715e>       * memory available to this process.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>memoryBudget</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>fileManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>isReadOnly</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowCreate</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>filesExist</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_SETUP_LOGGER</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentNotFoundException</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Home directory: "</color> <color=#f92672>+</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>optionalNodeName</color> <color=#f92672>=</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>logManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>isReadOnly</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>inMemoryINs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>INList</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>txnManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TxnManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>statManager</color> <color=#f92672>=</color> <color=#f8f8f2>createStatManager</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Daemons are always made here, but only started after recovery.</color>
<color=#75715e>       * We want them to exist so we can call them programatically even</color>
<color=#75715e>       * if the daemon thread is not started.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedCacheEnv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* The evictor and off-heap cache may be shared by multiple envs. */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>sharedCache</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>evictor</color> <color=#f92672>=</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>.</color><color=#a6e22e>evictor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>offHeapCache</color> <color=#f92672>=</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>.</color><color=#a6e22e>offHeapCache</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Evictor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>offHeapCache</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OffHeapCache</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>checkpointer</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>Checkpointer</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>Checkpointer</color><color=#f8f8f2>.</color><color=#a6e22e>getWakeupPeriod</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>),</color> <color=#f8f8f2>Environment</color><color=#f8f8f2>.</color><color=#a6e22e>CHECKPOINTER_NAME</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>inCompressor</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>INCompressor</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>COMPRESSOR_WAKEUP_INTERVAL</color><color=#f8f8f2>),</color>
              <color=#f8f8f2>Environment</color><color=#f8f8f2>.</color><color=#a6e22e>INCOMP_NAME</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>cleaner</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cleaner</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>Environment</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANER_NAME</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>statCapture</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>StatCapture</color><color=#f8f8f2>(</color>
              <color=#66d9ef>this</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Environment</color><color=#f8f8f2>.</color><color=#a6e22e>STATCAPTURE_NAME</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>STATS_COLLECT_INTERVAL</color><color=#f8f8f2>),</color>
              <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getCustomStats</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>getStatCaptureProjections</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>statManager</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>logFlusher</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogFlusher</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>dataVerifier</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DataVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The node sequences are not initialized until after the DbTree is</color>
<color=#75715e>       * created below.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>nodeSequence</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NodeSequence</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Instantiate a new, blank dbtree. If the environment already</color>
<color=#75715e>       * exists, recovery will recreate the dbMapTree from the log and</color>
<color=#75715e>       * overwrite this instance.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>dbMapTree</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbTree</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>isReplicated</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getPreserveVLSN</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>secondaryAssociationLock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReentrantReadWriteLock</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*fair*/</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Allocate node sequences before recovery. We expressly wait to</color>
<color=#75715e>       * allocate it after the DbTree is created, because these sequences</color>
<color=#75715e>       * should not be used by the DbTree before recovery has</color>
<color=#75715e>       * run. Waiting until now to allocate them will make errors more</color>
<color=#75715e>       * evident, since there will be a NullPointerException.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>nodeSequence</color><color=#f8f8f2>.</color><color=#a6e22e>initRealNodeId</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>statKey</color> <color=#f92672>=</color> <color=#f8f8f2>statManager</color><color=#f8f8f2>.</color><color=#a6e22e>registerStatContext</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isMemOnly</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>STATS_COLLECT</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envStatLogger</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvStatsLogger</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>addConfigObserver</color><color=#f8f8f2>(</color><color=#f8f8f2>envStatLogger</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>envStatLogger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Release any environment locks if there was a problem. */</color>
        <color=#f8f8f2>clearFileManager</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>closeHandlers</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a config manager that holds the configuration properties that have been passed in. These</color>
<color=#75715e>   * properties are already validated, and have had the proper order of precedence applied; that is,</color>
<color=#75715e>   * the je.properties file has been applied. The configuration properties need to be available</color>
<color=#75715e>   * before the rest of environment creation proceeds.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is overridden by replication environments.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param envConfig is the environment configuration to use</color>
<color=#75715e>   * @param repParams are the replication configurations to use. In this case, the Properties bag</color>
<color=#75715e>   *     has been extracted from the configuration instance, to avoid crossing the compilation</color>
<color=#75715e>   *     firewall.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>DbConfigManager</color> <color=#a6e22e>initConfigManager</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>envConfig</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Init configuration params during environment creation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is overridden by RepImpl to get init params also. This allows certain rep params</color>
<color=#75715e>   * to be accessed from the EnvironmentImpl constructor using methods such as getPreserveVLSN. The</color>
<color=#75715e>   * overridden method calls this method first.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param repConfigProxy unused</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>initConfigParams</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>forcedYield</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_FORCED_YIELD</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>isTransactional</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_INIT_TXN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>isNoLocking</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_INIT_LOCKING</color><color=#f8f8f2>));</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isTransactional</color> <color=#f92672>&&</color> <color=#f8f8f2>isNoLocking</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>TEST_NO_LOCKING_MODE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isNoLocking</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>isTransactional</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Can't set 'je.env.isNoLocking' and "</color> <color=#f92672>+</color> <color=#e6db74>"'je.env.isTransactional';"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>isReadOnly</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RDONLY</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>isMemOnly</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_MEMORY_ONLY</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dbEviction</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_DB_EVICTION</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>useOffHeapChecksums</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>OFFHEAP_CHECKSUM</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>adler32ChunkSize</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ADLER32_CHUNK_SIZE</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sharedCache</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_SHARED_CACHE</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dbLoggingDisabled</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>JE_LOGGING_DBLOG</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>compactMaxKeyLength</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TREE_COMPACT_MAX_KEY_LENGTH</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>latchTimeoutMs</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_LATCH_TIMEOUT</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>ttlClockTolerance</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_TTL_CLOCK_TOLERANCE</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>ttlMaxTxnTime</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_TTL_MAX_TXN_TIME</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>ttlLnPurgeDelay</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_TTL_LN_PURGE_DELAY</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>allowBlindOps</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>BIN_DELTA_BLIND_OPS</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>allowBlindPuts</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>BIN_DELTA_BLIND_PUTS</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>maxEmbeddedLN</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TREE_MAX_EMBEDDED_LN</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>deadlockDetection</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOCK_DEADLOCK_DETECT</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>deadlockDetectionDelay</color> <color=#f92672>=</color>
        <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOCK_DEADLOCK_DETECT_DELAY</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>recoveryProgressListener</color> <color=#f92672>=</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRecoveryProgressListener</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>classLoader</color> <color=#f92672>=</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>dupConvertPreloadConfig</color> <color=#f92672>=</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getDupConvertPreloadConfig</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initialize the environment, including running recovery, if it is not already initialized.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method should be called even when opening additional handles for an already</color>
<color=#75715e>   * initialized environment. If initialization is still in progress then this method will block</color>
<color=#75715e>   * until it is finished.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if we are opening the first handle for this environment and recovery is run (when</color>
<color=#75715e>   *     ENV_RECOVERY is configured to true); false if we are opening an additional handle and</color>
<color=#75715e>   *     recovery is not run.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>finishInit</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>initializedSuccessfully</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do not do recovery if this environment is for a utility that</color>
<color=#75715e>       * reads the log directly.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doRecovery</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RECOVERY</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doRecovery</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Run recovery.  Note that debug logging to the database log</color>
<color=#75715e>         * is disabled until recovery is finished.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>recoverySuccess</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>RecoveryManager</color> <color=#f8f8f2>recoveryManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RecoveryManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>recoveryManager</color><color=#f8f8f2>.</color><color=#a6e22e>recover</color><color=#f8f8f2>(</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>postRecoveryConversion</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>recoverySuccess</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Flush to get all exception tracing out to the log.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>flushSync</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Ignore second order exceptions. */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>recoverySuccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
                  <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>recoverySuccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>isReadOnly</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Normally when recovery is skipped, we don't need to</color>
<color=#75715e>         * instantiate comparators.  But even without recovery, some</color>
<color=#75715e>         * utilities such as DbScavenger need comparators.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_COMPARATORS_REQUIRED</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>noComparators</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Cache a few critical values. We keep our timeout in millis</color>
<color=#75715e>       * because Object.wait takes millis.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>lockTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOCK_TIMEOUT</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>txnTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_TIMEOUT</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Initialize the environment memory usage number. Must be called</color>
<color=#75715e>       * after recovery, because recovery determines the starting size of</color>
<color=#75715e>       * the in-memory tree.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>initCacheMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>getTreeAdminMemory</color><color=#f8f8f2>());</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Call config observer and start daemons last after everything</color>
<color=#75715e>       * else is initialized. Note that all config parameters, both</color>
<color=#75715e>       * mutable and non-mutable, needed by the memoryBudget have already</color>
<color=#75715e>       * been initialized when the configManager was instantiated.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>envConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Mark initialized before creating the internal env, since</color>
<color=#75715e>       * otherwise a we'll recurse and attempt to create another</color>
<color=#75715e>       * EnvironmentImpl.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>initializedSuccessfully</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doRecovery</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Perform dup database conversion after recovery and other</color>
<color=#75715e>         * initialization is complete, but before running daemons.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>convertDupDatabases</color><color=#f8f8f2>();</color>

        <color=#75715e>/* Create internal env before SyncCleanerBarrier. */</color>
        <color=#f8f8f2>envInternal</color> <color=#f92672>=</color> <color=#f8f8f2>createInternalEnvironment</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Mark as open before starting daemons. Note that this will allow</color>
<color=#75715e>       * background eviction threads to run, so it should not be done</color>
<color=#75715e>       * until we are ready for multi-threaded access.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>open</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>runOrPauseDaemons</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Release any environment locks if there was a problem. */</color>
        <color=#f8f8f2>clearFileManager</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>closeHandlers</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * DbEnvPool.addEnvironment is called by RecoveryManager.buildTree</color>
<color=#75715e>       * during recovery above, to enable eviction during recovery.  If</color>
<color=#75715e>       * we fail to create the environment, we must remove it.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color> <color=#f92672>&&</color> <color=#f8f8f2>sharedCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>removeSharedCacheEnv</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>startupTracker</color><color=#f8f8f2>.</color><color=#a6e22e>stop</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>TOTAL_ENV_OPEN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>startupTracker</color><color=#f8f8f2>.</color><color=#a6e22e>setProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>RecoveryProgress</color><color=#f8f8f2>.</color><color=#a6e22e>RECOVERY_FINISHED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is overridden in RepImpl to create a ReplicatedEnvironment. */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>createInternalEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InternalEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>getEnvironmentHome</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cloneConfig</color><color=#f8f8f2>(),</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * JE MBean registration is performed during Environment creation so that</color>
<color=#75715e>   * the MBean has access to the Environment API which is not available from</color>
<color=#75715e>   * EnvironmentImpl. This precludes registering MBeans in</color>
<color=#75715e>   * EnvironmentImpl.finishInit.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>registerMBean</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isMBeanRegistered</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>REGISTER_MONITOR</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>doRegisterMBean</color><color=#f8f8f2>(</color><color=#f8f8f2>getMonitorClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>env</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>doRegisterMBean</color><color=#f8f8f2>(</color><color=#f8f8f2>getDiagnosticsClassName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>env</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>isMBeanRegistered</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMonitorClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"com.sleepycat.je.jmx.JEMonitor"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDiagnosticsClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"com.sleepycat.je.jmx.JEDiagnostics"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Returns the default consistency policy for this EnvironmentImpl.</color>
<color=#75715e>   *</color>
<color=#75715e>   * When a Txn is created directly for internal use, the default consistency</color>
<color=#75715e>   * is needed.  For example, SyncDB uses this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * This method returns null for a standalone Environment, and returns the</color>
<color=#75715e>   * default consistency policy for a ReplicatedEnvironment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#a6e22e>getDefaultConsistencyPolicy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Returns the end of the log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Returned value is a Lsn if it's a standalone Environment, otherwise it's</color>
<color=#75715e>   * a VLSN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getEndOfLog</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLastUsedLsn</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get replication statistics. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#a6e22e>getRepStatGroups</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color> <color=#f8f8f2>statkey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Standalone Environment doesn't support replication statistics."</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>SortedSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getStatCaptureProjections</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatCaptureDefinitions</color><color=#f8f8f2>().</color><color=#a6e22e>getStatisticProjections</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StatManager</color> <color=#a6e22e>createStatManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>doRegisterMBean</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>className</color><color=#f8f8f2>,</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>newClass</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>className</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>MBeanRegistrar</color> <color=#f8f8f2>mBeanReg</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MBeanRegistrar</color><color=#f8f8f2>)</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>mBeanReg</color><color=#f8f8f2>.</color><color=#a6e22e>doRegister</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mBeanRegList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>mBeanReg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>),</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>MONITOR_REGISTRATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>unregisterMBean</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>MBeanRegistrar</color> <color=#f8f8f2>mBeanReg</color> <color=#f8f8f2>:</color> <color=#f8f8f2>mBeanRegList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mBeanReg</color><color=#f8f8f2>.</color><color=#a6e22e>doUnregister</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Release and close the FileManager when there are problems during the</color>
<color=#75715e>   * initialization of this EnvironmentImpl.  An exception is already in</color>
<color=#75715e>   * flight when this method is called.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clearFileManager</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileManager</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Clear again, in case an exception in logManager.flush()</color>
<color=#75715e>       * caused us to skip the earlier call to clear().</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Klockwork - ok</color>
<color=#75715e>       * Eat it, we want to throw the original exception.</color>
<color=#75715e>       */</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Klockwork - ok</color>
<color=#75715e>       * Eat it, we want to throw the original exception.</color>
<color=#75715e>       */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Respond to config updates. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>envConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>backgroundReadLimit</color> <color=#f92672>=</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_BACKGROUND_READ_LIMIT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>backgroundWriteLimit</color> <color=#f92672>=</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_BACKGROUND_WRITE_LIMIT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>backgroundSleepInterval</color> <color=#f92672>=</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_BACKGROUND_SLEEP_INTERVAL</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Reset logging levels if they're set in EnvironmentMutableConfig. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>.</color><color=#a6e22e>isConfigParamSet</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>CONSOLE_LOGGING_LEVEL</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Level</color> <color=#f8f8f2>newConsoleHandlerLevel</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>JE_CONSOLE_LEVEL</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>consoleHandler</color><color=#f8f8f2>.</color><color=#a6e22e>setLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>newConsoleHandlerLevel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>.</color><color=#a6e22e>isConfigParamSet</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>.</color><color=#a6e22e>FILE_LOGGING_LEVEL</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Level</color> <color=#f8f8f2>newFileHandlerLevel</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>JE_FILE_LEVEL</color><color=#f8f8f2>));</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileHandler</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fileHandler</color><color=#f8f8f2>.</color><color=#a6e22e>setLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>newFileHandlerLevel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>exceptionListener</color> <color=#f92672>=</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getExceptionListener</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>expirationEnabled</color> <color=#f92672>=</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_EXPIRATION_ENABLED</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>exposeUserData</color> <color=#f92672>=</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_EXPOSE_USER_DATA</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>STATS_COLLECT</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envStatLogger</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isMemOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envStatLogger</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvStatsLogger</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>addConfigObserver</color><color=#f8f8f2>(</color><color=#f8f8f2>envStatLogger</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Need to log env stats because stats were off and are now on.</color>
<color=#75715e>         * Since stats were off there was no event observer registered.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>envStatLogger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envStatLogger</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>removeConfigObserver</color><color=#f8f8f2>(</color><color=#f8f8f2>envStatLogger</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>envStatLogger</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Start daemons last, after all other parameters are set.  Do not</color>
<color=#75715e>     * start the daemons during the EnvironmentImpl constructor's call</color>
<color=#75715e>     * (before open() has been called), to allow finishInit to run.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>runOrPauseDaemons</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Run or pause daemons, depending on config properties. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>runOrPauseDaemons</color><color=#f8f8f2>(</color><color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>mgr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>runOrPause</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_INCOMPRESSOR</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>runOrPause</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_CLEANER</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isMemOnly</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>checkpointer</color><color=#f8f8f2>.</color><color=#a6e22e>runOrPause</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RUN_CHECKPOINTER</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>statCapture</color><color=#f8f8f2>.</color><color=#a6e22e>runOrPause</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>STATS_COLLECT</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>logFlusher</color><color=#f8f8f2>.</color><color=#a6e22e>configFlushTask</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dataVerifier</color><color=#f8f8f2>.</color><color=#a6e22e>configVerifyTask</color><color=#f8f8f2>(</color><color=#f8f8f2>mgr</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the incompressor. In general, don't use this directly because it's easy to forget that</color>
<color=#75715e>   * the incompressor can be null at times (i.e during the shutdown procedure. Instead, wrap the</color>
<color=#75715e>   * functionality within this class, like lazyCompress.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>INCompressor</color> <color=#a6e22e>getINCompressor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inCompressor</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the FileProtector. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>FileProtector</color> <color=#a6e22e>getFileProtector</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>getFileProtector</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the UtilizationTracker. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>UtilizationTracker</color> <color=#a6e22e>getUtilizationTracker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationTracker</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the UtilizationProfile. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>UtilizationProfile</color> <color=#a6e22e>getUtilizationProfile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationProfile</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the ExpirationProfile. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ExpirationProfile</color> <color=#a6e22e>getExpirationProfile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationProfile</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the default cache mode for this environment. If the environment has a null cache mode,</color>
<color=#75715e>   * CacheMode.DEFAULT is returned. Null is never returned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CacheMode</color> <color=#a6e22e>getDefaultCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns EnvironmentConfig.TREE_COMPACT_MAX_KEY_LENGTH. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getCompactMaxKeyLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>compactMaxKeyLength</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns EnvironmentConfig.ENV_LATCH_TIMEOUT. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLatchTimeoutMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>latchTimeoutMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns {@link EnvironmentParams#ENV_TTL_CLOCK_TOLERANCE}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTtlClockTolerance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ttlClockTolerance</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns {@link EnvironmentParams#ENV_TTL_MAX_TXN_TIME}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTtlMaxTxnTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ttlMaxTxnTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns {@link EnvironmentParams#ENV_TTL_LN_PURGE_DELAY}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTtlLnPurgeDelay</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ttlLnPurgeDelay</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If a background read limit has been configured and that limit is exceeded when the cumulative</color>
<color=#75715e>   * total is incremented by the given number of reads, increment the sleep backlog to cause a sleep</color>
<color=#75715e>   * to occur. Called by background activities such as the cleaner after performing a file read</color>
<color=#75715e>   * operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #sleepAfterBackgroundIO</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateBackgroundReads</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>nReads</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Make a copy of the volatile limit field since it could change</color>
<color=#75715e>     * between the time we check it and the time we use it below.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>limit</color> <color=#f92672>=</color> <color=#f8f8f2>backgroundReadLimit</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>limit</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundTrackingMutex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>backgroundReadCount</color> <color=#f92672>+=</color> <color=#f8f8f2>nReads</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundReadCount</color> <color=#f92672>>=</color> <color=#f8f8f2>limit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>backgroundSleepBacklog</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#75715e>/* Remainder is rolled forward. */</color>
          <color=#f8f8f2>backgroundReadCount</color> <color=#f92672>-=</color> <color=#f8f8f2>limit</color><color=#f8f8f2>;</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>backgroundReadCount</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If a background write limit has been configured and that limit is exceeded when the given</color>
<color=#75715e>   * amount written is added to the cumulative total, increment the sleep backlog to cause a sleep</color>
<color=#75715e>   * to occur. Called by background activities such as the checkpointer and evictor after performing</color>
<color=#75715e>   * a file write operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The number of writes is estimated by dividing the bytes written by the log buffer size.</color>
<color=#75715e>   * Since the log write buffer is shared by all writers, this is the best approximation possible.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #sleepAfterBackgroundIO</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateBackgroundWrites</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>writeSize</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>logBufferSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Make a copy of the volatile limit field since it could change</color>
<color=#75715e>     * between the time we check it and the time we use it below.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>limit</color> <color=#f92672>=</color> <color=#f8f8f2>backgroundWriteLimit</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>limit</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundTrackingMutex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>backgroundWriteBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>writeSize</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>writeCount</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundWriteBytes</color> <color=#f92672>/</color> <color=#f8f8f2>logBufferSize</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeCount</color> <color=#f92672>>=</color> <color=#f8f8f2>limit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>backgroundSleepBacklog</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#75715e>/* Remainder is rolled forward. */</color>
          <color=#f8f8f2>backgroundWriteBytes</color> <color=#f92672>-=</color> <color=#f8f8f2>(</color><color=#f8f8f2>limit</color> <color=#f92672>*</color> <color=#f8f8f2>logBufferSize</color><color=#f8f8f2>);</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>backgroundWriteBytes</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the sleep backlog is non-zero (set by updateBackgroundReads or updateBackgroundWrites),</color>
<color=#75715e>   * sleep for the configured interval and decrement the backlog.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If two threads call this method and the first call causes a sleep, the call by the second</color>
<color=#75715e>   * thread will block until the first thread's sleep interval is over. When the call by the second</color>
<color=#75715e>   * thread is unblocked, if another sleep is needed then the second thread will sleep again. In</color>
<color=#75715e>   * other words, when lots of sleeps are needed, background threads may backup. This is intended to</color>
<color=#75715e>   * give foreground threads a chance to "catch up" when background threads are doing a lot of IO.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>sleepAfterBackgroundIO</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundSleepBacklog</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundSleepMutex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Sleep. Rethrow interrupts if they occur. */</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* FindBugs: OK that we're sleeping with a mutex held. */</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundSleepInterval</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>interrupt</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Assert has intentional side effect for unit testing. */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundSleepHook</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundTrackingMutex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Decrement backlog last to make other threads wait. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundSleepBacklog</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>backgroundSleepBacklog</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBackgroundSleepHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><?></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>backgroundSleepHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Logs the map tree root and saves the LSN. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>logMapTreeRoot</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>logMapTreeRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Logs the map tree root, but only if its current LSN is before the ifBeforeLsn parameter or</color>
<color=#75715e>   * ifBeforeLsn is NULL_LSN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>logMapTreeRoot</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>ifBeforeLsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>mapTreeRootLatch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ifBeforeLsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f92672>||</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>mapTreeRootLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ifBeforeLsn</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>mapTreeRootLsn</color> <color=#f92672>=</color>
            <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>SingleItemEntry</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DBTREE</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mapTreeRootLatch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Force a rewrite of the map tree root if required. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>rewriteMapTreeRoot</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>cleanerTargetLsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>mapTreeRootLatch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>cleanerTargetLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>mapTreeRootLsn</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The root entry targetted for cleaning is in use.  Write a</color>
<color=#75715e>         * new copy.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>mapTreeRootLsn</color> <color=#f92672>=</color>
            <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>SingleItemEntry</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DBTREE</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mapTreeRootLatch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the mapping tree root LSN. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getRootLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mapTreeRootLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set the mapping tree from the log. Called during recovery. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readMapTreeFromLog</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>rootLsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbMapTree</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>dbMapTree</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>)</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEntryHandleFileNotFound</color><color=#f8f8f2>(</color><color=#f8f8f2>rootLsn</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Set the dbMapTree to replicated when converted. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>getAllowRepConvert</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>setIsReplicated</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>setIsRepConverted</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>needRepConvert</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>initExistingEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Set the map tree root */</color>
    <color=#f8f8f2>mapTreeRootLatch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mapTreeRootLsn</color> <color=#f92672>=</color> <color=#f8f8f2>rootLsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mapTreeRootLatch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Tells the asynchronous IN compressor thread about a BIN with a deleted entry. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addToCompressorQueue</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>addBinToQueue</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Tells the asynchronous IN compressor thread about a collections of BINReferences with deleted</color>
<color=#75715e>   * entries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addToCompressorQueue</color><color=#f8f8f2>(</color><color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>BINReference</color><color=#f92672>></color> <color=#f8f8f2>binRefs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>addMultipleBinRefsToQueue</color><color=#f8f8f2>(</color><color=#f8f8f2>binRefs</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>lazyCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>in</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>lazyCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>shouldLogDelta</color><color=#f8f8f2>()</color> <color=#75715e>/*compressDirtySlots*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>lazyCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>compressDirtySlots</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>lazyCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>compressDirtySlots</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reset the logging level for specified loggers in a JE environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via JEDiagnostics.OP_RESET_LOGGING</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resetLoggingLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>changedLoggerName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Go through the loggers registered in the global log manager, and</color>
<color=#75715e>     * set the new level. If the specified logger name is not valid, throw</color>
<color=#75715e>     * an IllegalArgumentException.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>logging</color><color=#f8f8f2>.</color><color=#a6e22e>LogManager</color> <color=#f8f8f2>loggerManager</color> <color=#f92672>=</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>logging</color><color=#f8f8f2>.</color><color=#a6e22e>LogManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Enumeration</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>loggers</color> <color=#f92672>=</color> <color=#f8f8f2>loggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerNames</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>validName</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>loggers</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreElements</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>loggerName</color> <color=#f92672>=</color> <color=#f8f8f2>loggers</color><color=#f8f8f2>.</color><color=#a6e22e>nextElement</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>loggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>loggerName</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"all"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>changedLoggerName</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f8f8f2>loggerName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>changedLoggerName</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f8f8f2>loggerName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>changedLoggerName</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>NO_ENV</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f8f8f2>loggerName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>changedLoggerName</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>FIXED_PREFIX</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f8f8f2>loggerName</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>changedLoggerName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>setLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>validName</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>validName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The logger name parameter: "</color> <color=#f92672>+</color> <color=#f8f8f2>changedLoggerName</color> <color=#f92672>+</color> <color=#e6db74>" is invalid!"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Initialize the handler's formatter. */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Formatter</color> <color=#a6e22e>initFormatter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TracerFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>getName</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>FileHandler</color> <color=#a6e22e>initFileHandler</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Note that in JE 3.X and earlier, file logging encompassed both</color>
<color=#75715e>     * logging to a java.util.logging.FileHandler and our own JE log files</color>
<color=#75715e>     * and logging was disabled for read only and in-memory environments.</color>
<color=#75715e>     * Now that these two concepts are separated, file logging is supported</color>
<color=#75715e>     * for in-memory environments. File logging can be supported as long as</color>
<color=#75715e>     * there is a valid environment home.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>setupLoggers</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_SETUP_LOGGER</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>envHome</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envHome</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>isReadOnly</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>setupLoggers</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Return null if no environment home directory(therefore no place</color>
<color=#75715e>       * to put file handler output files), or if the Environment is read</color>
<color=#75715e>       * only.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>handlerName</color> <color=#f92672>=</color> <color=#f8f8f2>com</color><color=#f8f8f2>.</color><color=#a6e22e>sleepycat</color><color=#f8f8f2>.</color><color=#a6e22e>je</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>FileHandler</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>logFilePattern</color> <color=#f92672>=</color> <color=#f8f8f2>envHome</color> <color=#f92672>+</color> <color=#e6db74>"/"</color> <color=#f92672>+</color> <color=#f8f8f2>INFO_FILES</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Log with a rotating set of files, use append mode. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>limit</color> <color=#f92672>=</color> <color=#f8f8f2>FILEHANDLER_LIMIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>logLimit</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>handlerName</color> <color=#f92672>+</color> <color=#e6db74>".limit"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logLimit</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>limit</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logLimit</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Limit the number of files. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>FILEHANDLER_COUNT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>logCount</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>handlerName</color> <color=#f92672>+</color> <color=#e6db74>".count"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logCount</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logCount</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>com</color><color=#f8f8f2>.</color><color=#a6e22e>sleepycat</color><color=#f8f8f2>.</color><color=#a6e22e>je</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>FileHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>logFilePattern</color><color=#f8f8f2>,</color> <color=#f8f8f2>limit</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Problem creating output files in: "</color> <color=#f92672>+</color> <color=#f8f8f2>logFilePattern</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ConsoleHandler</color> <color=#a6e22e>getConsoleHandler</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>consoleHandler</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>FileHandler</color> <color=#a6e22e>getFileHandler</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileHandler</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Handler</color> <color=#a6e22e>getConfiguredHandler</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>configuredHandler</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>closeHandlers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>consoleHandler</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>consoleHandler</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileHandler</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileHandler</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Not much to do, mark state. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>open</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>envState</color> <color=#f92672>=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invalidate the environment. Done when a fatal exception (EnvironmentFailureException) is</color>
<color=#75715e>   * thrown.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Remember the wedged exception even if invalidatingEFE != null.</color>
<color=#75715e>     * The EWE takes priority over other exceptions during close().</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>EnvironmentWedgedException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>wedgedEFE</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentWedgedException</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set state to invalid *after* setting invalidatingEFE, to maintain</color>
<color=#75715e>     * invariant:</color>
<color=#75715e>     *   if (envState == INVALID) then (invalidatingEFE.get() != null)</color>
<color=#75715e>     *</color>
<color=#75715e>     * It is safe to check and set without a mutex, because the state never</color>
<color=#75715e>     * transitions away from CLOSED.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>!=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envState</color> <color=#f92672>=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>requestShutdownDaemons</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#a6e22e>getInvalidatingException</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>EnvironmentFailureException</color><color=#f92672>></color> <color=#a6e22e>getInvalidatingExceptionReference</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invalidate the environment when a Java Error is thrown. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * initCause() throws ISE if the cause is non-null. To prevent this</color>
<color=#75715e>     * from happening when two threads call this method, synchronize on the</color>
<color=#75715e>     * exception to make the check and set atomic.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>preallocatedEFE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>preallocatedEFE</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>preallocatedEFE</color><color=#f8f8f2>.</color><color=#a6e22e>initCause</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>preallocatedEFE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the environment is currently invalid or was invalidated and closed. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>wasInvalidated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return true if environment is fully open (not being constructed and not closed), and has not</color>
<color=#75715e>   *     been invalidated by an EnvironmentFailureException.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isValid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>==</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if environment is still in init */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInInit</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>==</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if close has begun, although the state may still be open. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClosing</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>closing</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClosed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>==</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When a EnvironmentFailureException occurs or the environment is closed, further writing can</color>
<color=#75715e>   * cause log corruption.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>mayNotWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>==</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>==</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkIfInvalid</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>!=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>efe</color> <color=#f92672>=</color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>efe</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set a flag in the exception so the exception message will be</color>
<color=#75715e>     * clear that this was an earlier exception.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>efe</color><color=#f8f8f2>.</color><color=#a6e22e>setAlreadyThrown</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>efe</color> <color=#f92672>==</color> <color=#f8f8f2>preallocatedEFE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>efe</color><color=#f8f8f2>.</color><color=#a6e22e>fillInStackTrace</color><color=#f8f8f2>();</color>
      <color=#75715e>/* Do not wrap to avoid allocations after an OOME. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>efe</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#f8f8f2>efe</color><color=#f8f8f2>.</color><color=#a6e22e>wrapSelf</color><color=#f8f8f2>(</color><color=#e6db74>"Environment must be closed, caused by: "</color> <color=#f92672>+</color> <color=#f8f8f2>efe</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkOpen</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Allow OPEN and INIT states, but not INVALID and CLOSED.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>checkIfInvalid</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The CLOSED state should not occur when the Environnment handle is</color>
<color=#75715e>     * closed, because its environmentImpl field is null, but we check</color>
<color=#75715e>     * anyway to be safe.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>==</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Attempt to use a Environment that has been closed."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Decrements the reference count and closes the environment when it reaches zero. A checkpoint is</color>
<color=#75715e>   * always performed when closing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Calls doClose while synchronized on DbEnvPool. */</color>
    <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>.</color><color=#a6e22e>closeEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*doCheckpoint*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isAbnormalClose*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Decrements the reference count and closes the environment when it reaches zero. A checkpoint</color>
<color=#75715e>   * when closing is optional.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>doCheckpoint</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Calls doClose while synchronized on DbEnvPool. */</color>
    <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>().</color><color=#a6e22e>closeEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>doCheckpoint</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isAbnormalClose*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used by error handling to forcibly close an environment, and by tests to close an environment</color>
<color=#75715e>   * to simulate a crash. Database handles do not have to be closed before calling this method. A</color>
<color=#75715e>   * checkpoint is not performed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>abnormalClose</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Discard the internal handle, for an abnormal close. */</color>
    <color=#f8f8f2>closeInternalEnvHandle</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We are assuming that the environment will be cleared out of the</color>
<color=#75715e>     * environment pool, so it's safe to assert that the open count is</color>
<color=#75715e>     * zero.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>openCount1</color> <color=#f92672>=</color> <color=#f8f8f2>getOpenCount</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCount1</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Abnormal close assumes that the open count on "</color> <color=#f92672>+</color> <color=#e6db74>"this handle is 1, not "</color> <color=#f92672>+</color> <color=#f8f8f2>openCount1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Calls doClose while synchronized on DbEnvPool. */</color>
    <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>.</color><color=#a6e22e>closeEnvironment</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*doCheckpoint*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*isAbnormalClose*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes the environment, optionally performing a checkpoint and checking for resource leaks.</color>
<color=#75715e>   * This method must be called while synchronized on DbEnvPool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if the environment is already closed.</color>
<color=#75715e>   * @throws EnvironmentFailureException if leaks or other problems are detected while closing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>doClose</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>doCheckpoint</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAbnormalClose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Discard the internal handle. */</color>
    <color=#f8f8f2>closeInternalEnvHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>isAbnormalClose</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>StringWriter</color> <color=#f8f8f2>errorStringWriter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringWriter</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>errors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PrintWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>errorStringWriter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>DiskLimitException</color> <color=#f8f8f2>diskLimitEx</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Trace</color><color=#f8f8f2>.</color><color=#a6e22e>traceLazily</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Close of environment "</color> <color=#f92672>+</color> <color=#f8f8f2>envHome</color> <color=#f92672>+</color> <color=#e6db74>" started"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Close of environment "</color> <color=#f92672>+</color> <color=#f8f8f2>envHome</color> <color=#f92672>+</color> <color=#e6db74>" started"</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>envState</color><color=#f8f8f2>.</color><color=#a6e22e>checkState</color><color=#f8f8f2>(</color><color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>VALID_FOR_CLOSE</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>);</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setupClose</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"releasing resources"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If backups are in progress, warn the caller that it was a</color>
<color=#75715e>       * mistake to close the environment at this time.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getBackupCount</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\nThere are backups in progress so the "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Environment should not have been closed."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>errors</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Begin shutdown of the deamons before checkpointing.  Cleaning</color>
<color=#75715e>       * during the checkpoint is wasted and slows down the checkpoint.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>requestShutdownDaemons</color><color=#f8f8f2>();</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>unregisterMBean</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"unregistering MBean"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Checkpoint to bound recovery time. */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>checkpointHappened</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doCheckpoint</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isReadOnly</color>
          <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>!=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>)</color>
          <color=#f92672>&&</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLsnAtRecovery</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLastUsedLsn</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Force a checkpoint. Flush all the way to the root, i.e.,</color>
<color=#75715e>         * minimize recovery time.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>CheckpointConfig</color> <color=#f8f8f2>ckptConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CheckpointConfig</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>ckptConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setForce</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ckptConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setMinimizeRecoveryTime</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>invokeCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>ckptConfig</color><color=#f8f8f2>,</color> <color=#e6db74>"close"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>checkpointHappened</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DiskLimitException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>diskLimitEx</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"performing checkpoint"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>postCheckpointClose</color><color=#f8f8f2>(</color><color=#f8f8f2>checkpointHappened</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"after checkpoint"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"About to shutdown daemons for Env "</color> <color=#f92672>+</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>shutdownDaemons</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Flush log. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isAbnormalClose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>flushSync</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"flushing log manager"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"clearing file manager"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"closing file manager"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Close the memory budgets on these components before the</color>
<color=#75715e>       * INList is forcibly released and the treeAdmin budget is</color>
<color=#75715e>       * cleared.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>inMemoryINs</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>closeHandlers</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isAbnormalClose</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>envState</color> <color=#f92672>!=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>checkLeaks</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"performing validity checks"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envState</color> <color=#f92672>=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Last ditch effort to clean up so that tests can continue and</color>
<color=#75715e>       * re-open the Environment in the face of an Exception or even an</color>
<color=#75715e>       * Error.  Note that this was also attempted above.  [#21929]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>clearFileManager</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>closeHandlers</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Throwing the wedged exception is the first priority. This is done</color>
<color=#75715e>     * even for an abnormal close, since HA may have created threads.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wedgedEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>wedgedEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Don't whine again if we've already whined. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errorStringWriter</color><color=#f8f8f2>.</color><color=#a6e22e>getBuffer</color><color=#f8f8f2>().</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>invalidatingEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>errorStringWriter</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* If no other errors, throw DiskLimitException. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>diskLimitEx</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>diskLimitEx</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pw</color><color=#f8f8f2>,</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>doingWhat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>pw</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\nException "</color> <color=#f92672>+</color> <color=#f8f8f2>doingWhat</color> <color=#f92672>+</color> <color=#e6db74>": "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>pw</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>pw</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Release any resources from a subclass that need to be released before close is called on</color>
<color=#75715e>   * regular environment components.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setupClose</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>errors</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Release any resources from a subclass that need to be released after the closing checkpoint.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param checkpointed if true, a checkpoint as issued before the close</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>postCheckpointClose</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>checkpointed</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called after recovery but before any other initialization. Is overridden by ReplImpl to convert</color>
<color=#75715e>   * user defined databases to replicated after doing recovery.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postRecoveryConversion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** Perform dup conversion after recovery and before running daemons. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>convertDupDatabases</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDupsConverted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Convert dup dbs, set converted flag, flush mapping tree root. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DupConvert</color> <color=#f8f8f2>dupConvert</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DupConvert</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dupConvert</color><color=#f8f8f2>.</color><color=#a6e22e>convertDatabases</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>setDupsConverted</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>logMapTreeRoot</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>flushSync</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Clear as many resources as possible, even in the face of an environment</color>
<color=#75715e>   * that has received a fatal error, in order to support reopening the</color>
<color=#75715e>   * environment in the same JVM.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>closeAfterInvalid</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Calls doCloseAfterInvalid while synchronized on DbEnvPool. */</color>
    <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>().</color><color=#a6e22e>closeEnvironmentAfterInvalid</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This method must be called while synchronized on DbEnvPool. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>doCloseAfterInvalid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>unregisterMBean</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Klockwork - ok */</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>shutdownDaemons</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Klockwork - ok */</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileManager</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Klockwork - ok */</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Release resources held by handlers, such as memory and file</color>
<color=#75715e>     * descriptors</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>closeHandlers</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>envState</color> <color=#f92672>=</color> <color=#f8f8f2>DbEnvState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The wedged exception must be thrown even when the environment is</color>
<color=#75715e>     * invalid, since the app must restart the process.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wedgedEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>wedgedEFE</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>incOpenCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>openCount</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the environment should be closed. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>decOpenCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCount</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a count of open environment handles, not including the internal handle. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getOpenCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>openCount</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the count of environment handles that were opened explicitly by the application.</color>
<color=#75715e>   * Because the internal environment handle is not included in the openCount, this method is</color>
<color=#75715e>   * currently equivalent to getOpenCount.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the count of open application handles</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>getAppOpenCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>openCount</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>incBackupCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>backupCount</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>decBackupCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>backupCount</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a count of the number of in-progress DbBackups. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>getBackupCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>backupCount</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getThreadLocalReferenceCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>threadLocalReferenceCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>incThreadLocalReferenceCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>threadLocalReferenceCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>decThreadLocalReferenceCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>threadLocalReferenceCount</color><color=#f92672>--</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDidFullThreadDump</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>didFullThreadDump</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDidFullThreadDump</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>didFullThreadDump</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getNoComparators</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>noComparators</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Debugging support. Check for leaked locks and transactions. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkLeaks</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Only enabled if this check leak flag is true. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_CHECK_LEAKS</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>clean</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>statsConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatsConfig</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Fast stats will not return NTotalLocks below. */</color>
    <color=#f8f8f2>statsConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setFast</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LockStats</color> <color=#f8f8f2>lockStat</color> <color=#f92672>=</color> <color=#f8f8f2>lockStat</color><color=#f8f8f2>(</color><color=#f8f8f2>statsConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockStat</color><color=#f8f8f2>.</color><color=#a6e22e>getNTotalLocks</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clean</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Problem: "</color> <color=#f92672>+</color> <color=#f8f8f2>lockStat</color><color=#f8f8f2>.</color><color=#a6e22e>getNTotalLocks</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" locks left"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>txnManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLockManager</color><color=#f8f8f2>().</color><color=#a6e22e>dump</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>TransactionStats</color> <color=#f8f8f2>txnStat</color> <color=#f92672>=</color> <color=#f8f8f2>txnStat</color><color=#f8f8f2>(</color><color=#f8f8f2>statsConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnStat</color><color=#f8f8f2>.</color><color=#a6e22e>getNActive</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clean</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Problem: "</color> <color=#f92672>+</color> <color=#f8f8f2>txnStat</color><color=#f8f8f2>.</color><color=#a6e22e>getNActive</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" txns left"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>TransactionStats</color><color=#f8f8f2>.</color><color=#a6e22e>Active</color><color=#f92672>[]</color> <color=#f8f8f2>active</color> <color=#f92672>=</color> <color=#f8f8f2>txnStat</color><color=#f8f8f2>.</color><color=#a6e22e>getActiveTxns</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>active</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Active</color> <color=#f8f8f2>element</color> <color=#f8f8f2>:</color> <color=#f8f8f2>active</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>element</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>nBtreeLatchesHeld</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>clean</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Some latches held at env close."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>btreeLatchesHeldToString</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>memoryUsage</color> <color=#f92672>=</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>getVariableCacheUsage</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>memoryUsage</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clean</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Local Cache Usage = "</color> <color=#f92672>+</color> <color=#f8f8f2>memoryUsage</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>assertionsEnabled</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>assertionsEnabled</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color> <color=#75715e>// Intentional side effect.</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>clean</color> <color=#f92672>&&</color> <color=#f8f8f2>assertionsEnabled</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Lock, transaction, latch or memory "</color> <color=#f92672>+</color> <color=#e6db74>"left behind at environment close"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invoke a checkpoint programmatically. Note that only one checkpoint may run at a time. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>invokeCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>CheckpointConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>invokingSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkpointer</color><color=#f8f8f2>.</color><color=#a6e22e>doCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>invokingSource</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*invokedFromDaemon*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Coordinates an eviction with an in-progress checkpoint and returns whether provisional logging</color>
<color=#75715e>   * is needed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the provisional status to use for logging the target.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Provisional</color> <color=#a6e22e>coordinateWithCheckpoint</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>targetLevel</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>checkpointer</color><color=#f8f8f2>.</color><color=#a6e22e>coordinateEvictionWithCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetLevel</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Flush the log buffers and write to the log, and optionally fsync. [#19111] */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>flushLog</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>fsync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fsync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>flushSync</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>flushNoSync</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flip the log to a new file, forcing an fsync. Return the LSN of the trace record in the new</color>
<color=#75715e>   * file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>forceLogFileFlip</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>logForceFlip</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>TraceLogEntry</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Trace</color><color=#f8f8f2>(</color><color=#e6db74>"File Flip"</color><color=#f8f8f2>)));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invoke a compress programmatically. Note that only one compress may run at a time. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>invokeCompressor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>doCompress</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>invokeEvictor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>doManualEvict</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>doManualEvict</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws UnsupportedOperationException if read-only or mem-only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>invokeCleaner</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>cleanMultipleFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isReadOnly</color> <color=#f92672>||</color> <color=#f8f8f2>isMemOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Log cleaning not allowed in a read-only or memory-only "</color> <color=#f92672>+</color> <color=#e6db74>"environment"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>doClean</color><color=#f8f8f2>(</color><color=#f8f8f2>cleanMultipleFiles</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*forceCleaning*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>requestShutdownDaemons</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>closing</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Don't shutdown the shared cache evictor here.  It is shutdown when</color>
<color=#75715e>     * the last shared cache environment is removed in DbEnvPool.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>sharedCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>checkpointer</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>statCapture</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>logFlusher</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>dataVerifier</color><color=#f8f8f2>.</color><color=#a6e22e>requestShutdown</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Ask all daemon threads to shut down. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownDaemons</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Shutdown stats capture thread first so we can access stats. */</color>
    <color=#f8f8f2>statCapture</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>statSynchronizer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Cleaner has to be shutdown before checkpointer because former</color>
<color=#75715e>       * calls the latter.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>checkpointer</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The evictors have to be shutdown last because the other daemons</color>
<color=#75715e>       * might create changes to the memory usage which result in a</color>
<color=#75715e>       * notify to eviction. The off-heap evictor is shutdown after the</color>
<color=#75715e>       * main evictor since main eviction moves data to off-heap, and not</color>
<color=#75715e>       * vice-versa.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Don't shutdown the SharedEvictor here.  It is shutdown when</color>
<color=#75715e>         * the last shared cache environment is removed in DbEnvPool.</color>
<color=#75715e>         * Instead, remove this environment from the SharedEvictor's</color>
<color=#75715e>         * list so we won't try to evict from a closing/closed</color>
<color=#75715e>         * environment. Note that we do this after the final checkpoint</color>
<color=#75715e>         * so that eviction is possible during the checkpoint, and just</color>
<color=#75715e>         * before deconstructing the environment. Leave the evictor</color>
<color=#75715e>         * field intact so DbEnvPool can get it.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>removeSharedCacheEnv</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>clearCache</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>logFlusher</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>dataVerifier</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNoLocking</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isNoLocking</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isTransactional</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isReadOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMemOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isMemOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Named "optional" because the nodeName property in EnvironmentConfig is optional may be null.</color>
<color=#75715e>   * {@link #getName()} should almost always be used instead for messages, exceptions, etc.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getOptionalNodeName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>optionalNodeName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>makeDaemonThreadName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>daemonName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>optionalNodeName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>daemonName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>daemonName</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>optionalNodeName</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether DB/MapLN eviction is enabled. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDbEviction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbEviction</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getAdler32ChunkSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>adler32ChunkSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSharedCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sharedCache</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>allowBlindOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>allowBlindOps</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>allowBlindPuts</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>allowBlindPuts</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMaxEmbeddedLN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>maxEmbeddedLN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Transactional services. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>txnBegin</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>.</color><color=#a6e22e>txnBegin</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Services. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LogManager</color> <color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>LogFlusher</color> <color=#a6e22e>getLogFlusher</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logFlusher</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DataVerifier</color> <color=#a6e22e>getDataVerifier</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dataVerifier</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>FileManager</color> <color=#a6e22e>getFileManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileManager</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DbTree</color> <color=#a6e22e>getDbTree</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the config manager for the current base configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The configuration can change, but changes are made by replacing the config manager object</color>
<color=#75715e>   * with a enw one. To use a consistent set of properties, call this method once and query the</color>
<color=#75715e>   * returned manager repeatedly for each property, rather than getting the config manager via this</color>
<color=#75715e>   * method for each property individually.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DbConfigManager</color> <color=#a6e22e>getConfigManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>NodeSequence</color> <color=#a6e22e>getNodeSequence</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeSequence</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Clones the current configuration. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>cloneConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentConfig</color><color=#f8f8f2>().</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Clones the current mutable configuration. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#a6e22e>cloneMutableConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>cloneMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentConfig</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Throws an exception if an immutable property is changed. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkImmutablePropsForEquality</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>handleConfigProps</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>checkImmutablePropsForEquality</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentConfig</color><color=#f8f8f2>(),</color> <color=#f8f8f2>handleConfigProps</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Changes the mutable config properties that are present in the given config, and notifies all</color>
<color=#75715e>   * config observer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Calls doSetMutableConfig while synchronized on DbEnvPool. */</color>
    <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>().</color><color=#a6e22e>setMutableConfig</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This method must be called while synchronized on DbEnvPool. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>doSetMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Clone the current config. */</color>
    <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>newConfig</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentConfig</color><color=#f8f8f2>().</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Copy in the mutable props. */</color>
    <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>copyMutablePropsTo</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Update the current config and notify observers.  The config manager</color>
<color=#75715e>     * is replaced with a new instance that uses the new configuration.</color>
<color=#75715e>     * This avoids synchronization issues: other threads that have a</color>
<color=#75715e>     * reference to the old configuration object are not impacted.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Notify listeners in reverse order of registration so that the</color>
<color=#75715e>     * environment listener is notified last and can start daemon threads</color>
<color=#75715e>     * after they are configured.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>configManager</color> <color=#f92672>=</color> <color=#f8f8f2>resetConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>configObservers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EnvConfigObserver</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>configObservers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>envConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Make a new config manager that has all the properties needed. More complicated for subclasses.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>DbConfigManager</color> <color=#a6e22e>resetConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ExceptionListener</color> <color=#a6e22e>getExceptionListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>exceptionListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds an observer of mutable config changes. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addConfigObserver</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvConfigObserver</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>configObservers</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Removes an observer of mutable config changes. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>removeConfigObserver</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvConfigObserver</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>configObservers</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>INList</color> <color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inMemoryINs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>TxnManager</color> <color=#a6e22e>getTxnManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Checkpointer</color> <color=#a6e22e>getCheckpointer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>checkpointer</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Cleaner</color> <color=#a6e22e>getCleaner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>MemoryBudget</color> <color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Uses cached disk usage info to determine whether disk space limits are currently violated. This</color>
<color=#75715e>   * method simply returns a volatile field. The cached information is updated frequently enough to</color>
<color=#75715e>   * prevent violating the limits by a large amount.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a non-null message (appropriate for an exception) if a disk limit is currently</color>
<color=#75715e>   *     violated, else null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Uses cached disk usage info to determine whether disk space limits are currently violated. This</color>
<color=#75715e>   * method simply checks a volatile field. The cached information is updated frequently enough to</color>
<color=#75715e>   * prevent violating the limits by a large amount.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DiskLimitException if a disk limit is currently violated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DiskLimitException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>violation</color> <color=#f92672>=</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>violation</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DiskLimitException</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>violation</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return environment Logger, for use in debugging output. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envLogger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDbLoggingDisabled</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbLoggingDisabled</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Verification, must be run while system is quiescent.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>VerifyConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BtreeVerifier</color> <color=#f8f8f2>verifier</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BtreeVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>setBtreeVerifyConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verifyAll</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyCursors</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>verifyCursors</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getExposeUserData</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>exposeUserData</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Statistics</color>
<color=#75715e>   */</color>

  <color=#75715e>/** Retrieve and return stat information. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentStats</color> <color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>statManager</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>statKey</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Retrieve and return stat information. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentStats</color> <color=#a6e22e>loadStatsInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>EnvironmentStats</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentStats</color><color=#f8f8f2>();</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>statSynchronizer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setINCompStats</color><color=#f8f8f2>(</color><color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setCkptStats</color><color=#f8f8f2>(</color><color=#f8f8f2>checkpointer</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setCleanerStats</color><color=#f8f8f2>(</color><color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setLogStats</color><color=#f8f8f2>(</color><color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setMBAndEvictorStats</color><color=#f8f8f2>(</color><color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(),</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setOffHeapStats</color><color=#f8f8f2>(</color><color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setLockStats</color><color=#f8f8f2>(</color><color=#f8f8f2>txnManager</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setEnvStats</color><color=#f8f8f2>(</color><color=#f8f8f2>loadEnvImplStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>setThroughputStats</color><color=#f8f8f2>(</color><color=#f8f8f2>thrputStats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>loadEnvImplStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>envStats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>LongStat</color> <color=#f8f8f2>ct</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>,</color> <color=#f8f8f2>ENV_CREATION_TIME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>ct</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>creationTime</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incSearchOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secSearchOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priSearchOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incSearchFailOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secSearchFailOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priSearchFailOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incPositionOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secPositionOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priPositionOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incInsertOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secInsertOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priInsertOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incInsertFailOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priInsertFailOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incUpdateOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secUpdateOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priUpdateOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incDeleteOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isKnownSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secDeleteOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priDeleteOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incDeleteFailOps</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Deletion failure always counted as primary DB deletion. */</color>
    <color=#f8f8f2>priDeleteFailOps</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incRelatchesRequired</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>relatchesRequired</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incBinDeltaGets</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>binDeltaGets</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incBinDeltaInserts</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>binDeltaInserts</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incBinDeltaUpdates</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>binDeltaUpdates</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>incBinDeltaDeletes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>binDeltaDeletes</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; just return true for a standalone environment. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addDbBackup</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DbBackup</color> <color=#f8f8f2>backup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>incBackupCount</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; do nothing for a standalone environment. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeDbBackup</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DbBackup</color> <color=#f8f8f2>backup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>decBackupCount</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Retrieve lock statistics */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>LockStats</color> <color=#a6e22e>lockStat</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>.</color><color=#a6e22e>lockStat</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Retrieve txn statistics */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>TransactionStats</color> <color=#a6e22e>txnStat</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>.</color><color=#a6e22e>txnStat</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getINCompressorQueueSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inCompressor</color><color=#f8f8f2>.</color><color=#a6e22e>getBinRefQueueSize</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StartupTracker</color> <color=#a6e22e>getStartupTracker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>startupTracker</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get the environment home directory. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getEnvironmentHome</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>getInternalEnvHandle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envInternal</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes the internally maintained environment handle. If the close is an abnormal close, it just</color>
<color=#75715e>   * does cleanup work instead of trying to close the internal environment handle which may result</color>
<color=#75715e>   * in further errors.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>closeInternalEnvHandle</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isAbnormalClose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envInternal</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isAbnormalClose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envInternal</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>savedEnvInternal</color> <color=#f92672>=</color> <color=#f8f8f2>envInternal</color><color=#f8f8f2>;</color>
      <color=#75715e>/* Blocks recursions resulting from the close operation below */</color>
      <color=#f8f8f2>envInternal</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>closeInternalHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>savedEnvInternal</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get an environment name, for tagging onto logging and debug message. Useful for multiple</color>
<color=#75715e>   * environments in a JVM, or for HA.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>optionalNodeName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getOptionalNodeName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnTimeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLockTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Only used for unit test com.sleepycat.je.test.SecondaryTest.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLockTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lockTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDeadlockDetection</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>deadlockDetection</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDeadlockDetectionDelay</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>deadlockDetectionDelay</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayTxnTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockTimeout</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* It can't be disabled, so make it the minimum. */</color>
    <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the shared secondary association latch. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReentrantReadWriteLock</color> <color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>secondaryAssociationLock</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return null if no off-heap cache is configured. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OffHeapCache</color> <color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>useOffHeapChecksums</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useOffHeapChecksums</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns {@link EnvironmentParams#ENV_EXPIRATION_ENABLED}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isExpirationEnabled</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expirationEnabled</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether a given expiration time precedes the current system time, i.e., the expiration</color>
<color=#75715e>   * time has passed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isExpired</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expirationEnabled</color> <color=#f92672>&&</color> <color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>isExpired</color><color=#f8f8f2>(</color><color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>hours</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether a given expiration time precedes the current system time, i.e., the expiration</color>
<color=#75715e>   * time has passed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isExpired</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expirationEnabled</color> <color=#f92672>&&</color> <color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>isExpired</color><color=#f8f8f2>(</color><color=#f8f8f2>expirationTime</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether a given expiration time precedes the current system time plus withinMs, i.e.,</color>
<color=#75715e>   * the expiration time will pass within withinMs, or earlier. If withinMs is negative, this is</color>
<color=#75715e>   * whether the expiration time passed withinMs ago, or earlier.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>expiresWithin</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hours</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>withinMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expirationEnabled</color> <color=#f92672>&&</color> <color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>expiresWithin</color><color=#f8f8f2>(</color><color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>hours</color><color=#f8f8f2>,</color> <color=#f8f8f2>withinMs</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Same as {@link #expiresWithin(int, boolean, long)} but with a single expirationTime param. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>expiresWithin</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>withinMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expirationEnabled</color> <color=#f92672>&&</color> <color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>expiresWithin</color><color=#f8f8f2>(</color><color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>withinMs</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Evictor</color> <color=#a6e22e>getEvictor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Wake up the eviction threads when the main cache is full or close to full. We do not wake up</color>
<color=#75715e>   * the off-heap evictor threads since the off-heap budget is maintained internally by the off-heap</color>
<color=#75715e>   * evictor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>alertEvictor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>alert</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs critical eviction if necessary. Is called before and after each cursor operation. We</color>
<color=#75715e>   * prefer to have the application thread do as little eviction as possible, to reduce the impact</color>
<color=#75715e>   * on latency, so critical eviction has an explicit set of criteria for determining when this</color>
<color=#75715e>   * should run.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: The action performed here should be as inexpensive as possible, since it will</color>
<color=#75715e>   * impact app operation latency. Unconditional synchronization must not be performed, since that</color>
<color=#75715e>   * would introduce a new synchronization point for all app threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An overriding method must call super.criticalEviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>No latches are held or synchronization is in use when this method is called.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>criticalEviction</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>doCriticalEviction</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundIO</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>doCriticalEviction</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundIO</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Do eviction if the memory budget is over. Called by JE daemon threads that do not have the same</color>
<color=#75715e>   * latency concerns as application threads.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>daemonEviction</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>doDaemonEviction</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundIO</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>doDaemonEviction</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundIO</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs special eviction (eviction other than standard IN eviction) for this environment. This</color>
<color=#75715e>   * method is called once per eviction batch to give other components an opportunity to perform</color>
<color=#75715e>   * eviction. For a shared cached, it is called for only one environment (in rotation) per batch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An overriding method must call super.specialEviction and return the sum of the long value it</color>
<color=#75715e>   * returns and any additional amount of budgeted memory that is evicted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>No latches are held when this method is called, but it is called while synchronized on the</color>
<color=#75715e>   * evictor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of bytes evicted from the JE cache.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>specialEviction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleaner</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationTracker</color><color=#f8f8f2>().</color><color=#a6e22e>evictMemory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For stress testing. Should only ever be called from an assert. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>maybeForceYield</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forcedYield</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>yield</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color> <color=#75715e>// so assert doesn't fire</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if this environment is part of a replication group. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if this environment is used as an Arbiter. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isArbiter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the VLSN is preserved as the record version. Always false in a standalone</color>
<color=#75715e>   * environment. Overridden by RepImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getPreserveVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the VLSN is both preserved and cached. Always false in a standalone</color>
<color=#75715e>   * environment. Overridden by RepImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getCacheVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * True if ReplicationConfig set allowConvert as true. Standalone environment is prohibited from</color>
<color=#75715e>   * doing a conversion, return false.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowRepConvert</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** True if this environment is converted from non-replicated to replicated. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRepConverted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>isRepConverted</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>needRepConvert</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>needRepConvert</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Computes and assigns VLSNs as needed to this log item for a replicated log record. This method</color>
<color=#75715e>   * must be invoked under the LWL to ensure that the VLSNs it generates are correctly serialized</color>
<color=#75715e>   * with respect to their locations in the log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The method must be invoked before any calls are made to determine the log entry size, since</color>
<color=#75715e>   * some of the underlying values used to determine the size of the entry will only be finalized</color>
<color=#75715e>   * after this call has completed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is only invoked when the log is being written as the master, since the replica</color>
<color=#75715e>   * merely reuses the VLSN values computed by the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Since this method is being written under the LWL it must not block.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entry the log entry, an in/out argument: the entry is modified with an updated DTVLSN</color>
<color=#75715e>   *     for commit and abort log entries.</color>
<color=#75715e>   * @return a non-null VLSN for all replicated log items</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>assignVLSNs</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* NOP for non-replicated environment. */</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>VLSNRecoveryProxy</color> <color=#a6e22e>getVLSNProxy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoopVLSNProxy</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* NOP for non-replicated environment. */</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preRecoveryCheckpointInit</color><color=#f8f8f2>(</color><color=#f8f8f2>RecoveryInfo</color> <color=#f8f8f2>recoveryInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* NOP for non-replicated environment. */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>LogItem</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* NOP for non-replicated environment. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Truncate the head of the VLSNIndex to allow file deletion, if possible. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>tryVlsnHeadTruncate</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>bytesNeeded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* NOP for non-replicated environment. */</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Do any work that must be done before the checkpoint end is written, as as part of the</color>
<color=#75715e>   * checkpoint process.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preCheckpointEndFlush</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* NOP for non-replicated environment. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; only the overridden method should ever be called. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createReplayTxn</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Should not be called on a non replicated environment"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; only the overridden method should ever be called. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ThreadLocker</color> <color=#a6e22e>createRepThreadLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Should not be called on a non replicated environment"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; only the overridden method should ever be called. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createRepUserTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Should not be called on a non replicated environment"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; only the overridden method should ever be called. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createRepTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>mandatedId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Should not be called on a non replicated environment"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; only the overridden method should ever be called. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationFailureException</color> <color=#a6e22e>createLockPreemptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Should not be called on a non replicated environment"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; only the overridden method should ever be called. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationFailureException</color> <color=#a6e22e>createDatabasePreemptedException</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Should not be called on a non replicated environment"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For replicated environments only; only the overridden method should ever be called. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationFailureException</color> <color=#a6e22e>createLogOverwriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Should not be called on a non replicated environment"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the deprecated HA REPLAY_FREE_DISK_PERCENT parameter, or zero if this is not an HA env.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getReplayFreeDiskPercent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Check whether this environment can be opened on an existing environment directory.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dbTreePreserveVLSN</color>
<color=#75715e>   * @throws UnsupportedOperationException via Environment ctor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkRulesForExistingEnv</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>dbTreeReplicatedBit</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dbTreePreserveVLSN</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnsupportedOperationException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We only permit standalone Environment construction on an existing</color>
<color=#75715e>     * environment when we are in read only mode, to support command</color>
<color=#75715e>     * line utilities. We prohibit read/write opening, because we don't</color>
<color=#75715e>     * want to chance corruption of the environment by writing non-VLSN</color>
<color=#75715e>     * tagged entries in.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbTreeReplicatedBit</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"This environment was previously opened for replication."</color>
              <color=#f92672>+</color> <color=#e6db74>" It cannot be re-opened for in read/write mode for"</color>
              <color=#f92672>+</color> <color=#e6db74>" non-replicated operation."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Same as above but for the preserve VLSN param, which may only be</color>
<color=#75715e>     * used in a replicated environment.  See this overridden method in</color>
<color=#75715e>     * RepImpl which checks that the param is never changed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getPreserveVLSN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Cannot use RepParams constant in standalone code. */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_PARAM_PREFIX</color>
              <color=#f92672>+</color> <color=#e6db74>"preserveRecordVersion parameter may not be true in a"</color>
              <color=#f92672>+</color> <color=#e6db74>" read-write, non-replicated environment"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ensure that the in-memory vlsn index encompasses all logged entries before it is flushed to</color>
<color=#75715e>   * disk. A No-Op for non-replicated systems. [#19754]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>awaitVLSNConsistency</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Nothing to do in a non-replicated system. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The VLSNRecoveryProxy is only needed for replicated environments. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>NoopVLSNProxy</color> <color=#66d9ef>implements</color> <color=#f8f8f2>VLSNRecoveryProxy</color> <color=#f8f8f2>{</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>trackMapping</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>currentEntryHeader</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>targetLogEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* intentional no-op */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>AtomicLongStat</color> <color=#a6e22e>getThroughputStat</color><color=#f8f8f2>(</color><color=#f8f8f2>StatDefinition</color> <color=#f8f8f2>def</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>thrputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>def</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Private class to prevent used of the close() method by the application on an internal handle.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>InternalEnvironment</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#a6e22e>InternalEnvironment</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color>
            <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*repConfigProxy*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInternalHandle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"close() not permitted on an internal environment handle"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Preload exceptions, classes. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Undeclared exception used to throw through SortedLSNTreeWalker code when preload has either</color>
<color=#75715e>   * filled the user's max byte or time request.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"serial"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>HaltPreloadException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>PreloadStatus</color> <color=#f8f8f2>status</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>HaltPreloadException</color><color=#f8f8f2>(</color><color=#f8f8f2>PreloadStatus</color> <color=#f8f8f2>status</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>status</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>=</color> <color=#f8f8f2>status</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>PreloadStatus</color> <color=#a6e22e>getStatus</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>status</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>HaltPreloadException</color> <color=#f8f8f2>TIME_EXCEEDED_PRELOAD_EXCEPTION</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>HaltPreloadException</color><color=#f8f8f2>(</color><color=#f8f8f2>PreloadStatus</color><color=#f8f8f2>.</color><color=#a6e22e>EXCEEDED_TIME</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>HaltPreloadException</color> <color=#f8f8f2>MEMORY_EXCEEDED_PRELOAD_EXCEPTION</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>HaltPreloadException</color><color=#f8f8f2>(</color><color=#f8f8f2>PreloadStatus</color><color=#f8f8f2>.</color><color=#a6e22e>FILLED_CACHE</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>HaltPreloadException</color> <color=#f8f8f2>USER_HALT_REQUEST_PRELOAD_EXCEPTION</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>HaltPreloadException</color><color=#f8f8f2>(</color><color=#f8f8f2>PreloadStatus</color><color=#f8f8f2>.</color><color=#a6e22e>USER_HALT_REQUEST</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadStats</color> <color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>dbImpls</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxMillisecs</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMillisecs</color><color=#f8f8f2>();</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>targetTime</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxMillisecs</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>targetTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetTime</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>targetTime</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Disable off-heap cache during preload. It appears to cause</color>
<color=#75715e>       * Btree corruption. [#25594]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>useOffHeapCache</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#75715e>/*</color>
<color=#75715e>      if (offHeapCache.isEnabled()) {</color>
<color=#75715e>          useOffHeapCache = true;</color>
<color=#75715e>          for (final DatabaseImpl db : dbImpls) {</color>
<color=#75715e>              if (db.isDeferredWriteMode() ||</color>
<color=#75715e>                  db.getDbType().isInternal()) {</color>
<color=#75715e>                  useOffHeapCache = false;</color>
<color=#75715e>                  break;</color>
<color=#75715e>              }</color>
<color=#75715e>          }</color>
<color=#75715e>      }</color>
<color=#75715e>       */</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>cacheBudget</color> <color=#f92672>=</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cacheBudget</color> <color=#f92672>+=</color> <color=#f8f8f2>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxBytes</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxBytes</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>maxBytes</color> <color=#f92672>=</color> <color=#f8f8f2>cacheBudget</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxBytes</color> <color=#f92672>></color> <color=#f8f8f2>cacheBudget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"maxBytes parameter to preload() was "</color>
                <color=#f92672>+</color> <color=#e6db74>"specified as "</color>
                <color=#f92672>+</color> <color=#f8f8f2>maxBytes</color>
                <color=#f92672>+</color> <color=#e6db74>" bytes but the maximum total cache size is only "</color>
                <color=#f92672>+</color> <color=#f8f8f2>cacheBudget</color>
                <color=#f92672>+</color> <color=#e6db74>" bytes."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Sort DatabaseImpls so that we always latch in a well-defined</color>
<color=#75715e>       * order to avoid potential deadlocks if multiple preloads happen</color>
<color=#75715e>       * to (accidentally) execute concurrently.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>dbImpls</color><color=#f8f8f2>,</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>o1</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id1</color> <color=#f92672>=</color> <color=#f8f8f2>o1</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id2</color> <color=#f92672>=</color> <color=#f8f8f2>o2</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>id1</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>id2</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>});</color>

      <color=#f8f8f2>PreloadStats</color> <color=#f8f8f2>pstats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PreloadStats</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>PreloadProcessor</color> <color=#f8f8f2>callback</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>PreloadProcessor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>pstats</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>nDbs</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>rootLsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>nDbs</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nDbs</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rootLsns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>getRootLsn</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>SortedLSNTreeWalker</color> <color=#f8f8f2>walker</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>PreloadLSNTreeWalker</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpls</color><color=#f8f8f2>,</color> <color=#f8f8f2>rootLsns</color><color=#f8f8f2>,</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>,</color> <color=#f8f8f2>callback</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>walker</color><color=#f8f8f2>.</color><color=#a6e22e>walk</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>callback</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>HaltPreloadException</color> <color=#f8f8f2>HPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pstats</color><color=#f8f8f2>.</color><color=#a6e22e>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>HPE</color><color=#f8f8f2>.</color><color=#a6e22e>getStatus</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>pstats</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The processLSN() code for PreloadLSNTreeWalker. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>PreloadProcessor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>TreeNodeProcessor</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>targetTime</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>PreloadStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>countLNs</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>.</color><color=#a6e22e>Phases</color><color=#f92672>></color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>progressCounter</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>PreloadProcessor</color><color=#f8f8f2>(</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>targetTime</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>PreloadStats</color> <color=#f8f8f2>stats</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxBytes</color> <color=#f92672>=</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>useOffHeapCache</color> <color=#f92672>=</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>targetTime</color> <color=#f92672>=</color> <color=#f8f8f2>targetTime</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>stats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>countLNs</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getLoadLNs</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>progressListener</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getProgressListener</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Called for each LSN that the SortedLSNTreeWalker encounters. */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processLSN</color><color=#f8f8f2>(</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>childType</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ignore2</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>int</color> <color=#f8f8f2>ignore3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check if we've exceeded either the max time or max bytes</color>
<color=#75715e>       * allowed for this preload() call.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>targetTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>TIME_EXCEEDED_PRELOAD_EXCEPTION</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We don't worry about the memory usage being kept below the max</color>
<color=#75715e>       * by the evictor, since we keep the root INs latched.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>usedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMemoryUsage</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>usedBytes</color> <color=#f92672>+=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>offHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>getUsedMemory</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>usedBytes</color> <color=#f92672>></color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>MEMORY_EXCEEDED_PRELOAD_EXCEPTION</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>progressListener</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>progressCounter</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>progressListener</color><color=#f8f8f2>.</color><color=#a6e22e>progress</color><color=#f8f8f2>(</color><color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>.</color><color=#a6e22e>Phases</color><color=#f8f8f2>.</color><color=#a6e22e>PRELOAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>progressCounter</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>USER_HALT_REQUEST_PRELOAD_EXCEPTION</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Count entry types to return in the PreloadStats. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>childLsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incEmbeddedLNs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>childType</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DUPCOUNTLN_TRANSACTIONAL</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f8f8f2>childType</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DUPCOUNTLN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incDupCountLNsLoaded</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>childType</color><color=#f8f8f2>.</color><color=#a6e22e>isLNType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>countLNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incLNsLoaded</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>childType</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DBIN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incDBINsLoaded</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>childType</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_BIN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incBINsLoaded</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>countLNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incEmbeddedLNs</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>childType</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DIN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incDINsLoaded</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>childType</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_IN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incINsLoaded</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processDirtyDeletedLN</color><color=#f8f8f2>(</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>lnKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>noteMemoryExceeded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>incMemoryExceeded</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Indicate that we're finished. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>progressListener</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>progressListener</color><color=#f8f8f2>.</color><color=#a6e22e>progress</color><color=#f8f8f2>(</color><color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>.</color><color=#a6e22e>Phases</color><color=#f8f8f2>.</color><color=#a6e22e>PRELOAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>progressCounter</color><color=#f8f8f2>,</color> <color=#f8f8f2>progressCounter</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * An extension of SortedLSNTreeWalker that latches the root IN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>PreloadLSNTreeWalker</color> <color=#66d9ef>extends</color> <color=#f8f8f2>SortedLSNTreeWalker</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>PreloadLSNTreeWalker</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>dbs</color><color=#f8f8f2>,</color>
        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>rootLsns</color><color=#f8f8f2>,</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>TreeNodeProcessor</color> <color=#f8f8f2>callback</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>conf</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>dbs</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*setDbState*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>rootLsns</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>callback</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>/* savedException, exception predicate */</color>
      <color=#f8f8f2>accumulateLNs</color> <color=#f92672>=</color> <color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getLoadLNs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>preloadIntoOffHeapCache</color> <color=#f92672>=</color> <color=#f8f8f2>useOffHeapCache</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>setLSNBatchSize</color><color=#f8f8f2>(</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getLSNBatchSize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>setInternalMemoryLimit</color><color=#f8f8f2>(</color><color=#f8f8f2>conf</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalMemoryLimit</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>walk</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>nDbs</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nDbsLatched</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nDbs</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>latchRootLatchExclusive</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>nDbsLatched</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Couldn't latch all DatabaseImpls during preload"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>walkInternal</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Release latches in reverse acquisition order to avoid</color>
<color=#75715e>         * deadlocks with possible concurrent preload operations.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>nDbsLatched</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseRootLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Method to get the Root IN for this DatabaseImpl's tree.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#f8f8f2>IN</color> <color=#a6e22e>getRootIN</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>long</color> <color=#f8f8f2>rootLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>getRootINRootAlreadyLatched</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*exclusive*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>fetchAndInsertIntoTree</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>RecoveryProgress</color><color=#f92672>></color> <color=#a6e22e>getRecoveryProgressListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>recoveryProgressListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ClassLoader</color> <color=#a6e22e>getClassLoader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>getDupConvertPreloadConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dupConvertPreloadConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks that writing records with a TTL is allowed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if any node in the group is less than JE_TTL_VERSION.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkTTLAvailable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Do nothing when not overridden by RepImpl. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Recovery encountered a RestoreRequired marker file, so recovery is halted and some intervention</color>
<color=#75715e>   * must be taken.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param restoreRequired getFailureType() is used to indicate the how the environment can be</color>
<color=#75715e>   *     healed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>handleRestoreRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>RestoreRequired</color> <color=#f8f8f2>restoreRequired</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>restoreRequired</color><color=#f8f8f2>.</color><color=#a6e22e>getFailureType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>LOG_CHECKSUM</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_CHECKSUM</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>VerifierUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getRestoreRequiredMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>restoreRequired</color><color=#f8f8f2>));</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>BTREE_CORRUPTION</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>BTREE_CORRUPTION</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>VerifierUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getRestoreRequiredMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>restoreRequired</color><color=#f8f8f2>));</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>restoreRequired</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>