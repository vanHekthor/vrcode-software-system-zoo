<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.ReplicaAckPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.SyncPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.StartupTracker.Phase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryHeader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogItem</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.RestoreRequired</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.RecoveryInfo</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.VLSNRecoveryProxy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NodeState</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn.LocalCBVLSNUpdater</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.ArbiterFeederSource</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederFilter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederTxns</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription.StreamAuthenticator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.txn.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.HostPortPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ReplicationFormatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.StatCaptureRepDefinitions</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net.DataChannelFactoryBuilder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNIndex</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNRange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNRecoveryTracker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.statcap.StatManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbBackup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileNotFoundException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.CountDownLatch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.locks.ReentrantLock</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.locks.ReentrantReadWriteLock</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.NoConsistencyRequiredPolicy.NO_CONSISTENCY</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams.*</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RepImpl</color> <color=#66d9ef>extends</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#66d9ef>implements</color> <color=#f8f8f2>RepEnvConfigObserver</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>VLSNIndex</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>;</color>
  <color=#75715e>/* VLSNIndexAccess coordinates the closing of the vlsn index */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>VLSNIndexAccess</color> <color=#f8f8f2>vlsnIndexAccess</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>VLSNIndexAccess</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FeederTxns</color> <color=#f8f8f2>feederTxns</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The repNode is only non-null when the replicated environment has joined</color>
<color=#75715e>   * a group. It's null otherwise.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Replay</color> <color=#f8f8f2>replay</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This is the canonical nameIdPair instance used by the node. The internal</color>
<color=#75715e>   * Id part of the pair will be updated when the node actually joins the</color>
<color=#75715e>   * group.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NodeState</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The clockskew used by this environment in ms. It's only used by testing</color>
<color=#75715e>   * to inject clock skew between ReplicatedEnvironments.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>clockSkewMs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A handle to the group database. This handle is initialized lazily when</color>
<color=#75715e>   * the contents of the database are first required. It's set to null upon</color>
<color=#75715e>   * shutdown. The handle must be initialized lazily because the database is</color>
<color=#75715e>   * created by the master, and we only know master identity later.  The</color>
<color=#75715e>   * RepImpl manages the rep group database, so that the lifetime of the</color>
<color=#75715e>   * databaseImpl handle can be managed more easily to mesh with the opening</color>
<color=#75715e>   * and closing of the RepImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>groupDbImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The status presents whether this replica is doing rollback. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backupProhibited</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Represents whether this Environment is allowed to convert a</color>
<color=#75715e>   * non-replicated Environment to replicated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowConvert</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Config params for preserving and caching the VLSN. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>preserveVLSN</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>cacheVLSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * True if TTL is available. Volatile is not used, since checking more than</color>
<color=#75715e>   * once is idempotent.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isTTLAvailable</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Keep an eye on the ongoing DbBackups. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DbBackup</color><color=#f92672>></color> <color=#f8f8f2>backups</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>DbBackup</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The list of observers who are notified when a mutable rep param changes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>RepEnvConfigObserver</color><color=#f92672>></color> <color=#f8f8f2>repConfigObservers</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Lock used to control access and lazy initialization of groupDbImpl,</color>
<color=#75715e>   * ensuring that there is exactly one database made. A mutex is used rather</color>
<color=#75715e>   * than synchronization to allow us to probe for contention on the</color>
<color=#75715e>   * groupDbImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReentrantLock</color> <color=#f8f8f2>groupDbLock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReentrantLock</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>replicaAckTimeout</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>arbiterAckTimeout</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>insufficientReplicasTimeout</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>replayTxnTimeout</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>defaultConsistencyPolicy</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowArbiterAck</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Arbiters, subscribers and networkBackup use RepImpls which are read</color>
<color=#75715e>   * only and have some daemon functionality disabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isArbiter</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isSubscriber</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNetworkBackup</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * NodeStats are currently not public, but we may want to evaluate</color>
<color=#75715e>   * and decide if they would be useful, perhaps as a debugging aid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>nodeStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>BooleanStat</color> <color=#f8f8f2>hardRecoveryStat</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StringStat</color> <color=#f8f8f2>hardRecoveryInfoStat</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to block transaction commit/abort execution just before completing</color>
<color=#75715e>   * a Master Transfer operation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>blockTxnLatch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CountDownLatch</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A lock used to coordinate access to {@link #blockTxnLatch}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a Master Transfer operation completes Phase 1, it sets a new {@code CountDownLatch} in</color>
<color=#75715e>   * order to block the completion of transactions at the commit or abort stage. We must avoid</color>
<color=#75715e>   * having it do so at an awkward moment. There are two (unrelated) cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ol></color>
<color=#75715e>   *   <li>There is a brief period between the time a transaction "awaits" the latch (in {@code</color>
<color=#75715e>   *       checkBlock()}) and the time it publishes its VLSN. We must avoid having Master Transfer</color>
<color=#75715e>   *       read its "ultimate goal" VLSN during that interval.</color>
<color=#75715e>   *   <li>The Feeder input thread occasionally updates the GroupDB, upon receiving a Heartbeat</color>
<color=#75715e>   *       response. That happens in a transaction, like any other, so it could be subject to the</color>
<color=#75715e>   *       normal blockage in Phase 2. But the Feeder input thread is of course also the thread that</color>
<color=#75715e>   *       we rely on for making progress towards the goal of Master Transfer; so blocking it is</color>
<color=#75715e>   *       counterproductive.</color>
<color=#75715e>   * </ol></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see MasterTransfer</color>
<color=#75715e>   * @see ReplicatedEnvironment#transferMaster</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReentrantReadWriteLock</color> <color=#f8f8f2>blockLatchLock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReentrantReadWriteLock</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

  <color=#75715e>/* application listener for syncups. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>SyncupProgress</color><color=#f92672>></color> <color=#f8f8f2>syncupProgressListener</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Application callback to be notified before we overwrite log files. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogFileRewriteListener</color> <color=#f8f8f2>logRewriteListener</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Configuration for ServiceDispatcher communication */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Factory for creating channel instances.  Not available until</color>
<color=#75715e>   * initializeChannelFactory is called.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used for testing, to create log files with VLSN.UNINITIALIZED_VLSN_SEQUENCE as the value for</color>
<color=#75715e>   * the dtvlsn</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>simulatePreDTVLSNMaster</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to verify VLSN invariants as they are written to the log on the</color>
<color=#75715e>   * master</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>prevLoggedVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>prevLoggedDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The filter transmitted to a Feeder so that records can be filtered at</color>
<color=#75715e>   * the source</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FeederFilter</color> <color=#f8f8f2>feederFilter</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The feeder authenticator generator is instantiated by the replicated environment creator. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>StreamAuthenticator</color> <color=#f8f8f2>authenticator</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>RepImpl</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentLockedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>allowConvert</color> <color=#f92672>=</color> <color=#f8f8f2>RepInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowConvert</color><color=#f8f8f2>(((</color><color=#f8f8f2>ReplicationConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>repConfigObservers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>RepEnvConfigObserver</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>addRepConfigObserver</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repNetConfig</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>ReplicationConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>).</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nodeState</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NodeState</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isArbiter</color> <color=#f92672>||</color> <color=#f8f8f2>isSubscriber</color> <color=#f92672>||</color> <color=#f8f8f2>isNetworkBackup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nodeStats</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>syncupProgressListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>logRewriteListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hardRecoveryStat</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hardRecoveryInfoStat</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>feederTxns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>feederFilter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>feederTxns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FeederTxns</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replay</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Replay</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nodeStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>RepImplStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepImplStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>hardRecoveryStat</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BooleanStat</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepImplStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>HARD_RECOVERY</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>hardRecoveryInfoStat</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StringStat</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>nodeStats</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>RepImplStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>HARD_RECOVERY_INFO</color><color=#f8f8f2>,</color>
            <color=#e6db74>"This node did not incur a hard recovery."</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>syncupProgressListener</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>ReplicationConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>).</color><color=#a6e22e>getSyncupProgressListener</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>logRewriteListener</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>ReplicationConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>).</color><color=#a6e22e>getLogFileRewriteListener</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>feederFilter</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>ReplicationConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>).</color><color=#a6e22e>getFeederFilter</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>authenticator</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>ReplicationConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>).</color><color=#a6e22e>getAuthenticator</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by the EnvironmentImpl constructor. Some rep params, preserveVLSN for example, are</color>
<color=#75715e>   * accessed by the EnvironmentImpl via methods (getPreserveVLSN for example), so they need to be</color>
<color=#75715e>   * initialized early.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>initConfigParams</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Init standalone config params first. */</color>
    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>initConfigParams</color><color=#f8f8f2>(</color><color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Init rep config params. */</color>
    <color=#f8f8f2>replicaAckTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_ACK_TIMEOUT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>insufficientReplicasTimeout</color> <color=#f92672>=</color>
        <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>INSUFFICIENT_REPLICAS_TIMEOUT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replayTxnTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLAY_TXN_LOCK_TIMEOUT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>defaultConsistencyPolicy</color> <color=#f92672>=</color>
        <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CONSISTENCY_POLICY</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>preserveVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>PRESERVE_RECORD_VERSION</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>cacheVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CACHE_RECORD_VERSION</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>allowArbiterAck</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW_ARBITER_ACK</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>isArbiter</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>ARBITER_USE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>isSubscriber</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUBSCRIBER_USE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>isNetworkBackup</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>NETWORKBACKUP_USE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>arbiterAckTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>ARBITER_ACK_TIMEOUT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Formatter</color> <color=#a6e22e>initFormatter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The nameIdPair field is assigned here rather than in the constructor</color>
<color=#75715e>     * because of base class/subclass dependencies. initFormatter() is</color>
<color=#75715e>     * called by the base class constructor, and nameIdPair must be</color>
<color=#75715e>     * available at that time.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>nameIdPair</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>NODE_NAME</color><color=#f8f8f2>));</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMonitorClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"com.sleepycat.je.rep.jmx.RepJEMonitor"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDiagnosticsClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"com.sleepycat.je.rep.jmx.RepJEDiagnostics"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see super#initConfigManager */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>DbConfigManager</color> <color=#a6e22e>initConfigManager</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>envConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowRepConvert</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>allowConvert</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see super#resetConfigManager */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>DbConfigManager</color> <color=#a6e22e>resetConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Save all the replication related properties. */</color>
    <color=#f8f8f2>RepConfigManager</color> <color=#f8f8f2>repConfigManager</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepConfigManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ReplicationConfig</color> <color=#f8f8f2>repConfig</color> <color=#f92672>=</color> <color=#f8f8f2>repConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>makeReplicationConfig</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfig</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationConfig</color> <color=#a6e22e>cloneRepConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>RepConfigManager</color> <color=#f8f8f2>repConfigManager</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepConfigManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>makeReplicationConfig</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Make an ReplicatedEnvironment handle for this RepImpl. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironment</color> <color=#a6e22e>makeEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>getEnvironmentHome</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cloneRepConfig</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cloneConfig</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationMutableConfig</color> <color=#a6e22e>cloneRepMutableConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>RepConfigManager</color> <color=#f8f8f2>repConfigManager</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepConfigManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>makeReplicationConfig</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRepMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationMutableConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Clone the current config. */</color>
    <color=#f8f8f2>RepConfigManager</color> <color=#f8f8f2>repConfigManager</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepConfigManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ReplicationConfig</color> <color=#f8f8f2>newConfig</color> <color=#f92672>=</color> <color=#f8f8f2>repConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>makeReplicationConfig</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Copy in the mutable props. */</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>copyMutablePropsTo</color><color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repConfigManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepConfigManager</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentConfig</color><color=#f8f8f2>(),</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Update the current config and notify observers.  The config manager</color>
<color=#75715e>     * is replaced with a new instance that uses the new configuration.</color>
<color=#75715e>     * This avoids synchronization issues: other threads that have a</color>
<color=#75715e>     * reference to the old configuration object are not impacted.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Notify listeners in reverse order of registration so that the</color>
<color=#75715e>     * environment listener is notified last and can start daemon threads</color>
<color=#75715e>     * after they are configured.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>repConfigObservers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RepEnvConfigObserver</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>repConfigObservers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>repEnvConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>repConfigManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>repEnvConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>RepConfigManager</color> <color=#f8f8f2>configMgr</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicationMutableConfig</color> <color=#f8f8f2>newConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>allowArbiterAck</color> <color=#f92672>=</color> <color=#f8f8f2>configMgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW_ARBITER_ACK</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiter</color><color=#f8f8f2>().</color><color=#a6e22e>processConfigChange</color><color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repNode</color>
        <color=#f8f8f2>.</color><color=#a6e22e>getElectionQuorum</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>.</color><color=#a6e22e>setElectableGroupSizeOverride</color><color=#f8f8f2>(</color><color=#f8f8f2>newConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getElectableGroupSizeOverride</color><color=#f8f8f2>());</color>

    <color=#75715e>/* Account for mutation of deprecated HA LogFlusher params. */</color>
    <color=#f8f8f2>getLogFlusher</color><color=#f8f8f2>().</color><color=#a6e22e>configFlushTask</color><color=#f8f8f2>(</color><color=#f8f8f2>configMgr</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getReplica</color><color=#f8f8f2>().</color><color=#a6e22e>getDbCache</color><color=#f8f8f2>().</color><color=#a6e22e>setConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>configMgr</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addRepConfigObserver</color><color=#f8f8f2>(</color><color=#f8f8f2>RepEnvConfigObserver</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>repConfigObservers</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The VLSNIndex must be created, merged and flushed before the recovery checkpoint. This method</color>
<color=#75715e>   * should be called even if there is no recovery checkpoint, because it sets up needed data</color>
<color=#75715e>   * structures.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On the face of it, it seems that one could flush the VLSNIndex cache after the recovery</color>
<color=#75715e>   * checkpoint, before the Replicator constructor returns and before any user level HA operations</color>
<color=#75715e>   * can start. That's not sufficient because the recovery checkpoint is shortening the recovery</color>
<color=#75715e>   * interval for future recoveries, and any information that has been garnered must be persisted.</color>
<color=#75715e>   * Here's an example of what might happen after a series of recoveries if we fail to flush</color>
<color=#75715e>   * VLSNIndex as part of the recovery checkpoint:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Environment recovers for first time, brand new environment recovery did not find any VLSNs</color>
<color=#75715e>   * in log, because log is brand new recovery logs ckpt 1start recovery logs ckpt 1 end</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>VLSN 1 logged VLSN 2 logged VLSN 3 logged</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>crash .... Environment recovers recovery crawls log from ckpt 1 start onward, finds VLSNs</color>
<color=#75715e>   * 1-3 recovery logs ckpt 2 start recovery logs ckpt 2 end VLSN index instantiated, VLSNs 1-3</color>
<color=#75715e>   * added in but not written too disk</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>crash ... Environment recovers recovery crawls log from ckpt start 2 start onward, finds no</color>
<color=#75715e>   * VLSNs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Instead, the flushed VLSN has to be logged before the checkpoint end record that is used for</color>
<color=#75715e>   * the next recovery.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preRecoveryCheckpointInit</color><color=#f8f8f2>(</color><color=#f8f8f2>RecoveryInfo</color> <color=#f8f8f2>recoveryInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>stride</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN_STRIDE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxMappings</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN_MAX_MAP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxDist</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN_MAX_DIST</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Our local nameIdPair field isn't set yet because we haven't finished</color>
<color=#75715e>     * our initialization, so get it from the config manager.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>useNameIdPair</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>NODE_NAME</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>vlsnIndex</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>VLSNIndex</color><color=#f8f8f2>(</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>VLSN_MAP</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>useNameIdPair</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>stride</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>maxMappings</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>maxDist</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>recoveryInfo</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replay</color><color=#f8f8f2>.</color><color=#a6e22e>preRecoveryCheckpointInit</color><color=#f8f8f2>(</color><color=#f8f8f2>recoveryInfo</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the current state associated with this ReplicatedEnvironment</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the externally visible ReplicatedEnvironment state</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>getState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the state change event that transitioned the ReplicatedEnviroment to its current state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StateChangeEvent</color> <color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>NodeState</color> <color=#a6e22e>getNodeState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Wait for this node to join a replication group and return whether it is a MASTER or REPLICA.</color>
<color=#75715e>   * Note that any method that creates or clears the repNode field must be synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>joinGroup</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>consistency</color><color=#f8f8f2>,</color> <color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>initialElectionPolicy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>startupTracker</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>TOTAL_JOIN_GROUP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>repNode</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepNode</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>replay</color><color=#f8f8f2>,</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>joinGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>consistency</color><color=#f8f8f2>,</color> <color=#f8f8f2>initialElectionPolicy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Problem attempting to join on "</color> <color=#f92672>+</color> <color=#f8f8f2>getSocket</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>startupTracker</color><color=#f8f8f2>.</color><color=#a6e22e>stop</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>TOTAL_JOIN_GROUP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initialize the DataChannelFactory in our configuration for use. This is public to allow access</color>
<color=#75715e>   * by the ReplicatedEnvironment constructor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException if the ReplicationNetworkConfig is invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>initializeChannelFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channelFactory</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channelFactory</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>channelFactory</color> <color=#f92672>=</color>
            <color=#f8f8f2>DataChannelFactoryBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>construct</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataChannelFactoryBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>makeLoggerFactory</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>createInternalEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InternalReplicatedEnvironment</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>getEnvironmentHome</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cloneRepConfig</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cloneConfig</color><color=#f8f8f2>(),</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @see EnvironmentImpl#setupClose Release all replication resources that can be released before</color>
<color=#75715e>   *     the checkpoint. Note that any method that creates or clears the repNode field must be</color>
<color=#75715e>   *     called from a synchronized caller.</color>
<color=#75715e>   *     <p>Note that the vlsnIndex is closed as a callback, from postCheckpointPreEnvClose()</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setupClose</color><color=#f8f8f2>(</color><color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>errors</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupDbImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>groupDbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>groupDbImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Group member database shutdown"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>repNode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>appendException</color><color=#f8f8f2>(</color><color=#f8f8f2>errors</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#e6db74>"shutting down node "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Close any resources that need to be closed after the closing checkpoint. Note that since</color>
<color=#75715e>   * Replay.close closes open transactions, it must be invoked after the checkpoint has been</color>
<color=#75715e>   * completed, so that the checkpoint operation can correctly account for the open transactions.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>postCheckpointClose</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>checkpointed</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replay</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>replay</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>replay</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>vlsnIndexAccess</color><color=#f8f8f2>.</color><color=#a6e22e>closeVLSNIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>checkpointed</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @see EnvironmentImpl#setupClose</color>
<color=#75715e>   *     <p>Note: this conversion process will iterate over all user created databases in the</color>
<color=#75715e>   *     environment, which could be potentially be a costly affair. However, let's opt for</color>
<color=#75715e>   *     simplicity and defer any optimizations until we see whether this is an important use case.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postRecoveryConversion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>postRecoveryConversion</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needRepConvert</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Set NameDb to replicated. */</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>nameDb</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameDb</color> <color=#f92672>=</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>NAME_DB_ID</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nameDb</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nameDb</color><color=#f8f8f2>.</color><color=#a6e22e>setIsReplicatedBit</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>nameDb</color><color=#f8f8f2>.</color><color=#a6e22e>setDirty</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameDb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>nameDb</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Set user defined databases to replicated. */</color>
      <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>idNameMap</color> <color=#f92672>=</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDbNamesAndIds</color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color> <color=#f8f8f2>:</color> <color=#f8f8f2>idNameMap</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>isReservedDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>idNameMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>setIsReplicatedBit</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>setDirty</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dbMapTree</color><color=#f8f8f2>.</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do a checkpointer to flush dirty datbaseImpls that are converted</color>
<color=#75715e>       * to replicated and write the current VLSNRange to the log.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>CheckpointConfig</color> <color=#f8f8f2>ckptConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CheckpointConfig</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ckptConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setForce</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>ckptConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setMinimizeRecoveryTime</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>invokeCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>ckptConfig</color><color=#f8f8f2>,</color> <color=#e6db74>"Environment conversion"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Close enough resources to support reopening the environment in the same</color>
<color=#75715e>   * JVM.</color>
<color=#75715e>   * @see EnvironmentImpl#doCloseAfterInvalid()</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>doCloseAfterInvalid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Release the repNode, in order to release sockets. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>repNode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>doCloseAfterInvalid</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used by error handling to forcibly close an environment, and by tests to close an environment</color>
<color=#75715e>   * to simulate a crash. Database handles do not have to be closed before calling this method. A</color>
<color=#75715e>   * checkpoint is not performed. The various thread pools will be shutdown abruptly.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>abnormalClose</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Shutdown the daemons, and the checkpointer in particular, before</color>
<color=#75715e>     * nulling out the vlsnIndex.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>shutdownDaemons</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Don't fire a LeaveGroupEvent if it's an abnormal close,</color>
<color=#75715e>         * otherwise an EnvironmentFailureException would be thrown</color>
<color=#75715e>         * because daemons of this Environment have been shutdown.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getMonitorEventManager</color><color=#f8f8f2>().</color><color=#a6e22e>disableLeaveGroupEvent</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>repNode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* ignore */</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>vlsnIndexAccess</color><color=#f8f8f2>.</color><color=#a6e22e>abnormalCloseVLSNIndex</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* ignore */</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>abnormalClose</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* ignore */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A replicated log entry has been written on this node. Update the VLSN->LSN mapping. Called</color>
<color=#75715e>   * outside the log write latch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>LogItem</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>.</color><color=#a6e22e>header</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Although the very first replicated entry of the system is never a</color>
<color=#75715e>     * syncable log entry type, the first GlobalCBVLSN of the system must</color>
<color=#75715e>     * start at 1. If we only track the first syncable entry, the</color>
<color=#75715e>     * GlobalCBVLSN will start a a value > 1, and replicas that are</color>
<color=#75715e>     * starting up from VLSN 1 will be caught in spurious network restores</color>
<color=#75715e>     * because VLSN 1 < the GlobalCBVLSN. Therefore treat the VLSN 1 as a</color>
<color=#75715e>     * syncable entry for the sake of the GlobalCBVLSN.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>isSyncPoint</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>())</color> <color=#f92672>||</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>FIRST_VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>trackSyncableVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>logItem</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Generate the next VLSN and update the DTVLSN value in the item. Note that this method is only</color>
<color=#75715e>   * invoked when the node is in the Master state, since the master assigns new VLSNs and DTVLSNs,</color>
<color=#75715e>   * and the replicas simply preserve them.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The DTVLSN value must be calculated under the same latch as the updating of the VLSN to</color>
<color=#75715e>   * ensure that the following invariants are maintained:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>lsn1 > lsn2 ==> VLSN(lsn1) > VLSN(lsn2) vlsn2 > vlsn1 ==> DTVLSN(vlsn2) >= DTVLSN(vlsn1)</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>where vlsn2 and vlsn1 are transaction commit or abort records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Replicas, when replaying their stream, verify that this invariant is maintained.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Commit/Abort records for Replication groups that have a single electable and durable node</color>
<color=#75715e>   * have their dtvlsn written as the associated VLSN, that is, DTVLSN(vlsn) == vlsn. For all other</color>
<color=#75715e>   * RG configurations, DTVLSN(vlsn) < vlsn.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Commit/Abort Log records that are created by replaying an HA stream from a pre DTVLSN</color>
<color=#75715e>   * feeder, will have their dtvlsns set to VLSN.UNINITIALIZED_VLSN_SEQUENCE during replica replay.</color>
<color=#75715e>   * They do not follow this code path.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param entry the log entry with which the VLSN will be associated. If the log entry represents</color>
<color=#75715e>   *     a commit or abort entry, its DTVLSN is modified so that it's correct when it's serialized</color>
<color=#75715e>   *     out.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>assignVLSNs</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color> <color=#f92672>=</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>bump</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>itemType</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getLogType</color><color=#f8f8f2>().</color><color=#a6e22e>getTypeNum</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>itemType</color> <color=#f92672>!=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_COMMIT</color><color=#f8f8f2>.</color><color=#a6e22e>getTypeNum</color><color=#f8f8f2>()</color>
        <color=#f92672>&&</color> <color=#f8f8f2>itemType</color> <color=#f92672>!=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_ABORT</color><color=#f8f8f2>.</color><color=#a6e22e>getTypeNum</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * A commit or abort record. Compute the DTVLSN value to associate with</color>
<color=#75715e>     * the commit record and store it into the buffer at the appropriate</color>
<color=#75715e>     * position.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>simulatePreDTVLSNMaster</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isNeedsAcks</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Use the dtvlsn value being tracked via acknowledgments from</color>
<color=#75715e>       * replicas when replication is being used for durability.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>getDTVLSN</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Replicated environment, but replication is not being used for</color>
<color=#75715e>       * durability. That is, the commit is self-acknowledged, set dtvlsn</color>
<color=#75715e>       * == vlsn.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>updateDTVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>.</color><color=#a6e22e>getSequence</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>VersionedWriteTxnEnd</color> <color=#f8f8f2>txnEnd</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>VersionedWriteTxnEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * As a cheap sanity check, commits/aborts on the master are created</color>
<color=#75715e>     * with VLSN.NULL values, so they can be verified here.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>checkDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>txnEnd</color><color=#f8f8f2>.</color><color=#a6e22e>getDTVLSN</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkDTVLSN</color> <color=#f92672>!=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"NULL DTVLSN expected at VLSN:"</color> <color=#f92672>+</color> <color=#f8f8f2>vlsn</color> <color=#f92672>+</color> <color=#e6db74>" not "</color> <color=#f92672>+</color> <color=#f8f8f2>checkDTVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>txnEnd</color><color=#f8f8f2>.</color><color=#a6e22e>setDTVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>dtvlsn</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Verify invariant */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevLoggedVLSN</color> <color=#f92672>></color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>.</color><color=#a6e22e>getSequence</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dtvlsn</color> <color=#f92672><</color> <color=#f8f8f2>prevLoggedDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
            <color=#e6db74>"DTVLSNs must be in ascending order in the stream. "</color>
                <color=#f92672>+</color> <color=#e6db74>" prev DTVLSN:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>prevLoggedDTVLSN</color>
                <color=#f92672>+</color> <color=#e6db74>" next DTVLSN:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>dtvlsn</color>
                <color=#f92672>+</color> <color=#e6db74>" at VLSN: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>;</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>prevLoggedVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>.</color><color=#a6e22e>getSequence</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>prevLoggedDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flush any information that needs to go out at checkpoint. Specifically, write any in-memory</color>
<color=#75715e>   * VLSN->LSN mappings to the VLSNIndex database so we are guaranteed that the VLSNIndex database</color>
<color=#75715e>   * will recover properly. This must be committed with noSync because - the ensuing checkpoint end</color>
<color=#75715e>   * record will be logged with an fsync and will effectively force this out - it's important to</color>
<color=#75715e>   * minmize lock contention on the vlsn index and any fsync done during a checkpoint will be</color>
<color=#75715e>   * expensive, as there may be quite a lot to push to disk. We don't want to incur that cost while</color>
<color=#75715e>   * holding locks on the vlsn index. [#20702]</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preCheckpointEndFlush</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>vlsnIndex</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>flushToDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_NO_SYNC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The volatile repNode field might be modified by joinGroup(),</color>
<color=#75715e>     * leaveGroup, or close(), which are synchronized. Keep this method</color>
<color=#75715e>     * unsynchronized, assign to a temporary field to guard against a</color>
<color=#75715e>     * change.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RepNode</color> <color=#f8f8f2>useNode</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useNode</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useNode</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setChangeListener</color><color=#f8f8f2>(</color><color=#f8f8f2>StateChangeListener</color> <color=#f8f8f2>listener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StateChangeListener</color> <color=#f8f8f2>prevListener</color> <color=#f92672>=</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getChangeListener</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>setChangeListener</color><color=#f8f8f2>(</color><color=#f8f8f2>listener</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Call back so that it's aware of the last state change event and</color>
<color=#75715e>     * the application can initialize itself correctly as a master or</color>
<color=#75715e>     * replica.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>StateChangeEvent</color> <color=#f8f8f2>stateChangeEvent</color> <color=#f92672>=</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Invoke application code and handle any app exceptions. */</color>
      <color=#f8f8f2>listener</color><color=#f8f8f2>.</color><color=#a6e22e>stateChange</color><color=#f8f8f2>(</color><color=#f8f8f2>stateChangeEvent</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Revert the change. */</color>
      <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>setChangeListener</color><color=#f8f8f2>(</color><color=#f8f8f2>prevListener</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"State Change listener exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#75715e>/* An application error. */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LISTENER_EXCEPTION</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StateChangeListener</color> <color=#a6e22e>getChangeListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getChangeListener</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>VLSNIndex</color> <color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>FeederTxns</color> <color=#a6e22e>getFeederTxns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederTxns</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironmentStats</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>statKey</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#a6e22e>getRepStatGroups</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color> <color=#f8f8f2>statKey1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ReplicatedEnvironmentStats</color> <color=#f8f8f2>res</color> <color=#f92672>=</color> <color=#f8f8f2>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>statKey1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>res</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>res</color><color=#f8f8f2>.</color><color=#a6e22e>getStatGroups</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SortedSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getStatCaptureProjections</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatCaptureRepDefinitions</color><color=#f8f8f2>().</color><color=#a6e22e>getStatisticProjections</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StatManager</color> <color=#a6e22e>createStatManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepStatManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>FeederFilter</color> <color=#a6e22e>getFeederFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederFilter</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironmentStats</color> <color=#a6e22e>getStatsInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironmentStats</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color> <color=#f8f8f2>contextKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>RepStatManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>statManager</color><color=#f8f8f2>).</color><color=#a6e22e>getRepStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>contextKey</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Replay</color> <color=#a6e22e>getReplay</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replay</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ensures that the environment is currently a Master before proceeding with an operation that</color>
<color=#75715e>   * requires it to be the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws UnknownMasterException if the node is disconnected</color>
<color=#75715e>   * @throws ReplicaWriteException if the node is currently a replica</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkIfMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicaWriteException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StateChangeEvent</color> <color=#f8f8f2>event</color> <color=#f92672>=</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>();</color>

    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>MASTER</color><color=#f8f8f2>:</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>REPLICA</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicaWriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>);</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>UNKNOWN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>);</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>DETACHED</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>);</color>

      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Unexpected state: "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the repNode. May return null. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>RepNode</color> <color=#a6e22e>getRepNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create an appropriate type of ThreadLocker. Specifically, it creates an MasterThreadLocker if</color>
<color=#75715e>   * the node is currently a Master, and a ReplicaThreadLocker otherwise, that is, if the node is a</color>
<color=#75715e>   * Replica, or it's currently in a DETACHED state.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an instance of MasterThreadLocker or ReplicaThreadLocker</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ThreadLocker</color> <color=#a6e22e>createRepThreadLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMaster</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterThreadLocker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicaThreadLocker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create an appropriate type of Replicated transaction. Specifically, it creates a MasterTxn, if</color>
<color=#75715e>   * the node is currently a Master, a ReadonlyTxn otherwise, that is, if the node is a Replica, or</color>
<color=#75715e>   * it's currently in a DETACHED state.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that a ReplicaTxn, used for transaction replay on a Replica is not created on this</color>
<color=#75715e>   * path. It's created explicitly in the Replay loop by a Replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config the transaction configuration</color>
<color=#75715e>   * @return an instance of MasterTxn or ReadonlyTxn</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createRepUserTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>isMaster</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalWrite</color><color=#f8f8f2>())</color>
        <color=#f92672>?</color> <color=#f8f8f2>MasterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReadonlyTxn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ensure that a sufficient number of feeders are available before proceeding with a master</color>
<color=#75715e>   * transaction begin.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the master transaction being initiated.</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   * @throws DatabaseException if there were insufficient Replicas after the timeout period.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>txnBeginHook</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkIfInvalid</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>insufficientReplicasTimeout</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>txnTimeout</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnTimeout</color> <color=#f92672><</color> <color=#f8f8f2>insufficientReplicasTimeout</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>txnTimeout</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getDurabilityQuorum</color><color=#f8f8f2>().</color><color=#a6e22e>ensureReplicasForCommit</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Installs the commit-blocking latch that is used to halt the commit/abort of transactions, in</color>
<color=#75715e>   * the final phase of a master transfer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #updateCBVLSN(LocalCBVLSNUpdater)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>blockTxnCompletion</color><color=#f8f8f2>(</color><color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>blocker</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ReentrantReadWriteLock</color><color=#f8f8f2>.</color><color=#a6e22e>WriteLock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>blockLatchLock</color><color=#f8f8f2>.</color><color=#a6e22e>writeLock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>blockTxnLatch</color> <color=#f92672>=</color> <color=#f8f8f2>blocker</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the GlobalCBVLSN is not defunct, updates the CBVLSN on behalf of a Feeder input thread (or</color>
<color=#75715e>   * FeederManager running in the RepNode thread). If the GlobalCBVLSN is defunct, does nothing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Does the update while avoiding the possibility that any resulting GroupDB update may get</color>
<color=#75715e>   * blocked behind the final phase of a master transfer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We skip the update if we're at the point of blocking new transactions for a master transfer.</color>
<color=#75715e>   * And we use a read/write lock in order to be able to examine that state safely.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateCBVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>LocalCBVLSNUpdater</color> <color=#f8f8f2>updater</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isGlobalCBVLSNDefunct</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>ReentrantReadWriteLock</color><color=#f8f8f2>.</color><color=#a6e22e>ReadLock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>blockLatchLock</color><color=#f8f8f2>.</color><color=#a6e22e>readLock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blockTxnLatch</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>updater</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Releases the transaction block latch. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>unblockTxnCompletion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Releasing commit block latch"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>blockTxnLatch</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This hook is used primarily to perform the final checks before allowing the commit operation to</color>
<color=#75715e>   * proceed. The following checks are performed here:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1) Check for master 2) Check for sufficient Feeder connections to ensure that the commit</color>
<color=#75715e>   * policy could be implemented. There is no guarantee that they will all ack the commit request.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The method also associates a latch with the transaction. The latch is used to delay the</color>
<color=#75715e>   * commit operation until a sufficient number of commits have been received.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, when mastership transfers are done, and this node is the original master,</color>
<color=#75715e>   * commits and aborts are blocked so as to avoid hard recovery after electing a new master, see</color>
<color=#75715e>   * [#18081].</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the master transaction being committed</color>
<color=#75715e>   * @throws InsufficientReplicasException if the feeder is not in contact with enough replicas.</color>
<color=#75715e>   * @throws RestartRequiredException if the environment is invalid.</color>
<color=#75715e>   * @throws UnknownMasterException if the current master is unknown.</color>
<color=#75715e>   * @throws ReplicaWriteException if the node transitioned to a Replica after the transaction was</color>
<color=#75715e>   *     initiated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogCommitHook</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InsufficientReplicasException</color><color=#f8f8f2>,</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>ReplicaWriteException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkIfInvalid</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>checkIfMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>checkBlock</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Still a master, check for a sufficient number of connections */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>activeReplicaCount</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>().</color><color=#a6e22e>activeAckReplicaCount</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>ReplicaAckPolicy</color> <color=#f8f8f2>ackPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitDurability</color><color=#f8f8f2>().</color><color=#a6e22e>getReplicaAck</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>requiredAckCount</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getRequiredAckCount</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Txn "</color>
              <color=#f92672>+</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" requires: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>requiredAckCount</color>
              <color=#f92672>+</color> <color=#e6db74>" active: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>activeReplicaCount</color>
              <color=#f92672>+</color> <color=#e6db74>" replica acks. Commit Policy: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>ackPolicy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requiredAckCount</color> <color=#f92672>></color> <color=#f8f8f2>activeReplicaCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Check for possible activation of Primary */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SIMPLE_MAJORITY</color><color=#f8f8f2>)</color>
          <color=#f92672>&&</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiter</color><color=#f8f8f2>().</color><color=#a6e22e>activateArbitration</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>resetRequiredAckCount</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useArbiter</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Note we could change the check to allow a degraded</color>
<color=#75715e>         * write from any group size. Limit is place at rep group</color>
<color=#75715e>         * size of two due to the priority of requirements</color>
<color=#75715e>         * and lower cost of testing.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>setArbiterAck</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Capture the set to ensure it's consistent with the exception</color>
<color=#75715e>         * message.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>includeArbiters</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>ackPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>ALL</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>activeAckRepSet</color> <color=#f92672>=</color>
            <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>().</color><color=#a6e22e>activeAckReplicas</color><color=#f8f8f2>(</color><color=#f8f8f2>includeArbiters</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requiredAckCount</color> <color=#f92672>></color> <color=#f8f8f2>activeAckRepSet</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* No change in window, throw exception */</color>
          <color=#f8f8f2>InsufficientReplicasException</color> <color=#f8f8f2>ire</color> <color=#f92672>=</color>
              <color=#66d9ef>new</color> <color=#f8f8f2>InsufficientReplicasException</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ackPolicy</color><color=#f8f8f2>,</color> <color=#f8f8f2>requiredAckCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>activeAckRepSet</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>ire</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>ire</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * A new replica became active in the window between the first fast check and the second</color>
<color=#75715e>         * slower check, just continue</color>
<color=#75715e>         */</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>feederTxns</color><color=#f8f8f2>.</color><color=#a6e22e>setupForAcks</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Block transaction commits/aborts if this node is the original master</color>
<color=#75715e>   * and we're doing Master Transfer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkBlock</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Lock out the setting of the block latch by Master Transfer in</color>
<color=#75715e>       * the interval between waiting on the latch and setting the VLSN</color>
<color=#75715e>       * for the commit: Master Transfer needs to get a coherent idea of</color>
<color=#75715e>       * the final VLSN when it sets the latch.  This lock will be</color>
<color=#75715e>       * released by the {@code postLogXxxHook()} functions, one of which</color>
<color=#75715e>       * is guaranteed to be called, unless an Environment-invalidating</color>
<color=#75715e>       * exception occurs.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>lockOnce</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>blockLatchLock</color><color=#f8f8f2>.</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blockTxnLatch</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color>
            <color=#66d9ef>this</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Block transaction: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" pending master transfer. Write locks = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteLockIds</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnTimeout</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>blockTxnLatch</color><color=#f8f8f2>.</color><color=#a6e22e>await</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>blockTxnLatch</color><color=#f8f8f2>.</color><color=#a6e22e>await</color><color=#f8f8f2>(</color><color=#f8f8f2>txnTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
            <color=#e6db74>"Timed out waiting for master transfer. "</color>
                <color=#f92672>+</color> <color=#e6db74>"Configured transaction timeout:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>txnTimeout</color>
                <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>;</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>TransactionTimeoutException</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>checkIfInvalid</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check again, after the block! The block may be a result of a</color>
<color=#75715e>       * master->replica transfer, and if this node transitions from</color>
<color=#75715e>       * master to replica, this node will be disqualified from being</color>
<color=#75715e>       * able to commit transactions.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>checkIfMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * It ensures that the feeder obtains the requisite number of acknowledgments required for a</color>
<color=#75715e>   * successful commit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn The MasterTxn that was committed locally.</color>
<color=#75715e>   * @throws InterruptedException if the thread was interrupted while waiting for acknowledgments.</color>
<color=#75715e>   * @throws InsufficientAcksException if the master received an insufficient number of commit</color>
<color=#75715e>   *     acknowledgments within the replica commit timeout period.</color>
<color=#75715e>   * @throws EnvironmentFailureException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogCommitHook</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogItem</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InsufficientAcksException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>replicaAckTimeout</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>txnTimeout</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnTimeout</color> <color=#f92672><</color> <color=#f8f8f2>replicaAckTimeout</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>txnTimeout</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>postLogCommitHookInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogCommitHookInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogItem</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>ackTimeout</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InsufficientAcksException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>unlockOnce</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>blockLatchLock</color><color=#f8f8f2>.</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>currentRequiredAckCount</color> <color=#f92672>=</color>
          <color=#f8f8f2>repNode</color>
              <color=#f8f8f2>.</color><color=#a6e22e>getDurabilityQuorum</color><color=#f8f8f2>()</color>
              <color=#f8f8f2>.</color><color=#a6e22e>getCurrentRequiredAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitDurability</color><color=#f8f8f2>().</color><color=#a6e22e>getReplicaAck</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentRequiredAckCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Throw a more actionable and accurate exception than EFE */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color> <color=#e6db74>"Acks could not be obtained because the environment"</color> <color=#f92672>+</color> <color=#e6db74>"was invalidated"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InsufficientAcksException</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>/* No acks are required, transaction is complete. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check if using Arbiter for transaction. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiterAck</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>// get the arbiter acker source and add txn id to its queue.</color>
      <color=#f8f8f2>Feeder</color> <color=#f8f8f2>arbFeeder</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>().</color><color=#a6e22e>getArbiterFeeder</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbFeeder</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ArbiterFeederSource</color> <color=#f8f8f2>as</color> <color=#f92672>=</color> <color=#f8f8f2>arbFeeder</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiterFeederSource</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>as</color><color=#f8f8f2>.</color><color=#a6e22e>addCommit</color><color=#f8f8f2>(</color><color=#f8f8f2>commitItem</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Don't do master check, the transaction has already been committed */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>feederTxns</color><color=#f8f8f2>.</color><color=#a6e22e>awaitReplicaAcks</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ackTimeout</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InsufficientAcksException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getArbiterAck</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>false</color> <color=#f92672>&&</color> <color=#f8f8f2>useArbiter</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>setArbiterAck</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>postLogCommitHookInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>,</color> <color=#f8f8f2>arbiterAckTimeout</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invoked before aborting a MasterTxn, this happens when the master is going to be a replica</color>
<color=#75715e>   * because of mastership transfer. We do this to make sure that the replica going to be the master</color>
<color=#75715e>   * has the most recent log and no hard recovery would happen after its election, see SR [#18081].</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn The MasterTxn that was aborted locally.</color>
<color=#75715e>   * @throws ReplicaWriteException if the node transitioned to a Replica after the transaction was</color>
<color=#75715e>   *     initiated.</color>
<color=#75715e>   * @throws UnknownMasterException if the current master is unknown.</color>
<color=#75715e>   * @throws EnvironmentFailureException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogAbortHook</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicaWriteException</color><color=#f8f8f2>,</color> <color=#f8f8f2>UnknownMasterException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkIfInvalid</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>checkIfMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>checkBlock</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Releases the block latch lock, if held. This hook is called in the normal course of</color>
<color=#75715e>   * Txn.abort(), once the abort log record has been written and the associated VLSN stored.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogAbortHook</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>unlockOnce</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>blockLatchLock</color><color=#f8f8f2>.</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes any pending acknowledgments that were registered by the preLogCommitHook. This hook is</color>
<color=#75715e>   * called only when a {@code commit()} fails and therefore must be aborted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogCommitAbortHook</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#e6db74>"post log abort hook for txn: "</color> <color=#f92672>+</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>unlockOnce</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>blockLatchLock</color><color=#f8f8f2>.</color><color=#a6e22e>readLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>feederTxns</color><color=#f8f8f2>.</color><color=#a6e22e>clearTransactionAcks</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Create a ReplayTxn for recovery processing. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createReplayTxn</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplayTxn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>,</color> <color=#f8f8f2>envLogger</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used by environment recovery to get a tracker to collect VLSN-LSN mappings that are within the</color>
<color=#75715e>   * recovery part of the log. These might not be reflected in the persistent mapping db.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSNRecoveryProxy</color> <color=#a6e22e>getVLSNProxy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>stride</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>VLSN_STRIDE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxMappings</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>VLSN_MAX_MAP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxDist</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>VLSN_MAX_DIST</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>VLSNRecoveryTracker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>stride</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxMappings</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxDist</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>UUID</color> <color=#a6e22e>getUUID</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getUUID</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used during testing to introduce artificial clock skews. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setSkewMs</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>skewMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>clockSkewMs</color> <color=#f92672>=</color> <color=#f8f8f2>skewMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getClockSkewMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>clockSkewMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Truncate the head of the VLSNIndex to allow file deletion, if possible. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>tryVlsnHeadTruncate</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>bytesNeeded</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>tryTruncateFromHead</color><color=#f8f8f2>(</color><color=#f8f8f2>bytesNeeded</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getNameIdPair</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayTxnTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayTxnTimeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Return the default consistency policy. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#a6e22e>getDefaultConsistencyPolicy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>defaultConsistencyPolicy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The default consistency is not currently mutable in the API, but can be set for testing</color>
<color=#75715e>   * purposes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>TODO: Make it mutable in the API, since Durability is mutable.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDefaultConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>policy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>defaultConsistencyPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>policy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Returns the on disk LSN for VLSN. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getLsnForVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>readBufferSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Returns the file number which is nearest to the vlsn. */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>fileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getLTEFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Start reading from the nearest file. */</color>
    <color=#f8f8f2>FeederReader</color> <color=#f8f8f2>feederReader</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>FeederReader</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNumber</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>),</color> <color=#f8f8f2>readBufferSize</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>feederReader</color><color=#f8f8f2>.</color><color=#a6e22e>initScan</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Go on scan the log until FeederReader find the target VLSN,</color>
<color=#75715e>       * thrown out an EnvironmentFailureException if it can't be found.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>feederReader</color><color=#f8f8f2>.</color><color=#a6e22e>readNextEntry</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"VLSN not found: "</color> <color=#f92672>+</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>feederReader</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLsn</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the logged durable txn VLSN. The logged DTVLSN is part of the last txn commit or abort</color>
<color=#75715e>   * entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the persistent DTVLSN. The value may be VLSN.UNINITIALIZED_VLSN_SEQUENCE if the</color>
<color=#75715e>   *     environment was newly created, that is, it has no transactions in it as yet, or if the last</color>
<color=#75715e>   *     entry was created by a pre-DTVLSN master.</color>
<color=#75715e>   * @throws FileNotFoundException if the file containing the last txn commit or abort entry does</color>
<color=#75715e>   *     not exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLoggedDTVLSN</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>lastTxnEnd</color> <color=#f92672>=</color> <color=#f8f8f2>getLastTxnEnd</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastTxnEnd</color><color=#f8f8f2>.</color><color=#a6e22e>isNull</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* A brand new environment with no transactions in it. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>getLsnForVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>lastTxnEnd</color><color=#f8f8f2>,</color> <color=#ae81ff>1024</color> <color=#75715e>/* buffer size for txn end */</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>TxnEnd</color> <color=#f8f8f2>txnEnd</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>TxnEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>getLogEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>).</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>txnEnd</color><color=#f8f8f2>.</color><color=#a6e22e>getDTVLSN</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dtvlsn</color> <color=#f92672>!=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_VLSN_SEQUENCE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* A JE version <= 7.1 log entry. */</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>envLogger</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Pre DTVLSN log, starting with zero dtvlsn"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Returns the end of the log. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getEndOfLog</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>().</color><color=#a6e22e>getLast</color><color=#f8f8f2>().</color><color=#a6e22e>getSequence</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the VLSN is preserved as the record version. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getPreserveVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>preserveVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the VLSN is both preserved and cached. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getCacheVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>preserveVLSN</color> <color=#f92672>&&</color> <color=#f8f8f2>cacheVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see EnvironmentImpl#getName */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color> <color=#f92672>+</color> <color=#e6db74>":"</color> <color=#f92672>+</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if this environment is part of a replication group. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if this environment is used as an Arbiter. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isArbiter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isArbiter</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Check whether this environment can be opened on an existing environment directory. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkRulesForExistingEnv</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>dbTreeReplicatedBit</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dbTreePreserveVLSN</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnsupportedOperationException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbTreeReplicatedBit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We are attempting to open an existing, non-replicated</color>
<color=#75715e>       * environment.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"This environment must be converted for replication."</color>
              <color=#f92672>+</color> <color=#e6db74>" using com.sleepycat.je.rep.util.DbEnableReplication."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* The preserveVLSN setting is forever immutable. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbTreePreserveVLSN</color> <color=#f92672>!=</color> <color=#f8f8f2>getPreserveVLSN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>PRESERVE_RECORD_VERSION</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" parameter may not be changed."</color>
              <color=#f92672>+</color> <color=#e6db74>" Previous value: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>dbTreePreserveVLSN</color>
              <color=#f92672>+</color> <color=#e6db74>" New value: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getPreserveVLSN</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the hostname associated with this node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the hostname</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getHostName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>hostAndPort</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>NODE_HOST_PORT</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>colonToken</color> <color=#f92672>=</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>":"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>colonToken</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>colonToken</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the port used by the replication node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the port number</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>hostAndPort</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>NODE_HOST_PORT</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>colonToken</color> <color=#f92672>=</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>":"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>colonToken</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>colonToken</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_PORT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Convenience method for returning replication sockets. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getSocket</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>getHostName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getPort</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the JE version that is currently running on this node, consulting the TEST_JE_VERSION</color>
<color=#75715e>   * configuration parameter for a test override.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>JEVersion</color> <color=#a6e22e>getCurrentJEVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>testJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>TEST_JE_VERSION</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>testJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>JEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT_VERSION</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>JEVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>testJEVersion</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the set of sockets associated with helper nodes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the set of helper sockets, returns an empty set if there are no helpers.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#a6e22e>getHelperSockets</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>helperHosts</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>HELPER_HOSTS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>HostPortPair</color><color=#f8f8f2>.</color><color=#a6e22e>getSockets</color><color=#f8f8f2>(</color><color=#f8f8f2>helperHosts</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called when a node has identified itself as the master, which is when the RepNode.selfElect is</color>
<color=#75715e>   * called. The database should not exist at this point.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Lock hierarchy: GroupDbLock -> sync on EnvironmentImpl</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>createGroupDb</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>isMaster</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>groupDbLock</color><color=#f8f8f2>.</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupDbImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"GroupDb should not exist."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDbImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Txn</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>txnConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setDurability</color><color=#f8f8f2>(</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>(</color><color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SYNC</color><color=#f8f8f2>,</color> <color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SYNC</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>NO_CONSISTENCY</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTxn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>getNameIdPair</color><color=#f8f8f2>());</color>

        <color=#75715e>/* Database should not exist yet, create it now */</color>
        <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseConfig</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setAllowCreate</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setExclusiveCreate</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setReplicated</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>newDbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>createInternalDb</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>REP_GROUP</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>commit</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>groupDbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>newDbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>groupDbLock</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>groupDbImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Open the group db, which should exist already, using NO_CONSISTENCY. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getGroupDb</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>openGroupDb</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/* doLockProbe */</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Open the group db, which should exist already, using NO_CONSISTENCY. Do not wait on the group</color>
<color=#75715e>   * db lock, return null if the databaseImpl hasn't been created and we can't obtain it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Lock hierarchy: GroupDbLock -> sync on EnvironmentImpl</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>probeGroupDb</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>openGroupDb</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/* doLockProbe */</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen, DB should exist. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Do the work of creating the lock and then assigning the groupDbImpl field, using</color>
<color=#75715e>   * NO_CONSISTENCY.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   * @throws DatabaseNotFoundException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>openGroupDb</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doLockProbe</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Acquire the lock. */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doLockProbe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>groupDbLock</color><color=#f8f8f2>.</color><color=#a6e22e>tryLock</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Contention, try later. */</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>groupDbLock</color><color=#f8f8f2>.</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Txn</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupDbImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>groupDbImpl</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDbImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>txnConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>txnConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>NO_CONSISTENCY</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReadonlyTxn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnConfig</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>newDbImpl</color> <color=#f92672>=</color>
          <color=#f8f8f2>getDbTree</color><color=#f8f8f2>()</color>
              <color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>REP_GROUP</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color> <color=#75715e>/* databaseHandle */</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newDbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>REP_GROUP</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>commit</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>groupDbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>newDbImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>groupDbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>groupDbLock</color><color=#f8f8f2>.</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return true if the node has been configured as a Designated Primary. This does not necessarily</color>
<color=#75715e>   * mean that the node is actively operating in designated primary mode. See {@link</color>
<color=#75715e>   * com.sleepycat.je.rep.arbitration.Arbiter#isActive}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDesignatedPrimary</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>DESIGNATED_PRIMARY</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addDbBackup</color><color=#f8f8f2>(</color><color=#f8f8f2>DbBackup</color> <color=#f8f8f2>backup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backups</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>backupProhibited</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>added</color> <color=#f92672>=</color> <color=#f8f8f2>backups</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>backup</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>added</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>addDbBackup</color><color=#f8f8f2>(</color><color=#f8f8f2>backup</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeDbBackup</color><color=#f8f8f2>(</color><color=#f8f8f2>DbBackup</color> <color=#f8f8f2>backup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backups</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>removed</color> <color=#f92672>=</color> <color=#f8f8f2>backups</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>backup</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>removed</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>removeDbBackup</color><color=#f8f8f2>(</color><color=#f8f8f2>backup</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Invalidate all the on going DbBackups, used in Replay.rollback(). */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>invalidateBackups</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fileNumber</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backups</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbBackup</color> <color=#f8f8f2>backup</color> <color=#f8f8f2>:</color> <color=#f8f8f2>backups</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>backup</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNumber</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Set the backupProhibited status, used in Replay.rollback(). */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBackupProhibited</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>backupProhibited</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>backups</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>backupProhibited</color> <color=#f92672>=</color> <color=#f8f8f2>backupProhibited</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For creating a rep exception from standalone code. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LockPreemptedException</color> <color=#a6e22e>createLockPreemptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockPreemptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>cause</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For creating a rep exception from standalone code. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabasePreemptedException</color> <color=#a6e22e>createDatabasePreemptedException</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabasePreemptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For creating a rep exception from standalone code. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LogOverwriteException</color> <color=#a6e22e>createLogOverwriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogOverwriteException</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getReplayFreeDiskPercent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>REPLAY_FREE_DISK_PERCENT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets up the environment for group shutdown when the environment is closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see ReplicatedEnvironment#shutdownGroup(long, TimeUnit)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownGroupSetup</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeoutMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>openCount</color> <color=#f92672>=</color> <color=#f8f8f2>getAppOpenCount</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCount</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Environment has "</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCount</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" additional open handles."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>backupCount</color> <color=#f92672>=</color> <color=#f8f8f2>getBackupCount</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>backupCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Environment has "</color> <color=#f92672>+</color> <color=#f8f8f2>backupCount</color> <color=#f92672>+</color> <color=#e6db74>" DbBackups in progress."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownGroupOnClose</color><color=#f8f8f2>(</color><color=#f8f8f2>timeoutMs</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>transferMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>replicas</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>force</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>transferMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>replicas</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>force</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Dump interesting aspects of the node's state. Currently for debugging use, possibly useful for</color>
<color=#75715e>   * field support.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getNameIdPair</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"["</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getState</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"] "</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>vlsnIndex</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"vlsnRange="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replay</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>replay</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Dumps the state associated with all active Feeders that supply acknowledgments, along with</color>
<color=#75715e>   * identifying information about the node and its current HA state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpAckFeederState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNameIdPair</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"["</color> <color=#f92672>+</color> <color=#f8f8f2>getState</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"]"</color> <color=#f92672>+</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>dumpAckFeederState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** If this node was started with a hard recovery, preserve that information. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setHardRecoveryInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>RollbackException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>hardRecoveryStat</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>hardRecoveryInfoStat</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getNodeStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ensure that the in-memory vlsn index encompasses all logged entries before it is flushed to</color>
<color=#75715e>   * disk. A No-Op for non-replicated systems. [#19754]</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>awaitVLSNConsistency</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>awaitConsistency</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSyncupProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>SyncupProgress</color> <color=#f8f8f2>progress</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setSyncupProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>progress</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSyncupProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>SyncupProgress</color> <color=#f8f8f2>progress</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>total</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>syncupProgressListener</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>syncupProgressListener</color><color=#f8f8f2>.</color><color=#a6e22e>progress</color><color=#f8f8f2>(</color><color=#f8f8f2>progress</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>total</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>PROGRESS_LISTENER_HALT</color><color=#f8f8f2>,</color>
          <color=#e6db74>"ReplicatedEnvironmentConfig.syncupProgressListener: "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Test method to create pre-DTVLSN logs. When this is turned on in a test environment the dtvlsn</color>
<color=#75715e>   * value in the log is written as a UNINITIALIZED_VLSN_SEQUENCE (zero), which is the value that</color>
<color=#75715e>   * deserialization would assign to it if a new replica came across an older version commit or</color>
<color=#75715e>   * abort record.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setSimulatePreDTVLSNMaster</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>simulatePreDTVLSNMaster</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>RepImpl</color><color=#f8f8f2>.</color><color=#a6e22e>simulatePreDTVLSNMaster</color> <color=#f92672>=</color> <color=#f8f8f2>simulatePreDTVLSNMaster</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSimulatePreDTVLSNMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>simulatePreDTVLSNMaster</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>LogFileRewriteListener</color> <color=#a6e22e>getLogRewriteListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logRewriteListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>getChannelFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>initializeChannelFactory</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>unblockTxnCompletion</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getLastTxnEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>vlsnIndexAccess</color><color=#f8f8f2>.</color><color=#a6e22e>getLastTxnEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Private class to prevent used of the close() method by the application on an internal handle.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>InternalReplicatedEnvironment</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ReplicatedEnvironment</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#a6e22e>InternalReplicatedEnvironment</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>environmentHome</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ReplicationConfig</color> <color=#f8f8f2>cloneRepConfig</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>cloneConfig</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>environmentHome</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>cloneRepConfig</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>cloneConfig</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*consistencyPolicy*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*initialElectionPolicy*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*joinGroup*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInternalHandle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"close() not permitted on an internal environment handle"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Peruse the environment wide transaction table, and return a set of all existing MasterTxns. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>MasterTxn</color><color=#f92672>></color> <color=#a6e22e>getExistingMasterTxns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>getTxns</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * RepImpl supplies the last txn abort or commit vlsn for use cases such as determining how caught</color>
<color=#75715e>   * up a feeder or master transfer is. This info is usually obtained from the VLSNRange via the</color>
<color=#75715e>   * VLSNIndex, but in some types of environment shutdowns, the VLSNIndex may need to be nulled out.</color>
<color=#75715e>   * When that happens, VLSNIndexAccess will switch over from using the VLSNIndex to obtain the</color>
<color=#75715e>   * range, to using a reference to the last known VLSNRange. Note that the VLSNRange instance held</color>
<color=#75715e>   * within VLSNIndex is constantly being replaced when the replication stream is active., and</color>
<color=#75715e>   * that's why LastTxnEndAccess generally obtains the range via the VLSNIndex, rather keeping a</color>
<color=#75715e>   * reference to a VLSNRange instance.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>VLSNIndexAccess</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>VLSNRange</color> <color=#f8f8f2>savedRange</color><color=#f8f8f2>;</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getLastTxnEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>vlsnIndex</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>().</color><color=#a6e22e>getLastTxnEnd</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>savedRange</color><color=#f8f8f2>.</color><color=#a6e22e>getLastTxnEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Save the last range so the lastTxnEnd value can continue to be available, and null out the</color>
<color=#75715e>     * vlsnIndex.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>closeVLSNIndex</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>checkpointed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>vlsnIndex</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>checkpointed</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>savedRange</color> <color=#f92672>=</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>vlsnIndex</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Save the last range so the lastTxnEnd value can continue to be available, and null out the</color>
<color=#75715e>     * vlsnIndex.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>abnormalCloseVLSNIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>vlsnIndex</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>abnormalClose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>savedRange</color> <color=#f92672>=</color> <color=#f8f8f2>vlsnIndex</color><color=#f8f8f2>.</color><color=#a6e22e>getRange</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>vlsnIndex</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks that writing records with a TTL is allowed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if any node in the group is less than JE_TTL_VERSION.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkTTLAvailable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isTTLAvailable</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>requiredJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>getMinJEVersion</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>setMinJEVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>requiredJEVersion</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>isTTLAvailable</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>MinJEVersionUnsupportedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeVersion</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"TTL is not currently supported."</color>
                <color=#f92672>+</color> <color=#e6db74>" The version running on node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeName</color>
                <color=#f92672>+</color> <color=#e6db74>" could not be determined,"</color>
                <color=#f92672>+</color> <color=#e6db74>" but this feature requires version "</color>
                <color=#f92672>+</color> <color=#f8f8f2>requiredJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getNumericVersionString</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" or later."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"TTL is not currently supported."</color>
              <color=#f92672>+</color> <color=#e6db74>" Node "</color>
              <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeName</color>
              <color=#f92672>+</color> <color=#e6db74>" is running version "</color>
              <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getNumericVersionString</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>", but this feature requires version "</color>
              <color=#f92672>+</color> <color=#f8f8f2>requiredJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getNumericVersionString</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" or later."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Recovery encountered a RestoreRequired marker. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>handleRestoreRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>RestoreRequired</color> <color=#f8f8f2>restoreRequired</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>restoreRequired</color><color=#f8f8f2>.</color><color=#a6e22e>getFailureType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>NETWORK_RESTORE</color><color=#f8f8f2>:</color>
        <color=#75715e>/*</color>
<color=#75715e>         * A network restore must be done to get a coherent copy of</color>
<color=#75715e>         * the log files into this environment's directory.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InsufficientLogException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>restoreRequired</color><color=#f8f8f2>.</color><color=#a6e22e>getProperties</color><color=#f8f8f2>(),</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>HELPER_HOSTS</color><color=#f8f8f2>));</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#75715e>/* Not a type we can handle, go to the default behavior */</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>handleRestoreRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>restoreRequired</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>useArbiter</color><color=#f8f8f2>(</color><color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>allowArbiterAck</color>
              <color=#f92672>&&</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>().</color><color=#a6e22e>getAckGroupSize</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color>
              <color=#f92672>&&</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>().</color><color=#a6e22e>activeAckArbiterCount</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color>
              <color=#f92672>&&</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitDurability</color><color=#f8f8f2>().</color><color=#a6e22e>getReplicaAck</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SIMPLE_MAJORITY</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAuthenticator</color><color=#f8f8f2>(</color><color=#f8f8f2>StreamAuthenticator</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>authenticator</color> <color=#f92672>=</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StreamAuthenticator</color> <color=#a6e22e>getAuthenticator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>