<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.log</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentFailureReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThread</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sun.nio.file.SensitivityWatchEventModifier</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.file.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>java.nio.file.StandardWatchEventKinds.ENTRY_DELETE</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>java.nio.file.StandardWatchEventKinds.OVERFLOW</color><color=#f8f8f2>;</color>

<color=#66d9ef>class</color> <color=#a6e22e>FileDeletionDetector</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Store the files deleted by JE. It is used to detect unexpected file</color>
<color=#75715e>   * deletion, e.g. log file wrongly deleted by user.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>filesDeletedByJE</color><color=#f8f8f2>;</color>

  <color=#75715e>/* WatchService to monitor directory change. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>WatchService</color> <color=#f8f8f2>fileDeletionWatcher</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Timer to periodically detect unexpected log file deletion. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Timer</color> <color=#f8f8f2>fileDeletionTimer</color><color=#f8f8f2>;</color>

  <color=#75715e>/* TimerTask to be executed by Timer to detect log file deletion. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileDeleteDetectTask</color> <color=#f8f8f2>fileDeletionTask</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to check whether "mv" action happens.</color>
<color=#75715e>   *</color>
<color=#75715e>   * If we register "folder" to WatchService, and if we execute "mv folder</color>
<color=#75715e>   * folder.new", the WatchService can not detect this action. So we check</color>
<color=#75715e>   * whether the corresponding dirs still exist to determine whether "mv"</color>
<color=#75715e>   * action happens.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>WatchKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>fileDeletionWatchKeys</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>FileDeletionDetector</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>filesDeletedByJE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>fileDeletionWatchKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Create the WatchService which monitors the root env</color>
<color=#75715e>     * home or the sub-directories, such as data00N.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileDeletionWatcher</color> <color=#f92672>=</color> <color=#f8f8f2>FileSystems</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>().</color><color=#a6e22e>newWatchService</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Register the root env home or the sub-directories.</color>
<color=#75715e>       *</color>
<color=#75715e>       * If there exist sub-directories, then only sub-</color>
<color=#75715e>       * directories contain .jdb files, so we only register</color>
<color=#75715e>       * sub-directories. Otherwise, we only register the</color>
<color=#75715e>       * root env home.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Here, we do not use Files.walkFileTree(</color>
<color=#75715e>       * Path, FileVisitor). This is because this method will</color>
<color=#75715e>       * check every entry(file or directory) under the root</color>
<color=#75715e>       * path. The following scenario may happen(</color>
<color=#75715e>       * com.sleepycat.je.MultiProcessWriteTest.</color>
<color=#75715e>       * testMultiEnvWrite):</color>
<color=#75715e>       * 1. One thread is closing env</color>
<color=#75715e>       * 2. The second thread wants to register the env home dir</color>
<color=#75715e>       * 3. In the second thread, Files.walkFileTree() finds</color>
<color=#75715e>       *    that je.info.0.lck, which is actually used by</color>
<color=#75715e>       *    the first thread</color>
<color=#75715e>       * 4. When Files.walkFileTree() wants to further check</color>
<color=#75715e>       *    the attribute of je.info.0.lck, je.info.0.lck can</color>
<color=#75715e>       *    not be found because the first thread have closed</color>
<color=#75715e>       *    the env.</color>
<color=#75715e>       *</color>
<color=#75715e>       * In a word, Files.walkFileTree may check more un-related</color>
<color=#75715e>       * files to cause unexpected Exception.</color>
<color=#75715e>       *</color>
<color=#75715e>       * On AIX, the deletion detect has an about 4</color>
<color=#75715e>       * seconds delay, i.e. there is a 4 seconds delay from</color>
<color=#75715e>       * file deletion to deletion detect. We use</color>
<color=#75715e>       * SensitivityWatchEventModifier.HIGH to resolve this.</color>
<color=#75715e>       *</color>
<color=#75715e>       * In addition, when directly deleting a directory which</color>
<color=#75715e>       * contains some files on AIX, WatchService can only</color>
<color=#75715e>       * detect directory-deletion event, but ignore the</color>
<color=#75715e>       * file-deletion event. So for AIX, if a directory is</color>
<color=#75715e>       * unexpected deleted, the current method can not handle</color>
<color=#75715e>       * it.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbEnvDataDirs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>f</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbEnvDataDirs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>WatchKey</color> <color=#f8f8f2>key</color> <color=#f92672>=</color>
              <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>toPath</color><color=#f8f8f2>()</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color>
                      <color=#f8f8f2>fileDeletionWatcher</color><color=#f8f8f2>,</color>
                      <color=#66d9ef>new</color> <color=#f8f8f2>WatchEvent</color><color=#f8f8f2>.</color><color=#a6e22e>Kind</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>ENTRY_DELETE</color><color=#f8f8f2>},</color>
                      <color=#f8f8f2>SensitivityWatchEventModifier</color><color=#f8f8f2>.</color><color=#a6e22e>HIGH</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>fileDeletionWatchKeys</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>f</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>WatchKey</color> <color=#f8f8f2>key</color> <color=#f92672>=</color>
            <color=#f8f8f2>dbEnvHome</color>
                <color=#f8f8f2>.</color><color=#a6e22e>toPath</color><color=#f8f8f2>()</color>
                <color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>fileDeletionWatcher</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>WatchEvent</color><color=#f8f8f2>.</color><color=#a6e22e>Kind</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>ENTRY_DELETE</color><color=#f8f8f2>},</color>
                    <color=#f8f8f2>SensitivityWatchEventModifier</color><color=#f8f8f2>.</color><color=#a6e22e>HIGH</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fileDeletionWatchKeys</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ie</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>UNEXPECTED_EXCEPTION</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Can not register "</color> <color=#f92672>+</color> <color=#f8f8f2>dbEnvHome</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" or its sub-directories to WatchService."</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>ie</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>interval</color> <color=#f92672>=</color>
        <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_DETECT_FILE_DELETE_INTERVAL</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Periodically detect unexpected log file deletion. */</color>
    <color=#f8f8f2>fileDeletionTimer</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Timer</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>makeDaemonThreadName</color><color=#f8f8f2>(</color><color=#f8f8f2>Environment</color><color=#f8f8f2>.</color><color=#a6e22e>FILE_DELETION_DETECTOR_NAME</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>fileDeletionTask</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileDeleteDetectTask</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>fileDeletionTimer</color><color=#f8f8f2>.</color><color=#a6e22e>schedule</color><color=#f8f8f2>(</color><color=#f8f8f2>fileDeletionTask</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>interval</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>FileDeleteDetectTask</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TimerTask</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>processLogFileDeleteEvents</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Log file is deleted unexpectedly. We have already</color>
<color=#75715e>         * invalidated the environment. Here we just close</color>
<color=#75715e>         * the Timer, TimerTask and the WatchService. Do this</color>
<color=#75715e>         * in finally block.</color>
<color=#75715e>         */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * It is possible that processLogFileDeleteEvents is doing</color>
<color=#75715e>         * something on WatchService when FileManager.close call</color>
<color=#75715e>         * WatchService.close. Then processLogFileDeleteEvents may</color>
<color=#75715e>         * throw Exception, such as IOException or</color>
<color=#75715e>         * java.nio.file.ClosedWatchServiceException. For this</color>
<color=#75715e>         * situation, we just ignore the Exception and close</color>
<color=#75715e>         * the Timer, TimerTask and the WatchService in finally</color>
<color=#75715e>         * block. The close may be redundant, but for these close</color>
<color=#75715e>         * method, the second and subsequent calls have no effect.</color>
<color=#75715e>         *</color>
<color=#75715e>         * If the Exception is not caused by the WatchService.close</color>
<color=#75715e>         * in FileManager.close, then some ugly things happen. We</color>
<color=#75715e>         * should handle the Exception by method which is similar</color>
<color=#75715e>         * to StoppableThread.handleUncaughtException.</color>
<color=#75715e>         *</color>
<color=#75715e>         * !envImpl.isClosing represents that FileManager is not</color>
<color=#75715e>         * closing. requestShutdownDaemons sets envImpl.isClosing</color>
<color=#75715e>         * to be true and requestShutdownDaemons happens before</color>
<color=#75715e>         * FileManager.close.</color>
<color=#75715e>         *</color>
<color=#75715e>         * envImpl.isValid represents that the current env is valid.</color>
<color=#75715e>         * If the evn is invalid, then some other place has already</color>
<color=#75715e>         * invalidate the env, so here we do not need to invalidate</color>
<color=#75715e>         * the env again.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isClosing</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>handleUnexpectedThrowable</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Some ugly things happen.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>handleUnexpectedThrowable</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ie</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>handleUnexpectedThrowable</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ie</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>handleUnexpectedThrowable</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StoppableThread</color><color=#f8f8f2>.</color><color=#a6e22e>handleUncaughtException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Detect unexpected log file deletion.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processLogFileDeleteEvents</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * We may register multi-directories to the WatchService,</color>
<color=#75715e>     * there may be multi WatchKey for this WatchService. It is</color>
<color=#75715e>     * possible that file deletion happen in these multi directories</color>
<color=#75715e>     * simultaneously, i.e. multi WatchKey may be non-null.</color>
<color=#75715e>     * We should handle them all.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>WatchKey</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>fileDeletionWatcher</color><color=#f8f8f2>.</color><color=#a6e22e>poll</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If no event is detected, we check whether the directories</color>
<color=#75715e>         * corresponding to the WatchKeys still exist.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileDeletionWatchKeys</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dir</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getCanonicalPath</color><color=#f8f8f2>();</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Directory "</color> <color=#f92672>+</color> <color=#f8f8f2>dir</color> <color=#f92672>+</color> <color=#e6db74>" does not exist now. "</color> <color=#f92672>+</color> <color=#e6db74>"Something abnormal may happen."</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>WatchEvent</color><color=#f92672><?></color> <color=#f8f8f2>event</color> <color=#f8f8f2>:</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>pollEvents</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>WatchEvent</color><color=#f8f8f2>.</color><color=#a6e22e>Kind</color> <color=#f8f8f2>kind</color> <color=#f92672>=</color> <color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>kind</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>kind</color> <color=#f92672>==</color> <color=#f8f8f2>OVERFLOW</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Get the file name from the context. */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>WatchEvent</color><color=#f92672><</color><color=#f8f8f2>Path</color><color=#f92672>></color> <color=#f8f8f2>ev</color> <color=#f92672>=</color> <color=#f8f8f2>cast</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color> <color=#f92672>=</color> <color=#f8f8f2>ev</color><color=#f8f8f2>.</color><color=#a6e22e>context</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>FileManager</color><color=#f8f8f2>.</color><color=#a6e22e>JE_SUFFIX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>filesDeletedByJE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>filesDeletedByJE</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#75715e>/* TimerTask.run will handle this exception. */</color>
              <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_UNEXPECTED_FILE_DELETION</color><color=#f8f8f2>,</color>
                  <color=#e6db74>"Log file "</color> <color=#f92672>+</color> <color=#f8f8f2>fileName</color> <color=#f92672>+</color> <color=#e6db74>" was deleted unexpectedly."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>filesDeletedByJE</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If key.reset returns false, it indicates that the key</color>
<color=#75715e>         * is no longer valid. Invalid state happens when one of</color>
<color=#75715e>         * the following events occurs:</color>
<color=#75715e>         * 1. The process explicitly cancels the key by using the</color>
<color=#75715e>         *    cancel method. --- The JE code never does this.</color>
<color=#75715e>         * 2. The directory becomes inaccessible.  -- This indicates</color>
<color=#75715e>         *    an abnormal situation.</color>
<color=#75715e>         * 3. The watch service is closed. -- The close may be</color>
<color=#75715e>         *    expected, e.g. caused by WatchService.close. The</color>
<color=#75715e>         *    exception caused by this can be handled in</color>
<color=#75715e>         *    FileDeleteDetectTask.run.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dir</color> <color=#f92672>=</color> <color=#f8f8f2>fileDeletionWatchKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>).</color><color=#a6e22e>getCanonicalPath</color><color=#f8f8f2>();</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Watch Key corresponding to "</color>
                <color=#f92672>+</color> <color=#f8f8f2>dir</color>
                <color=#f92672>+</color> <color=#e6db74>" return false "</color>
                <color=#f92672>+</color> <color=#e6db74>"when reset. Something abnormal may happen."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>addDeletedFile</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>filesDeletedByJE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>filesDeletedByJE</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>fileDeletionTask</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>fileDeletionTimer</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileDeletionWatcher</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fileDeletionWatcher</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>WatchEvent</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>cast</color><color=#f8f8f2>(</color><color=#f8f8f2>WatchEvent</color><color=#f92672><?></color> <color=#f8f8f2>event</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>WatchEvent</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color><color=#f8f8f2>)</color> <color=#f8f8f2>event</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>