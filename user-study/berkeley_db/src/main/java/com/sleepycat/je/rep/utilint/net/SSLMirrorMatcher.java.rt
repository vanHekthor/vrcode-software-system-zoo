<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationSSLConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.InstanceContext</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.InstanceLogger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.InstanceParams</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.net.ssl.SSLPeerUnverifiedException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.net.ssl.SSLSession</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.security.auth.x500.X500Principal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.KeyStore</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.KeyStoreException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.Principal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.cert.Certificate</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.cert.X509Certificate</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Enumeration</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>java.util.logging.Level.INFO</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Common base class for mirror comparisons. Supports both authenticator and host verifier</color>
<color=#75715e> * implementations.</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>SSLMirrorMatcher</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The Principal that represents us when in the expected peer's ssl mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Principal</color> <color=#f8f8f2>ourPrincipal</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>InstanceLogger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Construct an SSLMirrorMatcher</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param params The instantiation parameters.</color>
<color=#75715e>   * @param clientMode set to true if the matcher will be evaluated as a client that has a server as</color>
<color=#75715e>   *     a peer, or false if it will be evaluated as a server that has received a connection from a</color>
<color=#75715e>   *     client.</color>
<color=#75715e>   * @throws IllegalArgumentException if the instance cannot be created due to a problem related to</color>
<color=#75715e>   *     the input parameters</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SSLMirrorMatcher</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceParams</color> <color=#f8f8f2>params</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clientMode</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ourPrincipal</color> <color=#f92672>=</color> <color=#f8f8f2>determinePrincipal</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>clientMode</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ourPrincipal</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Unable to determine a local principal for comparison "</color> <color=#f92672>+</color> <color=#e6db74>"with peer principals"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>().</color><color=#a6e22e>getLoggerFactory</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks whether the SSL session peer's certificate DN matches our own.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param sslSession the SSL session that has been established with a peer</color>
<color=#75715e>   * @return true if the peer's certificate DN matches ours</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>peerMatches</color><color=#f8f8f2>(</color><color=#f8f8f2>SSLSession</color> <color=#f8f8f2>sslSession</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ourPrincipal</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Get the peer principal, which should also be an X500Principal.</color>
<color=#75715e>     * We validate that here.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Principal</color> <color=#f8f8f2>peerPrincipal</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>peerPrincipal</color> <color=#f92672>=</color> <color=#f8f8f2>sslSession</color><color=#f8f8f2>.</color><color=#a6e22e>getPeerPrincipal</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>SSLPeerUnverifiedException</color> <color=#f8f8f2>pue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>peerPrincipal</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>peerPrincipal</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>X500Principal</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Unable to attempt peer validation - peer Principal is: "</color> <color=#f92672>+</color> <color=#f8f8f2>peerPrincipal</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ourPrincipal</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>peerPrincipal</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Attempt to determine the Principal that we take on when connecting in client or server context</color>
<color=#75715e>   * based on the ReplicationNetworkConfig. If we are unable to determine that principal, return</color>
<color=#75715e>   * null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Principal</color> <color=#a6e22e>determinePrincipal</color><color=#f8f8f2>(</color><color=#f8f8f2>InstanceContext</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clientMode</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationSSLConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNetConfig</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine what alias would be used.  It is allowable for this to be</color>
<color=#75715e>     * null.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>aliasProp</color> <color=#f92672>=</color> <color=#f8f8f2>clientMode</color> <color=#f92672>?</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLClientKeyAlias</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSSLServerKeyAlias</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>KeyStore</color> <color=#f8f8f2>keyStore</color> <color=#f92672>=</color> <color=#f8f8f2>SSLChannelFactory</color><color=#f8f8f2>.</color><color=#a6e22e>readKeyStore</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>aliasProp</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>aliasProp</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Since we weren't told which one to use, there better be</color>
<color=#75715e>       * only one option, or this might behave unexpectedly. */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyStore</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"KeyStore is empty"</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyStore</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>INFO</color><color=#f8f8f2>,</color>
              <color=#e6db74>"KeyStore has multiple entries but no "</color>
                  <color=#f92672>+</color> <color=#e6db74>"alias was specified.  Using the first one "</color>
                  <color=#f92672>+</color> <color=#e6db74>"available."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Enumeration</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>keyStore</color><color=#f8f8f2>.</color><color=#a6e22e>aliases</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>aliasProp</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nextElement</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyStoreException</color> <color=#f8f8f2>kse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Error accessing aliases from the keystore"</color><color=#f8f8f2>,</color> <color=#f8f8f2>kse</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Certificate</color> <color=#f8f8f2>cert</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cert</color> <color=#f92672>=</color> <color=#f8f8f2>keyStore</color><color=#f8f8f2>.</color><color=#a6e22e>getCertificate</color><color=#f8f8f2>(</color><color=#f8f8f2>aliasProp</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyStoreException</color> <color=#f8f8f2>kse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Shouldn't be possible */</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Error accessing certificate with alias "</color> <color=#f92672>+</color> <color=#f8f8f2>aliasProp</color> <color=#f92672>+</color> <color=#e6db74>" from the keystore"</color><color=#f8f8f2>,</color> <color=#f8f8f2>kse</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cert</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"No certificate for alias "</color> <color=#f92672>+</color> <color=#f8f8f2>aliasProp</color> <color=#f92672>+</color> <color=#e6db74>" found in KeyStore"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to find a certificate in the keystore"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>cert</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>X509Certificate</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"The certificate for alias "</color> <color=#f92672>+</color> <color=#f8f8f2>aliasProp</color> <color=#f92672>+</color> <color=#e6db74>" is not an X509Certificate."</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to find a valid certificate in the keystore"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>X509Certificate</color> <color=#f8f8f2>x509Cert</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>X509Certificate</color><color=#f8f8f2>)</color> <color=#f8f8f2>cert</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>x509Cert</color><color=#f8f8f2>.</color><color=#a6e22e>getSubjectX500Principal</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>