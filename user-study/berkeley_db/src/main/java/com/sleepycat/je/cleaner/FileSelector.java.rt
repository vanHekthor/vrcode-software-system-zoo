<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.cleaner</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseId</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.Pair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/** Keeps track of the status of files for which cleaning is in progress. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>FileSelector</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Each file for which cleaning is in progress has one of the following status values. Files</color>
<color=#75715e>   * numbers migrate from one status to another, in the order declared below.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>enum</color> <color=#f8f8f2>FileStatus</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A file's status is initially TO_BE_CLEANED when it is selected as part of a batch of files</color>
<color=#75715e>     * that, when deleted, will bring total utilization down to the minimum configured value. All</color>
<color=#75715e>     * files with this status will be cleaned in lowest-cost-to-clean order. For two files of equal</color>
<color=#75715e>     * cost to clean, the lower numbered (oldest) files is selected; this is why the fileInfoMap is</color>
<color=#75715e>     * sorted by key (file number).</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>TO_BE_CLEANED</color><color=#f8f8f2>,</color>

    <color=#75715e>/**</color>
<color=#75715e>     * When a TO_BE_CLEANED file is selected for processing by FileProcessor, it is moved to the</color>
<color=#75715e>     * BEING_CLEANED status. This distinction is used to prevent a file from being processed by more</color>
<color=#75715e>     * than one thread.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>BEING_CLEANED</color><color=#f8f8f2>,</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A file is moved to the CLEANED status when all its log entries have been read and processed.</color>
<color=#75715e>     * However, entries needing migration will be marked with the BIN entry MIGRATE flag, entries</color>
<color=#75715e>     * that could not be locked will be in the pending LN set, and the DBs that were pending</color>
<color=#75715e>     * deletion will be in the pending DB set.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>CLEANED</color><color=#f8f8f2>,</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A file is moved to the CHECKPOINTED status at the end of a checkpoint if it was CLEANED at</color>
<color=#75715e>     * the beginning of the checkpoint. Because all dirty BINs are flushed during the checkpoints,</color>
<color=#75715e>     * no files in this set will have entries with the MIGRATE flag set. However, some entries may</color>
<color=#75715e>     * be in the pending LN set and some DBs may be in the pending DB set.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>CHECKPOINTED</color><color=#f8f8f2>,</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A file is moved from the CHECKPOINTED status to the FULLY_PROCESSED status when the pending</color>
<color=#75715e>     * LN/DB sets become empty. Since a pending LN was not locked successfully, we don't know its</color>
<color=#75715e>     * original file. But we do know that when no pending LNs are present for any file, all log</color>
<color=#75715e>     * entries in CHECKPOINTED files are either obsolete or have been migrated. Note, however, that</color>
<color=#75715e>     * the parent BINs of the migrated entries may not have been logged yet.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>No special handling is required to coordinate syncing of deferred write databases for</color>
<color=#75715e>     * pending, deferred write LNs, because non-temporary deferred write DBs are always synced</color>
<color=#75715e>     * during checkpoints, and temporary deferred write DBs are not recovered. Note that although DW</color>
<color=#75715e>     * databases are non-txnal, their LNs may be pended because of lock collisions.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>FULLY_PROCESSED</color><color=#f8f8f2>,</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Information about a file being cleaned. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FileInfo</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>FileStatus</color> <color=#f8f8f2>status</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>requiredUtil</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Per-file metadata. */</color>
    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f92672>></color> <color=#f8f8f2>dbIds</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>VLSN</color> <color=#f8f8f2>firstVlsn</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>VLSN</color> <color=#f8f8f2>lastVlsn</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>;</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"status = "</color>
          <color=#f92672>+</color> <color=#f8f8f2>status</color>
          <color=#f92672>+</color> <color=#e6db74>" dbIds = "</color>
          <color=#f92672>+</color> <color=#f8f8f2>dbIds</color>
          <color=#f92672>+</color> <color=#e6db74>" firstVlsn = "</color>
          <color=#f92672>+</color> <color=#f8f8f2>firstVlsn</color>
          <color=#f92672>+</color> <color=#e6db74>" lastVlsn = "</color>
          <color=#f92672>+</color> <color=#f8f8f2>lastVlsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Information about files being cleaned, keyed by file number. The map is sorted by file number</color>
<color=#75715e>   * to clean older files before newer files.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileInfo</color><color=#f92672>></color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Pending LN info, keyed by original LSN. These are LNs that could not be locked, either during</color>
<color=#75715e>   * processing or during migration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>LNInfo</color><color=#f92672>></color> <color=#f8f8f2>pendingLNs</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For processed entries with DBs that are pending deletion, we consider them to be obsolete but</color>
<color=#75715e>   * we store their DatabaseIds in a set. Until the DB deletion is complete, we can't delete the log</color>
<color=#75715e>   * files containing those entries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f92672>></color> <color=#f8f8f2>pendingDBs</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If during a checkpoint there are no pending LNs or DBs added, we can move CLEANED files</color>
<color=#75715e>   * directly to reserved status at the end of the checkpoint. This is an optimization that allows</color>
<color=#75715e>   * deleting files more quickly when possible. In particular this impacts the checkpoint during</color>
<color=#75715e>   * environment close, since no user operations are active during that checkpoint; this</color>
<color=#75715e>   * optimization allows us to delete all cleaned files after the final checkpoint.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>anyPendingDuringCheckpoint</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>FileSelector</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>fileInfoMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeMap</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>pendingLNs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>pendingDBs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the best file that qualifies for cleaning, or null if no file qualifies.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param forceCleaning is true to always select a file, even if its utilization is above the</color>
<color=#75715e>   *     minimum utilization threshold.</color>
<color=#75715e>   * @return {file number, required utilization for 2-pass cleaning}, or null if no file qualifies</color>
<color=#75715e>   *     for cleaning.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#a6e22e>selectFileForCleaning</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>UtilizationCalculator</color> <color=#f8f8f2>calculator</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileSummary</color><color=#f92672>></color> <color=#f8f8f2>fileSummaryMap</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>forceCleaning</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>toBeCleaned</color> <color=#f92672>=</color> <color=#f8f8f2>getToBeCleanedFiles</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>toBeCleaned</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>toBeCleaned</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>().</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>BEING_CLEANED</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>requiredUtil</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>calculator</color><color=#f8f8f2>.</color><color=#a6e22e>getBestFile</color><color=#f8f8f2>(</color><color=#f8f8f2>fileSummaryMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>forceCleaning</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>first</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>requiredUtil</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>second</color><color=#f8f8f2>();</color>

    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>BEING_CLEANED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>requiredUtil</color> <color=#f92672>=</color> <color=#f8f8f2>requiredUtil</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the number of files having the given status. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumberOfFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color> <color=#f8f8f2>status</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>==</color> <color=#f8f8f2>status</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>count</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a sorted set of files having the given status. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>NavigableSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color> <color=#f8f8f2>status</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>NavigableSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>set</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileInfo</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>().</color><color=#a6e22e>status</color> <color=#f92672>==</color> <color=#f8f8f2>status</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>set</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>set</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves a file to a given status, adding the file to the fileInfoMap if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called while synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FileInfo</color> <color=#a6e22e>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInfo</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>=</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>info</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves a collection of files to a given status, adding the files to the fileInfoMap if</color>
<color=#75715e>   * necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called while synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves all files with oldStatus to newStatus.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called while synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color> <color=#f8f8f2>oldStatus</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>==</color> <color=#f8f8f2>oldStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>=</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Asserts that a file has a given status. Should only be called under an assertion to avoid the</color>
<color=#75715e>   * overhead of the method call and synchronization. Always returns true to enable calling it under</color>
<color=#75715e>   * an assertion.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called while synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color> <color=#f8f8f2>expectStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>info</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#e6db74>"Expected "</color> <color=#f92672>+</color> <color=#f8f8f2>expectStatus</color> <color=#f92672>+</color> <color=#e6db74>" but was missing"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>==</color> <color=#f8f8f2>expectStatus</color> <color=#f8f8f2>:</color> <color=#e6db74>"Expected "</color> <color=#f92672>+</color> <color=#f8f8f2>expectStatus</color> <color=#f92672>+</color> <color=#e6db74>" but was "</color> <color=#f92672>+</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>status</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls checkStatus(Long, FileStatus) for a collection of files.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called while synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkStatus</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileStatus</color> <color=#f8f8f2>expectStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>expectStatus</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether the file is in any stage of the cleaning process. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFileCleaningInProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>synchronized</color> <color=#66d9ef>int</color> <color=#a6e22e>getRequiredUtil</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>requiredUtil</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Removes all references to a file. */</color>
  <color=#66d9ef>synchronized</color> <color=#f8f8f2>FileInfo</color> <color=#a6e22e>removeFile</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>budget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>adjustMemoryBudget</color><color=#f8f8f2>(</color><color=#f8f8f2>budget</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbIds</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*newDatabases*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>info</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** When file cleaning is aborted, move the file back from BEING_CLEANED to TO_BE_CLEANED. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>putBackFileForCleaning</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>checkStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>BEING_CLEANED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>TO_BE_CLEANED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>injectFileForCleaning</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isFileCleaningInProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>TO_BE_CLEANED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>requiredUtil</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** When cleaning is complete, move the file from the BEING_CLEANED to CLEANED. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addCleanedFile</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f92672>></color> <color=#f8f8f2>databases</color><color=#f8f8f2>,</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>firstVlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>lastVlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>budget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>checkStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>BEING_CLEANED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>adjustMemoryBudget</color><color=#f8f8f2>(</color><color=#f8f8f2>budget</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbIds</color><color=#f8f8f2>,</color> <color=#f8f8f2>databases</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbIds</color> <color=#f92672>=</color> <color=#f8f8f2>databases</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>firstVlsn</color> <color=#f92672>=</color> <color=#f8f8f2>firstVlsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>lastVlsn</color> <color=#f92672>=</color> <color=#f8f8f2>lastVlsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a read-only copy of TO_BE_CLEANED files that can be accessed without synchronization.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getToBeCleanedFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>TO_BE_CLEANED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of the CLEANED and FULLY_PROCESSED files at the time a checkpoint starts. */</color>
  <color=#66d9ef>synchronized</color> <color=#f8f8f2>CheckpointStartCleanerState</color> <color=#a6e22e>getFilesAtCheckpointStart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>anyPendingDuringCheckpoint</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>pendingLNs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>pendingDBs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>CheckpointStartCleanerState</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>getFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANED</color><color=#f8f8f2>),</color> <color=#f8f8f2>getFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>FULLY_PROCESSED</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether any files are cleaned or fully-processed, meaning that a checkpoint is needed</color>
<color=#75715e>   * before they can be deleted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCheckpointNeeded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNumberOfFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANED</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color>
        <color=#f92672>||</color> <color=#f8f8f2>getNumberOfFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>FULLY_PROCESSED</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When a checkpoint is complete, move the previously CLEANED and FULLY_PROCESSED files to the</color>
<color=#75715e>   * CHECKPOINTED and reserved status. Reserved files are removed from the FileSelector and their</color>
<color=#75715e>   * reserved status is maintained in FileProtector.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return map of {fileNum, FileInfo} for the files whose status was changed to reserved.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileInfo</color><color=#f92672>></color> <color=#a6e22e>updateFilesAtCheckpointEnd</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CheckpointStartCleanerState</color> <color=#f8f8f2>info</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptyMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileInfo</color><color=#f92672>></color> <color=#f8f8f2>reservedFiles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>previouslyCleanedFiles</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getCleanedFiles</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>previouslyProcessedFiles</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getFullyProcessedFiles</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previouslyCleanedFiles</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>checkStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>previouslyCleanedFiles</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANED</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>anyPendingDuringCheckpoint</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>previouslyCleanedFiles</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>CHECKPOINTED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>makeReservedFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>previouslyCleanedFiles</color><color=#f8f8f2>,</color> <color=#f8f8f2>reservedFiles</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previouslyProcessedFiles</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>checkStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>previouslyProcessedFiles</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>FULLY_PROCESSED</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>makeReservedFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>previouslyProcessedFiles</color><color=#f8f8f2>,</color> <color=#f8f8f2>reservedFiles</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>updateProcessedFiles</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>reservedFiles</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>makeReservedFiles</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>safeToDeleteFiles</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileInfo</color><color=#f92672>></color> <color=#f8f8f2>reservedFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>FileProtector</color> <color=#f8f8f2>fileProtector</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getFileProtector</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>memoryBudget</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>file</color> <color=#f8f8f2>:</color> <color=#f8f8f2>safeToDeleteFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>removeFile</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>fileProtector</color><color=#f8f8f2>.</color><color=#a6e22e>reserveFile</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>lastVlsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>reservedFiles</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getUtilizationProfile</color><color=#f8f8f2>().</color><color=#a6e22e>removeFileSummaries</color><color=#f8f8f2>(</color><color=#f8f8f2>safeToDeleteFiles</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds the given LN info to the pending LN set. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addPendingLN</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>logLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LNInfo</color> <color=#f8f8f2>info</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>anyPendingDuringCheckpoint</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>pendingLNs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>logLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map of LNInfo for LNs that could not be migrated in a prior cleaning attempt, or null</color>
<color=#75715e>   * if no LNs are pending.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>LNInfo</color><color=#f92672>></color> <color=#a6e22e>getPendingLNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pendingLNs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>pendingLNs</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Removes the LN for the given LSN from the pending LN set. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>removePendingLN</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>originalLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>pendingLNs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>originalLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>updateProcessedFiles</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns number of LNs pending. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>int</color> <color=#a6e22e>getPendingLNQueueSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>pendingLNs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds the given DatabaseId to the pending DB set. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addPendingDB</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>added</color> <color=#f92672>=</color> <color=#f8f8f2>pendingDBs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>anyPendingDuringCheckpoint</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>added</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an array of DatabaseIds for DBs that were pending deletion in a prior cleaning attempt,</color>
<color=#75715e>   * or null if no DBs are pending.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#f8f8f2>DatabaseId</color><color=#f92672>[]</color> <color=#a6e22e>getPendingDBs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pendingDBs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DatabaseId</color><color=#f92672>[]</color> <color=#f8f8f2>dbs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f92672>[</color><color=#f8f8f2>pendingDBs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>pendingDBs</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#f8f8f2>dbs</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dbs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Removes the DatabaseId from the pending DB set. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>removePendingDB</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>pendingDBs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>updateProcessedFiles</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of the in-progress files, or an empty set if there are none. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>NavigableSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getInProgressFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeSet</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Update memory budgets when the environment is closed and will never be accessed again. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>budget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileInfoMap</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>adjustMemoryBudget</color><color=#f8f8f2>(</color><color=#f8f8f2>budget</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbIds</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*newDatabases*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If there are no pending LNs or DBs outstanding, move the CHECKPOINTED files to FULLY_PROCESSED.</color>
<color=#75715e>   * The check for pending LNs/DBs and the copying of the CHECKPOINTED files must be done atomically</color>
<color=#75715e>   * in a synchronized block. All methods that call this method are synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>updateProcessedFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pendingLNs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>pendingDBs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>CHECKPOINTED</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileStatus</color><color=#f8f8f2>.</color><color=#a6e22e>FULLY_PROCESSED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adjust the memory budget when an entry is added to or removed from the cleanedFilesDatabases</color>
<color=#75715e>   * map.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>adjustMemoryBudget</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>budget</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f92672>></color> <color=#f8f8f2>oldDatabases</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f92672>></color> <color=#f8f8f2>newDatabases</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>adjustMem</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldDatabases</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>adjustMem</color> <color=#f92672>-=</color> <color=#f8f8f2>getCleanedFilesDatabaseEntrySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldDatabases</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newDatabases</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>adjustMem</color> <color=#f92672>+=</color> <color=#f8f8f2>getCleanedFilesDatabaseEntrySize</color><color=#f8f8f2>(</color><color=#f8f8f2>newDatabases</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>budget</color><color=#f8f8f2>.</color><color=#a6e22e>updateAdminMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>adjustMem</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size of a HashMap entry that contains the given set of DatabaseIds. We don't count</color>
<color=#75715e>   * the DatabaseId size because it is likely that it is also stored (and budgeted) in the</color>
<color=#75715e>   * DatabaseImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getCleanedFilesDatabaseEntrySize</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f92672>></color> <color=#f8f8f2>databases</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHMAP_ENTRY_OVERHEAD</color>
        <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHSET_OVERHEAD</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>databases</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHSET_ENTRY_OVERHEAD</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Holds copy of all checkpoint-dependent cleaner state. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>CheckpointStartCleanerState</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* A snapshot of the cleaner collections at the checkpoint start. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>cleanedFiles</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>fullyProcessedFiles</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>CheckpointStartCleanerState</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>cleanedFiles</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>fullyProcessedFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Save snapshots of the collections of various files at the</color>
<color=#75715e>       * beginning of the checkpoint.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cleanedFiles</color> <color=#f92672>=</color> <color=#f8f8f2>cleanedFiles</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fullyProcessedFiles</color> <color=#f92672>=</color> <color=#f8f8f2>fullyProcessedFiles</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>cleanedFiles</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>fullyProcessedFiles</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getCleanedFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cleanedFiles</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getFullyProcessedFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fullyProcessedFiles</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"files = "</color>
        <color=#f92672>+</color> <color=#f8f8f2>fileInfoMap</color>
        <color=#f92672>+</color> <color=#e6db74>" pendingLNs = "</color>
        <color=#f92672>+</color> <color=#f8f8f2>pendingLNs</color>
        <color=#f92672>+</color> <color=#e6db74>" pendingDBs = "</color>
        <color=#f92672>+</color> <color=#f8f8f2>pendingDBs</color>
        <color=#f92672>+</color> <color=#e6db74>" anyPendingDuringCheckpoint = "</color>
        <color=#f92672>+</color> <color=#f8f8f2>anyPendingDuringCheckpoint</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>