<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.tree</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.Evictor</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The base class for the various array representations used by fields associated with an IN node.</color>
<color=#75715e> * Storage efficiency, especially when JE is operating in a "cache full" environment is the prime</color>
<color=#75715e> * motivation for the various representations.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each representation assumes that all read operations are done under a shared latch and all</color>
<color=#75715e> * updates (set, copy and compact) are done under an exclusive latch. As a result, the</color>
<color=#75715e> * representations themselves do not make any provisions for synchronization.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The callers of all the potentially representation mutating methods:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>{@link #set(int, Object, IN)}</color>
<color=#75715e> *   <li>{@link #copy(int, int, int, IN)}</color>
<color=#75715e> *   <li>{@link #compact(IN)}</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * must be careful to save the result value and use it for subsequent operations, since it could</color>
<color=#75715e> * represent the new mutated object.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>INArrayRep</color><color=#f92672><</color><color=#f8f8f2>ARRAY_BASE_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>REP_ENUM_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>ELEMENT_TYPE</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>public</color> <color=#a6e22e>INArrayRep</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/* Returns the type associated with the representation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>REP_ENUM_TYPE</color> <color=#a6e22e>getType</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the array element at idx to the node. The underlying representation can change as a result</color>
<color=#75715e>   * of the set operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param idx the index to be set</color>
<color=#75715e>   * @param e the array elelement at the idx</color>
<color=#75715e>   * @return either this, or the new representation if there was a mutation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>ARRAY_BASE_TYPE</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ELEMENT_TYPE</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Returns the element at idx. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>ELEMENT_TYPE</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Copies n elements at index denoted by "from" to the index denoted by "to". Overlapping copies</color>
<color=#75715e>   * are supported. It's possible that the representation may mutate as a result of the copy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param from the source (inclusive) of the copy</color>
<color=#75715e>   * @param to the target (inclusive) of the copy</color>
<color=#75715e>   * @param n the number of elements to be copied.</color>
<color=#75715e>   * @return either this, or the new representation if there was a mutation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>ARRAY_BASE_TYPE</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Chooses a more compact representation, if that's possible, otherwise does nothing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: This method must not change the memory size of the current representation and</color>
<color=#75715e>   * return 'this', without explicitly adjusting memory usage (via noteRepChange) before returning.</color>
<color=#75715e>   * Returning a new instance is the trigger for adjusting memory usage in the parent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return this or a more compact representation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>ARRAY_BASE_TYPE</color> <color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Changes the capacity, either truncating existing elements at the end if the capacity is</color>
<color=#75715e>   * reduced, or adding empty elements at the end if the capacity is enlarged. The caller guarantees</color>
<color=#75715e>   * that all truncated elements are unused.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>ARRAY_BASE_TYPE</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the current memory size of the underlying representation in bytes. It returns the size</color>
<color=#75715e>   * of the representation, excluding the size of the elements contained in it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the memory size of the representation in bytes</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>long</color> <color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the cache statistics for this representation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param increment true the stat should be incremented, false if it must be decremented</color>
<color=#75715e>   * @param evictor the evictor that shoulds ths stat counters</color>
<color=#75715e>   */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Updates the cache statistics associated with this representation. It should be invoked upon</color>
<color=#75715e>   * every creation, every rep change and finally when the IN node is decached.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param increment true if the stat is to be incremented, false if it is to be decremented</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* If the IN is not in the cache don't accumulate stats for it. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>updateCacheStats</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs the bookkeeping associated with a representation change. It accounts for the change in</color>
<color=#75715e>   * storage and adjusts the cache statistics.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newRep the new representation that is replacing this one.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>noteRepChange</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>INArrayRep</color><color=#f92672><</color><color=#f8f8f2>ARRAY_BASE_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>REP_ENUM_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>ELEMENT_TYPE</color><color=#f92672>></color> <color=#f8f8f2>newRep</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Only true in unit tests. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>newRep</color><color=#f8f8f2>.</color><color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>calculateMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>newRep</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>