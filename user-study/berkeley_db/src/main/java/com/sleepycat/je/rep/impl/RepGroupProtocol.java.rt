<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Defines the protocol used in support of group membership.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>API to Master ENSURE_NODE -> ENSURE_OK | FAIL REMOVE_MEMBER -> OK | FAIL TRANSFER_MASTER -></color>
<color=#75715e> * TRANSFER_OK | FAIL DELETE_MEMBER -> OK | FAIL</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Monitor to Master GROUP_REQ -> GROUP | FAIL</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RepGroupProtocol</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TextProtocol</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** The current protocol version. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERSION</color> <color=#f92672>=</color> <color=#e6db74>"4"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The protocol version introduced to support RepGroupImpl version 3. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>REP_GROUP_V3_VERSION</color> <color=#f92672>=</color> <color=#e6db74>"4"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The protocol version used with RepGroupImpl version 2. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>REP_GROUP_V2_VERSION</color> <color=#f92672>=</color> <color=#e6db74>"3"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Used during testing: A non-null value overrides the actual protocol version. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>String</color> <color=#f8f8f2>testCurrentVersion</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>FailReason</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DEFAULT</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>MEMBER_NOT_FOUND</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>IS_MASTER</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>IS_REPLICA</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>TRANSFER_FAIL</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>MEMBER_ACTIVE</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* The messages defined by this class. */</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>ENSURE_NODE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"ENREQ"</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnsureNode</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>ENSURE_OK</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"ENRESP"</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnsureOK</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>REMOVE_MEMBER</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"RMREQ"</color><color=#f8f8f2>,</color> <color=#f8f8f2>RemoveMember</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>GROUP_REQ</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"GREQ"</color><color=#f8f8f2>,</color> <color=#f8f8f2>GroupRequest</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>GROUP_RESP</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"GRESP"</color><color=#f8f8f2>,</color> <color=#f8f8f2>GroupResponse</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>RGFAIL_RESP</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"GRFAIL"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Fail</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>UPDATE_ADDRESS</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"UPDADDR"</color><color=#f8f8f2>,</color> <color=#f8f8f2>UpdateAddress</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>TRANSFER_MASTER</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"TMASTER"</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransferMaster</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>TRANSFER_OK</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"TMRESP"</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransferOK</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MessageOp</color> <color=#f8f8f2>DELETE_MEMBER</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f8f8f2>(</color><color=#e6db74>"DLREQ"</color><color=#f8f8f2>,</color> <color=#f8f8f2>DeleteMember</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Creates an instance of this class using the current protocol version. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>RepGroupProtocol</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>getCurrentVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Creates an instance of this class using the specified protocol version. */</color>
  <color=#f8f8f2>RepGroupProtocol</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>version</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>version</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>initializeMessageOps</color><color=#f8f8f2>(</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>MessageOp</color><color=#f92672>[]</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ENSURE_NODE</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>ENSURE_OK</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>REMOVE_MEMBER</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>GROUP_REQ</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>GROUP_RESP</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>RGFAIL_RESP</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>UPDATE_ADDRESS</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>TRANSFER_MASTER</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>TRANSFER_OK</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>DELETE_MEMBER</color>
        <color=#f8f8f2>});</color>

    <color=#f8f8f2>setTimeouts</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_GROUP_OPEN_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_GROUP_READ_TIMEOUT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get the current version, supporting a test override. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getCurrentVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>testCurrentVersion</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>testCurrentVersion</color> <color=#f8f8f2>:</color> <color=#f8f8f2>VERSION</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the current version to a different value, for testing. Specifying {@code null} reverts to</color>
<color=#75715e>   * the standard value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setTestVersion</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>testVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>testCurrentVersion</color> <color=#f92672>=</color> <color=#f8f8f2>testVersion</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the RepGroupImpl format version to use for the specified RepGroupProtocol version. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getGroupFormatVersion</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>protocolVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>parseDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>protocolVersion</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>parseDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>REP_GROUP_V2_VERSION</color><color=#f8f8f2>))</color>
        <color=#f92672>?</color> <color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>FORMAT_VERSION_2</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_FORMAT_VERSION</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>CommonRequest</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>CommonRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nodeName</color> <color=#f92672>=</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>CommonRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nodeName</color> <color=#f92672>=</color> <color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessagePrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>messagePrefixNocheck</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>wireFormatPrefix</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color> <color=#f92672>+</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getNodeName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RemoveMember</color> <color=#66d9ef>extends</color> <color=#f8f8f2>CommonRequest</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>public</color> <color=#a6e22e>RemoveMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>RemoveMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>REMOVE_MEMBER</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Like RemoveMember, but also deletes the node's entry from the rep group DB. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DeleteMember</color> <color=#66d9ef>extends</color> <color=#f8f8f2>CommonRequest</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>public</color> <color=#a6e22e>DeleteMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>DeleteMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DELETE_MEMBER</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TransferMaster</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nodeNameList</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>force</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>TransferMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeNameList</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>force</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nodeNameList</color> <color=#f92672>=</color> <color=#f8f8f2>nodeNameList</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>force</color> <color=#f92672>=</color> <color=#f8f8f2>force</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>TransferMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nodeNameList</color> <color=#f92672>=</color> <color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>());</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>force</color> <color=#f92672>=</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>parseBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>wireFormatPrefix</color><color=#f8f8f2>()</color>
          <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color>
          <color=#f92672>+</color> <color=#f8f8f2>nodeNameList</color>
          <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color>
          <color=#f92672>+</color> <color=#f8f8f2>timeout</color>
          <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color>
          <color=#f92672>+</color> <color=#f8f8f2>force</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>TRANSFER_MASTER</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getNodeNameList</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nodeNameList</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getForceFlag</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>force</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>GroupRequest</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#a6e22e>GroupRequest</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>GroupRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>GROUP_REQ</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessagePrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>messagePrefixNocheck</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>wireFormatPrefix</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>UpdateAddress</color> <color=#66d9ef>extends</color> <color=#f8f8f2>CommonRequest</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newHostName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>UpdateAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newHostName</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>newHostName</color> <color=#f92672>=</color> <color=#f8f8f2>newHostName</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>newPort</color> <color=#f92672>=</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>UpdateAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>requestLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>newHostName</color> <color=#f92672>=</color> <color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>newPort</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>UPDATE_ADDRESS</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getNewHostName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newHostName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNewPort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color> <color=#f92672>+</color> <color=#f8f8f2>newHostName</color> <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color> <color=#f92672>+</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EnsureNode</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>EnsureNode</color><color=#f8f8f2>(</color><color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isMonitor</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>node</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>EnsureNode</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>node</color> <color=#f92672>=</color>
          <color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>hexDeserializeNode</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getGroupFormatVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>sendVersion</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>RepNodeImpl</color> <color=#a6e22e>getNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ENSURE_NODE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessagePrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>messagePrefixNocheck</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>wireFormatPrefix</color><color=#f8f8f2>()</color>
          <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color>
          <color=#f92672>+</color> <color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>serializeHex</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>getGroupFormatVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>sendVersion</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EnsureOK</color> <color=#66d9ef>extends</color> <color=#f8f8f2>OK</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>EnsureOK</color><color=#f8f8f2>(</color><color=#f8f8f2>EnsureNode</color> <color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>EnsureOK</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nameIdPair</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getNameIdPair</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ENSURE_OK</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>wireFormatPrefix</color><color=#f8f8f2>()</color>
          <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color>
          <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
          <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color>
          <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TransferOK</color> <color=#66d9ef>extends</color> <color=#f8f8f2>OK</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>winner</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>TransferOK</color><color=#f8f8f2>(</color><color=#f8f8f2>TransferMaster</color> <color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>winner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>winner</color> <color=#f92672>=</color> <color=#f8f8f2>winner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>TransferOK</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>winner</color> <color=#f92672>=</color> <color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getWinner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>winner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>TRANSFER_OK</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>wireFormatPrefix</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color> <color=#f92672>+</color> <color=#f8f8f2>winner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>GroupResponse</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ResponseMessage</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>group</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>GroupResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>GroupRequest</color> <color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>group</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>group</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>GroupResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>group</color> <color=#f92672>=</color> <color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>deserializeHex</color><color=#f8f8f2>(</color><color=#f8f8f2>tokens</color><color=#f8f8f2>,</color> <color=#f8f8f2>getCurrentTokenPosition</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>RepGroupImpl</color> <color=#a6e22e>getGroup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>group</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>GROUP_RESP</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessagePrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>messagePrefixNocheck</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Use the requested group version, unless it is newer than the</color>
<color=#75715e>       * current group version.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>groupFormatVersion</color> <color=#f92672>=</color> <color=#f8f8f2>getGroupFormatVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>sendVersion</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getFormatVersion</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>groupFormatVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>groupFormatVersion</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getFormatVersion</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>wireFormatPrefix</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color> <color=#f92672>+</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>serializeHex</color><color=#f8f8f2>(</color><color=#f8f8f2>groupFormatVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Extends the class Fail, adding a reason code to distinguish amongst different types of</color>
<color=#75715e>   * failures.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Fail</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TextProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>Fail</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FailReason</color> <color=#f8f8f2>reason</color><color=#f8f8f2>;</color>

    <color=#75715e>/** Create a failure response that is not related to a specific request. */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Fail</color><color=#f8f8f2>(</color><color=#f8f8f2>FailReason</color> <color=#f8f8f2>reason</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>reason</color> <color=#f92672>=</color> <color=#f8f8f2>reason</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Fail</color><color=#f8f8f2>(</color><color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>FailReason</color> <color=#f8f8f2>reason</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>reason</color> <color=#f92672>=</color> <color=#f8f8f2>reason</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Fail</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InvalidMessageException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#f8f8f2>FailReason</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPayloadToken</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>MessageOp</color> <color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>RGFAIL_RESP</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>wireFormat</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>SEPARATOR</color> <color=#f92672>+</color> <color=#f8f8f2>reason</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>FailReason</color> <color=#a6e22e>getReason</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>reason</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>