<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.latch</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Provides exclusive (mutex-like) latching. This is implemented with Java's ReentrantLock, which is</color>
<color=#75715e> * extended for a few reasons: 1) To prevent reentrant use, since latches are not used reentrantly</color>
<color=#75715e> * in JE. This increases reliability by detecting accidental reentrant calls. Checks for reentrancy</color>
<color=#75715e> * are unconditional, i.e., checked in production. 2) To support instrumentation for debugging (see</color>
<color=#75715e> * LatchSupport). 3) Automatic use of configured latch timeout. 4) Built-in thread interrupt</color>
<color=#75715e> * handling.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Latches are expected to be held for short, defined periods of time. No deadlock detection is</color>
<color=#75715e> * provided so it is the caller's responsibility to sequence latch acquisition in an ordered fashion</color>
<color=#75715e> * to avoid deadlocks.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>Latch</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Acquires a latch for exclusive/write access.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if the latch is already held by the calling thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Acquires a latch for exclusive/write access, but do not block if it's not available.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the latch was acquired, false if it is not available.</color>
<color=#75715e>   * @throws EnvironmentFailureException if the latch is already held by the calling thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>acquireExclusiveNoWait</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Releases the latch. If there are other thread(s) waiting for the latch, they are woken up and</color>
<color=#75715e>   * granted the latch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if the latch is not currently held.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>release</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Releases the latch. If there are other thread(s) waiting for the latch, one is woken up and</color>
<color=#75715e>   * granted the latch. If the latch was not owned by the caller, just return.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>releaseIfOwner</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the current thread holds this latch. For an exclusive latch, is equivalent to</color>
<color=#75715e>   * calling {@link #isExclusiveOwner()}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isOwner</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Returns true if the current thread holds this latch for exclusive/write access. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isExclusiveOwner</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Returns the thread that currently holds the latch for exclusive access. */</color>
  <color=#f8f8f2>Thread</color> <color=#a6e22e>getExclusiveOwner</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Returns an estimate of the number of threads waiting. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getNWaiters</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a stats group with information about this latch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if stats were not requested when the latch was created. See</color>
<color=#75715e>   *     LatchFactory.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getStats</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Resets collected stat values to zero.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if stats were not requested when the latch was created. See</color>
<color=#75715e>   *     LatchFactory.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>clearStats</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Returns the latch name and exclusive owner info. */</color>
  <color=#a6e22e>@Override</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Returns the same information as {@link #toString()} plus all known debug info. */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>debugString</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>