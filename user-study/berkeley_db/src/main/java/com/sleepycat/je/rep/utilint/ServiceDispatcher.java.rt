<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.RequestMessage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.ResponseMessage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription.ServerAuthMethod</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription.StreamAuthenticator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceHandshake.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThread</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThreadFactory</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.BlockingQueue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.ConcurrentHashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.ExecutorService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.Executors</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * ServiceDispatcher listens on a specific socket for service requests and dispatches control to the</color>
<color=#75715e> * service that is being requested. A service request message has the format:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Service:<one byte ServiceName.length><ServiceName></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The format of the message is binary, with all text being encoded in ascii.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Upon receipt of service request message, the new SocketChannel is queued for processing by the</color>
<color=#75715e> * service in the Queue associated with the service. The SocketChannel is the responsibility of the</color>
<color=#75715e> * service after this point. It can configure the channel to best suit the requirements of the</color>
<color=#75715e> * specific service.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The dispatcher returns a single byte to indicate success or failure. The byte value encodes a</color>
<color=#75715e> * ServiceDispatcher.Response enumerator.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ServiceDispatcher</color> <color=#66d9ef>extends</color> <color=#f8f8f2>StoppableThread</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* The socket on which the dispatcher is listening */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The selector that watches for accept events on the server socket and</color>
<color=#75715e>   * on subsequent read events.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Selector</color> <color=#f8f8f2>selector</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>SelectionKey</color> <color=#f8f8f2>scKey</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The server socket channel */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ServerSocketChannel</color> <color=#f8f8f2>serverChannel</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Determines whether new connections should be accepted. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>processAcceptRequests</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Maintains the error count, used primarily for testing. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>errorCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Maps the service name to the queue of sockets processed by the</color>
<color=#75715e>   * service.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Service</color><color=#f92672>></color> <color=#f8f8f2>serviceMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Service</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#75715e>/* The thread pool used to manage the threads used by services */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ExecutorService</color> <color=#f8f8f2>pool</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A reference to a replicated environment, only used for error</color>
<color=#75715e>   * propagation when this dispatcher has been created for a replicated</color>
<color=#75715e>   * node.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authOptions</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The response to a service request.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do not rearrange the order of the enumerators, since their ordinal values are currently used</color>
<color=#75715e>   * in messages.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>Response</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>OK</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>BUSY</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>FORMAT_ERROR</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>UNKNOWN_SERVICE</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>PROCEED</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>INVALID</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>AUTHENTICATE</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ByteBuffer</color> <color=#a6e22e>byteBuffer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>ordinal</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Response</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>ordinal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ordinal</color> <color=#f92672><</color> <color=#f8f8f2>values</color><color=#f8f8f2>().</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>values</color><color=#f8f8f2>()</color><color=#f92672>[</color><color=#f8f8f2>ordinal</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a ServiceDispatcher listening on a specific socket for service requests. This service</color>
<color=#75715e>   * dispatcher has been created on behalf of a replicated environment, and the node will be</color>
<color=#75715e>   * informed of any unexpected failures seen by the dispatcher.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param socketAddress the socket on which it listens for service requests. This address may be</color>
<color=#75715e>   *     extended to cover all local addresses, if {@link RepParams#BIND_INADDR_ANY} has been set to</color>
<color=#75715e>   *     true.</color>
<color=#75715e>   * @throws IOException if the socket could not be bound.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ServiceDispatcher</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"ServiceDispatcher-"</color> <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>":"</color> <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>());</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>socketAddress</color> <color=#f92672>=</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channelFactory</color> <color=#f92672>=</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>selector</color> <color=#f92672>=</color> <color=#f8f8f2>Selector</color><color=#f8f8f2>.</color><color=#a6e22e>open</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>poolName</color> <color=#f92672>=</color> <color=#e6db74>"ServiceDispatcherPool"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggerFormatterNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>poolName</color> <color=#f92672>+=</color> <color=#e6db74>"_"</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>pool</color> <color=#f92672>=</color> <color=#f8f8f2>Executors</color><color=#f8f8f2>.</color><color=#a6e22e>newCachedThreadPool</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>StoppableThreadFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>poolName</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>formatter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>bindSocket</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>setAuthOptions</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>bindSocket</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>serverChannel</color> <color=#f92672>=</color> <color=#f8f8f2>ServerSocketChannel</color><color=#f8f8f2>.</color><color=#a6e22e>open</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>configureBlocking</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>scKey</color> <color=#f92672>=</color> <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>selector</color><color=#f8f8f2>,</color> <color=#f8f8f2>SelectionKey</color><color=#f8f8f2>.</color><color=#a6e22e>OP_ACCEPT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>ServerSocket</color> <color=#f8f8f2>acceptSocket</color> <color=#f92672>=</color> <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>socket</color><color=#f8f8f2>();</color>
    <color=#75715e>/* No timeout */</color>
    <color=#f8f8f2>acceptSocket</color><color=#f8f8f2>.</color><color=#a6e22e>setSoTimeout</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>bindAddress</color> <color=#f92672>=</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>SO_REUSEADDR</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#75715e>/* Only turn it on if requested. Otherwise let it default. */</color>

        <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>setOption</color><color=#f8f8f2>(</color><color=#f8f8f2>StandardSocketOptions</color><color=#f8f8f2>.</color><color=#a6e22e>SO_REUSEADDR</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>acceptSocket</color><color=#f8f8f2>.</color><color=#a6e22e>setReuseAddress</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>BIND_INADDR_ANY</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bindAddress</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>((</color><color=#f8f8f2>InetAddress</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>limitMs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>SO_BIND_WAIT_MS</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Bind the socket */</color>
    <color=#f8f8f2>BindException</color> <color=#f8f8f2>bindException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>retryWaitMs</color> <color=#f92672>=</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>totalWaitMs</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalWaitMs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>totalWaitMs</color> <color=#f92672><=</color> <color=#f8f8f2>limitMs</color><color=#f8f8f2>;</color> <color=#f8f8f2>totalWaitMs</color> <color=#f92672>+=</color> <color=#f8f8f2>retryWaitMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bindException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>acceptSocket</color><color=#f8f8f2>.</color><color=#a6e22e>bind</color><color=#f8f8f2>(</color><color=#f8f8f2>bindAddress</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>BindException</color> <color=#f8f8f2>be</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bindException</color> <color=#f92672>=</color> <color=#f8f8f2>be</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#f8f8f2>retryWaitMs</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>bindException</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bindException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
          <color=#e6db74>"ServiceDispatcher HostPort="</color>
              <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>":"</color>
              <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" bind failed despite waiting for "</color>
              <color=#f92672>+</color> <color=#f8f8f2>limitMs</color>
              <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>limitMs</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Print information to help identify the process currently</color>
<color=#75715e>         * binding the required port.</color>
<color=#75715e>         */</color>
        <color=#75715e>/* Print all java processes and their args */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exec</color><color=#f8f8f2>(</color><color=#e6db74>"jps"</color><color=#f8f8f2>,</color> <color=#e6db74>"-v"</color><color=#f8f8f2>));</color>
        <color=#75715e>/* Print all processes binding tcp ports. */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exec</color><color=#f8f8f2>(</color><color=#e6db74>"netstat"</color><color=#f8f8f2>,</color> <color=#e6db74>"-lntp"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Failed after retrying. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>bindException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalWaitMs</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
          <color=#e6db74>"ServiceDispatcher HostPort="</color>
              <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>":"</color>
              <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" become available after: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>totalWaitMs</color>
              <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience overloading for when the dispatcher is created without a replicated environment,</color>
<color=#75715e>   * e.g. when used by the Monitor, and in unit test situations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #ServiceDispatcher(InetSocketAddress, RepImpl, DataChannelFactory)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ServiceDispatcher</color><color=#f8f8f2>(</color><color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>socketAddress</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/* repImpl */</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Stop accepting new connections, while the individual services quiesce and shut themselves down.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>processAcceptRequests</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shuts down the dispatcher, so that it's no longer listening for service requests. The port is</color>
<color=#75715e>   * freed up upon return and the thread used to listen on the port is shutdown.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shutdownDone</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
        <color=#e6db74>"ServiceDispatcher shutdown starting. HostPort="</color>
            <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#e6db74>":"</color>
            <color=#f92672>+</color> <color=#f92672>+</color><color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#e6db74>" Registered services: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>shutdownThread</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color> <color=#f8f8f2>:</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Shutdown any executing and queued service requests. */</color>
    <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownNow</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>selector</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Ignoring I/O error during close: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
        <color=#e6db74>"ServiceDispatcher shutdown completed."</color>
            <color=#f92672>+</color> <color=#e6db74>" HostPort="</color>
            <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#e6db74>":"</color>
            <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>initiateSoftShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>selector</color><color=#f8f8f2>.</color><color=#a6e22e>wakeup</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see StoppableThread#getLogger */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Logging interface for use by ServiceHandshake code. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noteError</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>noteError</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>errorCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used by the client to set up a channel for the service. It performs the initial handshake</color>
<color=#75715e>   * requesting the service and interprets the response to determine if it was successful.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param channel the channel that is the basis for the service</color>
<color=#75715e>   * @param serviceName the service running on the channel</color>
<color=#75715e>   * @throws IOException if the output stream could not be established</color>
<color=#75715e>   * @throws ServiceConnectFailedException if the connection could not be made.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>doServiceHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceConnectFailedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>doServiceHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A variation on the method above. It's used by the client to setup a channel for the service. It</color>
<color=#75715e>   * performs the initial handshake requesting the service and interpreting the response to</color>
<color=#75715e>   * determine if it was successful.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param channel the channel that is the basis for the service</color>
<color=#75715e>   * @param serviceName the service running on the channel</color>
<color=#75715e>   * @param authInfo a list of authentication methods supported by the caller.</color>
<color=#75715e>   * @throws ServiceConnectFailedException if the connection could not be made.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>doServiceHandshake</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceConnectFailedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>handshake</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ClientHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteChannelIOAdapter</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>));</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>handshake</color><color=#f8f8f2>.</color><color=#a6e22e>process</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>!=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>OK</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ServiceConnectFailedException</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>response</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the next socketChannel created in response to a request for the service. The</color>
<color=#75715e>   * socketChannel and the associated socket is configured as requested in the arguments.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param serviceName the service for which the channel must be created.</color>
<color=#75715e>   * @param blocking true if the channel must be configured to block</color>
<color=#75715e>   * @param soTimeout the timeout for the underlying socket</color>
<color=#75715e>   * @return the configured channel or null if there are no more channels, because the service has</color>
<color=#75715e>   *     been shut down.</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DataChannel</color> <color=#a6e22e>takeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>blocking</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>soTimeout</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Service</color> <color=#f8f8f2>service</color> <color=#f92672>=</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>service</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color> <color=#f92672>+</color> <color=#e6db74>" was not registered"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>service</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>QueuingService</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color> <color=#f92672>+</color> <color=#e6db74>" is not a queuing service"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Socket</color> <color=#f8f8f2>socket</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>QueuingService</color><color=#f8f8f2>)</color> <color=#f8f8f2>service</color><color=#f8f8f2>).</color><color=#a6e22e>take</color><color=#f8f8f2>();</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>==</color> <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_EOF_MARKER</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* A pseudo channel to indicate EOF, return null */</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>configureBlocking</color><color=#f8f8f2>(</color><color=#f8f8f2>blocking</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>socket</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>socket</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>socket</color><color=#f8f8f2>.</color><color=#a6e22e>setSoTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>soTimeout</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blocking</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Ensure that writes have been flushed.  All message</color>
<color=#75715e>           * exchanges should be complete here, and we don't expect</color>
<color=#75715e>           * there to be any pending writes, but do this here in</color>
<color=#75715e>           * blocking mode to ensure that the writes complete without</color>
<color=#75715e>           * the need for a loop.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Unable to configure channel "</color>
                <color=#f92672>+</color> <color=#e6db74>"for '"</color>
                <color=#f92672>+</color> <color=#f8f8f2>serviceName</color>
                <color=#f92672>+</color> <color=#e6db74>"' service: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Cleanup failed for service: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>serviceName</color>
                  <color=#f92672>+</color> <color=#e6db74>"\n"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e1</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Wait for the next request. */</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the specific socket address associated with the dispatcher. Unlike</color>
<color=#75715e>   * getSocketBoundAddress() it can never return the wild card address INADDR_ANY. This is the</color>
<color=#75715e>   * address used by clients requesting ServiceDispatcher services.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If {@link RepParams#BIND_INADDR_ANY} has been set to true, this is one of the addresses that</color>
<color=#75715e>   * the socket is associated with.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getSocketBoundAddress()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getSocketAddress</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For testing only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Returns the server socket address that was actually used to bind the socket. It's the</color>
<color=#75715e>   * wildcard address INADDR_ANY if the HA config {@link RepParams#BIND_INADDR_ANY} has been set to</color>
<color=#75715e>   * true.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>InetAddress</color> <color=#a6e22e>getSocketBoundAddress</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>getInetAddress</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Registers a service queue with the ServiceDispatcher. Requests for a service result in a new</color>
<color=#75715e>   * SocketChannel being created on which the service can communicate with the requester of the</color>
<color=#75715e>   * service.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param serviceName the name of the service being requested</color>
<color=#75715e>   * @param serviceQueue the queue that will be used to hold channels established for the service.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>BlockingQueue</color><color=#f92672><</color><color=#f8f8f2>DataChannel</color><color=#f92672>></color> <color=#f8f8f2>serviceQueue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The serviceName argument must not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color> <color=#f92672>+</color> <color=#e6db74>" is already registered"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceQueue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The serviceQueue argument must not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>QueuingService</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>serviceQueue</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>Service</color> <color=#f8f8f2>service</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>service</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"The service argument must not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>+</color> <color=#e6db74>" is already registered"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>+</color> <color=#e6db74>" registered."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>service</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRegistered</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The serviceName argument must not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSimulateIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>simulateException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Service</color> <color=#f8f8f2>service</color> <color=#f92672>=</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>service</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color> <color=#f92672>+</color> <color=#e6db74>" is not registered"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>setSimulateIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>simulateException</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Cancels the registration of a service. Subsequent attempts to access the service will be</color>
<color=#75715e>   * ignored and the channel will be closed and will not be queued.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param serviceName the name of the service being cancelled</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"The serviceName argument must not be null."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Service</color> <color=#f8f8f2>service</color> <color=#f92672>=</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>service</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color> <color=#f92672>+</color> <color=#e6db74>" was not registered."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Service: "</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color> <color=#f92672>+</color> <color=#e6db74>" shut down."</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>getChannelFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For testing purposes */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addTestAuthentication</color><color=#f8f8f2>(</color><color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authOpts</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>authOptions</color> <color=#f92672>=</color> <color=#f8f8f2>authOpts</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sets authentication methods to service dispatcher */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setAuthOptions</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>authOptions</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StreamAuthenticator</color> <color=#f8f8f2>auth</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getAuthenticator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>auth</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* no authenticator, no auth methods */</color>
      <color=#f8f8f2>authOptions</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"No server auth method"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color> <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ServerAuthMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>auth</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>authOptions</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>method</color><color=#f8f8f2>};</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Server auth method: "</color> <color=#f92672>+</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getMechanismName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Processes an accept event on the server socket. As a result of the processing a new</color>
<color=#75715e>   * socketChannel is created, and the selector is registered with the new channel so that it can</color>
<color=#75715e>   * process subsequent read events.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processAccept</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>SocketChannel</color> <color=#f8f8f2>socketChannel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>socketChannel</color> <color=#f92672>=</color> <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>accept</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>processAcceptRequests</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>socketChannel</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>socketChannel</color><color=#f8f8f2>.</color><color=#a6e22e>configureBlocking</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>dataChannel</color> <color=#f92672>=</color> <color=#f8f8f2>getChannelFactory</color><color=#f8f8f2>().</color><color=#a6e22e>acceptChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>socketChannel</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If authenticationMethod is provided, use it. Otherwise if no</color>
<color=#75715e>       * authenticationMethods are provided but the channel is capable</color>
<color=#75715e>       * of determining trust, pass an empty Authentication</color>
<color=#75715e>       * array to ServerHandshake in order to trigger the trust check.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color> <color=#f92672>=</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>dataChannel</color><color=#f8f8f2>.</color><color=#a6e22e>isTrustCapable</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>authOptions</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
              <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color>
              <color=#f8f8f2>:</color> <color=#f8f8f2>authOptions</color><color=#f8f8f2>;</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ServerHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>dataChannel</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Register the selector with the base SocketChannel */</color>
      <color=#f8f8f2>socketChannel</color><color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>selector</color><color=#f8f8f2>,</color> <color=#f8f8f2>SelectionKey</color><color=#f8f8f2>.</color><color=#a6e22e>OP_READ</color><color=#f8f8f2>,</color> <color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Server accept exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>socketChannel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Processes read events on newly established socket channels. Input on the channel is verified to</color>
<color=#75715e>   * ensure that it is a service request. The read is accomplished in two parts, a read for the</color>
<color=#75715e>   * fixed size prefix and the name length byte, followed by a read of the variable length name</color>
<color=#75715e>   * itself.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Errors result in the channel being closed(with the key being canceled as a result) and a</color>
<color=#75715e>   * null value being returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the service request is sane, we may require the connecting entity to authenticate itself.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param initState the InitState object associated with the new channel</color>
<color=#75715e>   * @return the ServiceName or null if there was insufficient input, or an error was encountered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>processRead</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>process</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Probably already closed, but make sure */</color>
        <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>REJECT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>().</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceName</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>/* Initial sequence not complete as yet, keep reading */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Exception during read: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes the channel, logging any resulting exceptions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param channel the channel being closed</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>Channel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Exception during cleanup: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e1</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The central run method. It dispatches to the "accept" and "read" event processing methods. Upon</color>
<color=#75715e>   * a completed read, it verifies the validity of the service name and queues the channel for</color>
<color=#75715e>   * subsequent consumption by the service.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Started ServiceDispatcher. HostPort="</color>
            <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#e6db74>":"</color>
            <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
        <color=#e6db74>"DataChannel factory: "</color> <color=#f92672>+</color> <color=#f8f8f2>getChannelFactory</color><color=#f8f8f2>().</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/**</color>
<color=#75715e>           * To make the dispatcher resilient to IP address change, we periodically check for such</color>
<color=#75715e>           * change and rebind the socket if that occurs.</color>
<color=#75715e>           *</color>
<color=#75715e>           * <p>Speculation and rational: New communications fail sliently which is possibly caused</color>
<color=#75715e>           * by that each TCP session use both IP and port number as the identifier. Thus it will</color>
<color=#75715e>           * drop packages after IP address change. Yet no exception is raised in that situation.</color>
<color=#75715e>           * Therefore, we cannot rely on exception for detecting such a change, but instead use an</color>
<color=#75715e>           * active approach.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#f8f8f2>ipChanged</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Exception while check IP: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>changed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>rebindSocket</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>selector</color><color=#f8f8f2>.</color><color=#a6e22e>select</color><color=#f8f8f2>(</color><color=#ae81ff>1000</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Server socket exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>SelectionKey</color><color=#f92672>></color> <color=#f8f8f2>skeys</color> <color=#f92672>=</color> <color=#f8f8f2>selector</color><color=#f8f8f2>.</color><color=#a6e22e>selectedKeys</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>SelectionKey</color> <color=#f8f8f2>key</color> <color=#f8f8f2>:</color> <color=#f8f8f2>skeys</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>readyOps</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>SelectionKey</color><color=#f8f8f2>.</color><color=#a6e22e>OP_ACCEPT</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>processAccept</color><color=#f8f8f2>();</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>

            <color=#66d9ef>case</color> <color=#f8f8f2>SelectionKey</color><color=#f8f8f2>.</color><color=#a6e22e>OP_READ</color><color=#f8f8f2>:</color>
              <color=#66d9ef>final</color> <color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color><color=#f8f8f2>)</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>attachment</color><color=#f8f8f2>();</color>

              <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color> <color=#f92672>=</color> <color=#f8f8f2>processRead</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
              <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
              <color=#f8f8f2>processService</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>(),</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>

            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
              <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
                  <color=#e6db74>"Unexpected ops bit set: "</color> <color=#f92672>+</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>readyOps</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* All keys have been processed clear them. */</color>
        <color=#f8f8f2>skeys</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Clean up any in-process connections that are still in the</color>
<color=#75715e>       * handshake phase.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>SelectionKey</color><color=#f92672>></color> <color=#f8f8f2>skIter</color> <color=#f92672>=</color> <color=#f8f8f2>selector</color><color=#f8f8f2>.</color><color=#a6e22e>keys</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>skIter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>SelectionKey</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>skIter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color><color=#f8f8f2>)</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>attachment</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>initState</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Server closing in-process handshake"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>serverChannel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>cleanup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>ipChanged</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>InetAddress</color> <color=#f8f8f2>addr</color> <color=#f92672>=</color> <color=#f8f8f2>InetAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getByName</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>currentIP</color> <color=#f92672>=</color> <color=#f8f8f2>addr</color><color=#f8f8f2>.</color><color=#a6e22e>getHostAddress</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>previousIP</color> <color=#f92672>=</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getAddress</color><color=#f8f8f2>().</color><color=#a6e22e>getHostAddress</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>currentIP</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>previousIP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>changed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
          <color=#e6db74>"ServiceDispatcher IP changed, from "</color> <color=#f92672>+</color> <color=#f8f8f2>previousIP</color> <color=#f92672>+</color> <color=#e6db74>" to "</color> <color=#f92672>+</color> <color=#f8f8f2>currentIP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>changed</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>rebindSocket</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>scKey</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>socketAddress</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSocket</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>bindSocket</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Rebind ServiceDispatcher socket: "</color> <color=#f92672>+</color> <color=#f8f8f2>serverChannel</color><color=#f8f8f2>.</color><color=#a6e22e>socket</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs the guts of the work underlying a service request. It validates the service request</color>
<color=#75715e>   * and writes an appropriate response to the channel.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param channel</color>
<color=#75715e>   * @param serviceName</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processService</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Service</color> <color=#f8f8f2>service</color> <color=#f92672>=</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>service</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>errorCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>UNKNOWN_SERVICE</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Not unexpected in a distributed app due to calls being made</color>
<color=#75715e>         * before a service is actually registered.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Request for unknown Service: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>serviceName</color>
                <color=#f92672>+</color> <color=#e6db74>" Registered services: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>serviceMap</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>OK</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>isBusy</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>BUSY</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Service response: "</color> <color=#f92672>+</color> <color=#f8f8f2>response</color> <color=#f92672>+</color> <color=#e6db74>" for service: "</color> <color=#f92672>+</color> <color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>())</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Failed to write byte. Send buffer size: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>getSendBufferSize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>==</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>OK</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>service</color><color=#f8f8f2>.</color><color=#a6e22e>requestDispatch</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
          <color=#e6db74>"IO error writing to channel for "</color>
              <color=#f92672>+</color> <color=#e6db74>"service: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>serviceName</color>
              <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The abstract class underlying all services. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Service</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The name associated with the service. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>simulateIOException</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Service</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Service name was null"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Informs the service of a new request. The implementation of the method must not block.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param channel the channel on which the request was made</color>
<color=#75715e>     */</color>
    <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>requestDispatch</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>

    <color=#75715e>/** Used to limit a particular type of service to avoid excess load. */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isBusy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Used during unit testing to simulate communications problems. */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>simulateIOException</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>simulateIOException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSimulateIOException</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>simulateIOException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>simulateIOException</color> <color=#f92672>=</color> <color=#f8f8f2>simulateIOException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Cancel the service as part of the registration being canceled. */</color>
    <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A service where requests are simply added to the supplied queue. It's the responsibility of the</color>
<color=#75715e>   * service creator to drain the queue. This service is used when the service carries out a</color>
<color=#75715e>   * long-running dialog with the service requester. For example, a Feeder service.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>QueuingService</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Service</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Holds the queue of pending requests, one per channel */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>BlockingQueue</color><color=#f92672><</color><color=#f8f8f2>DataChannel</color><color=#f92672>></color> <color=#f8f8f2>queue</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>QueuingService</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>BlockingQueue</color><color=#f92672><</color><color=#f8f8f2>DataChannel</color><color=#f92672>></color> <color=#f8f8f2>queue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>queue</color> <color=#f92672>=</color> <color=#f8f8f2>queue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DataChannel</color> <color=#a6e22e>take</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>take</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>requestDispatch</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>simulateIOException</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#e6db74>"Simulated test IO exception"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * This will provoke an IOException later when we try to</color>
<color=#75715e>           * use the channel in takeChannel().</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Close failure in '"</color> <color=#f92672>+</color> <color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>"' service: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"request queue overflow"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>cancel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Drain any existing pending requests. It's safe to just iterate</color>
<color=#75715e>       * since the service dispatcher has already stopped accepting new</color>
<color=#75715e>       * requests for the service.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color> <color=#f8f8f2>:</color> <color=#f8f8f2>queue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// Ignore it, it's only cleanup</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_EOF_MARKER</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A queuing service that starts the thread that services the requests lazily, upon first request</color>
<color=#75715e>   * and terminates the thread when the service is unregistered. The thread must be "interrupt</color>
<color=#75715e>   * aware" and must exit when it receives an interrupt.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This type of service is suitable for services that are used infrequently.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LazyQueuingService</color> <color=#66d9ef>extends</color> <color=#f8f8f2>QueuingService</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Thread</color> <color=#f8f8f2>serviceThread</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>LazyQueuingService</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>BlockingQueue</color><color=#f92672><</color><color=#f8f8f2>DataChannel</color><color=#f92672>></color> <color=#f8f8f2>queue</color><color=#f8f8f2>,</color> <color=#f8f8f2>Thread</color> <color=#f8f8f2>serviceThread</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>queue</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceThread</color> <color=#f92672>=</color> <color=#f8f8f2>serviceThread</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>requestDispatch</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceThread</color><color=#f8f8f2>.</color><color=#a6e22e>getState</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>NEW</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>serviceThread</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Thread started for service: "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#f8f8f2>RUNNABLE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>TIMED_WAITING</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>WAITING</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>BLOCKED</color><color=#f8f8f2>:</color>
          <color=#75715e>/* Was previously activated. */</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Thread started for service: "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>

        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color> <color=#f92672>=</color>
              <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
                  <color=#e6db74>"Thread for service:"</color> <color=#f92672>+</color> <color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>"is in state:"</color> <color=#f92672>+</color> <color=#f8f8f2>serviceThread</color><color=#f8f8f2>.</color><color=#a6e22e>getState</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>requestDispatch</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#75715e>/** Interrupts the thread to cause it to exit. */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>cancel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceThread</color><color=#f8f8f2>.</color><color=#a6e22e>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>serviceThread</color><color=#f8f8f2>.</color><color=#a6e22e>interrupt</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>serviceThread</color><color=#f8f8f2>.</color><color=#a6e22e>join</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Ignore it on shutdown. */</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A service that is run immediately in a thread allocated to it. Subtypes implement the</color>
<color=#75715e>   * getRunnable() method which provides the runnable object for the service. This service frees up</color>
<color=#75715e>   * the caller from managing the the threads associated with the service. The runnable must manage</color>
<color=#75715e>   * interrupts so that it can be shut down by the underlying thread pool.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ExecutingService</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Service</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ExecutingService</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dispatcher</color> <color=#f92672>=</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>Runnable</color> <color=#a6e22e>getRunnable</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>void</color> <color=#a6e22e>requestDispatch</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>pool</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>getRunnable</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>cancel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Nothing to do */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"serial"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ServiceConnectFailedException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ServiceConnectFailedException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>!=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>OK</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>response</color> <color=#f92672>=</color> <color=#f8f8f2>response</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceName</color> <color=#f92672>=</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Response</color> <color=#a6e22e>getResponse</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>response</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>FORMAT_ERROR</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#e6db74>"Bad message format, for service:"</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#f8f8f2>UNKNOWN_SERVICE</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#e6db74>"Unknown service request:"</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#f8f8f2>BUSY</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#e6db74>"Service was busy"</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#f8f8f2>INVALID</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#e6db74>"Invalid response supplied"</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#f8f8f2>PROCEED</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#e6db74>"Protocol continuation requested"</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#f8f8f2>AUTHENTICATE</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#e6db74>"Authentication required"</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#f8f8f2>OK</color><color=#f8f8f2>:</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Don't expect an OK response to provoke an exception.</color>
<color=#75715e>           * Fall through.</color>
<color=#75715e>           */</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Unexpected response:"</color> <color=#f92672>+</color> <color=#f8f8f2>response</color> <color=#f92672>+</color> <color=#e6db74>" for service:"</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ExecutingRunnable</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Runnable</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>TextProtocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expectResponse</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ExecutingRunnable</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>TextProtocol</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expectResponse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channel</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>protocol</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>expectResponse</color> <color=#f92672>=</color> <color=#f8f8f2>expectResponse</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Read request and send out response. */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>configureBlocking</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>getRequestMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>request</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>ResponseMessage</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>getResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expectResponse</color> <color=#f92672>&&</color> <color=#f8f8f2>response</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PrintWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>Channels</color><color=#f8f8f2>.</color><color=#a6e22e>newOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>wireFormat</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>logMessage</color><color=#f8f8f2>(</color><color=#e6db74>"IO error on socket: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>isOpen</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>logMessage</color><color=#f8f8f2>(</color><color=#e6db74>"IO error on socket close: "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionTypeAndMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Get the response for a request. */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>ResponseMessage</color> <color=#a6e22e>getResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>request</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Log the message. */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>logMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>