<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.tree</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.Evictor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.SizeofMarker</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The abstract class that defines the various representations used to represent an array of target</color>
<color=#75715e> * pointers to children of an IN node. These arrays can be sparse, so the non-default</color>
<color=#75715e> * representations are designed to make efficient representations for the sparse cases. Each</color>
<color=#75715e> * specialized representation is a subclass of INTargetReps.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A new IN node starts out with the None representation and grows through a sparse into the full</color>
<color=#75715e> * default representation. Subsequently, the default representation can be <i>compacted</i> into a</color>
<color=#75715e> * Sparse or None representation whenever an IN is stripped. Note that representations do not</color>
<color=#75715e> * currently move to more compact forms when entries are nulled to minimize the possibility of</color>
<color=#75715e> * tansitionary representation changes, since each representation change has a cpu cost and a gc</color>
<color=#75715e> * cost associated with it.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>INTargetRep</color> <color=#66d9ef>extends</color> <color=#f8f8f2>INArrayRep</color><color=#f92672><</color><color=#f8f8f2>INTargetRep</color><color=#f8f8f2>,</color> <color=#f8f8f2>INTargetRep</color><color=#f8f8f2>.</color><color=#a6e22e>Type</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#75715e>/* Single instance used for None rep. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>None</color> <color=#f8f8f2>NONE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>None</color><color=#f8f8f2>();</color>

  <color=#75715e>/* Enumeration for the different types of supported representations. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DEFAULT</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>SPARSE</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>NONE</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#a6e22e>INTargetRep</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/* The default non-sparse representation. It simply wraps an array. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Default</color> <color=#66d9ef>extends</color> <color=#f8f8f2>INTargetRep</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The target nodes */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color><color=#f92672>[]</color> <color=#f8f8f2>targets</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Default</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>targets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Node</color><color=#f92672>[</color><color=#f8f8f2>capacity</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Only for use by the Sizeof utility. */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Default</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>SizeofMarker</color> <color=#f8f8f2>marker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>targets</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#a6e22e>Default</color><color=#f8f8f2>(</color><color=#f8f8f2>Node</color><color=#f92672>[]</color> <color=#f8f8f2>targets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>targets</color> <color=#f92672>=</color> <color=#f8f8f2>targets</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Default</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Default</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOfRange</color><color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Node</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f8f8f2>,</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>targets</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>target</color> <color=#f8f8f2>:</color> <color=#f8f8f2>targets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>count</color> <color=#f92672>></color> <color=#f8f8f2>Sparse</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_ENTRIES</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#f8f8f2>Sparse</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_INDEX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>INTargetRep</color> <color=#f8f8f2>newRep</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newRep</color> <color=#f92672>=</color> <color=#f8f8f2>NONE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newRep</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Sparse</color><color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>targets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>newRep</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>noteRepChange</color><color=#f8f8f2>(</color><color=#f8f8f2>newRep</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newRep</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_TARGET_ENTRY_OVERHEAD</color>
          <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>objectArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>increment</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* No stats for this default rep. */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Representation used when 1-4 children are cached. Note that the IN itself may have more</color>
<color=#75715e>   * children, but they are not currently cached. The INArrayRep is represented by two parallel</color>
<color=#75715e>   * arrays: an array of indices (idxs) and an array of values (targets). All elements that are not</color>
<color=#75715e>   * explicitly represented are null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Sparse</color> <color=#66d9ef>extends</color> <color=#f8f8f2>INTargetRep</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The maximum number of entries that can be represented. */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_ENTRIES</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The maximum index that can be represented. */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_INDEX</color> <color=#f92672>=</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The parallel arrays implementing the INArrayRep.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>idxs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>MAX_ENTRIES</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Node</color><color=#f92672>[]</color> <color=#f8f8f2>targets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Node</color><color=#f92672>[</color><color=#f8f8f2>MAX_ENTRIES</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Sparse</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Unroll initialization. */</color>
      <color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Only for use by the Sizeof utility. */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Sparse</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>SizeofMarker</color> <color=#f8f8f2>marker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Sparse</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>SPARSE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Node</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>MAX_INDEX</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Unrolled for loop */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>MAX_INDEX</color><color=#f8f8f2>);</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>slot</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>targets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>slot</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>slot</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Have a free slot, use it. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>slot</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>slot</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#f8f8f2>slot</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* It's full, mutate it. */</color>
      <color=#f8f8f2>Default</color> <color=#f8f8f2>fe</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Default</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxEntries</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>noteRepChange</color><color=#f8f8f2>(</color><color=#f8f8f2>fe</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>targets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fe</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idxs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>targets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>fe</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>INTargetRep</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>to</color> <color=#f92672>==</color> <color=#f8f8f2>from</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Nothing to do */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>to</color> <color=#f92672><</color> <color=#f8f8f2>from</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Copy ascending */</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>to</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f92672>++</color><color=#f8f8f2>),</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* to > from. Copy descending */</color>
        <color=#f8f8f2>from</color> <color=#f92672>+=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>to</color> <color=#f92672>+=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f92672>--</color><color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f92672>--</color><color=#f8f8f2>from</color><color=#f8f8f2>),</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>target</color> <color=#f8f8f2>:</color> <color=#f8f8f2>targets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>None</color> <color=#f8f8f2>newRep</color> <color=#f92672>=</color> <color=#f8f8f2>NONE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>noteRepChange</color><color=#f8f8f2>(</color><color=#f8f8f2>newRep</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newRep</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Note that fixed array sizes are already accounted for in the</color>
<color=#75715e>       * SPARSE_TARGET_ENTRY_OVERHEAD computed vis Sizeof.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>SPARSE_TARGET_ENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>getNINSparseTarget</color><color=#f8f8f2>().</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>getNINSparseTarget</color><color=#f8f8f2>().</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Representation used when an IN has no children cached. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>None</color> <color=#66d9ef>extends</color> <color=#f8f8f2>INTargetRep</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#a6e22e>None</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

    <color=#75715e>/* Only for use by the Sizeof utility. */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>None</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>SizeofMarker</color> <color=#f8f8f2>marker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>None</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Node</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>INTargetRep</color> <color=#f8f8f2>targets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Sparse</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxEntries</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>noteRepChange</color><color=#f8f8f2>(</color><color=#f8f8f2>targets</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>targets</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>int</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>int</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Nothing to copy. */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* A single static instance is used. */</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>getNINNoTarget</color><color=#f8f8f2>().</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>getNINNoTarget</color><color=#f8f8f2>().</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>