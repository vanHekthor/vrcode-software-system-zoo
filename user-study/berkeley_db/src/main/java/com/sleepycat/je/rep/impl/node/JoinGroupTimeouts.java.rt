<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Encapsulates the handling of timeouts: ENV_SETUP_TIMEOUT and ENV_UNKNOWN_STATE_TIMEOUT, used when</color>
<color=#75715e> * a replicated environment handle is opened and a node joins the group.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There are three timeouts that are relevant at the time a Replica joins a group. They are</color>
<color=#75715e> * listed below in the order in which each is applied.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>1) The ENV_UNKNOWN_STATE_TIMEOUT which is basically an election timeout. If set and an</color>
<color=#75715e> * election is not concluded in this time period, the environment handle is opened in the unknown</color>
<color=#75715e> * state.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>2) The ENV_SETUP_TIMEOUT. This timeout determines the maximum amount of time allowed to hold</color>
<color=#75715e> * an election and sync up with a master if the joins as a replica.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>3) The consistency timeout as determined by the consistency policy in the event that the node</color>
<color=#75715e> * joins as a replica.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The first two timeouts are managed by this class. RepNode.joinGroup uses the timeouts supplied</color>
<color=#75715e> * by the getTimeout() method to wait for each timeout if both are specified.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>joinGroup first waits up to the unknown state timeout for an election to be concluded. If the</color>
<color=#75715e> * node is not in the unknown state at the timeout, it advances to the env setup timeout by invoking</color>
<color=#75715e> * setSetupTimeout() and proceeds to wait up to this timeout for the syncup activity to complete.</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>JoinGroupTimeouts</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The timeout associated with opening a handle in the unknown state. It's</color>
<color=#75715e>   * max int if the handle should not be opened in that state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>unknownStateTimeout</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The timeout associated with the total setup of the handle. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>setupTimeout</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The timeout that's currently active, it can be either of the two values</color>
<color=#75715e>   * values above.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>

  <color=#75715e>/* used as the basis for determining time limits from timeouts. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

  <color=#f8f8f2>JoinGroupTimeouts</color><color=#f8f8f2>(</color><color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setupTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_SETUP_TIMEOUT</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_UNKNOWN_STATE_TIMEOUT</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Support deprecated usage. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowUnknownStateEnv</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>ALLOW_UNKNOWN_STATE_ENV_OPEN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>unknownStateTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>allowUnknownStateEnv</color> <color=#f92672>?</color> <color=#f8f8f2>setupTimeout</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>unknownStateTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_UNKNOWN_STATE_TIMEOUT</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>unknownStateTimeout</color> <color=#f92672>></color> <color=#f8f8f2>setupTimeout</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
            <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color>
                <color=#e6db74>" The timeout ENV_UNKNOWN_STATE_TIMEOUT(%,d ms)"</color>
                    <color=#f92672>+</color> <color=#e6db74>" exceeds the timeout ENV_SETUP_TIMEOUT(%,d ms)"</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>unknownStateTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>setupTimeout</color><color=#f8f8f2>);</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Set the first timeout. */</color>
    <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>unknownStateTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>setupTimeout</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the currently active timeout, adjusted for the time that has already elapsed. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the setup timeout */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSetupTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>setupTimeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the currently active timeout is the one for the transition out of the unknown</color>
<color=#75715e>   * state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>timeoutIsForUnknownState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#f8f8f2>unknownStateTimeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set the currently active timeout to be the env setup timeout. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setSetupTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>setupTimeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>