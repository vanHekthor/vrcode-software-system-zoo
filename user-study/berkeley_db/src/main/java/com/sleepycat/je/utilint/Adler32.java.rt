<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.zip.Checksum</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Adler32 checksum implementation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class is used rather than the native java.util.zip.Adler32 class because we have seen a</color>
<color=#75715e> * JIT problem when calling the Adler32 class using the Server JVM on Linux and Solaris.</color>
<color=#75715e> * Specifically, we suspect this may be Bug Parade number 4965907. See SR [#9376]. We also believe</color>
<color=#75715e> * that this bug is fixed in Java 5 and therefore only use this class conditionally if we find that</color>
<color=#75715e> * we're in a 1.4 JVM. [#13354].</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The Adler32 checksum is discussed in RFC1950. The sample implementation from this RFC is shown</color>
<color=#75715e> * below:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *    #define BASE 65521  largest prime smaller than 65536</color>
<color=#75715e> *    unsigned long update_adler32(unsigned long adler,</color>
<color=#75715e> *       unsigned char *buf, int len)</color>
<color=#75715e> *    {</color>
<color=#75715e> *      unsigned long s1 = adler & 0xffff;</color>
<color=#75715e> *      unsigned long s2 = (adler >> 16) & 0xffff;</color>
<color=#75715e> *      int n;</color>
<color=#75715e> *</color>
<color=#75715e> *      for (n = 0; n < len; n++) {</color>
<color=#75715e> *        s1 = (s1 + buf[n]) % BASE;</color>
<color=#75715e> *        s2 = (s2 + s1)     % BASE;</color>
<color=#75715e> *      }</color>
<color=#75715e> *      return (s2 << 16) + s1;</color>
<color=#75715e> *    }</color>
<color=#75715e> *</color>
<color=#75715e> *    unsigned long adler32(unsigned char *buf, int len)</color>
<color=#75715e> *    {</color>
<color=#75715e> *      return update_adler32(1L, buf, len);</color>
<color=#75715e> *    }</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * The NMAX optimization is so that we don't have to do modulo calculations on every iteration. NMAX</color>
<color=#75715e> * is the max number of additions to make before you have to perform the modulo calculation.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Adler32</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Checksum</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* This class and the ctor are public for the unit tests. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ChunkingAdler32</color> <color=#66d9ef>extends</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>zip</color><color=#f8f8f2>.</color><color=#a6e22e>Adler32</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>adler32ChunkSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ChunkingAdler32</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>adler32ChunkSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>adler32ChunkSize</color> <color=#f92672>=</color> <color=#f8f8f2>adler32ChunkSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672><</color> <color=#f8f8f2>adler32ChunkSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>bytesRemaining</color> <color=#f92672>=</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>nBytesThisChunk</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>bytesRemaining</color><color=#f8f8f2>,</color> <color=#f8f8f2>adler32ChunkSize</color><color=#f8f8f2>);</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>nBytesThisChunk</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#f8f8f2>nBytesThisChunk</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Checksum</color> <color=#a6e22e>makeChecksum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>USE_JAVA5_ADLER32</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>adler32ChunkSize</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getAdler32ChunkSize</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>adler32ChunkSize</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChunkingAdler32</color><color=#f8f8f2>(</color><color=#f8f8f2>adler32ChunkSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>util</color><color=#f8f8f2>.</color><color=#a6e22e>zip</color><color=#f8f8f2>.</color><color=#a6e22e>Adler32</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Adler32</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>adler</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * BASE is the largest prime number smaller than 65536</color>
<color=#75715e>   * NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BASE</color> <color=#f92672>=</color> <color=#ae81ff>65521</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>NMAX</color> <color=#f92672>=</color> <color=#ae81ff>5552</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Update current Adler-32 checksum given the specified byte. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>s1</color> <color=#f92672>=</color> <color=#f8f8f2>adler</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>s2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>adler</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>s1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>s1</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>))</color> <color=#f92672>%</color> <color=#f8f8f2>BASE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>s2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>s1</color> <color=#f92672>+</color> <color=#f8f8f2>s2</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>BASE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>adler</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>s2</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>s1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Update current Adler-32 checksum given the specified byte array. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>s1</color> <color=#f92672>=</color> <color=#f8f8f2>adler</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>s2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>adler</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>len</color> <color=#f92672><</color> <color=#f8f8f2>NMAX</color> <color=#f92672>?</color> <color=#f8f8f2>len</color> <color=#f8f8f2>:</color> <color=#f8f8f2>NMAX</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>len</color> <color=#f92672>-=</color> <color=#f8f8f2>k</color><color=#f8f8f2>;</color>

      <color=#75715e>/* This does not benefit from loop unrolling. */</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>k</color><color=#f92672>--</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>s1</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>s2</color> <color=#f92672>+=</color> <color=#f8f8f2>s1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>s1</color> <color=#f92672>%=</color> <color=#f8f8f2>BASE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>s2</color> <color=#f92672>%=</color> <color=#f8f8f2>BASE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>adler</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>s2</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>s1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Reset Adler-32 checksum to initial value. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>adler</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns current checksum value. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>adler</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>