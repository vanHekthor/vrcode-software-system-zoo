<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.CleanerStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbiStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.Evictor.EvictionSource</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.EvictorStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.OffHeapStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.incomp.INCompStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.CheckpointStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbBackup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbCacheSize</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.cleaner.CleanerStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbiStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.evictor.EvictorStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.incomp.INCompStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.log.LogStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.recovery.CheckpointStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.txn.LockStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Statistics for a single environment. Statistics provide indicators for system monitoring and</color>
<color=#75715e> * performance tuning.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each statistic has a name and a getter method in this class. For example, the {@code</color>
<color=#75715e> * cacheTotalBytes} stat is returned by the {@link #getCacheTotalBytes()} method. Statistics are</color>
<color=#75715e> * categorized into several groups, for example, {@code cacheTotalBytes} is in the {@code Cache}</color>
<color=#75715e> * group. Each stat and group has a name and a description.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Viewing the statistics through {@link #toString()} shows the stat names and values organized</color>
<color=#75715e> * by group. Viewing the stats with {@link #toStringVerbose()} additionally shows the description of</color>
<color=#75715e> * each stat and group.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Statistics are periodically output in CSV format to the je.stat.csv file (see {@link</color>
<color=#75715e> * EnvironmentConfig#STATS_COLLECT}). The column header in the .csv file has {@code group:stat}</color>
<color=#75715e> * format, where 'group' is the group name and 'stat' is the stat name. In Oracle NoSQL DB, in the</color>
<color=#75715e> * addition to the .csv file, JE stats are output in the .stat files.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Stat values may also be obtained via JMX using the {@link <a</color>
<color=#75715e> * href="{@docRoot}/../jconsole/JConsole-plugin.html">JEMonitor mbean</a>}. In Oracle NoSQL DB, JE</color>
<color=#75715e> * stats are obtained via a different JMX interface in JSON format. The JSON format uses property</color>
<color=#75715e> * names of the form {@code group_stat} where 'group' is the group name and 'stat' is the stat name.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The stat groups are listed below. Each group name links to a summary of the statistics in the</color>
<color=#75715e> * group.</color>
<color=#75715e> *</color>
<color=#75715e> * <table></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <th>Group Name</th></color>
<color=#75715e> *         <th>Description</th></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#cache">{@value</color>
<color=#75715e> *         EvictorStatDefinition#GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         EvictorStatDefinition#GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#cache">{@value</color>
<color=#75715e> *         OffHeapStatDefinition#GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         OffHeapStatDefinition#GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#log">{@value</color>
<color=#75715e> *         LogStatDefinition#GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         LogStatDefinition#GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#cleaner">{@value</color>
<color=#75715e> *         CleanerStatDefinition#GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         CleanerStatDefinition#GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#incomp">{@value</color>
<color=#75715e> *         INCompStatDefinition#GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         INCompStatDefinition#GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#ckpt">{@value</color>
<color=#75715e> *         CheckpointStatDefinition#GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         CheckpointStatDefinition#GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#lock">{@value</color>
<color=#75715e> *         LockStatDefinition#GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         LockStatDefinition#GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr></color>
<color=#75715e> *         <td><a href="#env">{@value</color>
<color=#75715e> *         DbiStatDefinition#ENV_GROUP_NAME}</color>
<color=#75715e> *         </a></td></color>
<color=#75715e> *         <td>{@value</color>
<color=#75715e> *         DbiStatDefinition#ENV_GROUP_DESC}</color>
<color=#75715e> *         </td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following sections describe each group of stats along with some common strategies for</color>
<color=#75715e> * using them for monitoring and performance tuning.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3><a name="cache">Cache Statistics</a></h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p style="margin-left: 2em">Group Name: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e> * Description: {@value EvictorStatDefinition#GROUP_DESC}</color>
<color=#75715e> *</color>
<color=#75715e> * <p style="margin-left: 2em">Group Name: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e> * Description: {@value OffHeapStatDefinition#GROUP_DESC}</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The JE cache consists of the main (in-heap) cache and and optional off-heap cache. The vast</color>
<color=#75715e> * majority of the cache is occupied by Btree nodes, including internal nodes (INs) and leaf nodes</color>
<color=#75715e> * (LNs). INs contain record keys while LNs contain record data.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each IN refers to a configured maximum number of child nodes ({@link</color>
<color=#75715e> * EnvironmentConfig#NODE_MAX_ENTRIES}). The INs form a Btree of at least 2 levels. With a large</color>
<color=#75715e> * data set the Btree will normally have 4 or 5 levels. The top level is a single node, the root IN.</color>
<color=#75715e> * Levels are numbered from the bottom up, starting with level 1 for bottom level INs (BINs). Levels</color>
<color=#75715e> * are added at the top when the root IN splits.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When an off-heap cache is configured, it serves as an overflow for the main cache. See {@link</color>
<color=#75715e> * EnvironmentConfig#MAX_OFF_HEAP_MEMORY}.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="cacheSizing">Cache Statistics: Sizing</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Operation performance is often directly proportional to how much of the active data set is</color>
<color=#75715e> * cached. BINs and LNs form the vast majority of the cache. Caching of BINs and LNs have different</color>
<color=#75715e> * performance impacts, and behavior varies depending on whether an off-heap cache is configured and</color>
<color=#75715e> * which {@link CacheMode} is used.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Main cache current usage is indicated by the following stats. Note that there is currently no</color>
<color=#75715e> * stat for the number of LNs in the main cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getCacheTotalBytes()}</color>
<color=#75715e> *   <li>{@link #getNCachedBINs()}</color>
<color=#75715e> *   <li>{@link #getNCachedBINDeltas()}</color>
<color=#75715e> *   <li>{@link #getNCachedUpperINs()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Off-heap cache current usage is indicated by:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getOffHeapTotalBytes()}</color>
<color=#75715e> *   <li>{@link #getOffHeapCachedLNs()}</color>
<color=#75715e> *   <li>{@link #getOffHeapCachedBINs()}</color>
<color=#75715e> *   <li>{@link #getOffHeapCachedBINDeltas()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A cache miss is considered a miss only when the object is not found in either cache. Misses</color>
<color=#75715e> * often result in file I/O and are a primary indicator of cache performance. Fetches (access</color>
<color=#75715e> * requests) and misses are indicated by:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getNLNsFetch()}</color>
<color=#75715e> *   <li>{@link #getNLNsFetchMiss()}</color>
<color=#75715e> *   <li>{@link #getNBINsFetch()}</color>
<color=#75715e> *   <li>{@link #getNBINsFetchMiss()}</color>
<color=#75715e> *   <li>{@link #getNBINDeltasFetchMiss()}</color>
<color=#75715e> *   <li>{@link #getNFullBINsMiss()}</color>
<color=#75715e> *   <li>{@link #getNUpperINsFetch()}</color>
<color=#75715e> *   <li>{@link #getNUpperINsFetchMiss()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When the number of LN misses ({@code nLNsFetchMiss}) or the number of BIN misses ({@code</color>
<color=#75715e> * nBINsFetchMiss + nFullBINsMiss}) are significant, the JE cache may be undersized, as discussed</color>
<color=#75715e> * below. But note that it is not practical to correlate the number of fetches and misses directly</color>
<color=#75715e> * to application operations, because LNs are sometimes {@link</color>
<color=#75715e> * EnvironmentConfig#TREE_MAX_EMBEDDED_LN embedded}, BINs are sometimes accessed multiple times per</color>
<color=#75715e> * operation, and internal Btree accesses are included in the stat values.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Ideally, all BINs and LNs for the active data set should fit in cache so that operations do</color>
<color=#75715e> * not result in fetch misses, which often perform random read I/O. When this is not practical,</color>
<color=#75715e> * which is often the case for large data sets, the next best thing is to ensure that all BINs fit</color>
<color=#75715e> * in cache, so that an operation will perform at most one random read I/O to fetch the LN. The</color>
<color=#75715e> * {@link DbCacheSize} javadoc describes how to size the cache to ensure that all BINs and/or LNs</color>
<color=#75715e> * fit in cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Normally {@link EnvironmentConfig#MAX_MEMORY_PERCENT} determines the JE cache size as a value</color>
<color=#75715e> * relative to the JVM heap size, i.e., the heap size determines the cache size.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For configuring cache size and behavior, see:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#MAX_MEMORY_PERCENT}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#MAX_MEMORY}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#MAX_OFF_HEAP_MEMORY}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#setCacheMode(CacheMode)}</color>
<color=#75715e> *   <li>{@link CacheMode}</color>
<color=#75715e> *   <li>{@link DbCacheSize}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using Oracle NoSQL DB, a sizing exercise and {@link DbCacheSize} are used to determine</color>
<color=#75715e> * the cache size needed to hold all BINs in memory. The memory available to each node is divided</color>
<color=#75715e> * between a 32 GB heap for the JVM process (so that CompressedOops may be used) and the off-heap</color>
<color=#75715e> * cache (when more than 32 GB of memory is available).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>It is also important not to configured the cache size too large, relative to the JVM heap</color>
<color=#75715e> * size. If there is not enough free space in the heap, Java GC pauses may become a problem.</color>
<color=#75715e> * Increasing the default value for {@code MAX_MEMORY_PERCENT}, or setting {@code MAX_MEMORY} (which</color>
<color=#75715e> * overrides {@code MAX_MEMORY_PERCENT}), should be done carefully.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Java GC performance may also be improved by using {@link CacheMode#EVICT_LN}. Record data</color>
<color=#75715e> * sizes should also be kept below 1 MB to avoid "humongous objects" (see Java GC documentation).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using Oracle NoSQL DB, by default, {@code MAX_MEMORY_PERCENT} is set to 70% and {@link</color>
<color=#75715e> * CacheMode#EVICT_LN} is used. The LOB (large object) API is implemented using multiple JE records</color>
<color=#75715e> * per LOB where the data size of each record is 1 MB or less.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When a shared cache is configured, the main and off-heap cache may be shared by multiple JE</color>
<color=#75715e> * Environments in a single JVM process. See:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#SHARED_CACHE}</color>
<color=#75715e> *   <li>{@link #getSharedCacheTotalBytes()}</color>
<color=#75715e> *   <li>{@link #getNSharedCacheEnvironments()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using Oracle NoSQL DB, the JE shared cache feature is not used because each node only</color>
<color=#75715e> * uses a single JE Environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="cacheSizeOptimizations">Cache Statistics: Size Optimizations</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Since a large portion of an IN consists of record keys, JE uses {@link</color>
<color=#75715e> * DatabaseConfig#setKeyPrefixing(boolean) key prefix compression}. Ideally, key suffixes are small</color>
<color=#75715e> * enough to be stored using the {@link EnvironmentConfig#TREE_COMPACT_MAX_KEY_LENGTH compact key</color>
<color=#75715e> * format}. The following stat indicates the number of INs using this compact format:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getNINCompactKeyIN()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Configuration params impacting key prefixing and the compact key format are:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link DatabaseConfig#setKeyPrefixing(boolean)}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#TREE_COMPACT_MAX_KEY_LENGTH}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Enabling key prefixing for all databases is strongly recommended. When using Oracle NoSQL DB,</color>
<color=#75715e> * key prefixing is always enabled.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another configuration param impacting BIN cache size is {@code TREE_MAX_EMBEDDED_LN}. There is</color>
<color=#75715e> * currently no stat indicating the number of embedded LNs. See:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#TREE_MAX_EMBEDDED_LN}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="cacheUnexpectedSizes">Cache Statistics: Unexpected Sizes</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Although the Btree normally occupies the vast majority of the cache, it is possible that</color>
<color=#75715e> * record locks occupy unexpected amounts of cache when large transactions are used, or when cursors</color>
<color=#75715e> * or transactions are left open due to application bugs. The following stat indicates the amount of</color>
<color=#75715e> * cache used by record locks:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getLockBytes()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To reduce the amount of memory used for record locks:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Use a small number of write operations per transaction. Write locks are held until the end</color>
<color=#75715e> *       of a transaction.</color>
<color=#75715e> *   <li>For transactions using Serializable isolation or RepeatableRead isolation (the default),</color>
<color=#75715e> *       use a small number of read operations per transaction.</color>
<color=#75715e> *   <li>To read large numbers of records, use {@link LockMode#READ_COMMITTED} isolation or use a</color>
<color=#75715e> *       null Transaction (which implies ReadCommitted). With ReadCommitted isolation, locks are</color>
<color=#75715e> *       released after each read operation. Using {@link LockMode#READ_UNCOMMITTED} will also avoid</color>
<color=#75715e> *       record locks, but does not provide any transactional guarantees.</color>
<color=#75715e> *   <li>Ensure that all cursors and transactions are closed promptly.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the above guidelines are also important for reducing contention when records are</color>
<color=#75715e> * accessed concurrently from multiple threads and transactions. When using Oracle NoSQL DB, the</color>
<color=#75715e> * application should avoid performing a large number of write operations in a single request. For</color>
<color=#75715e> * read operations, NoSQL DB uses ReadCommitted isolation to avoid accumulation of locks.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another unexpected use of cache is possible when using a {@link DiskOrderedCursor} or when</color>
<color=#75715e> * calling {@link Database#count()}. The amount of cache used by these operations is indicated by:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getDOSBytes()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@code DiskOrderedCursor} and {@code Database.count} should normally be explicitly constrained</color>
<color=#75715e> * to use a maximum amount of cache memory. See:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link DiskOrderedCursorConfig#setInternalMemoryLimit(long)}</color>
<color=#75715e> *   <li>{@link Database#count(long)}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Oracle NoSQL DB does not currently use {@code DiskOrderedCursor} or {@code Database.count}.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="cacheEviction">Cache Statistics: Eviction</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Eviction is removal of Btree node from the cache in order to make room for newly added nodes.</color>
<color=#75715e> * See {@link CacheMode} for a description of eviction.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Normally eviction is performed via background threads in the eviction thread pools. Disabling</color>
<color=#75715e> * the eviction pool threads is not recommended.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#ENV_RUN_EVICTOR}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#ENV_RUN_OFFHEAP_EVICTOR}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Eviction stats are important indicator of cache efficiency and provide a deeper understanding</color>
<color=#75715e> * of cache behavior. Main cache eviction is indicated by:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getNLNsEvicted()}</color>
<color=#75715e> *   <li>{@link #getNNodesMutated()}</color>
<color=#75715e> *   <li>{@link #getNNodesEvicted()}</color>
<color=#75715e> *   <li>{@link #getNDirtyNodesEvicted()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that objects evicted from the main cache are moved to the off-heap cache whenever</color>
<color=#75715e> * possible.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Off-heap cache eviction is indicated by:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getOffHeapLNsEvicted()}</color>
<color=#75715e> *   <li>{@link #getOffHeapNodesMutated()}</color>
<color=#75715e> *   <li>{@link #getOffHeapNodesEvicted()}</color>
<color=#75715e> *   <li>{@link #getOffHeapDirtyNodesEvicted()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When analyzing Java GC performance, the most relevant stats are {@code NLNsEvicted}, {@code</color>
<color=#75715e> * NNodesMutated} and {@code NNodesEvicted}, which all indicate eviction from the main cache based</color>
<color=#75715e> * on LRU. Large values for these stats indicate that many old generation Java objects are being</color>
<color=#75715e> * GC'd, which is often a cause of GC pauses.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that {@link CacheMode#EVICT_LN} is used or when LNs are {@link</color>
<color=#75715e> * EnvironmentConfig#TREE_MAX_EMBEDDED_LN embedded}, {@code NLNsEvicted} will be close to zero</color>
<color=#75715e> * because LNs are not evicted based on LRU. And if an off-heap cache is configured, {@code</color>
<color=#75715e> * NNodesMutated} will be close to zero because BIN mutation takes place in the off-heap cache. If</color>
<color=#75715e> * any of the three values are large, this points to a potential GC performance problem. The GC logs</color>
<color=#75715e> * should be consulted to confirm this.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Large values for {@code NDirtyNodesEvicted} or {@code OffHeapDirtyNodesEvicted} indicate that</color>
<color=#75715e> * the cache is severely undersized and there is a risk of using all available disk space and severe</color>
<color=#75715e> * performance problems. Dirty nodes are evicted last (after evicting all non-dirty nodes) because</color>
<color=#75715e> * they must be written to disk. This causes excessive writing and JE log cleaning may be</color>
<color=#75715e> * unproductive.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that when an off-heap cache is configured, {@code NDirtyNodesEvicted} will be zero</color>
<color=#75715e> * because dirty nodes in the main cache are moved to the off-heap cache if they don't fit in the</color>
<color=#75715e> * main cache, and are evicted completely and written to disk only when they don't fit in the</color>
<color=#75715e> * off-heap cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another type of eviction tuning for the main cache involves changing the number of bytes</color>
<color=#75715e> * evicted each time an evictor thread is awoken:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_EVICT_BYTES}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If the number of bytes is too large, it may cause a noticeable spike in eviction activity,</color>
<color=#75715e> * reducing resources available to other threads. If the number of bytes is too small, the overhead</color>
<color=#75715e> * of waking the evictor threads more often may be noticeable. The default values for this parameter</color>
<color=#75715e> * is generally a good compromise. This parameter also impacts critical eviction, which is described</color>
<color=#75715e> * next.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the corresponding parameter for the off-heap cache, {@link</color>
<color=#75715e> * EnvironmentConfig#OFFHEAP_EVICT_BYTES}, works differently and is described in the next section.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="cacheCriticalEviction">Cache Statistics: Critical Eviction</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following stats indicate that critical eviction is occurring:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getNBytesEvictedCritical()}</color>
<color=#75715e> *   <li>{@link #getNBytesEvictedCacheMode()}</color>
<color=#75715e> *   <li>{@link #getNBytesEvictedDeamon()}</color>
<color=#75715e> *   <li>{@link #getNBytesEvictedEvictorThread()}</color>
<color=#75715e> *   <li>{@link #getNBytesEvictedManual()}</color>
<color=#75715e> *   <li>{@link #getOffHeapCriticalNodesTargeted()}</color>
<color=#75715e> *   <li>{@link #getOffHeapNodesTargeted()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Eviction is performed by eviction pool threads, calls to {@link Environment#evictMemory()} in</color>
<color=#75715e> * application background threads, or via {@link CacheMode#EVICT_LN} or {@link CacheMode#EVICT_BIN}.</color>
<color=#75715e> * If these mechanisms are not sufficient to evict memory from cache as quickly as CRUD operations</color>
<color=#75715e> * are adding memory to cache, then critical eviction comes into play. Critical eviction is</color>
<color=#75715e> * performed in-line in the thread performing the CRUD operation, which is very undesirable since it</color>
<color=#75715e> * increases operation latency.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Critical eviction in the main cache is indicated by large values for {@code</color>
<color=#75715e> * NBytesEvictedCritical}, as compared to the other {@code NBytesEvictedXXX} stats. Critical</color>
<color=#75715e> * eviction in the off-heap cache is indicated by large values for {@code</color>
<color=#75715e> * OffHeapCriticalNodesTargeted} compared to {@code OffHeapNodesTargeted}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Additional stats indicating that background eviction threads may be insufficient are:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getNThreadUnavailable()}</color>
<color=#75715e> *   <li>{@link #getOffHeapThreadUnavailable()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Critical eviction can sometimes be reduced by changing {@link</color>
<color=#75715e> * EnvironmentConfig#EVICTOR_CRITICAL_PERCENTAGE} or modifying the eviction thread pool parameters.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_CRITICAL_PERCENTAGE}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_CORE_THREADS}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_MAX_THREADS}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_KEEP_ALIVE}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#OFFHEAP_CORE_THREADS}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#OFFHEAP_MAX_THREADS}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#OFFHEAP_KEEP_ALIVE}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When using Oracle NoSQL DB, {@code EVICTOR_CRITICAL_PERCENTAGE} is set to 20% rather than</color>
<color=#75715e> * using the JE default of 0%.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In the main cache, critical eviction uses the same parameter as background eviction for</color>
<color=#75715e> * determining how many bytes to evict at one time:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_EVICT_BYTES}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Be careful when increasing this value, since this will cause longer operation latencies when</color>
<color=#75715e> * critical eviction is occurring in the main cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The corresponding parameter for the off-heap cache, {@code OFFHEAP_EVICT_BYTES}, works</color>
<color=#75715e> * differently:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#OFFHEAP_EVICT_BYTES}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Unlike in the main cache, {@code OFFHEAP_EVICT_BYTES} defines the goal for background eviction</color>
<color=#75715e> * to be below {@code MAX_OFF_HEAP_MEMORY}. The background evictor threads for the off-heap cache</color>
<color=#75715e> * attempt to maintain the size of the off-heap cache at {@code MAX_OFF_HEAP_MEMORY -</color>
<color=#75715e> * OFFHEAP_EVICT_BYTES}. If the off-heap cache size grows larger than {@code MAX_OFF_HEAP_MEMORY},</color>
<color=#75715e> * critical off-heap eviction will occur. The default value for {@code OFFHEAP_EVICT_BYTES} is</color>
<color=#75715e> * fairly large to ensure that critical eviction does not occur. Be careful when lowering this</color>
<color=#75715e> * value.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This approach is intended to prevent the off-heap cache from exceeding its maximum size. If</color>
<color=#75715e> * the maximum is exceeded, there is a danger that the JVM process will be killed by the OS. See</color>
<color=#75715e> * {@link #getOffHeapAllocFailures()}.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="cacheLRUListContention">Cache Statistics: LRU List Contention</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another common tuning issue involves thread contention on the cache LRU lists, although there</color>
<color=#75715e> * is no stat to indicate such contention. Since each time a node is accessed it must be moved to</color>
<color=#75715e> * the end of the LRU list, a single LRU list would cause contention among threads performing CRUD</color>
<color=#75715e> * operations. By default there are 4 LRU lists for each cache. If contention is noticeable on</color>
<color=#75715e> * internal Evictor.LRUList or OffHeapCache.LRUList methods, consider increasing the number of LRU</color>
<color=#75715e> * lists:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_N_LRU_LISTS}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#OFFHEAP_N_LRU_LISTS}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>However, note that increasing the number of LRU lists will decrease the accuracy of the LRU.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="cacheDebugging">Cache Statistics: Debugging</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following cache stats are unlikely to be needed for monitoring or tuning, but are</color>
<color=#75715e> * sometimes useful for debugging and testing.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #getDataBytes()}</color>
<color=#75715e> *   <li>{@link #getAdminBytes()}</color>
<color=#75715e> *   <li>{@link #getDataAdminBytes()}</color>
<color=#75715e> *   <li>{@link #getNNodesTargeted()}</color>
<color=#75715e> *   <li>{@link #getNNodesStripped()}</color>
<color=#75715e> *   <li>{@link #getNNodesPutBack()}</color>
<color=#75715e> *   <li>{@link #getNNodesMovedToDirtyLRU()}</color>
<color=#75715e> *   <li>{@link #getNNodesSkipped()}</color>
<color=#75715e> *   <li>{@link #getNRootNodesEvicted()}</color>
<color=#75715e> *   <li>{@link #getNBINsFetchMissRatio()}</color>
<color=#75715e> *   <li>{@link #getNINSparseTarget()}</color>
<color=#75715e> *   <li>{@link #getNINNoTarget()}</color>
<color=#75715e> *   <li>{@link #getMixedLRUSize()}</color>
<color=#75715e> *   <li>{@link #getDirtyLRUSize()}</color>
<color=#75715e> *   <li>{@link #getOffHeapAllocFailures()}</color>
<color=#75715e> *   <li>{@link #getOffHeapAllocOverflows()}</color>
<color=#75715e> *   <li>{@link #getOffHeapNodesStripped()}</color>
<color=#75715e> *   <li>{@link #getOffHeapNodesSkipped()}</color>
<color=#75715e> *   <li>{@link #getOffHeapLNsLoaded()}</color>
<color=#75715e> *   <li>{@link #getOffHeapLNsStored()}</color>
<color=#75715e> *   <li>{@link #getOffHeapBINsLoaded()}</color>
<color=#75715e> *   <li>{@link #getOffHeapBINsStored()}</color>
<color=#75715e> *   <li>{@link #getOffHeapTotalBlocks()}</color>
<color=#75715e> *   <li>{@link #getOffHeapLRUSize()}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Likewise, the following cache configuration params are unlikely to be needed for tuning, but</color>
<color=#75715e> * are sometimes useful for debugging and testing.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link EnvironmentConfig#ENV_DB_EVICTION}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#TREE_MIN_MEMORY}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_FORCED_YIELD}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#EVICTOR_ALLOW_BIN_DELTAS}</color>
<color=#75715e> *   <li>{@link EnvironmentConfig#OFFHEAP_CHECKSUM}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <!--</color>
<color=#75715e> * For Cleaning section:</color>
<color=#75715e> * See this <a href="{@docRoot}/../GettingStartedGuide/logfilesrevealed.html"></color>
<color=#75715e> * overview</a> of the logging system. Log files are cleaned and deleted as</color>
<color=#75715e> * their contents become obsolete.</color>
<color=#75715e> *</color>
<color=#75715e> * For Env section:</color>
<color=#75715e> *     <li>{@link #getNBINDeltaBlindOps()}</li></color>
<color=#75715e> * --></color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="{@docRoot}/../jconsole/JConsole-plugin.html">Viewing Statistics with JConsole</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EnvironmentStats</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>  find/replace:</color>
<color=#75715e>  public static final StatDefinition\s+(\w+)\s*=\s*new StatDefinition\(\s*(".*"),\s*(".*")(,?\s*\w*\.?\w*)\);</color>
<color=#75715e>  public static final String $1_NAME =\n        $2;\n    public static final String $1_DESC =\n        $3;\n    public static final StatDefinition $1 =\n        new StatDefinition(\n            $1_NAME,\n            $1_DESC$4);</color>
<color=#75715e>  */</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1734048134L</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>incompStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>envImplStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>EnvironmentStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>incompStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>INCompStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>INCompStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>cacheStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictorStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>EvictorStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>offHeapStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>ckptStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>CheckpointStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>CheckpointStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>cleanerStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>CleanerStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>CleanerStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>logStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>LogStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>lockStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>LockStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envImplStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>DbiStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbiStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>throughputStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>DbiStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>THROUGHPUT_GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbiStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>THROUGHPUT_GROUP_DESC</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#a6e22e>getStatGroups</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>cacheStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>incompStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>ckptStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>envImplStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>lockStats</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>throughputStats</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#a6e22e>getStatGroupsMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getStatGroups</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setStatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>sg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>INCompStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>incompStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictorStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cacheStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>offHeapStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>CheckpointStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ckptStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>CleanerStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cleanerStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LogStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LockStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lockStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DbiStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImplStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DbiStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>THROUGHPUT_GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>throughputStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Invalid stat group name in setStatGroup "</color> <color=#f92672>+</color> <color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only For JConsole plugin support. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getStatGroupTitles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#f8f8f2>groups</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentStats</color><color=#f8f8f2>().</color><color=#a6e22e>getStatGroups</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>titles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>groups</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>titles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>titles</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>groups</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>titles</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setThroughputStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>throughputStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setINCompStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>incompStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCkptStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ckptStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCleanerStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cleanerStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLogStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMBAndEvictorStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>clonedMBStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>clonedEvictorStats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cacheStats</color> <color=#f92672>=</color> <color=#f8f8f2>clonedEvictorStats</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>clonedMBStats</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOffHeapStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>offHeapStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLockStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lockStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEnvStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>envImplStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* INCompressor stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of BINs encountered by the INCompressor that had cursors referring to them when the</color>
<color=#75715e>   * compressor ran.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCursorsBins</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incompStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>INCOMP_CURSORS_BINS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The time the Environment was created. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getEnvironmentCreationTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_CREATION_TIME</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of BINs encountered by the INCompressor that had their database closed between the</color>
<color=#75715e>   * time they were put on the compressor queue and when the compressor ran.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDbClosedBins</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incompStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>INCOMP_DBCLOSED_BINS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of entries in the INCompressor queue when the getStats() call was made. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getInCompQueueSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incompStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>INCOMP_QUEUE_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of BINs encountered by the INCompressor that were not actually empty when the</color>
<color=#75715e>   * compressor ran.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNonEmptyBins</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incompStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>INCOMP_NON_EMPTY_BINS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of BINs that were successfully processed by the IN Compressor. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProcessedBins</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incompStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>INCOMP_PROCESSED_BINS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of BINs encountered by the INCompressor that were split between the time they were</color>
<color=#75715e>   * put on the compressor queue and when the compressor ran.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSplitBins</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>incompStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>INCOMP_SPLIT_BINS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Checkpointer stats. */</color>

  <color=#75715e>/** The Id of the last checkpoint. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastCheckpointId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_LAST_CKPTID</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The total number of checkpoints run so far. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCheckpoints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_CHECKPOINTS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The accumulated number of full INs flushed to the log. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNFullINFlush</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_FULL_IN_FLUSH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The accumulated number of full BINs flushed to the log. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNFullBINFlush</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_FULL_BIN_FLUSH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The accumulated number of Delta INs flushed to the log. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNDeltaINFlush</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_DELTA_IN_FLUSH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Byte length from last checkpoint start to the previous checkpoint start. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastCheckpointInterval</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_LAST_CKPT_INTERVAL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The location in the log of the last checkpoint start. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastCheckpointStart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_LAST_CKPT_START</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The location in the log of the last checkpoint end. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastCheckpointEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ckptStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CKPT_LAST_CKPT_END</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Cleaner stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated in 7.0, always returns zero. Use {@link #getCurrentMinUtilization()} and {@link</color>
<color=#75715e>   *     #getCurrentMaxUtilization()} to monitor cleaner behavior.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getCleanerBacklog</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated in 7.5, always returns zero. Use {@link #getProtectedLogSize()} {@link</color>
<color=#75715e>   *     #getProtectedLogSizeMap()} to monitor file protection.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getFileDeletionBacklog</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_MIN_UTILIZATION_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_MIN_UTILIZATION_NAME} The last known log minimum</color>
<color=#75715e>   * utilization as a percentage. This statistic provides a cheap way of checking the log</color>
<color=#75715e>   * utilization without having to run the DbSpace utility.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The log utilization is the percentage of the total log size (all .jdb files) that is</color>
<color=#75715e>   * utilized or active. The remaining portion of the log is obsolete. The log cleaner is</color>
<color=#75715e>   * responsible for keeping the log utilization below the configured threshold, {@link</color>
<color=#75715e>   * EnvironmentConfig#CLEANER_MIN_UTILIZATION}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This statistic is computed every time the log cleaner examines the utilization of the log,</color>
<color=#75715e>   * in order to determine whether cleaning is needed. The frequency can be configured using {@link</color>
<color=#75715e>   * EnvironmentConfig#CLEANER_BYTES_INTERVAL}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The obsolete portion of the log includes data that has expired at the time the statistic was</color>
<color=#75715e>   * last computed. An expiration histogram is stored for each file and used to compute the expired</color>
<color=#75715e>   * size. The minimum and maximum utilization are the lower and upper bounds of computed</color>
<color=#75715e>   * utilization, which may be different when some data has expired. See {@link</color>
<color=#75715e>   * #getNCleanerTwoPassRuns()} for more information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the size of the utilized data in the log is always greater than the amount of user</color>
<color=#75715e>   * data (total size of keys and data). The active Btree internal nodes and other metadata are also</color>
<color=#75715e>   * included.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the current minimum utilization, or -1 if the utilization has not been calculated for</color>
<color=#75715e>   *     this environment since it was last opened.</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 6.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getCurrentMinUtilization</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_MIN_UTILIZATION</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_MAX_UTILIZATION_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_MAX_UTILIZATION_NAME} The last known log maximum</color>
<color=#75715e>   * utilization as a percentage. This statistic provides a cheap way of checking the log</color>
<color=#75715e>   * utilization without having to run the DbSpace utility.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The log utilization is the percentage of the total log size (all .jdb files) that is</color>
<color=#75715e>   * utilized or active. The remaining portion of the log is obsolete. The log cleaner is</color>
<color=#75715e>   * responsible for keeping the log utilization below the configured threshold, {@link</color>
<color=#75715e>   * EnvironmentConfig#CLEANER_MIN_UTILIZATION}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This statistic is computed every time the log cleaner examines the utilization of the log,</color>
<color=#75715e>   * in order to determine whether cleaning is needed. The frequency can be configured using {@link</color>
<color=#75715e>   * EnvironmentConfig#CLEANER_BYTES_INTERVAL}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The obsolete portion of the log includes data that has expired at the time the statistic was</color>
<color=#75715e>   * last computed. An expiration histogram is stored for each file and used to compute the expired</color>
<color=#75715e>   * size. The minimum and maximum utilization are the lower and upper bounds of computed</color>
<color=#75715e>   * utilization, which may be different when some data has expired. See {@link</color>
<color=#75715e>   * #getNCleanerTwoPassRuns()} for more information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the size of the utilized data in the log is always greater than the amount of user</color>
<color=#75715e>   * data (total size of keys and data). The active Btree internal nodes and other metadata are also</color>
<color=#75715e>   * included.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the current maximum utilization, or -1 if the utilization has not been calculated for</color>
<color=#75715e>   *     this environment since it was last opened.</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 6.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getCurrentMaxUtilization</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_MAX_UTILIZATION</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated in JE 6.5, use {@link #getCurrentMinUtilization()} or {@link</color>
<color=#75715e>   *     #getCurrentMaxUtilization()} instead.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLastKnownUtilization</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getCurrentMinUtilization</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated in JE 6.3. Adjustments are no longer needed because LN log sizes have been stored</color>
<color=#75715e>   *     in the Btree since JE 6.0.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getLNSizeCorrectionFactor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated in JE 5.0.56, use {@link #getCorrectedAvgLNSize} instead. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getCorrectedAvgLNSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>NaN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated in JE 5.0.56, use {@link #getCorrectedAvgLNSize} instead. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getEstimatedAvgLNSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>NaN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_RUNS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_RUNS_NAME} Total number of cleaner runs, including</color>
<color=#75715e>   * {@link #getNCleanerTwoPassRuns() two-pass runs} but not including {@link</color>
<color=#75715e>   * #getNCleanerRevisalRuns() revisal runs}. The {@link #getCurrentMinUtilization() minimum} and</color>
<color=#75715e>   * {@link #getCurrentMaxUtilization() maximum} utilization values are used to drive cleaning.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCleanerRuns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_RUNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_TWO_PASS_RUNS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_TWO_PASS_RUNS_NAME} Number of cleaner two-pass</color>
<color=#75715e>   * runs, which are a subset of the {@link #getNCleanerRuns() total cleaner runs}. The {@link</color>
<color=#75715e>   * #getCurrentMinUtilization() minimum} and {@link #getCurrentMaxUtilization() maximum}</color>
<color=#75715e>   * utilization values are used to drive cleaning.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The obsolete portion of the log includes data that has expired. An expiration histogram is</color>
<color=#75715e>   * stored for each file and used to compute the expired size. The minimum and maximum utilization</color>
<color=#75715e>   * are the lower and upper bounds of computed utilization. They are different only when the TTL</color>
<color=#75715e>   * feature is used, and some data in the file has expired while other data has become obsolete for</color>
<color=#75715e>   * other reasons, such as record updates, record deletions or checkpoints. In this case the</color>
<color=#75715e>   * strictly obsolete size and the expired size may overlap because they are maintained separately.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If they overlap completely then the minimum utilization is correct, while if there is no</color>
<color=#75715e>   * overlap then the maximum utilization is correct. Both utilization values trigger cleaning, but</color>
<color=#75715e>   * when there is significant overlap, the cleaner will perform two-pass cleaning.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the first pass of two-pass cleaning, the file is read to recompute obsolete and expired</color>
<color=#75715e>   * sizes, but the file is not cleaned. As a result of recomputing the expired sizes, the strictly</color>
<color=#75715e>   * obsolete and expired sizes will no longer overlap, and the minimum and maximum utilization will</color>
<color=#75715e>   * be equal. If the file should still be cleaned, based on the recomputed utilization, it is</color>
<color=#75715e>   * cleaned as usual, and in this case the number of two-pass runs (this statistic) is incremented.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the file should not be cleaned because its recomputed utilization is higher than</color>
<color=#75715e>   * expected, the file will not be cleaned. Instead, its recomputed expiration histogram, which has</color>
<color=#75715e>   * size information that now does not overlap with the strictly obsolete data, is stored for</color>
<color=#75715e>   * future use. By storing the revised histogram, the cleaner can select the most appropriate files</color>
<color=#75715e>   * for cleaning in the future. In this case the number of {@link #getNCleanerRevisalRuns() revisal</color>
<color=#75715e>   * runs} is incremented, and the number of {@link #getNCleanerRuns() total runs} is not</color>
<color=#75715e>   * incremented.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 6.5.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCleanerTwoPassRuns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_TWO_PASS_RUNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_REVISAL_RUNS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_REVISAL_RUNS_NAME} Number of cleaner runs that</color>
<color=#75715e>   * ended in revising expiration info, but not in any cleaning.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getNCleanerTwoPassRuns()</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 6.5.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCleanerRevisalRuns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_REVISAL_RUNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated in JE 6.3, always returns zero. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCleanerProbeRuns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_DELETIONS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_DELETIONS_NAME} The number of cleaner file</color>
<color=#75715e>   * deletions this session.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCleanerDeletions</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_DELETIONS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_PENDING_LN_QUEUE_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_PENDING_LN_QUEUE_SIZE_NAME} The number of LNs</color>
<color=#75715e>   * pending because they were locked and could not be migrated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPendingLNQueueSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_PENDING_LN_QUEUE_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_DISK_READS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_DISK_READS_NAME} The number of disk reads performed</color>
<color=#75715e>   * by the cleaner.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCleanerDiskRead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_DISK_READS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_ENTRIES_READ_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_ENTRIES_READ_NAME} The accumulated number of log</color>
<color=#75715e>   * entries read by the cleaner.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCleanerEntriesRead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_ENTRIES_READ</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_INS_OBSOLETE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_INS_OBSOLETE_NAME} The accumulated number of INs</color>
<color=#75715e>   * obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNINsObsolete</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_INS_OBSOLETE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_INS_CLEANED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_INS_CLEANED_NAME} The accumulated number of INs</color>
<color=#75715e>   * cleaned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNINsCleaned</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_INS_CLEANED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_INS_DEAD_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_INS_DEAD_NAME} The accumulated number of INs that</color>
<color=#75715e>   * were not found in the tree anymore (deleted).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNINsDead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_INS_DEAD</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_INS_MIGRATED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_INS_MIGRATED_NAME} The accumulated number of INs</color>
<color=#75715e>   * migrated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNINsMigrated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_INS_MIGRATED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_OBSOLETE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_OBSOLETE_NAME} The accumulated number of</color>
<color=#75715e>   * BIN-deltas obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINDeltasObsolete</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_BIN_DELTAS_OBSOLETE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_CLEANED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_CLEANED_NAME} The accumulated number of</color>
<color=#75715e>   * BIN-deltas cleaned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINDeltasCleaned</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_BIN_DELTAS_CLEANED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_DEAD_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_DEAD_NAME} The accumulated number of</color>
<color=#75715e>   * BIN-deltas that were not found in the tree anymore (deleted).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINDeltasDead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_BIN_DELTAS_DEAD</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_MIGRATED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_BIN_DELTAS_MIGRATED_NAME} The accumulated number of</color>
<color=#75715e>   * BIN-deltas migrated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINDeltasMigrated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_BIN_DELTAS_MIGRATED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNS_OBSOLETE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNS_OBSOLETE_NAME} The accumulated number of LNs</color>
<color=#75715e>   * obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsObsolete</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNS_OBSOLETE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNS_EXPIRED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNS_EXPIRED_NAME} The accumulated number of</color>
<color=#75715e>   * obsolete LNs that were expired. Note that this does not included embedded LNs (those having a</color>
<color=#75715e>   * data size less than {@link EnvironmentConfig#TREE_MAX_EMBEDDED_LN}), because embedded LNs are</color>
<color=#75715e>   * always considered obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsExpired</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNS_EXPIRED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNS_CLEANED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNS_CLEANED_NAME} The accumulated number of LNs</color>
<color=#75715e>   * cleaned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsCleaned</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNS_CLEANED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNS_DEAD_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNS_DEAD_NAME} The accumulated number of LNs that</color>
<color=#75715e>   * were not found in the tree anymore (deleted).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsDead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNS_DEAD</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNS_LOCKED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNS_LOCKED_NAME} The accumulated number of LNs</color>
<color=#75715e>   * encountered that were locked.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsLocked</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNS_LOCKED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNS_MIGRATED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNS_MIGRATED_NAME} The accumulated number of LNs</color>
<color=#75715e>   * encountered that were migrated forward in the log by the cleaner.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsMigrated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNS_MIGRATED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNS_MARKED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNS_MARKED_NAME} The accumulated number of LNs in</color>
<color=#75715e>   * temporary DBs that were dirtied by the cleaner and subsequently logging during</color>
<color=#75715e>   * checkpoint/eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsMarked</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNS_MARKED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_LNQUEUE_HITS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_LNQUEUE_HITS_NAME} The accumulated number of LNs</color>
<color=#75715e>   * processed without a tree lookup.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNQueueHits</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_LNQUEUE_HITS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_PENDING_LNS_PROCESSED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_PENDING_LNS_PROCESSED_NAME} The accumulated number</color>
<color=#75715e>   * of LNs processed because they were previously locked.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNPendingLNsProcessed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_PENDING_LNS_PROCESSED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_MARKED_LNS_PROCESSED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_MARKED_LNS_PROCESSED_NAME} The accumulated number</color>
<color=#75715e>   * of LNs processed because they were previously marked for migration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNMarkedLNsProcessed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_MARKED_LNS_PROCESSED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_TO_BE_CLEANED_LNS_PROCESSED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_TO_BE_CLEANED_LNS_PROCESSED_NAME} The accumulated</color>
<color=#75715e>   * number of LNs processed because they are soon to be cleaned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNToBeCleanedLNsProcessed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_TO_BE_CLEANED_LNS_PROCESSED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_CLUSTER_LNS_PROCESSED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_CLUSTER_LNS_PROCESSED_NAME} The accumulated number</color>
<color=#75715e>   * of LNs processed because they qualify for clustering.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNClusterLNsProcessed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_CLUSTER_LNS_PROCESSED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_PENDING_LNS_LOCKED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_PENDING_LNS_LOCKED_NAME} The accumulated number of</color>
<color=#75715e>   * pending LNs that could not be locked for migration because of a long duration application lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNPendingLNsLocked</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_PENDING_LNS_LOCKED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_REPEAT_ITERATOR_READS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_REPEAT_ITERATOR_READS_NAME} The number of times we</color>
<color=#75715e>   * tried to read a log entry larger than the read buffer size and couldn't grow the log buffer to</color>
<color=#75715e>   * accommodate the large object. This happens during scans of the log during activities like</color>
<color=#75715e>   * environment open or log cleaning. Implies that the read chunk size controlled by</color>
<color=#75715e>   * je.log.iteratorReadSize is too small.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRepeatIteratorReads</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_REPEAT_ITERATOR_READS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_ACTIVE_LOG_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_ACTIVE_LOG_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The {@link #getCurrentMinUtilization() log utilization} is the percentage of activeLogSize</color>
<color=#75715e>   * that is currently referenced or active.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getActiveLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_ACTIVE_LOG_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_RESERVED_LOG_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_RESERVED_LOG_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Deletion of reserved files may be postponed for several reasons. This occurs if an active</color>
<color=#75715e>   * file is protected (by a backup, for example), and then the file is cleaned and becomes a</color>
<color=#75715e>   * reserved file. See {@link #getProtectedLogSizeMap()} for more information. In a standalone JE</color>
<color=#75715e>   * environment, reserved files are normally deleted very soon after being cleaned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In an HA environment, reserved files are retained because they might be used for replication</color>
<color=#75715e>   * to electable nodes that have been offline for the {@link</color>
<color=#75715e>   * com.sleepycat.je.rep.ReplicationConfig#FEEDER_TIMEOUT} interval or longer, or to offline</color>
<color=#75715e>   * secondary nodes. The replication stream position of these nodes is unknown, so whether these</color>
<color=#75715e>   * files could be used to avoid a network restore, when bringing these nodes online, is also</color>
<color=#75715e>   * unknown. The files are retained just in case they can be used for such replication. Files are</color>
<color=#75715e>   * reserved for replication on both master and replicas, since a replica may become a master at a</color>
<color=#75715e>   * future time. Such files will be deleted (oldest file first) to make room for a write operation,</color>
<color=#75715e>   * if the write operation would have caused a disk limit to be violated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In NoSQL DB, this retention of reserved files has the additional benefit of supplying the</color>
<color=#75715e>   * replication stream to subscribers of the Stream API, when such subscribers need to replay the</color>
<color=#75715e>   * stream from an earlier point in time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReservedLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_RESERVED_LOG_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_PROTECTED_LOG_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_PROTECTED_LOG_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Reserved files are protected for reasons described by {@link #getProtectedLogSizeMap()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProtectedLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_PROTECTED_LOG_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_PROTECTED_LOG_SIZE_MAP_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_PROTECTED_LOG_SIZE_MAP_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link #getReservedLogSize() Reserved} data files are temporarily {@link</color>
<color=#75715e>   * #getProtectedLogSize() protected} for a number of reasons. The keys in the protected log size</color>
<color=#75715e>   * map are the names of the protecting entities, and the values are the number of bytes protected</color>
<color=#75715e>   * by each entity. The type and format of the entity names are as follows:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *    Backup-N</color>
<color=#75715e>   *    DatabaseCount-N</color>
<color=#75715e>   *    DiskOrderedCursor-N</color>
<color=#75715e>   *    Syncup-N</color>
<color=#75715e>   *    Feeder-N</color>
<color=#75715e>   *    NetworkRestore-N</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Where:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>{@code Backup-N} represents a {@link DbBackup} in progress, i.e., for which {@link</color>
<color=#75715e>   *       DbBackup#startBackup()} has been called and {@link DbBackup#endBackup()} has not yet been</color>
<color=#75715e>   *       called. All active files are initially protected by the backup, but these are not</color>
<color=#75715e>   *       reserved files ond only appear in the map if they are cleaned and become reserved after</color>
<color=#75715e>   *       the backup starts. Files are not protected if they have been copied and {@link</color>
<color=#75715e>   *       DbBackup#removeFileProtection(String)} has been called. {@code N} is a sequentially</color>
<color=#75715e>   *       assigned integer.</color>
<color=#75715e>   *   <li>{@code DatabaseCount-N} represents an outstanding call to {@link Database#count()}. All</color>
<color=#75715e>   *       active files are initially protected by this method, but these are not reserved files ond</color>
<color=#75715e>   *       only appear in the map if they are cleaned and become reserved during the execution of</color>
<color=#75715e>   *       {@code Database.count}. {@code N} is a sequentially assigned integer.</color>
<color=#75715e>   *   <li>{@code DiskOrderedCursor-N} represents a {@link DiskOrderedCursor} that has not yet been</color>
<color=#75715e>   *       closed by {@link DiskOrderedCursor#close()}. All active files are initially protected</color>
<color=#75715e>   *       when the cursor is opened, but these are not reserved files ond only appear in the map if</color>
<color=#75715e>   *       they are cleaned and become reserved while the cursor is open. {@code N} is a</color>
<color=#75715e>   *       sequentially assigned integer.</color>
<color=#75715e>   *   <li>{@code Syncup-N} represents an in-progress negotiation between a master and replica node</color>
<color=#75715e>   *       in an HA replication group to establish a replication stream. This is a normally a very</color>
<color=#75715e>   *       short negotiation and occurs when a replica joins the group or after an election is held.</color>
<color=#75715e>   *       During syncup, all reserved files are protected. {@code N} is the node name of the other</color>
<color=#75715e>   *       node involved in the syncup, i.e, if this node is a master then it is the name of the</color>
<color=#75715e>   *       replica, and vice versa.</color>
<color=#75715e>   *   <li>{@code Feeder-N} represents an HA master node that is supplying the replication stream to</color>
<color=#75715e>   *       a replica. Normally data in active files is being supplied and this data is not in the</color>
<color=#75715e>   *       reserved or protected categories. But if the replica is lagging, data from reserved files</color>
<color=#75715e>   *       may be supplied, and in that case will be protected and appear in the map. {@code N} is</color>
<color=#75715e>   *       the node name of the replica receiving the replication stream.</color>
<color=#75715e>   *   <li>{@code NetworkRestore-N} represents an HA replica or master node that is supplying files</color>
<color=#75715e>   *       to a node that is performing a {@link com.sleepycat.je.rep.NetworkRestore}. The files</color>
<color=#75715e>   *       supplied are all active files plus the two most recently written reserved files. The two</color>
<color=#75715e>   *       reserved files will appear in the map, as well as any of the active files that were</color>
<color=#75715e>   *       cleaned and became reserved during the network restore. Files that have already been</color>
<color=#75715e>   *       copied by the network restore are not protected. {@code N} is the name of the node</color>
<color=#75715e>   *       performing the {@link com.sleepycat.je.rep.NetworkRestore}.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When more than one entity is included in the map, in general the largest value points to the</color>
<color=#75715e>   * entity primarily responsible for preventing reclamation of disk space. Note that the values</color>
<color=#75715e>   * normally sum to more than {@link #getProtectedLogSize()}, since protection often overlaps.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The string format of this stat consists of {@code name=size} pairs separated by semicolons,</color>
<color=#75715e>   * where name is the entity name described above and size is the number of protected bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getProtectedLogSizeMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getMap</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_PROTECTED_LOG_SIZE_MAP</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_AVAILABLE_LOG_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_AVAILABLE_LOG_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is the amount that can be logged by write operations, and other JE activity such as</color>
<color=#75715e>   * checkpointing, without violating a disk limit. The files making up {@code reservedLogSize} can</color>
<color=#75715e>   * be deleted to make room for these write operations, so {@code availableLogSize} is the sum of</color>
<color=#75715e>   * the current disk free space and the reserved size that is not protected ({@code</color>
<color=#75715e>   * reservedLogSize} - {@code protectedLogSize}). The current disk free space is calculated using</color>
<color=#75715e>   * the disk volume's free space, {@link EnvironmentConfig#MAX_DISK} and {@link</color>
<color=#75715e>   * EnvironmentConfig#FREE_DISK}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that when a record is written, the number of bytes includes JE overheads for the</color>
<color=#75715e>   * record. Also, this causes Btree metadata to be written during checkpoints, and other metadata</color>
<color=#75715e>   * is also written by JE. So the space occupied on disk by a given set of records cannot be</color>
<color=#75715e>   * calculated by simply summing the key/data sizes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Also note that {@code availableLogSize} will be negative when a disk limit has been</color>
<color=#75715e>   * violated, representing the amount that needs to be freed before write operations are allowed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   * @see EnvironmentConfig#MAX_DISK</color>
<color=#75715e>   * @see EnvironmentConfig#FREE_DISK</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAvailableLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_AVAILABLE_LOG_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value CleanerStatDefinition#CLEANER_TOTAL_LOG_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value CleanerStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value CleanerStatDefinition#CLEANER_TOTAL_LOG_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cleaner">Cleaner Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTotalLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cleanerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CLEANER_TOTAL_LOG_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* LogManager stats. */</color>

  <color=#75715e>/** The total number of requests for database objects which were not in memory. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCacheMiss</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LBFP_MISS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The location of the next entry to be written to the log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the log entries prior to this position may not yet have been flushed to disk.</color>
<color=#75715e>   * Flushing can be forced using a Sync or WriteNoSync commit, or a checkpoint.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getEndOfLog</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LOGMGR_END_OF_LOG</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of fsyncs issued through the group commit manager. A subset of nLogFsyncs. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNFSyncs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FSYNCMGR_FSYNCS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of fsyncs requested through the group commit manager. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNFSyncRequests</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FSYNCMGR_FSYNC_REQUESTS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of fsync requests submitted to the group commit manager which timed out. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNFSyncTimeouts</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FSYNCMGR_TIMEOUTS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total number of milliseconds used to perform fsyncs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.0, although the stat was output by {@link #toString} and appeared in the je.stat.csv</color>
<color=#75715e>   *     file in earlier versions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getFSyncTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>GRPCMGR_FSYNC_TIME</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum number of milliseconds used to perform a single fsync.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getFSyncMaxTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>GRPCMGR_FSYNC_MAX_TIME</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total number of fsyncs of the JE log. This includes those fsyncs issued on behalf of</color>
<color=#75715e>   * transaction commits.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLogFSyncs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_LOG_FSYNCS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of log buffers currently instantiated. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNLogBuffers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LBFP_LOG_BUFFERS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of disk reads which required repositioning the disk head more than 1MB from the</color>
<color=#75715e>   * previous file position. Reads in a different *.jdb log file then the last IO constitute a</color>
<color=#75715e>   * random read.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate and may differ from the actual number of random disk reads</color>
<color=#75715e>   * depending on the type of disks and file system, disk geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRandomReads</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_RANDOM_READS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of bytes read which required repositioning the disk head more than 1MB from the</color>
<color=#75715e>   * previous file position. Reads in a different *.jdb log file then the last IO constitute a</color>
<color=#75715e>   * random read.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate vary depending on the type of disks and file system, disk</color>
<color=#75715e>   * geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRandomReadBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_RANDOM_READ_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of disk writes which required repositioning the disk head by more than 1MB from the</color>
<color=#75715e>   * previous file position. Writes to a different *.jdb log file (i.e. a file "flip") then the last</color>
<color=#75715e>   * IO constitute a random write.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate and may differ from the actual number of random disk writes</color>
<color=#75715e>   * depending on the type of disks and file system, disk geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRandomWrites</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_RANDOM_WRITES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of bytes written which required repositioning the disk head more than 1MB from the</color>
<color=#75715e>   * previous file position. Writes in a different *.jdb log file then the last IO constitute a</color>
<color=#75715e>   * random write.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate vary depending on the type of disks and file system, disk</color>
<color=#75715e>   * geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRandomWriteBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_RANDOM_WRITE_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of disk reads which did not require repositioning the disk head more than 1MB from</color>
<color=#75715e>   * the previous file position. Reads in a different *.jdb log file then the last IO constitute a</color>
<color=#75715e>   * random read.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate and may differ from the actual number of sequential disk reads</color>
<color=#75715e>   * depending on the type of disks and file system, disk geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNSequentialReads</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_SEQUENTIAL_READS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of bytes read which did not require repositioning the disk head more than 1MB from</color>
<color=#75715e>   * the previous file position. Reads in a different *.jdb log file then the last IO constitute a</color>
<color=#75715e>   * random read.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate vary depending on the type of disks and file system, disk</color>
<color=#75715e>   * geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNSequentialReadBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_SEQUENTIAL_READ_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of disk writes which did not require repositioning the disk head by more than 1MB</color>
<color=#75715e>   * from the previous file position. Writes to a different *.jdb log file (i.e. a file "flip") then</color>
<color=#75715e>   * the last IO constitute a random write.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate and may differ from the actual number of sequential disk writes</color>
<color=#75715e>   * depending on the type of disks and file system, disk geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNSequentialWrites</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_SEQUENTIAL_WRITES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of bytes written which did not require repositioning the disk head more than 1MB</color>
<color=#75715e>   * from the previous file position. Writes in a different *.jdb log file then the last IO</color>
<color=#75715e>   * constitute a random write.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This number is approximate vary depending on the type of disks and file system, disk</color>
<color=#75715e>   * geometry, and file system cache size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNSequentialWriteBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_SEQUENTIAL_WRITE_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of bytes read to fulfill file read operations by reading out of the pending write</color>
<color=#75715e>   * queue.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBytesReadFromWriteQueue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_BYTES_READ_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of bytes written from the pending write queue. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBytesWrittenFromWriteQueue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_BYTES_WRITTEN_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of file read operations which were fulfilled by reading out of the pending write</color>
<color=#75715e>   * queue.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReadsFromWriteQueue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_READS_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of file writes operations executed from the pending write queue. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNWritesFromWriteQueue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_WRITES_FROM_WRITEQUEUE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of writes operations which would overflow the Write Queue. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNWriteQueueOverflow</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_WRITEQUEUE_OVERFLOW</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of writes operations which would overflow the Write Queue and could not be queued.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNWriteQueueOverflowFailures</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_WRITEQUEUE_OVERFLOW_FAILURES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total memory currently consumed by log buffers, in bytes. If this environment uses the</color>
<color=#75715e>   * shared cache, this method returns only the amount used by this environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getBufferBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LBFP_BUFFER_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of requests for database objects not contained within the in memory data structures.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNotResident</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LBFP_NOT_RESIDENT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of reads which had to be repeated when faulting in an object from disk because the</color>
<color=#75715e>   * read chunk size controlled by je.log.faultReadSize is too small.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRepeatFaultReads</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LOGMGR_REPEAT_FAULT_READS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of writes which had to be completed using the temporary marshalling buffer because</color>
<color=#75715e>   * the fixed size log buffers specified by je.log.totalBufferBytes and je.log.numBuffers were not</color>
<color=#75715e>   * large enough.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNTempBufferWrites</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LOGMGR_TEMP_BUFFER_WRITES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of times a log file has been opened. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNFileOpens</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_FILE_OPENS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of files currently open in the file cache. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNOpenFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>FILEMGR_OPEN_FILES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Return Evictor stats. */</color>

  <color=#75715e>/** @deprecated The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getRequiredEvictBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated This statistic has no meaning after the implementation of the new evictor in JE</color>
<color=#75715e>   *     6.0. The method returns 0 always.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesScanned</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated Use {@link #getNEvictionRuns()} instead. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNEvictPasses</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_EVICTION_RUNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated use {@link #getNNodesTargeted()} instead. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesSelected</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_TARGETED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated Use {@link #getNNodesEvicted()} instead. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesExplicitlyEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated Use {@link #getNNodesStripped()} instead. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsStripped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_STRIPPED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated Use {@link #getNNodesMutated()} instead. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsMutated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_MUTATED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_EVICTION_RUNS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_EVICTION_RUNS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When an evictor thread is awoken it performs eviction until {@link #getCacheTotalBytes()} is</color>
<color=#75715e>   * at least {@link EnvironmentConfig#EVICTOR_EVICT_BYTES} less than the {@link</color>
<color=#75715e>   * EnvironmentConfig#MAX_MEMORY_PERCENT total cache size}. See {@link CacheMode} for a description</color>
<color=#75715e>   * of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cache">Cache Statistics</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNEvictionRuns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_EVICTION_RUNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_NODES_TARGETED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_NODES_TARGETED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An eviction target may actually be evicted, or skipped, or put back to the LRU, potentially</color>
<color=#75715e>   * after partial eviction (stripping) or BIN-delta mutation is done on it. See {@link CacheMode}</color>
<color=#75715e>   * for a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesTargeted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_TARGETED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_NODES_EVICTED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_NODES_EVICTED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Does not include {@link #getNLNsEvicted() LN eviction} or {@link #getNNodesMutated()</color>
<color=#75715e>   * BIN-delta mutation}. Includes eviction of {@link #getNDirtyNodesEvicted() dirty nodes} and</color>
<color=#75715e>   * {@link #getNRootNodesEvicted() root nodes}. See {@link CacheMode} for a description of</color>
<color=#75715e>   * eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_ROOT_NODES_EVICTED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_ROOT_NODES_EVICTED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The root node of a Database is only evicted after all other nodes in the Database, so this</color>
<color=#75715e>   * implies that the entire Database has fallen out of cache and is probably closed. See {@link</color>
<color=#75715e>   * CacheMode} for a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRootNodesEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_ROOT_NODES_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_DIRTY_NODES_EVICTED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_DIRTY_NODES_EVICTED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a dirty IN is evicted from main cache and no off-heap cache is configured, the IN must</color>
<color=#75715e>   * be logged. When an off-heap cache is configured, dirty INs can be moved from main cache to</color>
<color=#75715e>   * off-heap cache based on LRU, but INs are only logged when they are evicted from off-heap cache.</color>
<color=#75715e>   * Therefore, this stat is always zero when an off-heap cache is configured. See {@link CacheMode}</color>
<color=#75715e>   * for a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNDirtyNodesEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_DIRTY_NODES_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_LNS_EVICTED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_LNS_EVICTED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a BIN is considered for eviction based on LRU, if the BIN contains resident LNs in main</color>
<color=#75715e>   * cache, it is stripped of the LNs rather than being evicted. This stat reflects LNs evicted in</color>
<color=#75715e>   * this manner, but not LNs evicted as a result of using {@link CacheMode#EVICT_LN}. Also note</color>
<color=#75715e>   * that {@link EnvironmentConfig#TREE_MAX_EMBEDDED_LN embedded} LNs are evicted immediately and</color>
<color=#75715e>   * are not reflected in this stat value. See {@link CacheMode} for a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_LNS_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_NODES_STRIPPED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_NODES_STRIPPED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>BINs are stripped in order to {@link #getNLNsEvicted() evict LNs}. See {@link CacheMode} for</color>
<color=#75715e>   * a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesStripped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_STRIPPED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_NODES_MUTATED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_NODES_MUTATED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a BIN is considered for eviction based on LRU, if the BIN can be mutated to a</color>
<color=#75715e>   * BIN-delta, it is mutated rather than being evicted. Note that when an off-heap cache is</color>
<color=#75715e>   * configured, this stat value will be zero because BIN mutation will take place only in the</color>
<color=#75715e>   * off-heap cache; see {@link #getOffHeapNodesMutated()}. See {@link CacheMode} for a description</color>
<color=#75715e>   * of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesMutated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_MUTATED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_NODES_PUT_BACK_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_NODES_PUT_BACK_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Reasons for putting back a target IN are:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>The IN was accessed by an operation while the evictor was processing it.</color>
<color=#75715e>   *   <li>To prevent the cache usage for Btree objects from falling below {@link</color>
<color=#75715e>   *       EnvironmentConfig#TREE_MIN_MEMORY}.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>See {@link CacheMode} for a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesPutBack</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_PUT_BACK</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_NODES_MOVED_TO_PRI2_LRU_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_NODES_MOVED_TO_PRI2_LRU_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When an off-cache is not configured, dirty nodes are evicted last from the main cache by</color>
<color=#75715e>   * moving them to a 2nd priority LRU list. When an off-cache is configured, level-2 INs that</color>
<color=#75715e>   * reference off-heap BINs are evicted last from the main cache, using the same approach. See</color>
<color=#75715e>   * {@link CacheMode} for a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesMovedToDirtyLRU</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_MOVED_TO_PRI2_LRU</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_NODES_SKIPPED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_NODES_SKIPPED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Reasons for skipping a target IN are:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>It has already been evicted by another thread.</color>
<color=#75715e>   *   <li>It cannot be evicted because concurrent activity added resident child nodes.</color>
<color=#75715e>   *   <li>It cannot be evicted because it is dirty and the environment is read-only.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>See {@link CacheMode} for a description of eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNNodesSkipped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_NODES_SKIPPED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#THREAD_UNAVAILABLE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#THREAD_UNAVAILABLE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNThreadUnavailable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THREAD_UNAVAILABLE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#EVICTOR_SHARED_CACHE_ENVS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#EVICTOR_SHARED_CACHE_ENVS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method says nothing about whether this environment is using the shared cache or not.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNSharedCacheEnvironments</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EVICTOR_SHARED_CACHE_ENVS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#LN_FETCH_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#LN_FETCH_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the number of LN fetches does not necessarily correspond to the number of records</color>
<color=#75715e>   * accessed, since some LNs may be {@link EnvironmentConfig#TREE_MAX_EMBEDDED_LN embedded}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsFetch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LN_FETCH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#BIN_FETCH_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#BIN_FETCH_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsFetch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN_FETCH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#UPPER_IN_FETCH_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#UPPER_IN_FETCH_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNUpperINsFetch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>UPPER_IN_FETCH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#LN_FETCH_MISS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#LN_FETCH_MISS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the number of LN fetches does not necessarily correspond to the number of records</color>
<color=#75715e>   * accessed, since some LNs may be {@link EnvironmentConfig#TREE_MAX_EMBEDDED_LN embedded}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNLNsFetchMiss</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LN_FETCH_MISS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#BIN_FETCH_MISS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#BIN_FETCH_MISS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is the portion of {@link #getNBINsFetch()} that resulted in a fetch miss. The fetch may</color>
<color=#75715e>   * be for a full BIN or BIN-delta ({@link #getNBINDeltasFetchMiss()}), depending on whether a</color>
<color=#75715e>   * BIN-delta currently exists (see {@link EnvironmentConfig#TREE_BIN_DELTA}). However, additional</color>
<color=#75715e>   * full BIN fetches occur when mutating a BIN-delta to a full BIN ({@link #getNFullBINsMiss()})</color>
<color=#75715e>   * whenever this is necessary for completing an operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Therefore, the total number of BIN fetch misses (including BIN-deltas) is:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">{@code nFullBINsMiss + nBINsFetchMiss}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>And the total number of full BIN (vs BIN-delta) fetch misses is:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">{@code nFullBINsMiss + nBINsFetchMiss - nBINDeltasFetchMiss}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsFetchMiss</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN_FETCH_MISS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#BIN_DELTA_FETCH_MISS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#BIN_DELTA_FETCH_MISS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This represents the portion of {@code nBINsFetchMiss()} that fetched BIN-deltas rather than</color>
<color=#75715e>   * full BINs. See {@link #getNBINsFetchMiss()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINDeltasFetchMiss</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN_DELTA_FETCH_MISS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#FULL_BIN_MISS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#FULL_BIN_MISS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this stat does not include full BIN misses that are <i>not</i> due to BIN-delta</color>
<color=#75715e>   * mutations. See {@link #getNBINsFetchMiss()}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNFullBINsMiss</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>FULL_BIN_MISS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#UPPER_IN_FETCH_MISS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#UPPER_IN_FETCH_MISS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNUpperINsFetchMiss</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>UPPER_IN_FETCH_MISS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#BIN_FETCH_MISS_RATIO_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#BIN_FETCH_MISS_RATIO_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This stat can be misleading because it does not include the number of full BIN fetch misses</color>
<color=#75715e>   * resulting from BIN-delta mutations ({@link #getNFullBINsMiss()}. It may be improved, or perhaps</color>
<color=#75715e>   * deprecated, in a future release.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getNBINsFetchMissRatio</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN_FETCH_MISS_RATIO</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#BIN_DELTA_BLIND_OPS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#BIN_DELTA_BLIND_OPS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this stat is misplaced. It should be in the {@value</color>
<color=#75715e>   * DbiStatDefinition#ENV_GROUP_NAME} group and will probably be moved there in a future release.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   * @see EnvironmentConfig#TREE_BIN_DELTA</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINDeltaBlindOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN_DELTA_BLIND_OPS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#CACHED_UPPER_INS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#CACHED_UPPER_INS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When used on shared environment caches, zero is returned when {@link StatsConfig#setFast</color>
<color=#75715e>   * fast stats} are requested.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCachedUpperINs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CACHED_UPPER_INS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#CACHED_BINS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#CACHED_BINS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When used on shared environment caches, zero is returned when {@link StatsConfig#setFast</color>
<color=#75715e>   * fast stats} are requested.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCachedBINs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CACHED_BINS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#CACHED_BIN_DELTAS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#CACHED_BIN_DELTAS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When used on shared environment caches, zero is returned when {@link StatsConfig#setFast</color>
<color=#75715e>   * fast stats} are requested.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNCachedBINDeltas</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CACHED_BIN_DELTAS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#CACHED_IN_SPARSE_TARGET_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#CACHED_IN_SPARSE_TARGET_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Each IN contains an array of references to child INs or LNs. When there are between one and</color>
<color=#75715e>   * four children resident, the size of the array is reduced to four. This saves a significant</color>
<color=#75715e>   * amount of cache memory for BINs when {@link CacheMode#EVICT_LN} is used, because there are</color>
<color=#75715e>   * typically only a small number of LNs resident in main cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNINSparseTarget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CACHED_IN_SPARSE_TARGET</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#CACHED_IN_NO_TARGET_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#CACHED_IN_NO_TARGET_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Each IN contains an array of references to child INs or LNs. When there are no children</color>
<color=#75715e>   * resident, no array is allocated. This saves a significant amount of cache memory for BINs when</color>
<color=#75715e>   * {@link CacheMode#EVICT_LN} is used, because there are typically only a small number of LNs</color>
<color=#75715e>   * resident in main cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNINNoTarget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CACHED_IN_NO_TARGET</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#CACHED_IN_COMPACT_KEY_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#CACHED_IN_COMPACT_KEY_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizeOptimizations">Cache Statistics: Size Optimizations</a></color>
<color=#75715e>   * @see EnvironmentConfig#TREE_COMPACT_MAX_KEY_LENGTH</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNINCompactKeyIN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>CACHED_IN_COMPACT_KEY</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#PRI2_LRU_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#PRI2_LRU_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   * @see #getNNodesMovedToDirtyLRU()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDirtyLRUSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>PRI2_LRU_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#PRI1_LRU_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#PRI1_LRU_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   * @see #getNNodesMovedToDirtyLRU()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getMixedLRUSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>PRI1_LRU_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsEvictedEvictorThread</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsEvictedManual</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsEvictedCritical</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsEvictedCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBINsEvictedDaemon</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNUpperINsEvictedEvictorThread</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNUpperINsEvictedManual</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNUpperINsEvictedCritical</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNUpperINsEvictedCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNUpperINsEvictedDaemon</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBatchesEvictorThread</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBatchesManual</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBatchesCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBatchesCritical</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBatchesDaemon</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#N_BYTES_EVICTED_EVICTORTHREAD_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#N_BYTES_EVICTED_EVICTORTHREAD_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBytesEvictedEvictorThread</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTORTHREAD</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBytesEvictedStatDef</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#N_BYTES_EVICTED_MANUAL_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#N_BYTES_EVICTED_MANUAL_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBytesEvictedManual</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>MANUAL</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBytesEvictedStatDef</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#N_BYTES_EVICTED_CACHEMODE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#N_BYTES_EVICTED_CACHEMODE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBytesEvictedCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CACHEMODE</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBytesEvictedStatDef</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#N_BYTES_EVICTED_CRITICAL_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#N_BYTES_EVICTED_CRITICAL_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBytesEvictedCritical</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>CRITICAL</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBytesEvictedStatDef</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value EvictorStatDefinition#N_BYTES_EVICTED_DAEMON_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value EvictorStatDefinition#N_BYTES_EVICTED_DAEMON_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBytesEvictedDeamon</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>DAEMON</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBytesEvictedStatDef</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAvgBatchEvictorThread</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAvgBatchManual</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAvgBatchCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAvgBatchCritical</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @deprecated This statistic has been removed. The method returns 0 always. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAvgBatchDaemon</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* MemoryBudget stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value DbiStatDefinition#MB_SHARED_CACHE_TOTAL_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value DbiStatDefinition#MB_SHARED_CACHE_TOTAL_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, this method returns the total size of the shared</color>
<color=#75715e>   * cache, i.e., the sum of the {@link #getCacheTotalBytes()} for all environments that are sharing</color>
<color=#75715e>   * the cache. If this environment does <i>not</i> use the shared cache, this method returns zero.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To get the configured maximum cache size, see {@link EnvironmentMutableConfig#getCacheSize}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSharedCacheTotalBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_SHARED_CACHE_TOTAL_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value DbiStatDefinition#MB_TOTAL_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value DbiStatDefinition#MB_TOTAL_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method returns the sum of {@link #getDataBytes}, {@link #getAdminBytes}, {@link</color>
<color=#75715e>   * #getLockBytes} and {@link #getBufferBytes}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, this method returns only the amount used by this</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To get the configured maximum cache size, see {@link EnvironmentMutableConfig#getCacheSize}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCacheTotalBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_TOTAL_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value DbiStatDefinition#MB_DATA_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value DbiStatDefinition#MB_DATA_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The value returned by this method includes the amount returned by {@link</color>
<color=#75715e>   * #getDataAdminBytes}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, this method returns only the amount used by this</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDataBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_DATA_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value DbiStatDefinition#MB_DATA_ADMIN_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value DbiStatDefinition#MB_DATA_ADMIN_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, this method returns only the amount used by this</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDataAdminBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_DATA_ADMIN_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value DbiStatDefinition#MB_DOS_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value DbiStatDefinition#MB_DOS_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, this method returns only the amount used by this</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheUnexpectedSizes">Cache Statistics: Unexpected Sizes</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDOSBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_DOS_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value DbiStatDefinition#MB_ADMIN_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value DbiStatDefinition#MB_ADMIN_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, this method returns only the amount used by this</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAdminBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_ADMIN_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value DbiStatDefinition#MB_LOCK_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value EvictorStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value DbiStatDefinition#MB_LOCK_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, this method returns only the amount used by this</color>
<color=#75715e>   * environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheUnexpectedSizes">Cache Statistics: Unexpected Sizes</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLockBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_LOCK_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated Please use {@link #getDataBytes} to get the amount of cache used for data and use</color>
<color=#75715e>   *     {@link #getAdminBytes}, {@link #getLockBytes} and {@link #getBufferBytes} to get other</color>
<color=#75715e>   *     components of the total cache usage ({@link #getCacheTotalBytes}).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCacheDataBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getCacheTotalBytes</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>getBufferBytes</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* OffHeapCache stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#ALLOC_FAILURE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#ALLOC_FAILURE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Currently, with the default off-heap allocator, an allocation failure occurs only when</color>
<color=#75715e>   * OutOfMemoryError is thrown by {@code Unsafe.allocateMemory}. This might be considered a fatal</color>
<color=#75715e>   * error, since it means that no memory is available on the machine or VM. In practice, we have</color>
<color=#75715e>   * not seen this occur because Linux will automatically kill processes that are rapidly allocating</color>
<color=#75715e>   * memory when available memory is very low.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapAllocFailures</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOC_FAILURE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#ALLOC_OVERFLOW_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#ALLOC_OVERFLOW_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Currently, with the default off-heap allocator, this never happens because the allocator</color>
<color=#75715e>   * will perform the allocation as long as any memory is available. Even so, the off-heap evictor</color>
<color=#75715e>   * normally prevents overflowing of the off-heap cache by freeing memory before it is needed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapAllocOverflows</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOC_OVERFLOW</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#THREAD_UNAVAILABLE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#THREAD_UNAVAILABLE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapThreadUnavailable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>THREAD_UNAVAILABLE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#NODES_TARGETED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#NODES_TARGETED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Nodes are selected as targets by the evictor based on LRU, always selecting from the cold</color>
<color=#75715e>   * end of the LRU list. First, non-dirty nodes and nodes referring to off-heap LNs are selected</color>
<color=#75715e>   * based on LRU. When there are no more such nodes then dirty nodes with no off-heap LNs are</color>
<color=#75715e>   * selected, based on LRU.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An eviction target may actually be evicted, or skipped, or put back to the LRU, potentially</color>
<color=#75715e>   * after stripping child LNs or mutation to a BIN-delta.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapNodesTargeted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>NODES_TARGETED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#CRITICAL_NODES_TARGETED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#CRITICAL_NODES_TARGETED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheCriticalEviction">Cache Statistics: Critical Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapCriticalNodesTargeted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>CRITICAL_NODES_TARGETED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#NODES_EVICTED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#NODES_EVICTED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An evicted BIN is completely removed from the off-heap cache and LRU list. If it is dirty,</color>
<color=#75715e>   * it must be logged. A BIN is evicted only if it has no off-heap child LNs and it cannot be</color>
<color=#75715e>   * mutated to a BIN-delta.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapNodesEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>NODES_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#DIRTY_NODES_EVICTED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#DIRTY_NODES_EVICTED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This stat value is a subset of {@link #getOffHeapNodesEvicted()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapDirtyNodesEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_NODES_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#NODES_STRIPPED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#NODES_STRIPPED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a BIN is stripped, all off-heap LNs that the BIN refers to are evicted. The {@link</color>
<color=#75715e>   * #getOffHeapLNsEvicted()} stat is incremented accordingly.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A stripped BIN could be a BIN in main cache that is stripped of off-heap LNs, or a BIN that</color>
<color=#75715e>   * is off-heap and also refers to off-heap LNs. When a main cache BIN is stripped, it is removed</color>
<color=#75715e>   * from the off-heap LRU. When an off-heap BIN is stripped, it is either modified in place to</color>
<color=#75715e>   * remove the LN references (this is done when a small number of LNs are referenced and the wasted</color>
<color=#75715e>   * space is small), or is copied to a new, smaller off-heap block with no LN references.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>After stripping an off-heap BIN, it is moved to the hot end of the LRU list. Off-heap BINs</color>
<color=#75715e>   * are only mutated to BIN-deltas or evicted completely when they do not refer to any off-heap</color>
<color=#75715e>   * LNs. This gives BINs precedence over LNs in the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapNodesStripped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>NODES_STRIPPED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#NODES_MUTATED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#NODES_MUTATED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Mutation to a BIN-delta is performed for full BINs that do not refer to any off-heap LNs and</color>
<color=#75715e>   * can be represented as BIN-deltas in cache and on disk (see {@link</color>
<color=#75715e>   * EnvironmentConfig#TREE_BIN_DELTA}). When a BIN is mutated, it is is copied to a new, smaller</color>
<color=#75715e>   * off-heap block. After mutating an off-heap BIN, it is moved to the hot end of the LRU list.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapNodesMutated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>NODES_MUTATED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#NODES_SKIPPED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#NODES_SKIPPED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For example, a node will be skipped if it has been moved to the hot end of the LRU list by</color>
<color=#75715e>   * another thread, or more rarely, already processed by another evictor thread. This can occur</color>
<color=#75715e>   * because there is a short period of time where a targeted node has been removed from the LRU by</color>
<color=#75715e>   * the evictor thread, but not yet latched.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The number of skipped nodes is normally very small, compared to the number of targeted</color>
<color=#75715e>   * nodes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapNodesSkipped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cacheStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>NODES_SKIPPED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#LNS_EVICTED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#LNS_EVICTED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapLNsEvicted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>LNS_EVICTED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#LNS_LOADED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#LNS_LOADED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>LNs are loaded when requested by CRUD operations or other internal btree operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapLNsLoaded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>LNS_LOADED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#LNS_STORED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#LNS_STORED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>LNs are stored off-heap when they are evicted from the main cache. Note that when {@link</color>
<color=#75715e>   * CacheMode#EVICT_LN} is used, the LN resides in the main cache for a very short period since it</color>
<color=#75715e>   * is evicted after the CRUD operation is complete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapLNsStored</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>LNS_STORED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#BINS_LOADED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#BINS_LOADED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>BINs are loaded when needed by CRUD operations or other internal btree operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapBINsLoaded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>BINS_LOADED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#BINS_STORED_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#BINS_STORED_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>BINs are stored off-heap when they are evicted from the main cache. Note that when {@link</color>
<color=#75715e>   * CacheMode#EVICT_BIN} is used, the BIN resides in the main cache for a very short period since</color>
<color=#75715e>   * it is evicted after the CRUD operation is complete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapBINsStored</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>BINS_STORED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#CACHED_LNS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#CACHED_LNS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOffHeapCachedLNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>CACHED_LNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#CACHED_BINS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#CACHED_BINS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOffHeapCachedBINs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>CACHED_BINS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#CACHED_BIN_DELTAS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#CACHED_BIN_DELTAS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOffHeapCachedBINDeltas</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>CACHED_BIN_DELTAS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#TOTAL_BYTES_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#TOTAL_BYTES_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This includes the estimated overhead for off-heap memory blocks, as well as their contents.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To get the configured maximum off-heap cache size, see {@link</color>
<color=#75715e>   * EnvironmentMutableConfig#getOffHeapCacheSize()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapTotalBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>TOTAL_BYTES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#TOTAL_BLOCKS_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#TOTAL_BLOCKS_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>There is one block for each off-heap BIN and one for each off-heap LN. So the total number</color>
<color=#75715e>   * of blocks is the sum of {@link #getOffHeapCachedLNs} and {@link #getOffHeapCachedBINs}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapTotalBlocks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>TOTAL_BLOCKS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@value OffHeapStatDefinition#LRU_SIZE_DESC}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Group: {@value OffHeapStatDefinition#GROUP_NAME} <br></color>
<color=#75715e>   * Name: {@value OffHeapStatDefinition#LRU_SIZE_NAME}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The off-heap LRU list is stored in the Java heap. Each entry occupies 20 bytes of memory</color>
<color=#75715e>   * when compressed oops are used, or 24 bytes otherwise. This memory is not considered part of the</color>
<color=#75715e>   * JE main cache, and is not included in main cache statistics.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>There is one LRU entry for each off-heap BIN, and one for each BIN in main cache that refers</color>
<color=#75715e>   * to one or more off-heap LNs. The latter approach avoids an LRU entry per off-heap LN, which</color>
<color=#75715e>   * would use excessive amounts of space in the Java heap. Similarly, when an off-heap BIN refers</color>
<color=#75715e>   * to off-heap LNs, only one LRU entry (for the BIN) is used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this environment uses the shared cache, the return value is the total for all</color>
<color=#75715e>   * environments that are sharing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapLRUSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>OffHeapStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>LRU_SIZE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* EnvironmentImpl stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of latch upgrades (relatches) required while operating on this Environment.</color>
<color=#75715e>   * Latch upgrades are required when an operation assumes that a shared (read) latch will be</color>
<color=#75715e>   * sufficient but later determines that an exclusive (write) latch will actually be required.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of latch upgrades (relatches) required.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getRelatchesRequired</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_RELATCHES_REQUIRED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* TxnManager stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Total lock owners in lock table. Only provided when {@link Environment#getStats</color>
<color=#75715e>   * Environment.getStats} is called in "slow" mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNOwners</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCK_OWNERS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Total read locks currently held. Only provided when {@link Environment#getStats</color>
<color=#75715e>   * Environment.getStats} is called in "slow" mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNReadLocks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCK_READ_LOCKS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Total locks currently in lock table. Only provided when {@link Environment#getStats</color>
<color=#75715e>   * Environment.getStats} is called in "slow" mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNTotalLocks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCK_TOTAL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Total transactions waiting for locks. Only provided when {@link Environment#getStats</color>
<color=#75715e>   * Environment.getStats} is called in "slow" mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNWaiters</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCK_WAITERS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Total write locks currently held. Only provided when {@link Environment#getStats</color>
<color=#75715e>   * Environment.getStats} is called in "slow" mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNWriteLocks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCK_WRITE_LOCKS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Total number of lock requests to date. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNRequests</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCK_REQUESTS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Total number of lock waits to date. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNWaits</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LOCK_WAITS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Number of acquires of lock table latch with no contention. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNAcquiresNoWaiters</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LATCH_NO_WAITERS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Number of acquires of lock table latch when it was already owned by the caller. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNAcquiresSelfOwned</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LATCH_SELF_OWNED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Number of acquires of lock table latch when it was already owned by another thread. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNAcquiresWithContention</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LATCH_CONTENTION</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Number of successful no-wait acquires of the lock table latch. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNAcquiresNoWaitSuccessful</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LATCH_NOWAIT_SUCCESS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Number of unsuccessful no-wait acquires of the lock table latch. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNAcquiresNoWaitUnSuccessful</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LATCH_NOWAIT_UNSUCCESS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Number of releases of the lock table latch. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNReleases</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>LATCH_RELEASES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of user (non-internal) Cursor and Database get operations performed in BIN deltas.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBinDeltaGetOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_BIN_DELTA_GETS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of user (non-internal) Cursor and Database insert operations performed in BIN deltas</color>
<color=#75715e>   * (these are insertions performed via the various put methods).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBinDeltaInsertOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_BIN_DELTA_INSERTS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of user (non-internal) Cursor and Database update operations performed in BIN deltas</color>
<color=#75715e>   * (these are updates performed via the various put methods).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBinDeltaUpdateOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_BIN_DELTA_UPDATES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of user (non-internal) Cursor and Database delete operations performed in BIN</color>
<color=#75715e>   * deltas.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNBinDeltaDeleteOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImplStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_BIN_DELTA_DELETES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful primary DB key search operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to one of the following API calls:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>A successful {@link Cursor#get(DatabaseEntry, DatabaseEntry, Get, ReadOptions)</color>
<color=#75715e>   *       Cursor.get} or {@link Database#get(Transaction, DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   *       ReadOptions) Database.get} call with {@link Get#SEARCH}, {@link Get#SEARCH_GTE}, {@link</color>
<color=#75715e>   *       Get#SEARCH_BOTH}, or {@link Get#SEARCH_BOTH_GTE}.</color>
<color=#75715e>   *   <li>A successful {@link SecondaryCursor#get(DatabaseEntry, DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   *       ReadOptions) SecondaryCursor.get} or {@link SecondaryDatabase#get(Transaction,</color>
<color=#75715e>   *       DatabaseEntry, DatabaseEntry, DatabaseEntry, Get, ReadOptions) SecondaryDatabase.get}</color>
<color=#75715e>   *       call when the primary data is requested (via the {@code data} param). This call</color>
<color=#75715e>   *       internally performs a key search operation in the primary DB in order to return the data.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriSearchOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_SEARCH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of failed primary DB key search operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a call to {@link Cursor#get(DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions) Cursor.get} or {@link Database#get(Transaction, DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions) Database.get} with {@link Get#SEARCH}, {@link Get#SEARCH_GTE}, {@link</color>
<color=#75715e>   * Get#SEARCH_BOTH}, or {@link Get#SEARCH_BOTH_GTE}, when the specified key is not found in the</color>
<color=#75715e>   * DB.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriSearchFailOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_SEARCH_FAIL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful secondary DB key search operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link SecondaryCursor#get(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, DatabaseEntry, Get, ReadOptions) SecondaryCursor.get} or {@link</color>
<color=#75715e>   * SecondaryDatabase#get(Transaction, DatabaseEntry, DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions) SecondaryDatabase.get} with {@link Get#SEARCH}, {@link Get#SEARCH_GTE}, {@link</color>
<color=#75715e>   * Get#SEARCH_BOTH}, or {@link Get#SEARCH_BOTH_GTE}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: Operations are currently counted as secondary DB (rather than primary DB) operations</color>
<color=#75715e>   * only if the DB has been opened by the application as a secondary DB. In particular the stats</color>
<color=#75715e>   * may be confusing on an HA replica node if a secondary DB has not been opened by the application</color>
<color=#75715e>   * on the replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSecSearchOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_SEC_SEARCH</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of failed secondary DB key search operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a call to {@link SecondaryCursor#get(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, DatabaseEntry, Get, ReadOptions) SecondaryCursor.get} or {@link</color>
<color=#75715e>   * SecondaryDatabase#get(Transaction, DatabaseEntry, DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions) SecondaryDatabase.get} with {@link Get#SEARCH}, {@link Get#SEARCH_GTE}, {@link</color>
<color=#75715e>   * Get#SEARCH_BOTH}, or {@link Get#SEARCH_BOTH_GTE}, when the specified key is not found in the</color>
<color=#75715e>   * DB.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: Operations are currently counted as secondary DB (rather than primary DB) operations</color>
<color=#75715e>   * only if the DB has been opened by the application as a secondary DB. In particular the stats</color>
<color=#75715e>   * may be confusing on an HA replica node if a secondary DB has not been opened by the application</color>
<color=#75715e>   * on the replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSecSearchFailOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_SEC_SEARCH_FAIL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful primary DB position operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link Cursor#get(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Get, ReadOptions) Cursor.get} or {@link Database#get(Transaction, DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Get, ReadOptions) Database.get} with {@link Get#FIRST}, {@link Get#LAST}, {@link</color>
<color=#75715e>   * Get#NEXT}, {@link Get#NEXT_DUP}, {@link Get#NEXT_NO_DUP}, {@link Get#PREV}, {@link</color>
<color=#75715e>   * Get#PREV_DUP} or {@link Get#PREV_NO_DUP}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriPositionOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_POSITION</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful secondary DB position operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link SecondaryCursor#get(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, DatabaseEntry, Get, ReadOptions) SecondaryCursor.get} or {@link</color>
<color=#75715e>   * SecondaryDatabase#get(Transaction, DatabaseEntry, DatabaseEntry, DatabaseEntry, Get,</color>
<color=#75715e>   * ReadOptions) SecondaryDatabase.get} with {@link Get#FIRST}, {@link Get#LAST}, {@link Get#NEXT},</color>
<color=#75715e>   * {@link Get#NEXT_DUP}, {@link Get#NEXT_NO_DUP}, {@link Get#PREV}, {@link Get#PREV_DUP} or {@link</color>
<color=#75715e>   * Get#PREV_NO_DUP}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: Operations are currently counted as secondary DB (rather than primary DB) operations</color>
<color=#75715e>   * only if the DB has been opened by the application as a secondary DB. In particular the stats</color>
<color=#75715e>   * may be confusing on an HA replica node if a secondary DB has not been opened by the application</color>
<color=#75715e>   * on the replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSecPositionOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_SEC_POSITION</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful primary DB insertion operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link Cursor#put(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Put, WriteOptions) Cursor.put} or {@link Database#put(Transaction,</color>
<color=#75715e>   * DatabaseEntry, DatabaseEntry, Put, WriteOptions) Database.put} in one of the following cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>When {@link Put#NO_OVERWRITE} or {@link Put#NO_DUP_DATA} is specified.</color>
<color=#75715e>   *   <li>When {@link Put#OVERWRITE} is specified and the key was inserted because it previously</color>
<color=#75715e>   *       did not exist in the DB.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriInsertOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_INSERT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of failed primary DB insertion operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a call to {@link Cursor#put(DatabaseEntry, DatabaseEntry, Put,</color>
<color=#75715e>   * WriteOptions) Cursor.put} or {@link Database#put(Transaction, DatabaseEntry, DatabaseEntry,</color>
<color=#75715e>   * Put, WriteOptions) Database.put} with {@link Put#NO_OVERWRITE} or {@link Put#NO_DUP_DATA}, when</color>
<color=#75715e>   * the key could not be inserted because it previously existed in the DB.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriInsertFailOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_INSERT_FAIL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful secondary DB insertion operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link Cursor#put(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Put, WriteOptions) Cursor.put} or {@link Database#put(Transaction,</color>
<color=#75715e>   * DatabaseEntry, DatabaseEntry, Put, WriteOptions) Database.put}, for a primary DB with an</color>
<color=#75715e>   * associated secondary DB. A secondary record is inserted when inserting a primary record with a</color>
<color=#75715e>   * non-null secondary key, or when updating a primary record and the secondary key is changed to</color>
<color=#75715e>   * to a non-null value that is different than the previously existing value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: Operations are currently counted as secondary DB (rather than primary DB) operations</color>
<color=#75715e>   * only if the DB has been opened by the application as a secondary DB. In particular the stats</color>
<color=#75715e>   * may be confusing on an HA replica node if a secondary DB has not been opened by the application</color>
<color=#75715e>   * on the replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSecInsertOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_SEC_INSERT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful primary DB update operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link Cursor#put(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Put, WriteOptions) Cursor.put} or {@link Database#put(Transaction,</color>
<color=#75715e>   * DatabaseEntry, DatabaseEntry, Put, WriteOptions) Database.put} in one of the following cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>When {@link Put#OVERWRITE} is specified and the key previously existed in the DB.</color>
<color=#75715e>   *   <li>When calling {@code Cursor.put} with {@link Put#CURRENT}.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriUpdateOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_UPDATE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful secondary DB update operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link Cursor#put(DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Put, WriteOptions) Cursor.put} or {@link Database#put(Transaction,</color>
<color=#75715e>   * DatabaseEntry, DatabaseEntry, Put, WriteOptions) Database.put}, when a primary record is</color>
<color=#75715e>   * updated and its TTL is changed. The associated secondary records must also be updated to</color>
<color=#75715e>   * reflect the change in the TTL.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: Operations are currently counted as secondary DB (rather than primary DB) operations</color>
<color=#75715e>   * only if the DB has been opened by the application as a secondary DB. In particular the stats</color>
<color=#75715e>   * may be confusing on an HA replica node if a secondary DB has not been opened by the application</color>
<color=#75715e>   * on the replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSecUpdateOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_SEC_UPDATE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful primary DB deletion operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a successful call to {@link Cursor#delete() Cursor.delete},</color>
<color=#75715e>   * {@link Database#delete(Transaction, DatabaseEntry, WriteOptions) Database.delete}, {@link</color>
<color=#75715e>   * SecondaryCursor#delete() SecondaryCursor.delete} or {@link</color>
<color=#75715e>   * SecondaryDatabase#delete(Transaction, DatabaseEntry, WriteOptions) SecondaryDatabase.delete}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriDeleteOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_DELETE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of failed primary DB deletion operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to a call to {@link Database#delete(Transaction, DatabaseEntry,</color>
<color=#75715e>   * WriteOptions) Database.delete} or {@link SecondaryDatabase#delete(Transaction, DatabaseEntry,</color>
<color=#75715e>   * WriteOptions) SecondaryDatabase.delete}, when the key could not be deleted because it did not</color>
<color=#75715e>   * previously exist in the DB.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPriDeleteFailOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_PRI_DELETE_FAIL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of successful secondary DB deletion operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation corresponds to one of the following API calls:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>A successful call to {@link Cursor#delete() Cursor.delete} or {@link</color>
<color=#75715e>   *       Database#delete(Transaction, DatabaseEntry, WriteOptions) Database.delete}, that deletes</color>
<color=#75715e>   *       a primary record containing a non-null secondary key.</color>
<color=#75715e>   *   <li>A successful call to {@link SecondaryCursor#delete() SecondaryCursor.delete} or {@link</color>
<color=#75715e>   *       SecondaryDatabase#delete(Transaction, DatabaseEntry, WriteOptions)</color>
<color=#75715e>   *       SecondaryDatabase.delete}.</color>
<color=#75715e>   *   <li>A successful call to {@link Cursor#put(DatabaseEntry, DatabaseEntry, Put, WriteOptions)</color>
<color=#75715e>   *       Cursor.put} or {@link Database#put(Transaction, DatabaseEntry, DatabaseEntry, Put,</color>
<color=#75715e>   *       WriteOptions) Database.put} that updates a primary record and changes its previously</color>
<color=#75715e>   *       non-null secondary key to null.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: Operations are currently counted as secondary DB (rather than primary DB) operations</color>
<color=#75715e>   * only if the DB has been opened by the application as a secondary DB. In particular the stats</color>
<color=#75715e>   * may be confusing on an HA replica node if a secondary DB has not been opened by the application</color>
<color=#75715e>   * on the replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSecDeleteOps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>throughputStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>THROUGHPUT_SEC_DELETE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a String representation of the stats in the form of &lt;stat&gt;=&lt;value&gt; */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getStatGroups</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a String representation of the stats which includes stats descriptions in addition to</color>
<color=#75715e>   * &lt;stat&gt;=&lt;value&gt;</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toStringVerbose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getStatGroups</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>toStringVerbose</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. JConsole plugin support: Get tips for stats. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getTips</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>tipsMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getStatGroups</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>addToTipMap</color><color=#f8f8f2>(</color><color=#f8f8f2>tipsMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>tipsMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>