<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.trigger.PersistentTrigger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.trigger.TransactionTrigger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.trigger.Trigger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Class that invokes the triggers associated with a database. It encapsulates the mechanics</color>
<color=#75715e> * associated with actually invoking a trigger.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TriggerManager</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Invokes the trigger methods associated with the opening of a database. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runOpenTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNew</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>runOpenTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getDbImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>),</color> <color=#f8f8f2>isNew</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invokes the trigger methods associated with the opening of a database. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runOpenTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isNew</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#f8f8f2>isNew</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>getOpenTriggerEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>((</color><color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>).</color><color=#a6e22e>open</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>isNew</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the environment handle that will be passed in as an argument to a database open</color>
<color=#75715e>   * trigger.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To ensure that an environment handle is always available, an internal handle is created and</color>
<color=#75715e>   * stored in the EnvironmentImpl. The lifetime of the internal handle (Environment or</color>
<color=#75715e>   * ReplicatedEnvironment) roughly aligns with the lifetime of the underlying EnvironmentImpl, or</color>
<color=#75715e>   * it's subtype RepImpl.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For standalone environments, using explicit transactions, the environment handle that's</color>
<color=#75715e>   * passed as the argument is the one used to initiate the transaction. When using AutoTransactions</color>
<color=#75715e>   * to open a database, the environment argument to the trigger is the internal environment handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For replicated environments, the argument to the trigger is the internal environment handle</color>
<color=#75715e>   * in all cases. This is done to make the behavior of the parameter deterministic and independent</color>
<color=#75715e>   * of the interaction of the application level database open operations with those initiated from</color>
<color=#75715e>   * the "replay" stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param transaction the transaction associated with the trigger</color>
<color=#75715e>   * @return the environment or null (if the environment is non-transactional)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>getOpenTriggerEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>transaction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transaction</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>transaction</color><color=#f8f8f2>).</color><color=#a6e22e>getEnvironmentImpl</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Always return the same internal environment handle for replicated</color>
<color=#75715e>     * environments.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalEnvHandle</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Returns the environment handle associated with the transaction. It's</color>
<color=#75715e>     * the internal handle for auto transactions, and the application</color>
<color=#75715e>     * supplied handle used during transaction creation in all other cases.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>transaction</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invokes the trigger methods associated with the closing of a database. Note that this also</color>
<color=#75715e>   * results in the invocation of removeTrigger methods, for transient triggers.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runCloseTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>((</color><color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>).</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invokes the trigger methods associated with the removal of a database. Note that this also</color>
<color=#75715e>   * results in the invocation of removeTrigger methods.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runRemoveTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>((</color><color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>).</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>dbt</color><color=#f8f8f2>.</color><color=#a6e22e>removeTrigger</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invokes the trigger methods associated with the truncation of a database. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runTruncateTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>newDb</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>((</color><color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>).</color><color=#a6e22e>truncate</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>dbt</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invokes the trigger methods associated with the renaming of a database. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runRenameTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>((</color><color=#f8f8f2>PersistentTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>).</color><color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>dbt</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Transaction level triggers. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invokes the trigger methods associated with the commit of a transaction. Trigger methods are</color>
<color=#75715e>   * only invoked if the txn was associated with a trigger invocation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runCommitTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Txn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>triggerDbs</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getTriggerDbs</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggerDbs</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f8f8f2>:</color> <color=#f8f8f2>triggerDbs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>TransactionTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>TransactionTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>).</color><color=#a6e22e>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invokes the trigger methods associated with the abort of a transaction. Trigger methods are</color>
<color=#75715e>   * only invoked if the txn was associated with a trigger invocation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runAbortTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>Txn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>triggerDbs</color> <color=#f92672>=</color> <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getTriggerDbs</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggerDbs</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f8f8f2>:</color> <color=#f8f8f2>triggerDbs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>TransactionTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>TransactionTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>).</color><color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>dbt</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                  <color=#f8f8f2>dbt</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invokes the trigger methods associated with a put operation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runPutTriggers</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>newData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>newData</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>dbt</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invokes the trigger methods associated with a delete operation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runDeleteTriggers</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>runTriggers</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#a6e22e>@Override</color>
          <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>dbt</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldData</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Generic method for invoking any trigger operation. It iterates over all the triggers associated</color>
<color=#75715e>   * with the database and if the trigger fails invalidates the environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dbImpl the database associated with potential triggers</color>
<color=#75715e>   * @param locker provides the transaction associated with the operation</color>
<color=#75715e>   * @param invoker encapsulates the trigger invoker</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>runTriggers</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>TriggerInvoker</color> <color=#f8f8f2>invoker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>triggers</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTriggers</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Txn</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTransaction</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f8f8f2>:</color> <color=#f8f8f2>triggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color> <color=#f92672>=</color> <color=#f8f8f2>trigger</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>invoker</color><color=#f8f8f2>.</color><color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Note the use of a trigger for the database so that the appropriate</color>
<color=#75715e>     * commit/abort triggers can be run.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>invoker</color><color=#f8f8f2>.</color><color=#a6e22e>invokeTransactionTrigger</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>).</color><color=#a6e22e>noteTriggerDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Utility class used to faciliatte the dispatch to a trigger method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>TriggerInvoker</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * Determines whether a subsequent transaction trigger should be</color>
<color=#75715e>     * invoked.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>invokeTransactionTrigger</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>TriggerInvoker</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>invokeTransactionTrigger</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>();</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>invokeTransactionTrigger</color> <color=#f92672>=</color> <color=#f8f8f2>invokeTransactionTrigger</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Runs the specific trigger method. */</color>
    <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>triggerTransaction</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color> <color=#f8f8f2>dbt</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determines whether the subsequent commit/abort trigger should be</color>
<color=#75715e>     * invoked.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>invokeTransactionTrigger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>invokeTransactionTrigger</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invoke the triggers associated with the addition or removal of the trigger itself. They are</color>
<color=#75715e>   * typically invoked upon database open, or database removal.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param locker the locker associated with the trigger update operation</color>
<color=#75715e>   * @param oldTriggers the current list of triggers</color>
<color=#75715e>   * @param newTriggers the new list of triggers</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>invokeAddRemoveTriggers</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>oldTriggers</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Trigger</color><color=#f92672>></color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>oldNames</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>MapOver</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>oldTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#a6e22e>@Override</color>
          <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>fun</color><color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}.</color><color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>());</color>

    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>newNames</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>MapOver</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Trigger</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>newTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#a6e22e>@Override</color>
          <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>fun</color><color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}.</color><color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>());</color>

    <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Txn</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTransaction</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/* First invoke removeTrigger */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f8f8f2>:</color> <color=#f8f8f2>oldTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>newNames</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>trigger</color><color=#f8f8f2>.</color><color=#a6e22e>removeTrigger</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Now invoke addTrigger */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newTriggers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Trigger</color> <color=#f8f8f2>trigger</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newTriggers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oldNames</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>trigger</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>trigger</color><color=#f8f8f2>.</color><color=#a6e22e>addTrigger</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Lisp inspired Map function.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param <R> The result element type for the list being returned.</color>
<color=#75715e>   * @param <E> The type of the element being mapped over.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>MapOver</color><color=#f92672><</color><color=#f8f8f2>R</color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>MapOver</color><color=#f8f8f2>(</color><color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>c</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
    <color=#66d9ef>public</color> <color=#f92672><</color><color=#f8f8f2>S</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>R</color><color=#f92672>>></color> <color=#f8f8f2>S</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>R</color><color=#f92672>></color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><</color><color=#f8f8f2>R</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>S</color><color=#f8f8f2>)</color> <color=#f8f8f2>run</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f92672><</color><color=#f8f8f2>S</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>R</color><color=#f92672>>></color> <color=#f8f8f2>S</color> <color=#a6e22e>run</color><color=#f8f8f2>(</color><color=#f8f8f2>S</color> <color=#f8f8f2>l</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>e</color> <color=#f8f8f2>:</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>fun</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* The function invoked for each element in the collection. */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>R</color> <color=#a6e22e>fun</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>