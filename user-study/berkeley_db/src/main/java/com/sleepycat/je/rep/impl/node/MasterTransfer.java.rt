<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ThreadInterruptedException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.MasterTransferFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicatedEnvironment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Elections</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Learner</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.MasterValue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.Proposal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.WinningProposal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.TimebasedProposalGenerator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepNodeImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils.ExceptionAwareBlockingQueue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.CountDownLatch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Master Transfer operation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Each Master Transfer operation uses a separate instance of this class. There is usually no</color>
<color=#75715e> * more than one instance in the lifetime of a master node, because if the transfer succeeds, the</color>
<color=#75715e> * old master node environment becomes invalid and must be closed. However, if an operation times</color>
<color=#75715e> * out, another operation can try again later. Or, a second operation can "forcibly" supersede an</color>
<color=#75715e> * existing operation in progress.</color>
<color=#75715e> *</color>
<color=#75715e> * @see ReplicatedEnvironment#transferMaster(Set, int, TimeUnit)</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>MasterTransfer</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>replicas</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTimeMs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>deadlineTimeMs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>VLSN</color><color=#f92672>></color> <color=#f8f8f2>readyReplicas</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>CountDownLatch</color> <color=#f8f8f2>blocker</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag that indicates we've reached the point where we're committed to proceeding with the</color>
<color=#75715e>   * transfer: we've completed phase 2, chosen a winner, and are now notifying everyone of the new</color>
<color=#75715e>   * (fake) election result. Once we get to this point, we can't allow a new Master Transfer</color>
<color=#75715e>   * operation attempt to supersede us.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Queue which communicates key events of interest from Feeders regarding the progress of their</color>
<color=#75715e>   * efforts to catch up with the end of the log. The existence of this object signifies that (1)</color>
<color=#75715e>   * the owning Master Transfer object is viable (hasn't been superseded by a later, "forcing" MT</color>
<color=#75715e>   * operation); and (2) we have not yet discovered a winner. Once we have chosen a winner we</color>
<color=#75715e>   * disallow any future attempt to supersede this operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #abort</color>
<color=#75715e>   * @see RepNode#setUpTransfer</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ExceptionAwareBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>VLSNProgress</color><color=#f92672>></color> <color=#f8f8f2>eventQueue</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>

  <color=#f8f8f2>MasterTransfer</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>replicas</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>replicas</color> <color=#f92672>=</color> <color=#f8f8f2>replicas</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>startTimeMs</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>deadlineTimeMs</color> <color=#f92672>=</color> <color=#f8f8f2>startTimeMs</color> <color=#f92672>+</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
        <color=#e6db74>"Start Master Transfer for "</color>
            <color=#f92672>+</color> <color=#f8f8f2>timeout</color>
            <color=#f92672>+</color> <color=#e6db74>" msec, targeting: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>replicas</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>readyReplicas</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>VLSN</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>replicas</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>eventQueue</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ExceptionAwareBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>VLSNProgress</color><color=#f92672>></color><color=#f8f8f2>(</color>
            <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>VLSNProgress</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Aborts an existing, in-progress Master Transfer operation, if it hasn't reached the point of no</color>
<color=#75715e>   * return.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true, if the operation was cancelled, false if it's too late for a clean cancellation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ExceptionAwareBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>VLSNProgress</color><color=#f92672>></color> <color=#f8f8f2>queue</color> <color=#f92672>=</color> <color=#f8f8f2>getQueue</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>queue</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>releasePoll</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Accepts a Progress event and posts it to our queue for processing by the Master Transfer</color>
<color=#75715e>   * operation thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>noteProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSNProgress</color> <color=#f8f8f2>p</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ExceptionAwareBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>VLSNProgress</color><color=#f92672>></color> <color=#f8f8f2>queue</color> <color=#f92672>=</color> <color=#f8f8f2>getQueue</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>queue</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>p</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Informs this Master Transfer operation that the named Feeder is shutting down, because its</color>
<color=#75715e>   * replica connection has been lost. This of course means that we can't expect this Feeder to soon</color>
<color=#75715e>   * catch up with our VLSN. In particular, if we have reached Phase 2 on the strength of the</color>
<color=#75715e>   * progress of only this one Feeder, then we must revert back to Phase 1.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Actually all we do here is post a special kind of "progress" event to our queue; it gets</color>
<color=#75715e>   * processed for real in the {@code chooseReplica()} thread, along with all the other events.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #chooseReplica</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>giveUp</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>replicaNodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>noteProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSNProgress</color><color=#f8f8f2>.</color><color=#a6e22e>makeFeederDeathEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>replicaNodeName</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>ExceptionAwareBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>VLSNProgress</color><color=#f92672>></color> <color=#a6e22e>getQueue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>eventQueue</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs the core processing of a Master Transfer operation. We first wait for one of the</color>
<color=#75715e>   * candidate target replica nodes to become completely synchronized. We then send a message to all</color>
<color=#75715e>   * nodes in the group (including ourselves) announcing which node is to become the new master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the operation fails we release any transaction commit/abort threads that may have been</color>
<color=#75715e>   * blocked during phase 2 of the wait. However, in the success case the release of any such</color>
<color=#75715e>   * transaction threads is done as a natural by-product of the transition of the environment from</color>
<color=#75715e>   * master to replica status.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>transfer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>chooseReplica</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTransferFailureException</color><color=#f8f8f2>(</color><color=#f8f8f2>getTimeoutMsg</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>eventQueue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>annouceWinner</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterTransferFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Master Transfer operation failed: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>ie</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ie</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>eventQueue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>done</color> <color=#f92672>&&</color> <color=#f8f8f2>blocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>blocker</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Prepares for a Master Transfer operation by waiting for one of the nominated candidate target</color>
<color=#75715e>   * replica nodes to catch up with the master, in two phases, as described in {@link</color>
<color=#75715e>   * ReplicatedEnvironment#transferMaster(Set, int, TimeUnit)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method works by observing events generated by Feeder threads and passed to us via a</color>
<color=#75715e>   * queue.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the node name of the first replica to complete phase 2 of the preparation, or {@code</color>
<color=#75715e>   *     null} if the operation times out.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>chooseReplica</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ExceptionAwareBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>VLSNProgress</color><color=#f92672>></color> <color=#f8f8f2>queue</color> <color=#f92672>=</color> <color=#f8f8f2>getQueue</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>queue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FeederManager</color> <color=#f8f8f2>feederManager</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#f8f8f2>activeReplicas</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>activeReplicasMap</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color> <color=#f8f8f2>:</color> <color=#f8f8f2>replicas</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f92672>=</color> <color=#f8f8f2>activeReplicas</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>setMasterTransfer</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Phase 1 could last a long time, if all of our candidate replicas are</color>
<color=#75715e>     * still catching up (or not even connected); so we allow new</color>
<color=#75715e>     * transactions to be written.  But once we get to phase 2 we block</color>
<color=#75715e>     * commit/abort operations for a final (quicker) catch-up.  Thus we can</color>
<color=#75715e>     * tell whether we're in phase 2 by whether we have a non-null blocker.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pollTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>deadlineTimeMs</color> <color=#f92672>-</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>VLSNProgress</color> <color=#f8f8f2>event</color> <color=#f92672>=</color> <color=#f8f8f2>queue</color><color=#f8f8f2>.</color><color=#a6e22e>pollOrException</color><color=#f8f8f2>(</color><color=#f8f8f2>pollTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>event</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>endVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentTxnEndVLSN</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>isFeederDeathEvent</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readyReplicas</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>replicaNodeName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>readyReplicas</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Must revert back to phase 1.  The latch will still</color>
<color=#75715e>           * exist, because we've passed it to repImpl; and this is</color>
<color=#75715e>           * exactly what we want, so that blocked txns can proceed,</color>
<color=#75715e>           * and new ones won't get blocked for now.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>blocker</color><color=#f8f8f2>.</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>blocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blocker</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* phase 1 */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>readyReplicas</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>readyReplicas</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>replicaNodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>vlsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>blocker</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CountDownLatch</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>blockTxnCompletion</color><color=#f8f8f2>(</color><color=#f8f8f2>blocker</color><color=#f8f8f2>);</color>
        <color=#75715e>/*</color>
<color=#75715e>         * >= comparison, here and below, since currentTxnEndVLSN can</color>
<color=#75715e>         * lag the latest txnEndVLSN actually written to the log.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>endVLSN</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>replicaNodeName</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* phase 2 */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>endVLSN</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>replicaNodeName</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * The present VLSN does not match the ultimate target</color>
<color=#75715e>           * VLSN, so we're not done yet.  Since there could be a few</color>
<color=#75715e>           * events of this type, only log all of them at the</color>
<color=#75715e>           * {@code FINE} level.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>readyReplicas</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>replicaNodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>vlsn</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Emit log message after the fact */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>level</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Master Transfer progress: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>replicaNodeName</color>
              <color=#f92672>+</color> <color=#e6db74>", "</color>
              <color=#f92672>+</color> <color=#f8f8f2>event</color><color=#f8f8f2>.</color><color=#a6e22e>vlsn</color>
              <color=#f92672>+</color> <color=#e6db74>", phase: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>blocker</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>", endVLSN: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>endVLSN</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Broadcasts a fake election result message. This does a couple things: (1) prods the chosen</color>
<color=#75715e>   * replica to become the new master; and (2) forces the old master to notice and shut down with a</color>
<color=#75715e>   * master-replica transition exception.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>annouceWinner</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>group</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getNode</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>MasterValue</color> <color=#f8f8f2>newMaster</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>MasterValue</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketAddress</color><color=#f8f8f2>().</color><color=#a6e22e>getHostName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketAddress</color><color=#f8f8f2>().</color><color=#a6e22e>getPort</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimebasedProposalGenerator</color><color=#f8f8f2>().</color><color=#a6e22e>nextProposal</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Elections</color> <color=#f8f8f2>elections</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getElections</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getLearner</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>informLearners</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getAllLearnerSockets</color><color=#f8f8f2>(),</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>WinningProposal</color><color=#f8f8f2>(</color><color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>newMaster</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>),</color>
        <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocol</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getThreadPool</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
        <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Enables the given {@code Feeder} to contribute to this Master Transfer operation. Called from</color>
<color=#75715e>   * the {@code FeederManager} when a new {@code Feeder} is established during the time when a</color>
<color=#75715e>   * Master Transfer operation is already in progress.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicas</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Add node "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>" to existing Master Transfer"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>setMasterTransfer</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getStartTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>startTimeMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Generates a detailed error message for the case when the operation times out. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>getTimeoutMsg</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"Timed out: started at "</color>
        <color=#f92672>+</color> <color=#66d9ef>new</color> <color=#f8f8f2>Date</color><color=#f8f8f2>(</color><color=#f8f8f2>startTimeMs</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" for "</color>
        <color=#f92672>+</color> <color=#f8f8f2>timeout</color>
        <color=#f92672>+</color> <color=#e6db74>" milliseconds\n"</color>
        <color=#f92672>+</color> <color=#e6db74>"master's VLSN: "</color>
        <color=#f92672>+</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentTxnEndVLSN</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>dumpAckFeederState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An event of interest in the pursuit of our goal of completing the Master Transfer. Generally it</color>
<color=#75715e>   * indicates that the named replica has received and processed the transaction identified by the</color>
<color=#75715e>   * given VLSN. As a special case, an event representing the death of a Feeder is represented by a</color>
<color=#75715e>   * {@code null} VLSN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>VLSNProgress</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>replicaNodeName</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>VLSNProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>replicaNodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>vlsn</color> <color=#f92672>=</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>replicaNodeName</color> <color=#f92672>=</color> <color=#f8f8f2>replicaNodeName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#f8f8f2>VLSNProgress</color> <color=#a6e22e>makeFeederDeathEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>VLSNProgress</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>VLSN</color> <color=#a6e22e>getVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>vlsn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>isFeederDeathEvent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>vlsn</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>