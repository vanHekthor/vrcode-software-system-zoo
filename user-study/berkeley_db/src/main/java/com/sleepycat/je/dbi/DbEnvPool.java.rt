<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchSupport</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHookExecute</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Singleton collection of environments. Responsible for environment open and close, supporting this</color>
<color=#75715e> * from multiple threads by synchronizing on the pool.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To avoid multiple environment openings from being blocked by recovery in getEnvironment(), the</color>
<color=#75715e> * EnvironmentImpl constructor is broken into two parts, with the second part</color>
<color=#75715e> * (EnvironmentImpl.finishInit) doing the recovery.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When synchronizing on two or more of the following objects the synchronization order must be</color>
<color=#75715e> * as follows. Synchronization is not performed in constructors, of course, because no other thread</color>
<color=#75715e> * can access the object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Synchronization order: Environment, DbEnvPool, EnvironmentImpl, Evictor</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DbEnvPool</color> <color=#f8f8f2>{</color>
  <color=#75715e>/* Singleton instance. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DbEnvPool</color> <color=#f8f8f2>pool</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Collection of environment handles, mapped by canonical directory</color>
<color=#75715e>   * name->EnvironmentImpl object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color> <color=#f8f8f2>envs</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Environments (subset of envs) that share the global cache. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color> <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Test hook, during Environment creation. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color> <color=#f8f8f2>beforeFinishInitHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Enforce singleton behavior. */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>DbEnvPool</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>envs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>sharedCacheEnvs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Access the singleton instance. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DbEnvPool</color> <color=#a6e22e>getInstance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>pool</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBeforeFinishInitHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>beforeFinishInitHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>int</color> <color=#a6e22e>getNSharedCacheEnvironments</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getAnySharedCacheEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Find a single environment, used by Environment handles and by command line utilities.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a non-null EnvironmentImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getEnvironment</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>checkImmutableParams</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentLockedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>environmentKey</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>environmentKey</color> <color=#f92672>=</color> <color=#f8f8f2>getEnvironmentMapKey</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>environmentKey</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the envImpl intance returned is standalone, but users are</color>
<color=#75715e>         * actually creating a replicated environment, throw out an</color>
<color=#75715e>         * UnsupportedOperationException. We needn't worry about the</color>
<color=#75715e>         * read only property, since a replicated environment can't be</color>
<color=#75715e>         * read only.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>repConfigProxy</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"This environment was previously opened as a "</color>
                  <color=#f92672>+</color> <color=#e6db74>"standalone environment. It cannot be re-opened for "</color>
                  <color=#f92672>+</color> <color=#e6db74>"replication."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the envImpl instance returned is replicated, but users</color>
<color=#75715e>         * are actually creating a standalone environment and it is not</color>
<color=#75715e>         * read only, then throw out an UnsupportedOperationException.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>repConfigProxy</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"This environment was previously opened for "</color>
                  <color=#f92672>+</color> <color=#e6db74>"replication. It cannot be re-opened in read/write "</color>
                  <color=#f92672>+</color> <color=#e6db74>"mode for standalone operation."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If envImpl is used for an Arbiter.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isArbiter</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"An Arbiter is currently using "</color> <color=#f92672>+</color> <color=#e6db74>"this directory. "</color> <color=#f92672>+</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkIfInvalid</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkImmutableParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * If a non-null configuration parameter was passed to the</color>
<color=#75715e>           * Environment ctor and the underlying EnvironmentImpl</color>
<color=#75715e>           * already exists, check that the configuration parameters</color>
<color=#75715e>           * specified match those of the currently open environment.</color>
<color=#75715e>           * An exception is thrown if the check fails.</color>
<color=#75715e>           *</color>
<color=#75715e>           * Don't do this check if we create the environment here</color>
<color=#75715e>           * because the creation might modify the parameters, which</color>
<color=#75715e>           * would create a Catch-22 in terms of validation.  For</color>
<color=#75715e>           * example, je.maxMemory will be overridden if the JVM's</color>
<color=#75715e>           * -mx flag is less than that setting, so the new resolved</color>
<color=#75715e>           * config parameters won't be the same as the passed</color>
<color=#75715e>           * in config.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkImmutablePropsForEquality</color><color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getProps</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Successful, increment reference count */</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>incOpenCount</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If a shared cache is used, get another (any other,</color>
<color=#75715e>         * doesn't matter which) environment that is sharing the</color>
<color=#75715e>         * global cache.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>sharedCacheEnv</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>getAnySharedCacheEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Environment must be instantiated. If it can be created,</color>
<color=#75715e>         * the configuration must have allowCreate set.  Note that</color>
<color=#75715e>         * the environment is added to the SharedEvictor before the</color>
<color=#75715e>         * EnvironmentImpl ctor returns, by</color>
<color=#75715e>         * RecoveryManager.buildTree.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>envImpl</color> <color=#f92672>=</color>
            <color=#f8f8f2>(</color><color=#f8f8f2>repConfigProxy</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>loadRepImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>incOpenCount</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>environmentKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>addToSharedCacheEnvs</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * An new EnvironmentImpl was created. Call finishInit outside the</color>
<color=#75715e>     * synchronized block to support concurrent recovery for more than one</color>
<color=#75715e>     * environment.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Note that finishInit must be called even if an existing envImpl was</color>
<color=#75715e>     * found, because initialization (recovery) for that envImpl may not be</color>
<color=#75715e>     * complete.  finishInit is synchronized and this ensures that recovery</color>
<color=#75715e>     * will be complete when it returns.</color>
<color=#75715e>     *</color>
<color=#75715e>     * If this environment finishInit() fails in any way, make sure it</color>
<color=#75715e>     * is removed from the envs map. If it isn't, it will block all</color>
<color=#75715e>     * future attempts to create the environment.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>beforeFinishInitHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>finishInit</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Initialization (recovery) was performed. */</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>finishAdditionOfSharedCacheEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>environmentKey</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Use reflection to create a RepImpl, to avoid introducing HA compilation dependencies to</color>
<color=#75715e>   * non-replication code.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>loadRepImpl</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>File</color> <color=#f8f8f2>envHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RepConfigProxy</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>repClassName</color> <color=#f92672>=</color> <color=#e6db74>"com.sleepycat.je.rep.impl.RepImpl"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>envImplName</color> <color=#f92672>=</color> <color=#e6db74>"com.sleepycat.je.dbi.EnvironmentImpl"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>repProxy</color> <color=#f92672>=</color> <color=#e6db74>"com.sleepycat.je.dbi.RepConfigProxy"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>repClass</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>repClassName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>)</color>
          <color=#f8f8f2>repClass</color>
              <color=#f8f8f2>.</color><color=#a6e22e>getConstructor</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>envHome</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>(),</color>
                  <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>(),</color>
                  <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>envImplName</color><color=#f8f8f2>),</color>
                  <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>repProxy</color><color=#f8f8f2>))</color>
              <color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>envHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>repConfigProxy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Propate runtime exceptions thrown by the ctor. */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * This intentially violates our guideline for not catching</color>
<color=#75715e>       * Exception in order to avoid many catches for all the checked</color>
<color=#75715e>       * exceptions thrown by Class.forName and Class.getConstructor.  No</color>
<color=#75715e>       * other methods in the try block throw checked exceptions.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Add this environment into sharedCache environments list. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addToSharedCacheEnvs</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Post-processing of SharedCacheEnv addition, after recovery is done. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>finishAdditionOfSharedCacheEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>checkEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>resetSharedCache</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by EnvironmentImpl.setMutableConfig to perform the setMutableConfig operation while</color>
<color=#75715e>   * synchronized on the DbEnvPool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In theory we shouldn't need to synchronize here when envImpl.getSharedCache() is false;</color>
<color=#75715e>   * however, we synchronize unconditionally to standardize the synchronization order and avoid</color>
<color=#75715e>   * accidental deadlocks.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setMutableConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>mutableConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>doSetMutableConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>mutableConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>resetSharedCache</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>(),</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by EnvironmentImpl.close to perform the close operation while synchronized on the</color>
<color=#75715e>   * DbEnvPool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Synchronization on this DbEnvPool during the close is used to protect its data structures.</color>
<color=#75715e>   * Unfortunately, this means that a long checkpoint during a close will block other closes and</color>
<color=#75715e>   * opens. We may want to improve this in the future. However, at least there is a user workaround:</color>
<color=#75715e>   * perform a full checkpoint before closing the environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>closeEnvironment</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doCheckpoint</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAbnormalClose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Hold the reference count stable. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>decOpenCount</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>doClose</color><color=#f8f8f2>(</color><color=#f8f8f2>doCheckpoint</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAbnormalClose</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>removeEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by EnvironmentImpl.closeAfterInvalid to perform the close operation while synchronized</color>
<color=#75715e>   * on the DbEnvPool.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>closeEnvironmentAfterInvalid</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>doCloseAfterInvalid</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>removeEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes an EnvironmentImpl from the pool after it has been closed. This method is called while</color>
<color=#75715e>   * synchronized. Note that the environment was removed from the SharedEvictor by</color>
<color=#75715e>   * EnvironmentImpl.shutdownEvictor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>removeEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>environmentKey</color> <color=#f92672>=</color> <color=#f8f8f2>getEnvironmentMapKey</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentHome</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>environmentKey</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>found</color> <color=#f92672>&&</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>();</color>
      <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>checkEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>subtractCacheUsage</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>resetSharedCache</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>found</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Latch notes may only be cleared when there is no possibility that</color>
<color=#75715e>     * any environment is open.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>EnvironmentImpl</color><color=#f92672>></color> <color=#a6e22e>getEnvImpls</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOpen</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>home</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envs</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>getEnvironmentMapKey</color><color=#f8f8f2>(</color><color=#f8f8f2>home</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Use the canonical path name for a normalized environment key. */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>getEnvironmentMapKey</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getCanonicalPath</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* No env is available, can't throw EnvironmentFailedException. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Resets the memory budget for all environments with a shared cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newMaxMemory is the new total cache budget or is less than 0 if the total should remain</color>
<color=#75715e>   *     unchanged. A total greater than zero is given when it has changed via setMutableConfig.</color>
<color=#75715e>   * @param skipEnv is an environment that should not be reset, or null. Non-null is passed when an</color>
<color=#75715e>   *     environment has already been reset because it was just created or the target of</color>
<color=#75715e>   *     setMutableConfig.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>resetSharedCache</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>skipEnv</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sharedCacheEnvs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * To avoid spurious exceptions, don't reset invalid envs that have</color>
<color=#75715e>       * not yet been removed.  They aren't usable, and we expect them</color>
<color=#75715e>       * to be closed and removed very soon.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#f8f8f2>skipEnv</color> <color=#f92672>&&</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>reset</color><color=#f8f8f2>(</color><color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*newEnv*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>