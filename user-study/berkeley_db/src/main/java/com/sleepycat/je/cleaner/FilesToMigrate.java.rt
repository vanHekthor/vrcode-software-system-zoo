<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.cleaner</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Iterator over files that should be migrated by cleaning them, even if they don't need to be</color>
<color=#75715e> * cleaned for other reasons.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Files are migrated either because they are named in the CLEANER_FORCE_CLEAN_FILES parameter or</color>
<color=#75715e> * their log version is prior to the CLEANER_UPGRADE_TO_LOG_VERSION parameter.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>An iterator is used rather than finding the entire set at startup to avoid opening a large</color>
<color=#75715e> * number of files to examine their log version. For example, if all files are being migrated in a</color>
<color=#75715e> * very large data set, this would involve opening a very large number of files in order to read</color>
<color=#75715e> * their header. This could significantly delay application startup.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Because we don't have the entire set at startup, we can't select the lowest utilization file</color>
<color=#75715e> * from the set to clean next. Inteaad we iterate in file number order to increase the odds of</color>
<color=#75715e> * cleaning lower utilization files first.</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>FilesToMigrate</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An array of pairs of file numbers, where each pair is a range of files to be force cleaned.</color>
<color=#75715e>   * Index i is the from value and i+1 is the to value, both inclusive.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>forceCleanFiles</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Log version to upgrade to, or zero if none. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>upgradeToVersion</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Whether to continue checking the log version. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkLogVersion</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Whether hasNext() has prepared a valid nextFile. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nextAvailable</color><color=#f8f8f2>;</color>

  <color=#75715e>/** File to return; set by hasNext() and returned by next(). */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nextFile</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>FilesToMigrate</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>env</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>forceCleanProp</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANER_FORCE_CLEAN_FILES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>parseForceCleanFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>forceCleanProp</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>upgradeToVersion</color> <color=#f92672>=</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANER_UPGRADE_TO_LOG_VERSION</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>upgradeToVersion</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>upgradeToVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>checkLogVersion</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>upgradeToVersion</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nextAvailable</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nextFile</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether there are more files to be migrated. Must be called while synchronized on the</color>
<color=#75715e>   * UtilizationProfile.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>(</color><color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileSummary</color><color=#f92672>></color> <color=#f8f8f2>fileSummaryMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>inProgressFiles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextAvailable</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* hasNext() has returned true since the last next(). */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>foundFile</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>file</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fileSummaryMap</color><color=#f8f8f2>.</color><color=#a6e22e>tailMap</color><color=#f8f8f2>(</color><color=#f8f8f2>nextFile</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>).</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inProgressFiles</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isForceCleanFile</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Found a file to force clean. */</color>
        <color=#f8f8f2>foundFile</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkLogVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getFileManager</color><color=#f8f8f2>().</color><color=#a6e22e>getFileLogVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color> <color=#f92672><</color> <color=#f8f8f2>upgradeToVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Found a file to migrate. */</color>
            <color=#f8f8f2>foundFile</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * All following files have a log version greater</color>
<color=#75715e>             * or equal to this one; stop checking.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>checkLogVersion</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Throw exception but allow iterator to continue. */</color>
          <color=#f8f8f2>nextFile</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>;</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>foundFile</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nextFile</color> <color=#f92672>=</color> <color=#f8f8f2>foundFile</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>nextAvailable</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the next file file to be migrated. Must be called while synchronized on the</color>
<color=#75715e>   * UtilizationProfile.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>next</color><color=#f8f8f2>(</color><color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileSummary</color><color=#f92672>></color> <color=#f8f8f2>fileSummaryMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>inProgressFiles</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>NoSuchElementException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasNext</color><color=#f8f8f2>(</color><color=#f8f8f2>fileSummaryMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>inProgressFiles</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nextAvailable</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nextFile</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoSuchElementException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether the given file is in the forceCleanFiles set. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isForceCleanFile</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>forceCleanFiles</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>forceCleanFiles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>from</color> <color=#f92672>=</color> <color=#f8f8f2>forceCleanFiles</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>to</color> <color=#f92672>=</color> <color=#f8f8f2>forceCleanFiles</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color> <color=#f92672>>=</color> <color=#f8f8f2>from</color> <color=#f92672>&&</color> <color=#f8f8f2>file</color> <color=#f92672><=</color> <color=#f8f8f2>to</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Parses the je.cleaner.forceCleanFiles property value and initializes the forceCleanFiles field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via Environment ctor and setMutableConfig.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>parseForceCleanFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>propValue</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>propValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>propValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>forceCleanFiles</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>errPrefix</color> <color=#f92672>=</color>
          <color=#e6db74>"Error in "</color>
              <color=#f92672>+</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANER_FORCE_CLEAN_FILES</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"="</color>
              <color=#f92672>+</color> <color=#f8f8f2>propValue</color>
              <color=#f92672>+</color> <color=#e6db74>": "</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>StringTokenizer</color> <color=#f8f8f2>tokens</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringTokenizer</color><color=#f8f8f2>(</color><color=#f8f8f2>propValue</color><color=#f8f8f2>,</color> <color=#e6db74>",-"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*returnDelims*/</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Resulting list of Long file numbers. */</color>
      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>list</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>();</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreTokens</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#75715e>/* Get "from" file number. */</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>fromStr</color> <color=#f92672>=</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>nextToken</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>fromNum</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>fromNum</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>fromStr</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>errPrefix</color> <color=#f92672>+</color> <color=#e6db74>"Invalid hex file number: "</color> <color=#f92672>+</color> <color=#f8f8f2>fromStr</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>toNum</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreTokens</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#75715e>/* Get delimiter. */</color>
          <color=#f8f8f2>String</color> <color=#f8f8f2>delim</color> <color=#f92672>=</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>nextToken</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>","</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>delim</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>toNum</color> <color=#f92672>=</color> <color=#f8f8f2>fromNum</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"-"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>delim</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

            <color=#75715e>/* Get "to" file number." */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreTokens</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>String</color> <color=#f8f8f2>toStr</color> <color=#f92672>=</color> <color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>nextToken</color><color=#f8f8f2>();</color>
              <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>toNum</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>toStr</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>errPrefix</color> <color=#f92672>+</color> <color=#e6db74>"Invalid hex file number: "</color> <color=#f92672>+</color> <color=#f8f8f2>toStr</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>errPrefix</color> <color=#f92672>+</color> <color=#e6db74>"Expected file number: "</color> <color=#f92672>+</color> <color=#f8f8f2>delim</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>errPrefix</color> <color=#f92672>+</color> <color=#e6db74>"Expected '-' or ',': "</color> <color=#f92672>+</color> <color=#f8f8f2>delim</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>toNum</color> <color=#f92672>=</color> <color=#f8f8f2>fromNum</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>assert</color> <color=#f8f8f2>toNum</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>fromNum</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>toNum</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>forceCleanFiles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>forceCleanFiles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>forceCleanFiles</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>longValue</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>