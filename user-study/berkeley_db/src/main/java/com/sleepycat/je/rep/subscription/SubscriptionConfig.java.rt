<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.DurationConfigParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.IntConfigParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseId</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbTree</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.NodeType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationNetworkConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.BaseProtocol</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.BaseProtocol.EntryRequestType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederFilter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.OutputWireRecord</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.HostPortPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceHandshake</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DatabaseUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.PropUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.UnknownHostException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Properties</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.UUID</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/** Object to represent parameters to configure a subscription. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SubscriptionConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*-----------------------------------*/</color>
  <color=#75715e>/*-      Constant Parameters        -*/</color>
  <color=#75715e>/*-----------------------------------*/</color>

  <color=#75715e>/* queue poll interval in millisecond, 1 second */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>QUEUE_POLL_INTERVAL_MS</color> <color=#f92672>=</color> <color=#ae81ff>1000l</color><color=#f8f8f2>;</color>

  <color=#75715e>/* authentication method used in service handshake */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>SERVICE_HANDSHAKE_AUTH_METHOD</color> <color=#f92672>=</color> <color=#e6db74>"SubscriptionTokenAuth"</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Default minimal HA protocol version to use subscription, version 6</color>
<color=#75715e>   * is used by client like FTS in KV</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_MIN_PROTOCOL_VERSION</color> <color=#f92672>=</color> <color=#f8f8f2>BaseProtocol</color><color=#f8f8f2>.</color><color=#a6e22e>VERSION_6</color><color=#f8f8f2>;</color>

  <color=#75715e>/* for quick response, no Nagle's algorithm */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>TCP_NO_DELAY</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#75715e>/* always blocking mode socket channel */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>BLOCKING_MODE_CHANNEL</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#75715e>/* always validate parameters */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateParams</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/*-----------------------------------*/</color>
  <color=#75715e>/*-    User-defined Parameters      -*/</color>
  <color=#75715e>/*-----------------------------------*/</color>

  <color=#75715e>/* local directory of subscriber */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * identity of a subscription node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Subscription client need to create a globally unique node name, e.g.,</color>
<color=#75715e>   * subscription-<uuid> because the feeder maintains the identity of</color>
<color=#75715e>   * each connection, and would reject request from a client with a</color>
<color=#75715e>   * duplicate identity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>;</color>

  <color=#75715e>/* subscriber host and port */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>;</color>
  <color=#75715e>/* host where the feeder is running */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>;</color>
  <color=#75715e>/* name of replication group */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>

  <color=#75715e>/* authenticator, null if no authentication is needed */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Stream mode to specify how subscription should start, depending on</color>
<color=#75715e>   * the entry request type set by user. For details of each supported</color>
<color=#75715e>   * request type, please see {@link BaseProtocol.EntryRequestType}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>EntryRequestType</color> <color=#f8f8f2>streamMode</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * uuid of feeder replication group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * This parameter is optional. It subscription client does not provide a</color>
<color=#75715e>   * group UUID, subscription would subscribe a feeder as long as the</color>
<color=#75715e>   * subscription group name matches that of the feeder. However, if</color>
<color=#75715e>   * subscription client does provide a valid group UUID, it has to match</color>
<color=#75715e>   * that of feeder, otherwise subscription request will be rejected.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>UUID</color> <color=#f8f8f2>groupUUID</color><color=#f8f8f2>;</color>

  <color=#75715e>/* callback used in subscription */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>SubscriptionCallback</color> <color=#f8f8f2>callBack</color><color=#f8f8f2>;</color>
  <color=#75715e>/* filter passed to feeder */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FeederFilter</color> <color=#f8f8f2>feederFilter</color><color=#f8f8f2>;</color>

  <color=#75715e>/* home of a set of connection parameters */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>

  <color=#75715e>/* message queue size */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>inputMessageQueueSize</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>outputMessageQueueSize</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * subscription node type, by default it is SECONDARY, e.g. used by FTS.</color>
<color=#75715e>   * however, user is able to override it with other types, e.g., EXTERNAL</color>
<color=#75715e>   * used in NoSQL Stream. As of now we only allow SECONDARY and EXTERNAL</color>
<color=#75715e>   * node to use subscription service.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>NodeType</color> <color=#f8f8f2>nodeType</color> <color=#f92672>=</color> <color=#f8f8f2>NodeType</color><color=#f8f8f2>.</color><color=#a6e22e>SECONDARY</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * minimal required HA protocol version. If the minimal required version</color>
<color=#75715e>   * is higher than the default, client should set it in config.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>minProtocolVersion</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_MIN_PROTOCOL_VERSION</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * authentication methods, null if no authentication is required</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>TODO: at the time of writing, only token authentication is supported. In future we may</color>
<color=#75715e>   * support multiple authentication methods for Subscription client.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>AuthenticationMethod</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a subscription configuration</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param subNodeName id of the subscription</color>
<color=#75715e>   * @param subHome home directory of subscriber</color>
<color=#75715e>   * @param subHostPortPair subscriber host and port</color>
<color=#75715e>   * @param feederHostPortPair feeder host and port</color>
<color=#75715e>   * @param groupName name of replication group feeder belong to</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SubscriptionConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a subscription configuration with group UUID.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param subNodeName id of the subscription</color>
<color=#75715e>   * @param subHome home directory of subscriber</color>
<color=#75715e>   * @param subHostPortPair subscriber host and port</color>
<color=#75715e>   * @param feederHostPortPair feeder host and port</color>
<color=#75715e>   * @param groupName name of replication group feeder belong to</color>
<color=#75715e>   * @param groupUUID id of replication group feeder belong to</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SubscriptionConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>UUID</color> <color=#f8f8f2>groupUUID</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>groupUUID</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>NodeType</color><color=#f8f8f2>.</color><color=#a6e22e>SECONDARY</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a subscription configuration with group UUID.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param subNodeName id of the subscription</color>
<color=#75715e>   * @param subHome home directory of subscriber</color>
<color=#75715e>   * @param subHostPortPair subscriber host and port</color>
<color=#75715e>   * @param feederHostPortPair feeder host and port</color>
<color=#75715e>   * @param groupName name of replication group feeder belong to</color>
<color=#75715e>   * @param groupUUID id of replication group feeder belong to</color>
<color=#75715e>   * @param nodeType type of subscription node</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SubscriptionConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>UUID</color> <color=#f8f8f2>groupUUID</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NodeType</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>groupUUID</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>nodeType</color><color=#f8f8f2>,</color>
        <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a subscription configuration with group UUID.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param subNodeName id of the subscription</color>
<color=#75715e>   * @param subHome home directory of subscriber</color>
<color=#75715e>   * @param subHostPortPair subscriber host and port</color>
<color=#75715e>   * @param feederHostPortPair feeder host and port</color>
<color=#75715e>   * @param groupName name of replication group feeder belong to</color>
<color=#75715e>   * @param groupUUID id of replication group feeder belong to</color>
<color=#75715e>   * @param nodeType type of subscription node</color>
<color=#75715e>   * @param authenticator the stream authentication handler or null</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SubscriptionConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>UUID</color> <color=#f8f8f2>groupUUID</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NodeType</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>groupUUID</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>nodeType</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>authenticator</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a subscription configuration with group UUID.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param subNodeName id of the subscription</color>
<color=#75715e>   * @param subHome home directory of subscriber</color>
<color=#75715e>   * @param subHostPortPair subscriber host and port</color>
<color=#75715e>   * @param feederHostPortPair feeder host and port</color>
<color=#75715e>   * @param groupName name of replication group feeder belong to</color>
<color=#75715e>   * @param groupUUID id of replication group feeder belong to</color>
<color=#75715e>   * @param nodeType type of subscription node</color>
<color=#75715e>   * @param authenticator the stream authentication handler or null</color>
<color=#75715e>   * @param props connection parameters</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>SubscriptionConfig</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>UUID</color> <color=#f8f8f2>groupUUID</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NodeType</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* subscriber */</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>subNodeName</color> <color=#f92672>=</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>subHome</color> <color=#f92672>=</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>subHostPortPair</color> <color=#f92672>=</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>;</color>

    <color=#75715e>/* feeder */</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>feederHostPortPair</color> <color=#f92672>=</color> <color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>;</color>

    <color=#75715e>/* replication group */</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>groupName</color> <color=#f92672>=</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>groupUUID</color> <color=#f92672>=</color> <color=#f8f8f2>groupUUID</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nodeType</color> <color=#f92672>=</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>authenticator</color> <color=#f92672>=</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>props</color> <color=#f92672>=</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>streamMode</color> <color=#f92672>=</color> <color=#f8f8f2>EntryRequestType</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>

    <color=#75715e>/* other parameters */</color>
    <color=#f8f8f2>inputMessageQueueSize</color> <color=#f92672>=</color> <color=#f8f8f2>getDefaultMsgQueueSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>outputMessageQueueSize</color> <color=#f92672>=</color> <color=#f8f8f2>getDefaultMsgQueueSize</color><color=#f8f8f2>();</color>

    <color=#75715e>/* default callback and filter */</color>
    <color=#f8f8f2>callBack</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DefaultCallback</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>feederFilter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DefaultFeederFilter</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>authInfo</color> <color=#f92672>=</color> <color=#f8f8f2>createClientAuthMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>authenticator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>verifyParameters</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create an environment configuration for subscription</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an environment configuration</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>createEnvConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Populate env. configuration parameters */</color>
    <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>envConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setReadOnly</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RECOVERY</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#e6db74>"false"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_SETUP_LOGGER</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#e6db74>"true"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>envConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a replication configuration for subscription</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a replication configuration</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>ReplicationConfig</color> <color=#a6e22e>createReplicationConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Populate rep. configuration parameters */</color>
    <color=#f8f8f2>ReplicationConfig</color> <color=#f8f8f2>repConfig</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>getGroupName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getSubNodeName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getSubNodeHostPort</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUBSCRIBER_USE</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#e6db74>"true"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>rwc</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>props</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* no property, create default non-ssl rwc */</color>
      <color=#f8f8f2>rwc</color> <color=#f92672>=</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>createDefault</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* create rwc from property, will create ssl rwc if configured */</color>
      <color=#f8f8f2>rwc</color> <color=#f92672>=</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setRepNetConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>rwc</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_MESSAGE_QUEUE_SIZE</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>getDefaultMsgQueueSize</color><color=#f8f8f2>()));</color>

    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_TIMEOUT</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>getChannelTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" ms"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>PRE_HEARTBEAT_TIMEOUT</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>getPreHeartbeatTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" ms"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPSTREAM_OPEN_TIMEOUT</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>getStreamOpenTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" ms"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>HEARTBEAT_INTERVAL</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>getHeartbeatIntervalMs</color><color=#f8f8f2>()));</color>

    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_RECEIVE_BUFFER_SIZE</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>getReceiveBufferSize</color><color=#f8f8f2>()));</color>

    <color=#75715e>/* set subscription client node type */</color>
    <color=#f8f8f2>repConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setNodeType</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>repConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*--------------*/</color>
  <color=#75715e>/*-  Getters   -*/</color>
  <color=#75715e>/*--------------*/</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>FeederFilter</color> <color=#a6e22e>getFeederFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederFilter</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>SubscriptionAuthHandler</color> <color=#a6e22e>getAuthenticator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>authenticator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>SubscriptionCallback</color> <color=#a6e22e>getCallBack</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>callBack</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getSubscriberHome</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>subHome</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFeederHost</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>HostPortPair</color><color=#f8f8f2>.</color><color=#a6e22e>getHostname</color><color=#f8f8f2>(</color><color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getFeederPort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>HostPortPair</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>(</color><color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>InetAddress</color> <color=#a6e22e>getFeederHostAddr</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>InetAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getByName</color><color=#f8f8f2>(</color><color=#f8f8f2>HostPortPair</color><color=#f8f8f2>.</color><color=#a6e22e>getHostname</color><color=#f8f8f2>(</color><color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getSubNodeName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>subNodeName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getSubNodeHostPort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getGroupName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>UUID</color> <color=#a6e22e>getGroupUUID</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>groupUUID</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMaxConnectRetries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUBSCRIPTION_MAX_CONNECT_RETRIES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getSleepBeforeRetryMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUBSCRIPTION_SLEEP_BEFORE_RETRY</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getChannelTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DurationConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_TIMEOUT</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>ms</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>unit</color><color=#f8f8f2>.</color><color=#a6e22e>convert</color><color=#f8f8f2>(</color><color=#f8f8f2>ms</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPollIntervalMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUBSCRIPTION_POLL_INTERVAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPollTimeoutMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>SUBSCRIPTION_POLL_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getPreHeartbeatTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DurationConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>PRE_HEARTBEAT_TIMEOUT</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>ms</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>unit</color><color=#f8f8f2>.</color><color=#a6e22e>convert</color><color=#f8f8f2>(</color><color=#f8f8f2>ms</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getStreamOpenTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DurationConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPSTREAM_OPEN_TIMEOUT</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>ms</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>parseDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>unit</color><color=#f8f8f2>.</color><color=#a6e22e>convert</color><color=#f8f8f2>(</color><color=#f8f8f2>ms</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getHeartbeatIntervalMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>IntConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>HEARTBEAT_INTERVAL</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getReceiveBufferSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>IntConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_RECEIVE_BUFFER_SIZE</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getInputMessageQueueSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inputMessageQueueSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOutputMessageQueueSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>outputMessageQueueSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getInetSocketAddress</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>getFeederHostAddr</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getFeederPort</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>EntryRequestType</color> <color=#a6e22e>getStreamMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>streamMode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*--------------*/</color>
  <color=#75715e>/*-  Setters   -*/</color>
  <color=#75715e>/*--------------*/</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMinProtocolVersion</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>ver</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ver</color> <color=#f92672><</color> <color=#f8f8f2>DEFAULT_MIN_PROTOCOL_VERSION</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Minimal HA protocol version cannot be lower than "</color> <color=#f92672>+</color> <color=#f8f8f2>DEFAULT_MIN_PROTOCOL_VERSION</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>minProtocolVersion</color> <color=#f92672>=</color> <color=#f8f8f2>ver</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setGroupUUID</color><color=#f8f8f2>(</color><color=#f8f8f2>UUID</color> <color=#f8f8f2>gID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>groupUUID</color> <color=#f92672>=</color> <color=#f8f8f2>gID</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCallback</color><color=#f8f8f2>(</color><color=#f8f8f2>SubscriptionCallback</color> <color=#f8f8f2>cbk</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cbk</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Subscription callback cannot "</color> <color=#f92672>+</color> <color=#e6db74>"be null."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>callBack</color> <color=#f92672>=</color> <color=#f8f8f2>cbk</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setChannelTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setDurationVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPreHeartbeatTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setDurationVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>PRE_HEARTBEAT_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setHeartbeatInterval</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>ms</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>HEARTBEAT_INTERVAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>ms</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setStreamOpenTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setDurationVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPSTREAM_OPEN_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReceiveBufferSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_RECEIVE_BUFFER_SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setInputMessageQueueSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>inputMessageQueueSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOutputMessageQueueSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>outputMessageQueueSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>NodeType</color> <color=#a6e22e>getNodeType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMinProtocolVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>minProtocolVersion</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>SubscriptionConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>SubscriptionConfig</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>SubscriptionConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>setProps</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>props</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>willNeverOccur</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the feeder filter which will be transmitted to Feeder.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param filter the non-null feeder filter</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setFeederFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>FeederFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>filter</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Feeder filter cannot be null."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>feederFilter</color> <color=#f92672>=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setStreamMode</color><color=#f8f8f2>(</color><color=#f8f8f2>EntryRequestType</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>streamMode</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setProps</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>p</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"subscription configuration: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"subscription name: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>subNodeName</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"home directory: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>subHome</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"home host and port: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"feeder host and port: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"feeder address: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getFeederHostAddr</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>UnknownHostException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"feeder address: unknown host "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"feeder filter: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>feederFilter</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"rep group: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>groupName</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"rep group id: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>groupUUID</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"stream mode: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>streamMode</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Creates handshake auth method from subscription auth handler */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ClientAuthMethod</color> <color=#a6e22e>createClientAuthMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>authHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authHandler</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ClientAuthMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>authHandler</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Return authentication method */</color>
  <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>AuthenticationMethod</color><color=#f92672>[]</color> <color=#a6e22e>getAuthInfo</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>authInfo</color><color=#f8f8f2>};</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Verify all required parameters are available and valid</color>
<color=#75715e>   *</color>
<color=#75715e>   * must-have parameters:</color>
<color=#75715e>   * - non-null home directory</color>
<color=#75715e>   * - non-null feeder host port pair</color>
<color=#75715e>   * - non-null feeder host name</color>
<color=#75715e>   * - non-null feeder host port</color>
<color=#75715e>   * - non-null subscriber node host port pair</color>
<color=#75715e>   * - non-null subscriber node name</color>
<color=#75715e>   * - non-null subscriber node host port</color>
<color=#75715e>   * - non-null replication group name</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyParameters</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getSubscriberHome</color><color=#f8f8f2>(),</color> <color=#e6db74>"subscription home directory"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>feederHostPortPair</color><color=#f8f8f2>,</color> <color=#e6db74>"feeder host port pair"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getFeederHost</color><color=#f8f8f2>(),</color> <color=#e6db74>"feeder host name"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getFeederPort</color><color=#f8f8f2>(),</color> <color=#e6db74>"feeder host port"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>subHostPortPair</color><color=#f8f8f2>,</color> <color=#e6db74>"subscriber host port pair"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getSubNodeName</color><color=#f8f8f2>(),</color> <color=#e6db74>"subscriber node name"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getSubNodeHostPort</color><color=#f8f8f2>(),</color> <color=#e6db74>"subscriber node host port"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>getGroupName</color><color=#f8f8f2>(),</color> <color=#e6db74>"replication group"</color><color=#f8f8f2>);</color>

    <color=#75715e>/* we only support SECONDARY and EXTERNAL node type for subscription */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isExternal</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isSecondary</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"'node type' param must be either SECONDARY or "</color>
              <color=#f92672>+</color> <color=#e6db74>"EXTERNAL, found node type: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* a default no-op callback */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>DefaultCallback</color> <color=#66d9ef>implements</color> <color=#f8f8f2>SubscriptionCallback</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DefaultCallback</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processPut</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processDel</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processCommit</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnid</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processAbort</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnid</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processException</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getDefaultMsgQueueSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>IntConfigParam</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>REPLICA_MESSAGE_QUEUE_SIZE</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getIntVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * a default filter that filters out entries from internal db and db that</color>
<color=#75715e>   * supports duplicates, and subscribes to all tables. It allows subscriber</color>
<color=#75715e>   * to receive updates from all tables since no table id is set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DefaultFeederFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>FeederFilter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DefaultFeederFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getTableIds</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>OutputWireRecord</color> <color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>OutputWireRecord</color> <color=#f8f8f2>record</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* keep record if db id is null */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color> <color=#f92672>=</color> <color=#f8f8f2>record</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicableDBId</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbId</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>record</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>DbTree</color> <color=#f8f8f2>dbTree</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>impl</color> <color=#f92672>=</color> <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* keep record if db impl is not available */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>impl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>record</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* filter out if from an db supporting duplicates */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>impl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* filter out if from an internal db */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>impl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>record</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>impl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dbTree</color><color=#f8f8f2>.</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>impl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>