<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.tree</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.CacheMode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.PackedObsoleteInfo</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.Evictor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.OffHeapCache</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.BINDeltaLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.INLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LNLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.dupConvert.DBIN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.dupConvert.DIN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.dupConvert.DupConvert</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.FileNotFoundException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Comparator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicLong</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException.unexpectedState</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An IN represents an Internal Node in the JE tree.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Explanation of KD (KnownDeleted) and PD (PendingDelete) entry flags</color>
<color=#75715e> * ===================================================================</color>
<color=#75715e> *</color>
<color=#75715e> * <p>PD: set for all LN entries that are deleted, even before the LN is committed. Is used as an</color>
<color=#75715e> * authoritative (transactionally correct) indication that an LN is deleted. PD will be cleared if</color>
<color=#75715e> * the txn for the deleted LN is aborted.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>KD: set under special conditions for entries containing LNs which are known to be obsolete.</color>
<color=#75715e> * Not used for entries in an active/uncommitted transaction.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>First notice that IN.fetchLN will allow a FileNotFoundException when the PD or KD flag is set</color>
<color=#75715e> * on the entry. And it will allow a NULL_LSN when the KD flag is set.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>KD was implemented first, and was originally used when the cleaner attempts to migrate an LN</color>
<color=#75715e> * and discovers it is deleted (see Cleaner.migrateLN). We need KD because the INCompressor may not</color>
<color=#75715e> * have run, and may not have compressed the BIN. There's the danger that we'll try to fetch that</color>
<color=#75715e> * entry, and that the file was deleted by the cleaner.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>KD was used more recently when an unexpected exception occurs while logging an LN, after</color>
<color=#75715e> * inserting the entry. Rather than delete the entry to clean up, we mark the entry KD so it won't</color>
<color=#75715e> * cause a fetch error later. In this case the entry LSN is NULL_LSN. See Tree.insertNewSlot.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>PD is closely related to the first use of KD above (for cleaned deleted LNs) and came about</color>
<color=#75715e> * because of a cleaner optimization we make. The cleaner considers all deleted LN log entries to be</color>
<color=#75715e> * obsolete, without doing a tree lookup, and without any record of an obsolete offset. This makes</color>
<color=#75715e> * the cost of cleaning of deleted LNs very low. For example, if the log looks like this:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>100 LNA 200 delete of LNA</color>
<color=#75715e> *</color>
<color=#75715e> * <p>then LSN 200 will be considered obsolete when this file is processed by the cleaner. After</color>
<color=#75715e> * all, only two things can happen: (1) the txn commits, and we don't need LSN 200, because we can</color>
<color=#75715e> * wipe this LN out of the tree, or (2) the txn aborts, and we don't need LSN 200, because we are</color>
<color=#75715e> * going to revert to LSN 100/LNA.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>We set PD for the entry of a deleted LN at the time of the operation, and we clear PD if the</color>
<color=#75715e> * transaction aborts. There is no real danger that this log entry will be processed by the cleaner</color>
<color=#75715e> * before it's committed, because cleaning can only happen after the first active LSN.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Just as in the first use of KD above, setting PD is necessary to avoid a fetch error, when the</color>
<color=#75715e> * file is deleted by the cleaner but the entry containing the deleted LN has not been deleted by</color>
<color=#75715e> * the INCompressor.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>PD is also set in replication rollback, when LNs are marked as invisible.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When LSN locking was implemented (see CursorImpl.lockLN), the PD flag took on additional</color>
<color=#75715e> * meaning. PD is used to determine whether an LN is deleted without fetching it, and therefore is</color>
<color=#75715e> * relied on to be transactionally correct.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In addition to the setting and use of the KD/PD flags described above, the situation is</color>
<color=#75715e> * complicated by the fact that we must restore the state of these flags during abort, recovery, and</color>
<color=#75715e> * set them properly during slot reuse.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>We have been meaning to consider whether PD and KD can be consolidated into one flag: simply</color>
<color=#75715e> * the Deleted flag. The Deleted flag would be set in the same way as PD is currently set, as well</color>
<color=#75715e> * as the second use of KD described above (when the LSN is NULL_LSN after an insertion error). The</color>
<color=#75715e> * use of KD and PD for invisible entries and recovery rollback should also be considered.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If we consolidate the two flags and set the Deleted flag during a delete operation (like PD),</color>
<color=#75715e> * we'll have to remove optimizations (in CursorImpl for example) that consider a slot deleted when</color>
<color=#75715e> * KD is set. Since KD is rarely set currently, this shouldn't have a noticeable performance impact.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>IN</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Node</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Comparable</color><color=#f92672><</color><color=#f8f8f2>IN</color><color=#f92672>></color><color=#f8f8f2>,</color> <color=#f8f8f2>LatchContext</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>COUNT_FIND</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>COUNT_SERIALIZE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>BEGIN_TAG</color> <color=#f92672>=</color> <color=#e6db74>"<in>"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>END_TAG</color> <color=#f92672>=</color> <color=#e6db74>"</in>"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_SPLIT</color> <color=#f92672>=</color> <color=#e6db74>"Split:"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_DELETE</color> <color=#f92672>=</color> <color=#e6db74>"Delete:"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BYTES_PER_LSN_ENTRY</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_FILE_OFFSET</color> <color=#f92672>=</color> <color=#ae81ff>0xfffffe</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>THREE_BYTE_NEGATIVE_ONE</color> <color=#f92672>=</color> <color=#ae81ff>0xffffff</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used as the "empty rep" for the INLongRep offHeapBINIds field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>minLength is 3 because BIN IDs are LRU list indexes. Initially 100k indexes are allocated</color>
<color=#75715e>   * and the largest values are used first.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>allowSparseRep is true because some workloads will only load BIN IDs for a subset of the</color>
<color=#75715e>   * BINs in the IN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>INLongRep</color><color=#f8f8f2>.</color><color=#a6e22e>EmptyRep</color> <color=#f8f8f2>EMPTY_OFFHEAP_BIN_IDS</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>INLongRep</color><color=#f8f8f2>.</color><color=#a6e22e>EmptyRep</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Levels:</color>
<color=#75715e>   * The mapping tree has levels in the 0x20000 -> 0x2ffff number space.</color>
<color=#75715e>   * The main tree has levels in the 0x10000 -> 0x1ffff number space.</color>
<color=#75715e>   * The duplicate tree levels are in 0-> 0xffff number space.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBMAP_LEVEL</color> <color=#f92672>=</color> <color=#ae81ff>0x20000</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAIN_LEVEL</color> <color=#f92672>=</color> <color=#ae81ff>0x10000</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LEVEL_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0x0ffff</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MIN_LEVEL</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BIN_LEVEL</color> <color=#f92672>=</color> <color=#f8f8f2>MAIN_LEVEL</color> <color=#f92672>|</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used to indicate that an exact match was found in findEntry. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EXACT_MATCH</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>

  <color=#75715e>/* Used to indicate that an insert was successful. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INSERT_SUCCESS</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>17</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A bit flag set in the return value of partialEviction() to indicate</color>
<color=#75715e>   * whether the IN is evictable or not.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>NON_EVICTABLE_IN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1L</color> <color=#f92672><<</color> <color=#ae81ff>62</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Boolean properties of an IN, encoded as bits inside the flags</color>
<color=#75715e>   * data member.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_DIRTY_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x1</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_RECALC_TOGGLE_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x2</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_IS_ROOT_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x4</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_HAS_CACHED_CHILDREN_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x8</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_PRI2_LRU_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_DELTA_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x20</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_FETCHED_COLD_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x40</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_FETCHED_COLD_OFFHEAP_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_RESIDENT_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x100</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_PROHIBIT_NEXT_DELTA_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x200</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_EXPIRATION_IN_HOURS</color> <color=#f92672>=</color> <color=#ae81ff>0x400</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Tracing for LRU-related ops */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>traceLRU</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>traceDeltas</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>traceLevel</color> <color=#f92672>=</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The unique id of this node. */</color>
  <color=#66d9ef>long</color> <color=#f8f8f2>nodeId</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Some bits are persistent and some are not, see serialize. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>flags</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The identifier key is a key that can be used used to search for this IN.</color>
<color=#75715e>   * Initially it is the key of the zeroth slot, but insertions prior to slot</color>
<color=#75715e>   * zero make this no longer true.  It is always equal to some key in the</color>
<color=#75715e>   * IN, and therefore it is changed by BIN.compress when removing slots.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>;</color>

  <color=#66d9ef>int</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color>

  <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>entryStates</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * entryKeys contains the keys in their entirety if key prefixing is not</color>
<color=#75715e>   * being used. If prefixing is enabled, then keyPrefix contains the prefix</color>
<color=#75715e>   * and entryKeys contains the suffixes. Records with small enough data</color>
<color=#75715e>   * (smaller than the value je.tree.maxEmbeddedLN param) are stored in</color>
<color=#75715e>   * their entirity (both key (or key suffix) and data) inside BINs. This is</color>
<color=#75715e>   * done by combining the record key and data as a two-part key (see the</color>
<color=#75715e>   * dbi/DupKeyData class) and storing the resulting array in entryKeys.</color>
<color=#75715e>   * A special case is when the record to be embedded has no data. Then,</color>
<color=#75715e>   * the two-part key format is not used, but instead the NO_DATA_LN_BIT</color>
<color=#75715e>   * is turned on in the slot's state. This saves the space overhead of</color>
<color=#75715e>   * using the two-part key format.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>INKeyRep</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>;</color>
  <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The following entryLsnXXX fields are used for storing LSNs.  There are</color>
<color=#75715e>   * two possible representations: a byte array based rep, and a long array</color>
<color=#75715e>   * based one.  For compactness, the byte array rep is used initially.  A</color>
<color=#75715e>   * single byte[] that uses four bytes per LSN is used. The baseFileNumber</color>
<color=#75715e>   * field contains the lowest file number of any LSN in the array.  Then for</color>
<color=#75715e>   * each entry (four bytes each), the first byte contains the offset from</color>
<color=#75715e>   * the baseFileNumber of that LSN's file number.  The remaining three bytes</color>
<color=#75715e>   * contain the file offset portion of the LSN.  Three bytes will hold a</color>
<color=#75715e>   * maximum offset of 16,777,214 (0xfffffe), so with the default JE log file</color>
<color=#75715e>   * size of 10,000,000 bytes this works well.</color>
<color=#75715e>   *</color>
<color=#75715e>   * If either (1) the difference in file numbers exceeds 127</color>
<color=#75715e>   * (Byte.MAX_VALUE) or (2) the file offset is greater than 16,777,214, then</color>
<color=#75715e>   * the byte[] based rep mutates to a long[] based rep.</color>
<color=#75715e>   *</color>
<color=#75715e>   * In the byte[] rep, DbLsn.NULL_LSN is represented by setting the file</color>
<color=#75715e>   * offset bytes for a given entry to -1 (0xffffff).</color>
<color=#75715e>   *</color>
<color=#75715e>   * Note: A compact representation will be changed to the non-compact one,</color>
<color=#75715e>   * if needed, but in the current implementation, the reverse mutation</color>
<color=#75715e>   * (from long to compact) never takes place.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>;</color>
  <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>entryLsnByteArray</color><color=#f8f8f2>;</color>
  <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>entryLsnLongArray</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>disableCompactLsns</color><color=#f8f8f2>;</color> <color=#75715e>// DbCacheSize only</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The children of this IN. Only the ones that are actually in the cache</color>
<color=#75715e>   * have non-null entries. Specialized sparse array represents are used to</color>
<color=#75715e>   * represent the entries. The representation can mutate as modifications</color>
<color=#75715e>   * are made to it.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>INTargetRep</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * In a level 2 IN, the LRU IDs of the child BINs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>INLongRep</color> <color=#f8f8f2>offHeapBINIds</color> <color=#f92672>=</color> <color=#f8f8f2>EMPTY_OFFHEAP_BIN_IDS</color><color=#f8f8f2>;</color>

  <color=#66d9ef>long</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * accumluted memory budget delta.  Once this exceeds</color>
<color=#75715e>   * MemoryBudget.ACCUMULATED_LIMIT we inform the MemoryBudget that a change</color>
<color=#75715e>   * has occurred.  See SR 12273.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>accumulatedDelta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Max allowable accumulation of memory budget changes before MemoryBudget</color>
<color=#75715e>   * should be updated. This allows for consolidating multiple calls to</color>
<color=#75715e>   * updateXXXMemoryBudget() into one call.  Not declared final so that the</color>
<color=#75715e>   * unit tests can modify it.  See SR 12273.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ACCUMULATED_LIMIT_DEFAULT</color> <color=#f92672>=</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>ACCUMULATED_LIMIT</color> <color=#f92672>=</color> <color=#f8f8f2>ACCUMULATED_LIMIT_DEFAULT</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * References to the next and previous nodes in an LRU list. If the node is not in any LRUList,</color>
<color=#75715e>   * both of these will be null. If the node is at the front/back of an LRUList,</color>
<color=#75715e>   * prevLRUNode/nextLRUNode will point to the node itself.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>nextLRUNode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>prevLRUNode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Let L be the most recently written logrec for this IN instance.</color>
<color=#75715e>   * (a) If this is a UIN, lastFullVersion is the lsn of L.</color>
<color=#75715e>   * (b) If this is a BIN instance and L is a full-version logrec,</color>
<color=#75715e>   *     lastFullVersion is the lsn of L.</color>
<color=#75715e>   * (c) If this is a BIN instance and L is a delta logrec, lastFullVersion</color>
<color=#75715e>   *     is the lsn of the most recently written full-version logrec for the</color>
<color=#75715e>   *     same BIN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * It is set in 2 cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * (a) after "this" is created via reading a logrec L, lastFullVersion is</color>
<color=#75715e>   * set to L's lsn, if L is a UIN or a full BIN. (this is done in</color>
<color=#75715e>   * IN.postFetch/RecoveryInit(), via IN.setLastLoggedLsn()). If L is a BIN</color>
<color=#75715e>   * delta, lastFullVersion is set by BINDeltaLogEntry.readEntry() to</color>
<color=#75715e>   * L.prevFullLsn.</color>
<color=#75715e>   *</color>
<color=#75715e>   * (b) After logging a UIN or a full-BIN logrec, it is set to the LSN of</color>
<color=#75715e>   * the logrec written. This is done in IN.afterLog().</color>
<color=#75715e>   *</color>
<color=#75715e>   * Notice that this is a persistent field, but except from case (c), when</color>
<color=#75715e>   * reading a logrec L, it is set not to the value found in L, but to the</color>
<color=#75715e>   * lsn of L. This is why its read/write is managed by the INLogEntry class</color>
<color=#75715e>   * rather than the IN readFromLog/writeFromLog methods.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#f8f8f2>lastFullVersion</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * BINs have a lastDeltaVersion data field as well, which is defined as</color>
<color=#75715e>   * follows:</color>
<color=#75715e>   *</color>
<color=#75715e>   * Let L be the most recently written logrec for this BIN instance. If</color>
<color=#75715e>   * L is a full-version logrec, lastDeltaVersion is NULL; otherwise it</color>
<color=#75715e>   * is the lsn of L.</color>
<color=#75715e>   *</color>
<color=#75715e>   * It is used for obsolete tracking.</color>
<color=#75715e>   *</color>
<color=#75715e>   * It is set in 2 cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * (a) after "this" is created via reading a logrec L, lastDeltaVersion</color>
<color=#75715e>   * is set to L's lsn, if L is a BIN-delta logrec, or to NULL if L is a</color>
<color=#75715e>   * full-BIN logrec (this is done in IN.postFetch/RecoveryInit(), via</color>
<color=#75715e>   * BIN.setLastLoggedLsn()).</color>
<color=#75715e>   *</color>
<color=#75715e>   * (b) After we write a logrec L for this BIN instance, lastDeltaVersion</color>
<color=#75715e>   * is set to NULL if L is a full-BIN logrec, or to L's lsn, if L is a</color>
<color=#75715e>   * BIN-delta logrec (this is done in BIN.afterLog()).</color>
<color=#75715e>   *</color>
<color=#75715e>   * Notice that this is a persistent field, but when reading a logrec L,</color>
<color=#75715e>   * it is set not to the value found in L, but to the lsn of L. This is why</color>
<color=#75715e>   * its read/write is managed by the INLogEntry class rather than the IN</color>
<color=#75715e>   * readFromLog/writeFromLog methods.</color>
<color=#75715e>   *</color>
<color=#75715e>   * private long lastDeltaVersion = DbLsn.NULL_LSN;</color>
<color=#75715e>   */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A sequence of obsolete info that cannot be counted as obsolete until an</color>
<color=#75715e>   * ancestor IN is logged non-provisionally.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>PackedObsoleteInfo</color> <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>;</color>

  <color=#75715e>/* See convertDupKeys. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>needDupKeyConversion</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>pinCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>SharedLatch</color> <color=#f8f8f2>latch</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color> <color=#f8f8f2>fetchINHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Create an empty IN, with no node ID, to be filled in from the log. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>IN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>init</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>EMPTY_KEY</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Create a new IN. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>IN</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>level</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>nodeId</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getNodeSequence</color><color=#f8f8f2>().</color><color=#a6e22e>getNextLocalNodeId</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>init</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>,</color> <color=#f8f8f2>generateLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>initMemorySize</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For Sizeof. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>IN</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>SizeofMarker</color> <color=#f8f8f2>marker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set all variable fields to null, since they are not part of the</color>
<color=#75715e>     * fixed overhead.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>entryTargets</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>keyPrefix</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryLsnByteArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>latch</color> <color=#f92672>=</color>
        <color=#f8f8f2>LatchFactory</color><color=#f8f8f2>.</color><color=#a6e22e>createSharedLatch</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>DUMMY_LATCH_CONTEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlwaysLatchedExclusively</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use the latch to force it to grow to "runtime size".</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a new IN. Need this because we can't call newInstance() without getting a 0 for nodeId.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>IN</color> <color=#a6e22e>createNewInstance</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxEntries</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>level</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>IN</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxEntries</color><color=#f8f8f2>,</color> <color=#f8f8f2>level</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Initialize IN object. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color>
      <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"hiding"</color><color=#f8f8f2>)</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>initialCapacity</color><color=#f8f8f2>,</color>
      <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"hiding"</color><color=#f8f8f2>)</color> <color=#66d9ef>int</color> <color=#f8f8f2>level</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>latch</color> <color=#f92672>=</color> <color=#f8f8f2>LatchFactory</color><color=#f8f8f2>.</color><color=#a6e22e>createSharedLatch</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlwaysLatchedExclusively</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nEntries</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>identifierKey</color> <color=#f92672>=</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryTargets</color> <color=#f92672>=</color> <color=#f8f8f2>INTargetRep</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>INKeyRep</color><color=#f8f8f2>.</color><color=#a6e22e>Default</color><color=#f8f8f2>(</color><color=#f8f8f2>initialCapacity</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>keyPrefix</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>baseFileNumber</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Normally we start out with the compact LSN rep and then mutate to</color>
<color=#75715e>     * the long rep when needed.  But for some purposes (DbCacheSize) we</color>
<color=#75715e>     * start out with the long rep and never use the compact rep.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>disableCompactLsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryLsnByteArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>initialCapacity</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryLsnByteArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>initialCapacity</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>entryStates</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>initialCapacity</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>level</color> <color=#f92672>=</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isIN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isUpperIN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#a6e22e>getLatchName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>shortClassName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getLatchTimeoutMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getLatchTimeoutMs</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>LatchTable</color> <color=#a6e22e>getLatchTable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>btreeLatchTable</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Return whether the shared latch for this kind of node should be of the</color>
<color=#75715e>   * "always exclusive" variety.  Presently, only IN's are actually latched</color>
<color=#75715e>   * shared.  BINs are latched exclusive only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isAlwaysLatchedExclusively</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Latch this node if it is not latched by another thread. Update the LRU using the given</color>
<color=#75715e>   * cacheMode if the latch succeeds.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>latchNoWait</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusiveNoWait</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>updateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Latch this node exclusive and update the LRU using the given cacheMode. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>updateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Latch this node exclusive and update the LRU using the default cacheMode. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>latch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Latch this node shared and update the LRU using the given cacheMode. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>latchShared</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireShared</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>updateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Latch this node shared and update the LRU using the default cacheMode. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>latchShared</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>latchShared</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Latch this node exclusive and do not update the LRU or cause other related side effects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param db is passed in order to initialize the database for an uninitialized node, which is</color>
<color=#75715e>   *     necessary in order to latch it.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>databaseImpl</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Latch this node exclusive and do not update the LRU or cause other related side effects. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>databaseImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Release the latch on this node. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseLatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Release the latch on this node if it is owned. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseLatchIfOwner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>releaseIfOwner</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this thread holds the IN's latch */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLatchOwner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>isOwner</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>isExclusiveOwner</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getLatchNWaiters</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>getNWaiters</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>updateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>getInListResident</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>UNCHANGED</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>MAKE_COLD</color><color=#f8f8f2>:</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>DEFAULT</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>EVICT_LN</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>EVICT_BIN</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>KEEP_HOT</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>setFetchedCold</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>setFetchedColdOffHeap</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>moveBack</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method should be used carefully. Unless this node and the parent are already known to be</color>
<color=#75715e>   * latched, call latchParent instead to access the parent safely.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>getParent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setParent</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>in</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Must hold EX-latch when changing a non-null parent. But when setting</color>
<color=#75715e>     * the parent initially (it is currently null), we assume it is being</color>
<color=#75715e>     * attached and no other threads have access to it.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>parent</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Latches the parent exclusively, leaving this node latched. The parent must not already be</color>
<color=#75715e>   * latched.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This node must be latched on entry and will be latched on exit. This node's latch may be</color>
<color=#75715e>   * released temporarily, in which case it will be ex-latched (since the parent is ex-latched, this</color>
<color=#75715e>   * isn't a drawback).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Does not perform cache mode processing, since this node is already latched.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the ex-latched parent, for which calling getKnownChildIndex with this node is</color>
<color=#75715e>   *     guaranteed to succeed.</color>
<color=#75715e>   * @throws EnvironmentFailureException (fatal) if the parent latch is already held.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#a6e22e>latchParent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>isOwner</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>isRoot</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>getParent</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>getParent</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusiveNoWait</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>pin</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>latch</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>unpin</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getParent</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>p</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the index of the given child. Should only be called when the caller knows that the</color>
<color=#75715e>   * given child is resident.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getKnownChildIndex</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>child</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>child</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>pin</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isLatchOwner</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>pinCount</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f92672>++</color><color=#f8f8f2>pinCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>unpin</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>pinCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f92672>--</color><color=#f8f8f2>pinCount</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isPinned</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>pinCount</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>pinCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get the database for this IN. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set the database reference for this node. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>databaseImpl</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Get the database id for this node.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#a6e22e>getDatabaseId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getEnvImplForFatalException</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>final</color> <color=#f8f8f2>Evictor</color> <color=#a6e22e>getEvictor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Convenience method to return the database key comparator. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#a6e22e>getKeyComparator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getLevel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>level</color> <color=#f92672>&</color> <color=#f8f8f2>LEVEL_MASK</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>generateLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newLevel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DbTree</color><color=#f8f8f2>.</color><color=#a6e22e>ID_DB_ID</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newLevel</color> <color=#f92672>|</color> <color=#f8f8f2>DBMAP_LEVEL</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newLevel</color> <color=#f92672>|</color> <color=#f8f8f2>MAIN_LEVEL</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit tests only. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setNodeId</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>nid</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nodeId</color> <color=#f92672>=</color> <color=#f8f8f2>nid</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * We would like as even a hash distribution as possible so that the Evictor's LRU is as accurate</color>
<color=#75715e>   * as possible. ConcurrentHashMap takes the value returned by this method and runs its own hash</color>
<color=#75715e>   * algorithm on it. So a bit complement of the node ID is sufficient as the return value and is a</color>
<color=#75715e>   * little better than returning just the node ID. If we use a different container in the future</color>
<color=#75715e>   * that does not re-hash the return value, we should probably implement the Wang-Jenkins hash</color>
<color=#75715e>   * function here.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f92672>~</color><color=#f8f8f2>getNodeId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sort based on equality key. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>argIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>argNodeId</color> <color=#f92672>=</color> <color=#f8f8f2>argIN</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>myNodeId</color> <color=#f92672>=</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>myNodeId</color> <color=#f92672><</color> <color=#f8f8f2>argNodeId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>myNodeId</color> <color=#f92672>></color> <color=#f8f8f2>argNodeId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDirty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_DIRTY_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>dirty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dirty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isBINDelta</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>isLatchOwner</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_DELTA_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This version of isBINDelta() takes a checkLatched param to allow</color>
<color=#75715e>   * for cases where it is ok to call the method without holding the</color>
<color=#75715e>   * BIN latch (e.g. in single-threaded tests, or when the BIN is not</color>
<color=#75715e>   * attached to the tree (and thus inaccessible from other threads)).</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>checkLatched</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkLatched</color> <color=#f92672>||</color> <color=#f8f8f2>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>isLatchOwner</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_DELTA_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_DELTA_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_DELTA_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Indicates that the BIN was fetched from disk, or loaded from the off-heap cache, using</color>
<color=#75715e>   * CacheMode.UNCHANGED, and has not been accessed with another CacheMode. BINs in this state</color>
<color=#75715e>   * should be evicted from main cache as soon as they are no longer referenced by a cursor. If they</color>
<color=#75715e>   * were loaded from off-heap cache, they should be stored off-heap when they are evicted from</color>
<color=#75715e>   * main. The FetchedColdOffHeap flag indicates whether the BIN was loaded from off-heap cache.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getFetchedCold</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_FETCHED_COLD_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see #getFetchedCold() */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setFetchedCold</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_FETCHED_COLD_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_FETCHED_COLD_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see #getFetchedCold() */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getFetchedColdOffHeap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_FETCHED_COLD_OFFHEAP_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see #getFetchedCold() */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setFetchedColdOffHeap</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_FETCHED_COLD_OFFHEAP_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_FETCHED_COLD_OFFHEAP_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getRecalcToggle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_RECALC_TOGGLE_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setRecalcToggle</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>toggle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>toggle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_RECALC_TOGGLE_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_RECALC_TOGGLE_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRoot</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_IS_ROOT_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setIsRoot</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isRoot</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setIsRootFlag</color><color=#f8f8f2>(</color><color=#f8f8f2>isRoot</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setIsRootFlag</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isRoot</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRoot</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_IS_ROOT_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_IS_ROOT_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasCachedChildrenFlag</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_HAS_CACHED_CHILDREN_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setHasCachedChildrenFlag</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_HAS_CACHED_CHILDREN_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_HAS_CACHED_CHILDREN_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInPri2LRU</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_PRI2_LRU_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* public for unit tests */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setInPri2LRU</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_PRI2_LRU_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_PRI2_LRU_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isExpirationInHours</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_EXPIRATION_IN_HOURS</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setExpirationInHours</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_EXPIRATION_IN_HOURS</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_EXPIRATION_IN_HOURS</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the identifier key for this node. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getIdentifierKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the identifier key for this node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key - the new identifier key for this node.</color>
<color=#75715e>   * @param makeDirty should normally be true, but may be false when an expired slot containing the</color>
<color=#75715e>   *     identifier key has been deleted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setIdentifierKey</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>makeDirty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>    * The identifierKey is "intentionally" not kept track of in the</color>
<color=#75715e>    * memory budget.  If we did, then it would look like this:</color>

<color=#75715e>    int oldIDKeySz = (identifierKey == null) ?</color>
<color=#75715e>                      0 :</color>
<color=#75715e>                      MemoryBudget.byteArraySize(identifierKey.length);</color>

<color=#75715e>    int newIDKeySz = (key == null) ?</color>
<color=#75715e>                      0 :</color>
<color=#75715e>                      MemoryBudget.byteArraySize(key.length);</color>
<color=#75715e>    updateMemorySize(newIDKeySz - oldIDKeySz);</color>

<color=#75715e>    */</color>
    <color=#f8f8f2>identifierKey</color> <color=#f92672>=</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>makeDirty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the number of entries in this node. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getNEntries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return the maximum number of entries in this node.</color>
<color=#75715e>   *     <p>Overriden by TestIN in INEntryTestBase.java</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMaxEntries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryStates</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#a6e22e>getState</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if the object is dirty. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDirty</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return true if the idx'th entry has been deleted, although the transaction that performed the</color>
<color=#75715e>   *     deletion may not be committed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEntryPendingDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>PENDING_DELETED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set pendingDeleted to true. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setPendingDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>PENDING_DELETED_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set pendingDeleted to false. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>clearPendingDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_PENDING_DELETED_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return true if the idx'th entry is deleted for sure. If a transaction performed the deletion,</color>
<color=#75715e>   *     it has been committed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEntryKnownDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>KNOWN_DELETED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set KD flag to true and clear the PD flag (PD does not need to be on if KD is on). */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnownDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>KNOWN_DELETED_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_PENDING_DELETED_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set knownDeleted flag to true and evict the child LN if cached. The child LN is evicted to save</color>
<color=#75715e>   * memory, since it will never be fetched again.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnownDeletedAndEvictLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>setKnownDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LN</color> <color=#f8f8f2>oldLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LN</color><color=#f8f8f2>)</color> <color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldLN</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/* newNode */</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>oldLN</color><color=#f8f8f2>.</color><color=#a6e22e>releaseMemoryBudget</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set knownDeleted to false. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>clearKnownDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_KNOWN_DELETED_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * In the future we may want to move the following static methods to an</color>
<color=#75715e>   * EntryState utility class and share all state bit twidling among IN,</color>
<color=#75715e>   * ChildReference, and DeltaInfo.</color>
<color=#75715e>   */</color>

  <color=#75715e>/** Returns true if the given state is known deleted. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isStateKnownDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>state</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>KNOWN_DELETED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the given state is pending deleted. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isStatePendingDeleted</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>state</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>PENDING_DELETED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if the LN at the given slot is embedded. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>EMBEDDED_LN_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>state</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>EMBEDDED_LN_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set embeddedLN to true. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setEmbeddedLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>EMBEDDED_LN_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set embeddedLN to false. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clearEmbeddedLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_EMBEDDED_LN_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if the LN at the given slot is an embedded LN with no data. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNoDataLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>NO_DATA_LN_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNoDataLN</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>state</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>NO_DATA_LN_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set noDataLN to true. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setNoDataLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>NO_DATA_LN_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set noDataLN to false. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>clearNoDataLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_NO_DATA_LN_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   *</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumEmbeddedLNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>res</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>getNEntries</color><color=#f8f8f2>();</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>res</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>res</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>INKeyRep</color> <color=#a6e22e>getKeyVals</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getKeyPrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For unit testing only</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasKeyPrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* This has default protection for access by the unit tests. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setKeyPrefix</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>databaseImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>prevLength</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keyPrefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keyPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>;</color>
    <color=#75715e>/* Update the memory budgeting to reflect changes in the key prefix. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>currLength</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>prevLength</color><color=#f8f8f2>,</color> <color=#f8f8f2>currLength</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the idx'th key. If prefixing is enabled, construct a new byte[] containing the prefix</color>
<color=#75715e>   * and suffix. If prefixing is not enabled, just return the current byte[] in entryKeys.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>idx</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getFullKey</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getData</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>EMPTY_KEY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size of the key that is stored persistently, which will be the combined key-data</color>
<color=#75715e>   * for an embedded LN or duplicated DB record.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getStoredKeySize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Updates the key in the idx-th slot of this BIN, if the DB allows key updates and the new key is</color>
<color=#75715e>   * not identical to the current key in the slot. It also updates the data (if any) that is</color>
<color=#75715e>   * embedded with the key in the idx-slot, or embeds new data in that slot, is the "data" param is</color>
<color=#75715e>   * non-null, or removes embedded data, if "data" is null. Finally, it sets the EMBEDDED_LN_BIT and</color>
<color=#75715e>   * NO_DATA_LN_BIT flags in the slot's state.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key is the key to set in the slot and is the LN key.</color>
<color=#75715e>   * @param data If the data portion of a record must be embedded in this BIN, "data" stores the</color>
<color=#75715e>   *     record's data. Null otherwise. See also comment for the keyEntries field.</color>
<color=#75715e>   * @return true if a multi-slot change was made and the complete IN memory size must be updated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateLNSlotKey</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>haveEmbeddedData</color> <color=#f92672>=</color> <color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>clearEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>clearNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>clearNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The new key may be null if a dup LN was deleted, in which case there</color>
<color=#75715e>     * is no need to update it.  There is no need to compare keys if there</color>
<color=#75715e>     * is no comparator configured, since a key cannot be changed when the</color>
<color=#75715e>     * default comparator is used.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>allowsKeyUpdates</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>DupConvert</color><color=#f8f8f2>.</color><color=#a6e22e>needsConversion</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>))</color>
        <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>setKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The key does not change, but the slot contains embedded data,</color>
<color=#75715e>       * which must now either be removed (if data == null or</color>
<color=#75715e>       * data.length == 0) or updated.</color>
<color=#75715e>       * TODO #21488: update the data only if it actually changes.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>INKeyRep</color><color=#f8f8f2>.</color><color=#a6e22e>Type</color> <color=#f8f8f2>oldRepType</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>oldRepType</color> <color=#f92672>!=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The key does not change, but we now have to embed data in a slot</color>
<color=#75715e>       * that does not currently have embedded data.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>INKeyRep</color><color=#f8f8f2>.</color><color=#a6e22e>Type</color> <color=#f8f8f2>oldRepType</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>oldRepType</color> <color=#f92672>!=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Convenience wrapper for setKey() method below</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>insertKey</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set the id key when inserting the first entry. This is important</color>
<color=#75715e>     * when compression removes all entries from a BIN, and then an entry</color>
<color=#75715e>     * is inserted before the empty BIN is purged.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color> <color=#f92672>==</color> <color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setIdentifierKey</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*makeDirty*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>setKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// TODO re-enable this and figure out why it is firing</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>idKeyIsSlotKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>nEntries</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>())</color>
          <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Convenience wrapper for setKey() method below. It is used for</color>
<color=#75715e>   * upper INs only, so no need to worry about the EMBEDDED_LN_BIT</color>
<color=#75715e>   * and NO_DATA_LN_BIT flags.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateKey</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>setKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method inserts or updates a key at a given slot. In either case, the associated embedded</color>
<color=#75715e>   * data (if any) is inserted or updated as well, and the key prefix is adjusted, if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In case of insertion (indicated by a true value for the isInsertion param), it is assumed</color>
<color=#75715e>   * that the idx slot does not store any valid info, so any change to the key prefix (if any) is</color>
<color=#75715e>   * due to the insertion of this new new key and not to the removal of the current key at the idx</color>
<color=#75715e>   * slot.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In case of update, the method does not check if the current key is indeed different from the</color>
<color=#75715e>   * new key; it just updates the key unconditionally. If the slot has embedded data, that data will</color>
<color=#75715e>   * also be updated (if the data param is not null), or be removed (if the data param is null). If</color>
<color=#75715e>   * the slot does not have embedded data and the data param is not null, the given data will be</color>
<color=#75715e>   * embedded.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: For BINs, the maintenance of the EMBEDDED_LN_BIT andNO_DATA_LN_BIT is done by the</color>
<color=#75715e>   * callers of this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data If the data portion of a record must be embedded in this BIN, "data" stores the</color>
<color=#75715e>   *     record's data. Null otherwise. See also comment for the keyEntries field.</color>
<color=#75715e>   * @return true if a multi-slot change was made and the complete IN memory size must be updated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>setKey</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isInsertion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Only compute key prefix if prefixing is enabled and there's an</color>
<color=#75715e>     * existing prefix.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixing</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>newPrefixLen</color> <color=#f92672>=</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixLength</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newPrefixLen</color> <color=#f92672><</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The new key doesn't share the current prefix, so recompute</color>
<color=#75715e>         * the prefix and readjust all the existing suffixes.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newPrefix</color> <color=#f92672>=</color>
            <color=#f8f8f2>(</color><color=#f8f8f2>isInsertion</color> <color=#f92672>?</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>createKeyPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>computeKeyPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Take the new key into consideration for new prefix. */</color>
          <color=#f8f8f2>newPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>createKeyPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>newPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>recalcSuffixes</color><color=#f8f8f2>(</color><color=#f8f8f2>newPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>INKeyRep</color><color=#f8f8f2>.</color><color=#a6e22e>Type</color> <color=#f8f8f2>prevRepType</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>suffix</color> <color=#f92672>=</color> <color=#f8f8f2>computeKeySuffix</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>suffix</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>prevRepType</color> <color=#f92672>!=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Key prefixing has been turned off on this database, but there</color>
<color=#75715e>       * are existing prefixes. Remove prefixes for this IN.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>recalcSuffixes</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>INKeyRep</color><color=#f8f8f2>.</color><color=#a6e22e>Type</color> <color=#f8f8f2>oldRepType</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>oldRepType</color> <color=#f92672>!=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Given 2 byte arrays, "prefix" and "key", where "prefix" is or stores</color>
<color=#75715e>   * a prefix of "key", allocate and return another byte array that stores</color>
<color=#75715e>   * the suffix of "key" w.r.t. "prefix".</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>computeKeySuffix</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>prefixLen</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>prefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prefixLen</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>suffixLen</color> <color=#f92672>=</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>prefixLen</color><color=#f8f8f2>;</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>suffixLen</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>prefixLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>ret</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>suffixLen</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Iterate over all keys in this IN and recalculate their suffixes based on</color>
<color=#75715e>   * newPrefix.  If keyVal and idx are supplied, it means that entry[idx] is</color>
<color=#75715e>   * about to be changed to keyVal so use that instead of</color>
<color=#75715e>   * entryKeys.get(idx) when computing the new suffixes. If idx is < 0,</color>
<color=#75715e>   * and keyVal is null, then recalculate suffixes for all entries in this.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>recalcSuffixes</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newPrefix</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>curKey</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>idx</color> <color=#f92672>?</color> <color=#f8f8f2>key</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>

      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>curData</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>curData</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>curData</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>suffix</color> <color=#f92672>=</color> <color=#f8f8f2>computeKeySuffix</color><color=#f8f8f2>(</color><color=#f8f8f2>newPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>curKey</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>suffix</color><color=#f8f8f2>,</color> <color=#f8f8f2>curData</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setKeyPrefix</color><color=#f8f8f2>(</color><color=#f8f8f2>newPrefix</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Forces computation of the key prefix, without requiring a split. Is public for use by</color>
<color=#75715e>   * DbCacheSize.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>recalcKeyPrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>recalcSuffixes</color><color=#f8f8f2>(</color><color=#f8f8f2>computeKeyPrefix</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Computes a key prefix based on all the keys in 'this'.  Return null if</color>
<color=#75715e>   * the IN is empty or prefixing is not enabled or there is no common</color>
<color=#75715e>   * prefix for the keys.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>computeKeyPrefix</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>excludeIdx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixing</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>nEntries</color> <color=#f92672><=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>firstIdx</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>excludeIdx</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>curPrefixKey</color> <color=#f92672>=</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>firstIdx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>prefixLen</color> <color=#f92672>=</color> <color=#f8f8f2>curPrefixKey</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Only need to look at first and last entries when keys are ordered</color>
<color=#75715e>     * byte-by-byte.  But when there is a comparator, keys are not</color>
<color=#75715e>     * necessarily ordered byte-by-byte.  [#21328]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>byteOrdered</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Disable optimization for now.  Needs testing. */</color>
      <color=#f8f8f2>byteOrdered</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>byteOrdered</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteOrdered</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>lastIdx</color> <color=#f92672>=</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastIdx</color> <color=#f92672>==</color> <color=#f8f8f2>excludeIdx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lastIdx</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastIdx</color> <color=#f92672>></color> <color=#f8f8f2>firstIdx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>lastKey</color> <color=#f92672>=</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>lastIdx</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newPrefixLen</color> <color=#f92672>=</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixLength</color><color=#f8f8f2>(</color><color=#f8f8f2>curPrefixKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>prefixLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newPrefixLen</color> <color=#f92672><</color> <color=#f8f8f2>prefixLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>curPrefixKey</color> <color=#f92672>=</color> <color=#f8f8f2>lastKey</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>prefixLen</color> <color=#f92672>=</color> <color=#f8f8f2>newPrefixLen</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>firstIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>excludeIdx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>curKey</color> <color=#f92672>=</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>newPrefixLen</color> <color=#f92672>=</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixLength</color><color=#f8f8f2>(</color><color=#f8f8f2>curPrefixKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>prefixLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>curKey</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newPrefixLen</color> <color=#f92672><</color> <color=#f8f8f2>prefixLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>curPrefixKey</color> <color=#f92672>=</color> <color=#f8f8f2>curKey</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>prefixLen</color> <color=#f92672>=</color> <color=#f8f8f2>newPrefixLen</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>prefixLen</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>curPrefixKey</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>ret</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>prefixLen</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For debugging.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>verifyKeyPrefix</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>computedKeyPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>computeKeyPrefix</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>computedKeyPrefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>computedKeyPrefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>computedKeyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"VerifyKeyPrefix failed"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>dumpString</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#f8f8f2>computedKeyPrefix</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"VerifyKeyPrefix failed"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>dumpString</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the given key is greater than or equal to the first key in the IN and less than</color>
<color=#75715e>   * or equal to the last key in the IN. This method is used to determine whether a key to be</color>
<color=#75715e>   * inserted belongs in this IN, without doing a tree search. If false is returned it is still</color>
<color=#75715e>   * possible that the key belongs in this IN, but a tree search must be performed to find out.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isKeyInBounds</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color> <color=#f92672><</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color> <color=#f92672>=</color> <color=#f8f8f2>getKeyComparator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>cmp</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Compare key given to my first key. */</color>
    <color=#f8f8f2>cmp</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>),</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cmp</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Compare key given to my last key. */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>cmp</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>cmp</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the idx'th LSN for this entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the idx'th LSN for this entry.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>idx</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>fileOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileOffset</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>((</color><color=#f8f8f2>baseFileNumber</color> <color=#f92672>+</color> <color=#f8f8f2>getFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>)),</color> <color=#f8f8f2>fileOffset</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>entryLsnLongArray</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the LSN of the idx'th slot, mark the slot dirty, and update memory consuption. Throw</color>
<color=#75715e>   * exception if the update is not legitimate.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the LSN of the idx'th slot, mark the slot dirty, and update memory consuption. If "check"</color>
<color=#75715e>   * is true, throw exception if the update is not legitimate.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setLsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>check</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>check</color> <color=#f92672>||</color> <color=#f8f8f2>shouldUpdateLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>

      <color=#75715e>/* setLsnInternal can mutate to an array of longs. */</color>
      <color=#f8f8f2>setLsnInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>oldSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Set the LSN of the idx'th slot. If the current storage for LSNs is the</color>
<color=#75715e>   * compact one, mutate it to the the non-compact, if necessary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setLsnInternal</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Will implement this in the future. Note, don't adjust if mutating.*/</color>
    <color=#75715e>// maybeAdjustCapacity(offset);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryLsnLongArray</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>idx</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>thisFileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>baseFileNumber</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* First entry. */</color>
      <color=#f8f8f2>baseFileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>thisFileNumber</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>setFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisFileNumber</color> <color=#f92672><</color> <color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>adjustFileNumbers</color><color=#f8f8f2>(</color><color=#f8f8f2>thisFileNumber</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>mutateToLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>baseFileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>thisFileNumber</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>fileNumberDifference</color> <color=#f92672>=</color> <color=#f8f8f2>thisFileNumber</color> <color=#f92672>-</color> <color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNumberDifference</color> <color=#f92672>></color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mutateToLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>setFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisFileNumber</color> <color=#f92672>-</color> <color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>));</color>
      <color=#75715e>// assert getFileNumberOffset(offset) >= 0;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>fileOffset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileOffset</color> <color=#f92672>></color> <color=#f8f8f2>MAX_FILE_OFFSET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mutateToLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileOffset</color><color=#f8f8f2>);</color>
    <color=#75715e>// assert getLsn(offset) == value;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>adjustFileNumbers</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>newBaseFileNumber</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldBaseFileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>entryLsnByteArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#f8f8f2>BYTES_PER_LSN_ENTRY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>curEntryFileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>oldBaseFileNumber</color> <color=#f92672>+</color> <color=#f8f8f2>getFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newCurEntryFileNumberOffset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>curEntryFileNumber</color> <color=#f92672>-</color> <color=#f8f8f2>newBaseFileNumber</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newCurEntryFileNumberOffset</color> <color=#f92672>></color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>undoOffset</color> <color=#f92672>=</color> <color=#f8f8f2>oldBaseFileNumber</color> <color=#f92672>-</color> <color=#f8f8f2>newBaseFileNumber</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#f8f8f2>BYTES_PER_LSN_ENTRY</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>-=</color> <color=#f8f8f2>BYTES_PER_LSN_ENTRY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>setFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>getFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>undoOffset</color><color=#f8f8f2>));</color>
          <color=#75715e>// assert getFileNumberOffset(j) >= 0;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>setFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>newCurEntryFileNumberOffset</color><color=#f8f8f2>);</color>

      <color=#75715e>// assert getFileNumberOffset(i) >= 0;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setFileNumberOffset</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color> <color=#f8f8f2>fileNumberOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>fileNumberOffset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>byte</color> <color=#a6e22e>getFileNumberOffset</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setFileOffset</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>fileOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>put3ByteInt</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileOffset</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>get3ByteInt</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>put3ByteInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>get3ByteInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>ret</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ret</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnByteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color> <color=#f92672>==</color> <color=#f8f8f2>THREE_BYTE_NEGATIVE_ONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>mutateToLongArray</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nElts</color> <color=#f92672>=</color> <color=#f8f8f2>entryLsnByteArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>newArr</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>nElts</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nElts</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newArr</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>newArr</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>=</color> <color=#f8f8f2>newArr</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryLsnByteArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For a deferred write database, ensure that information is not lost when a new LSN is assigned.</color>
<color=#75715e>   * Also ensures that a transient LSN is not accidentally assigned to a persistent entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Because this method uses strict checking, prepareForSlotReuse must sometimes be called when</color>
<color=#75715e>   * a new logical entry is being placed in a slot, e.g., during an IN split or an LN slot reuse.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The following transition is a NOOP and the LSN is not set: Any LSN to same value. The</color>
<color=#75715e>   * following transitions are allowed and cause the LSN to be set: Null LSN to transient LSN Null</color>
<color=#75715e>   * LSN to persistent LSN Transient LSN to persistent LSN Persistent LSN to new persistent LSN The</color>
<color=#75715e>   * following transitions should not occur and throw an exception: Transient LSN to null LSN</color>
<color=#75715e>   * Transient LSN to new transient LSN Persistent LSN to null LSN Persistent LSN to transient LSN</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The above imply that a transient or null LSN can overwrite only a null LSN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>shouldUpdateLsn</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>oldLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>newLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Save a little computation in packing/updating an unchanged LSN. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldLsn</color> <color=#f92672>==</color> <color=#f8f8f2>newLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* The rules for a new null LSN can be broken in a read-only env. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newLsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f92672>&&</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/* Enforce LSN update rules.  Assume lsn != oldLsn. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f92672>&&</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>isTransientOrNull</color><color=#f8f8f2>(</color><color=#f8f8f2>newLsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"DeferredWrite LSN update not allowed"</color>
                <color=#f92672>+</color> <color=#e6db74>" oldLsn = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>oldLsn</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#e6db74>" newLsn = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>newLsn</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>isTransientOrNull</color><color=#f8f8f2>(</color><color=#f8f8f2>newLsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"LSN update not allowed"</color>
                <color=#f92672>+</color> <color=#e6db74>" oldLsn = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>oldLsn</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#e6db74>" newLsn = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>newLsn</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit tests. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getEntryLsnLongArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryLsnLongArray</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit tests. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getEntryLsnByteArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryLsnByteArray</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit tests. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>initEntryLsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>capacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryLsnByteArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>capacity</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>baseFileNumber</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Will implement this in the future. Note, don't adjust if mutating.*/</color>
  <color=#75715e>/***</color>
<color=#75715e>   * private void maybeAdjustCapacity(int offset) {</color>
<color=#75715e>   * if (entryLsnLongArray == null) {</color>
<color=#75715e>   * int bytesNeeded = offset + BYTES_PER_LSN_ENTRY;</color>
<color=#75715e>   * int currentBytes = entryLsnByteArray.length;</color>
<color=#75715e>   * if (currentBytes < bytesNeeded) {</color>
<color=#75715e>   * int newBytes = bytesNeeded +</color>
<color=#75715e>   * (GROWTH_INCREMENT * BYTES_PER_LSN_ENTRY);</color>
<color=#75715e>   * byte[] newArr = new byte[newBytes];</color>
<color=#75715e>   * System.arraycopy(entryLsnByteArray, 0, newArr, 0,</color>
<color=#75715e>   * currentBytes);</color>
<color=#75715e>   * entryLsnByteArray = newArr;</color>
<color=#75715e>   * for (int i = currentBytes;</color>
<color=#75715e>   * i < newBytes;</color>
<color=#75715e>   * i += BYTES_PER_LSN_ENTRY) {</color>
<color=#75715e>   * setFileNumberOffset(i, (byte) 0);</color>
<color=#75715e>   * setFileOffset(i, -1);</color>
<color=#75715e>   * }</color>
<color=#75715e>   * }</color>
<color=#75715e>   * } else {</color>
<color=#75715e>   * int currentEntries = entryLsnLongArray.length;</color>
<color=#75715e>   * int idx = offset >> 2;</color>
<color=#75715e>   * if (currentEntries < idx + 1) {</color>
<color=#75715e>   * int newEntries = idx + GROWTH_INCREMENT;</color>
<color=#75715e>   * long[] newArr = new long[newEntries];</color>
<color=#75715e>   * System.arraycopy(entryLsnLongArray, 0, newArr, 0,</color>
<color=#75715e>   * currentEntries);</color>
<color=#75715e>   * entryLsnLongArray = newArr;</color>
<color=#75715e>   * for (int i = currentEntries; i < newEntries; i++) {</color>
<color=#75715e>   * entryLsnLongArray[i] = DbLsn.NULL_LSN;</color>
<color=#75715e>   * }</color>
<color=#75715e>   * }</color>
<color=#75715e>   * }</color>
<color=#75715e>   * }</color>
<color=#75715e>   ***/</color>

  <color=#75715e>/** The last logged size is not stored for UINs. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isLastLoggedSizeStored</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>mayHaveLastLoggedSizeStored</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The last logged size is not stored for UINs. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** The last logged size is not stored for UINs. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clearLastLoggedSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** The last logged size is not stored for UINs. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setLastLoggedSizeUnconditional</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** The last logged size is not stored for UINs. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOffHeapBINId</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pri2</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dirty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>val</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>setOffHeapBINPri2</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>pri2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setOffHeapBINDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>dirty</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>newVal</color> <color=#f92672>=</color> <color=#f8f8f2>val</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>oldVal</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldVal</color> <color=#f92672>==</color> <color=#f8f8f2>newVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>oldVal</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>offHeapBINIds</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newVal</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clearOffHeapBINId</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>setOffHeapBINPri2</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setOffHeapBINDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>oldVal</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldVal</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>offHeapBINIds</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getInListResident</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color> <color=#f92672>&&</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>moveToPri1LRU</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasOffHeapBINIds</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getOffHeapBINIdsMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setOffHeapBINDirty</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>OFFHEAP_DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_OFFHEAP_DIRTY_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOffHeapBINDirty</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>OFFHEAP_DIRTY_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setOffHeapBINPri2</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>OFFHEAP_PRI2_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_OFFHEAP_PRI2_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOffHeapBINPri2</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>OFFHEAP_PRI2_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>INTargetRep</color> <color=#a6e22e>getTargets</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the idx'th target. No need to make dirty, that state only applies to key and LSN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: This method does not update the memory budget. The caller must update the budget.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setTarget</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>target</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>:</color> <color=#e6db74>"Not latched for write "</color> <color=#f92672>+</color> <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" id="</color> <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>curChild</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>entryTargets</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>((</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>target</color><color=#f8f8f2>).</color><color=#a6e22e>setParent</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If this UIN has just lost its last cached child, set its</color>
<color=#75715e>         * hasCachedChildren flag to false and put it back to the</color>
<color=#75715e>         * LRU list.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curChild</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>setHasCachedChildrenFlag</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isDIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceLRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
                  <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>"-"</color>
                      <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>"-"</color>
                      <color=#f92672>+</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>" setTarget(): "</color>
                      <color=#f92672>+</color> <color=#e6db74>" Adding UIN "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>" to LRU after detaching chld "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>curChild</color><color=#f8f8f2>).</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>curChild</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>setHasCachedChildrenFlag</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceLRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>"-"</color>
                    <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>"-"</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>" setTarget(): "</color>
                    <color=#f92672>+</color> <color=#e6db74>" Removing UIN "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>" after attaching child "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>target</color><color=#f8f8f2>).</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the idx'th target.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method does not load children from off-heap cache, so it always returns null when then</color>
<color=#75715e>   * child is not in main cache. Note that when children are INs (this is not a BIN), when this</color>
<color=#75715e>   * method returns null it is does not imply that the child is non-dirty, because dirty BINs are</color>
<color=#75715e>   * stored off-heap. To fetch the current version from off-heap cache in that case, call loadIN</color>
<color=#75715e>   * instead.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#a6e22e>getTarget</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the idx-th child of "this" upper IN, fetching the child from the log and attaching it</color>
<color=#75715e>   * to its parent if it is not already attached. This method is used during tree searches.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On entry, the parent must be latched already.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the child must be fetched from the log, the parent is unlatched. After the disk read is</color>
<color=#75715e>   * done, the parent is relatched. However, due to splits, it may not be the correct parent</color>
<color=#75715e>   * anymore. If so, the method will return null, and the caller is expected to restart the tree</color>
<color=#75715e>   * search.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On return, the parent will be latched, unless null is returned or an exception is thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The "searchKey" param is the key that the caller is looking for. It is used by this method</color>
<color=#75715e>   * in determining if, after a disk read, "this" is still the correct parent for the child.</color>
<color=#75715e>   * "searchKey" may be null if the caller is doing a LEFT or RIGHT search.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#a6e22e>fetchINWithNoLatch</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>searchKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fetchINWithNoLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchKey</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This variant of fetchIN() takes a SearchResult as a param, instead of an idx (it is used by</color>
<color=#75715e>   * Tree.getParentINForChildIN()). The ordinal number of the child to fetch is specified by</color>
<color=#75715e>   * result.index. result.index will be adjusted by this method if, after a disk read, the ordinal</color>
<color=#75715e>   * number of the child changes due to insertions, deletions or splits in the parent.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#a6e22e>fetchINWithNoLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>SearchResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>searchKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fetchINWithNoLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>searchKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Provides the implementation of the above two methods. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>IN</color> <color=#a6e22e>fetchINWithNoLatch</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>searchKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>SearchResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isLatchOwner</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>isMiss</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#e6db74>"NULL_LSN in upper IN"</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * For safety we must get a copy of the BIN off-heap bytes while</color>
<color=#75715e>       * latched, but we can materialize the bytes while unlatched</color>
<color=#75715e>       * (further below) to reduce the work done while latched.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ohBytes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ohBytes</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>getBINBytes</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>pin</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>releaseLatch</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>fetchINHook</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>materializeBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBytes</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>WholeEntry</color> <color=#f8f8f2>wholeEntry</color> <color=#f92672>=</color>
              <color=#f8f8f2>envImpl</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>getLogEntryAllowInvisibleAtRecovery</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#f8f8f2>wholeEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getEntry</color><color=#f8f8f2>();</color>

          <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getResolvedItem</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>isMiss</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The following if statement relies on splits being logged</color>
<color=#75715e>         * immediately, or more precisely, the split node and its</color>
<color=#75715e>         * new sibling being logged immediately, while both siblings</color>
<color=#75715e>         * and their parent are latched exclusively. The reason for</color>
<color=#75715e>         * this is as follows:</color>
<color=#75715e>         *</color>
<color=#75715e>         * Let K be the search key. If we are doing a left-deep or</color>
<color=#75715e>         * right-deep search, K is -INF or +INF respectively.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Let P be the parent IN (i.e., "this") and S be the slot at</color>
<color=#75715e>         * the idx position before P was unlatched above. Here, we</color>
<color=#75715e>         * view slots as independent objects, not identified by their</color>
<color=#75715e>         * position in an IN but by some unique (imaginary) and</color>
<color=#75715e>         * immutable id assigned to the slot when it is first inserted</color>
<color=#75715e>         * into an IN.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Before unlatching P, S was the correct slot to follow down</color>
<color=#75715e>         * the tree looking for K. After P is unlatched and then</color>
<color=#75715e>         * relatched, let S' be the slot at the idx position, if P</color>
<color=#75715e>         * still has an idx position. We consider the following 2 cases:</color>
<color=#75715e>         *</color>
<color=#75715e>         * 1. S' exists and S'.LSN == S.LSN. Then S and S' are the same</color>
<color=#75715e>         * (logical) slot (because two different slots can never cover</color>
<color=#75715e>         * overlapping ranges of keys, and as a result, can never point</color>
<color=#75715e>         * to the same LSN). Then, S is still the correct slot to take</color>
<color=#75715e>         * down the tree, unless the range of keys covered by S has</color>
<color=#75715e>         * shrunk while P was unlatched. But the only way for S's key</color>
<color=#75715e>         * range to shrink is for its child IN to split, which could</color>
<color=#75715e>         * not have happened because if it did, the before and after</color>
<color=#75715e>         * LSNs of S would be different, given that splits are logged</color>
<color=#75715e>         * immediately. We conclude that the set of keys covered by</color>
<color=#75715e>         * S after P is relatched is the same or a superset of the keys</color>
<color=#75715e>         * covered by S before P was unlatched, and thus S (at the idx</color>
<color=#75715e>         * position) is still the correct slot to follow.</color>
<color=#75715e>         *</color>
<color=#75715e>         * 2. There is no idx position in P or S'.LSN != S.LSN. In</color>
<color=#75715e>         * this case we cannot be sure if S' (if it exists) is the</color>
<color=#75715e>         * the correct slot to follow. So, we (re)search for K in P</color>
<color=#75715e>         * to check if P is still the correct parent and find the</color>
<color=#75715e>         * correct slot to follow. If this search lands on the 1st or</color>
<color=#75715e>         * last slot in P, we may return null because using the key</color>
<color=#75715e>         * info contained in P only, we do not know the full range of</color>
<color=#75715e>         * keys covered by those two slots. If null is returned, the</color>
<color=#75715e>         * caller is expected to restart the tree search from the root.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Notice that the if conditions are necessary before calling</color>
<color=#75715e>         * findEntry(). Without them, we could get into an infinite</color>
<color=#75715e>         * loop of search re-tries in the scenario where nothing changes</color>
<color=#75715e>         * in the tree and findEntry always lands on the 1st or last</color>
<color=#75715e>         * slot in P. The conditions guarantee that we may restart the</color>
<color=#75715e>         * tree search only if something changes with S while P is</color>
<color=#75715e>         * unlatched (S moves to a different position or a different</color>
<color=#75715e>         * IN or it points to a different LSN).</color>
<color=#75715e>         *</color>
<color=#75715e>         * Notice also that if P does not split while it is unlatched,</color>
<color=#75715e>         * the range of keys covered by P does not change either. This</color>
<color=#75715e>         * implies that the correct slot to follow *must* be inside P,</color>
<color=#75715e>         * and as a result, the 1st and last slots in P can be trusted.</color>
<color=#75715e>         * Unfortunately, however, we have no way to detecting reliably</color>
<color=#75715e>         * whether P splits or not.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Special care for DBs in DW mode:</color>
<color=#75715e>         *</color>
<color=#75715e>         * For DBs in DW mode, special care must be taken because</color>
<color=#75715e>         * splits are not immediately logged. So, for DW DBs, to avoid</color>
<color=#75715e>         * a call to findEntry() we require that not only S'.LSN ==</color>
<color=#75715e>         * S.LSN, but also the the child is not cached. These 2</color>
<color=#75715e>         * conditions together guarantee that the child did not split</color>
<color=#75715e>         * while P was unlatched, because if the child did split, it</color>
<color=#75715e>         * was fetched and cached first, so after P is relatched,</color>
<color=#75715e>         * either the child would be still cached, or if it was evicted</color>
<color=#75715e>         * after the split, S.LSN would have changed.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>>=</color> <color=#f8f8f2>nEntries</color>
            <color=#f92672>||</color> <color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>lsn</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#f8f8f2>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>searchKey</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>idx</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>idx</color> <color=#f92672>==</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isKeyInBounds</color><color=#f8f8f2>(</color><color=#f8f8f2>searchKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#f8f8f2>idx</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * "this" is still the correct parent and "idx" points to the</color>
<color=#75715e>         * correct slot to follow for the search down the tree. But</color>
<color=#75715e>         * what we fetched from the log may be out-of-date by now</color>
<color=#75715e>         * (because it was fetched and then updated by other threads)</color>
<color=#75715e>         * or it may not be the correct child anymore ("idx" was</color>
<color=#75715e>         * changed by the findEntry() call above). We check 5 cases:</color>
<color=#75715e>         *</color>
<color=#75715e>         * (a) There is already a cached child at the "idx" position.</color>
<color=#75715e>         * In this case, we return whatever is there because it has to</color>
<color=#75715e>         * be the most recent version of the appropriate child node.</color>
<color=#75715e>         * This is true even when a split or reverse split occurred.</color>
<color=#75715e>         * The check for isKeyInBounds above is critical in that case.</color>
<color=#75715e>         *</color>
<color=#75715e>         * (b) There is no cached child at the "idx" slot, but the slot</color>
<color=#75715e>         * LSN is not the same as the LSN we read from the log. This is</color>
<color=#75715e>         * the case if "idx" was changed by findEntry() or other</color>
<color=#75715e>         * threads fetched the same child as this thread, updated it,</color>
<color=#75715e>         * and then evicted it. The child we fetched is obsolete and</color>
<color=#75715e>         * should not be attached. For simplicity, we just return null</color>
<color=#75715e>         * in this (quite rare) case.</color>
<color=#75715e>         *</color>
<color=#75715e>         * (c) We loaded the BIN from off-heap cache and, similar to</color>
<color=#75715e>         * case (b), another thread has loaded the same child, modified</color>
<color=#75715e>         * it, and then evicted it, placing it off-heap again. It's LSN</color>
<color=#75715e>         * did not change because it wasn't logged. We determine</color>
<color=#75715e>         * whether the off-heap BIN has changed, and if so then</color>
<color=#75715e>         * null is returned. This is also rare.</color>
<color=#75715e>         *</color>
<color=#75715e>         * (d) The child was loaded from disk (not off-heap cache) but</color>
<color=#75715e>         * an off-heap cache entry for this BIN has appeared. Another</color>
<color=#75715e>         * thread loaded the BIN from disk and then it was moved</color>
<color=#75715e>         * off-heap, possibly after it was modified. We should use the</color>
<color=#75715e>         * off-heap version and for simplicity we return null. This is</color>
<color=#75715e>         * also rare.</color>
<color=#75715e>         *</color>
<color=#75715e>         * (e) Otherwise, we attach the fetched/loaded child to the</color>
<color=#75715e>         * parent.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>haveBINBytesChanged</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBytes</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBytes</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>postLoadInit</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>attachNode</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Release the parent latch if null is being returned. In this</color>
<color=#75715e>         * case, the parent was unlatched earlier during the disk read,</color>
<color=#75715e>         * and as a result, the caller cannot make any assumptions</color>
<color=#75715e>         * about the state of the parent.</color>
<color=#75715e>         *</color>
<color=#75715e>         * If we are returning or throwing out of this try block, the</color>
<color=#75715e>         * parent may or may not be latched. So, only release the latch</color>
<color=#75715e>         * if it is currently held.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>incFetchStats</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>releaseLatchIfOwner</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>unpin</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>incFetchStats</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the idx-th child of "this" upper IN, fetching the child from the log and attaching it</color>
<color=#75715e>   * to its parent if it is not already attached.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On entry, the parent must be EX-latched already and it stays EX-latched for the duration of</color>
<color=#75715e>   * this method and on return (even in case of exceptions).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param idx The slot of the child to fetch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>fetchIN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"EX-latch not held before fetch"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>isMiss</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#e6db74>"NULL_LSN in upper IN"</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ohBytes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ohBytes</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>getBINBytes</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>materializeBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBytes</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>WholeEntry</color> <color=#f8f8f2>wholeEntry</color> <color=#f92672>=</color>
              <color=#f8f8f2>envImpl</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>getLogEntryAllowInvisibleAtRecovery</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#f8f8f2>wholeEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getEntry</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getResolvedItem</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>isMiss</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>postLoadInit</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>attachNode</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>incFetchStats</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the idx-th child of "this" upper IN, loading the child from off-heap and attaching it</color>
<color=#75715e>   * to its parent if it is not already attached and is cached off-heap. This method does not fetch</color>
<color=#75715e>   * from disk, and will return null if the child is not in the main or off-heap cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On entry, the parent must be EX-latched already and it stays EX-latched for the duration of</color>
<color=#75715e>   * this method and on return (even in case of exceptions).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param idx The slot of the child to fetch.</color>
<color=#75715e>   * @return null if the LN is not in the main or off-heap cache.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>loadIN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"EX-latch not held before load"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ohBytes</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>getBINBytes</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBytes</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>materializeBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBytes</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>postLoadInit</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>attachNode</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
          <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the target of the idx'th entry, fetching from disk if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Null is returned in the following cases:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1. if the LSN is null and the KnownDeleted flag is set; or 2. if the LSN's file has been</color>
<color=#75715e>   * cleaned and: a. the PendingDeleted or KnownDeleted flag is set, or b. the entry is "probably</color>
<color=#75715e>   * expired".</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that checking for PD/KD before calling this method is not sufficient to ensure that</color>
<color=#75715e>   * null is not returned, because null is also returned for expired records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When null is returned, the caller must treat the record as deleted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that null can only be returned for a slot that could contain an LN, not other node</color>
<color=#75715e>   * types and not a DupCountLN since DupCountLNs are never deleted or expired.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An exclusive latch must be held on this BIN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the LN or null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#a6e22e>fetchLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>LN</color><color=#f8f8f2>)</color> <color=#f8f8f2>fetchLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This method may return either an LN or a DIN child of a BIN. It is meant</color>
<color=#75715e>   * to be used from DupConvert only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#a6e22e>fetchLNOrDIN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>fetchLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Underlying implementation of the above fetchLNXXX methods.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Node</color> <color=#a6e22e>fetchLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dupConvert</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"EX-latch not held before fetch"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEntryKnownDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>isMiss</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>Node</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Fetch it from disk. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#e6db74>"NULL_LSN without KnownDeleted"</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Fetch of immediately obsolete LN not allowed. The only exception</color>
<color=#75715e>       * is during conversion of an old-style dups DB.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isLNImmediatelyObsolete</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dupConvert</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"May not fetch immediately obsolete LN"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>lnSlotKey</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>loadLN</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>WholeEntry</color> <color=#f8f8f2>wholeEntry</color> <color=#f92672>=</color>
              <color=#f8f8f2>envImpl</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>getLogEntryAllowInvisibleAtRecovery</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>

          <color=#75715e>/* Last logged size is not present before log version 9. */</color>
          <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>wholeEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getHeader</color><color=#f8f8f2>().</color><color=#a6e22e>getEntrySize</color><color=#f8f8f2>());</color>

          <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#f8f8f2>wholeEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getEntry</color><color=#f8f8f2>();</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logEntry</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LNLogEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>final</color> <color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color> <color=#f8f8f2>lnEntry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color><color=#f8f8f2>)</color> <color=#f8f8f2>wholeEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getEntry</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>lnSlotKey</color> <color=#f92672>=</color> <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>EVICT_LN</color>
                <color=#f92672>&&</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>EVICT_BIN</color>
                <color=#f92672>&&</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color>
                <color=#f92672>&&</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>MAKE_COLD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>moveToPri1LRU</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Node</color><color=#f8f8f2>)</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getResolvedItem</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>isMiss</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>attachNode</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#f8f8f2>lnSlotKey</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isProbablyExpired</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
              <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Cleaner got to the log file, so just return null. It is safe</color>
<color=#75715e>         * to ignore a deleted file for a KD or PD entry because files</color>
<color=#75715e>         * with active txns will not be cleaned.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isLN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LN</color><color=#f8f8f2>)</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color> <color=#f92672>&&</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>MAKE_COLD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ln</color><color=#f8f8f2>.</color><color=#a6e22e>setFetchedCold</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>freeRedundantLN</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>incFetchStats</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the idx'th LN target, enforcing rules defined by the cache modes for the LN. This method</color>
<color=#75715e>   * should be called instead of getTarget when a cache mode applies to user operations such as</color>
<color=#75715e>   * reads and updates.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#a6e22e>getLN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LN</color><color=#f8f8f2>)</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ln</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color> <color=#f92672>&&</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>!=</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>MAKE_COLD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ln</color><color=#f8f8f2>.</color><color=#a6e22e>setFetchedCold</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>isEnabled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>freeRedundantLN</color><color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ln</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ln</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Initialize a node that has been read in from the log. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fetchedLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>commonInit</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setLastLoggedLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>fetchedLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>convertDupKeys</color><color=#f8f8f2>();</color> <color=#75715e>// must be after initMemorySize</color>
    <color=#f8f8f2>addToMainCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setFetchedCold</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* See Database.mutateDeferredWriteBINDeltas. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mutateToFullBIN</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initialize a BIN loaded from off-heap cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Does not call setLastLoggedLsn because materialization of the off-heap BIN initializes all</color>
<color=#75715e>   * fields including the last logged/delta LSNs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>postLoadInit</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isLatchExclusiveOwner</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>commonInit</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>addToMainCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setFetchedCold</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setFetchedColdOffHeap</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>postBINLoad</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Initialize a node read in during recovery. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>postRecoveryInit</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>commonInit</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setLastLoggedLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Common actions of postFetchInit, postLoadInit and postRecoveryInit. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>commonInit</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>initMemorySize</color><color=#f8f8f2>();</color> <color=#75715e>// compute before adding to IN list</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Add to INList and perform eviction related initialization. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addToMainCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isDIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isDBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>traceLRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" postFetchInit(): "</color>
                <color=#f92672>+</color> <color=#e6db74>" Adding UIN to LRU: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Compress full BINs after fetching or loading. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DBIN</color> <color=#f92672>||</color> <color=#66d9ef>this</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DIN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>lazyCompress</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Needed only during duplicates conversion, not during normal operation. The needDupKeyConversion</color>
<color=#75715e>   * field will only be true when first upgrading from JE 4.1. After the first time an IN is</color>
<color=#75715e>   * converted, it will be written out in a later file format, so the needDupKeyConversion field</color>
<color=#75715e>   * will be false and this method will do nothing. See DupConvert.convertInKeys.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>convertDupKeys</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Do not convert more than once. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>needDupKeyConversion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>needDupKeyConversion</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DupConvert</color><color=#f8f8f2>.</color><color=#a6e22e>convertInKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Node#incFetchStats */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>incFetchStats</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isMiss</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Evictor</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>incBINFetchStats</color><color=#f8f8f2>(</color><color=#f8f8f2>isMiss</color><color=#f8f8f2>,</color> <color=#f8f8f2>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*checLatched*/</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>incUINFetchStats</color><color=#f8f8f2>(</color><color=#f8f8f2>isMiss</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>idx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>idx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>expirationTime</color> <color=#f92672>=</color> <color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>expirationToSystemTime</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#f8f8f2>isExpirationInHours</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>expirationTime</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @param in parent IN. Is null when root is fetched. */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color> <color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Bolster the exception with the LSN, which is critical for</color>
<color=#75715e>     * debugging. Otherwise, the exception propagates upward and loses the</color>
<color=#75715e>     * problem LSN.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"fetchRoot of "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"fetchLN of "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"fetchIN of "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"null lsn"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" parent IN="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" IN class="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lastFullLsn="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>()));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lastLoggedLsn="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLoggedLsn</color><color=#f8f8f2>()));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" parent.getDirty()="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" state="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" expires="</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expirationTime</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>formatExpirationTime</color><color=#f8f8f2>(</color><color=#f8f8f2>expirationTime</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"never"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>msg</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>findEntry</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>indicateIfDuplicate</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exact</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>indicateIfDuplicate</color><color=#f8f8f2>,</color> <color=#f8f8f2>exact</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*Comparator*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Find the entry in this IN for which key is LTE the key arg.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Currently uses a binary search, but eventually, this may use binary or linear search</color>
<color=#75715e>   * depending on key size, number of entries, etc.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method guarantees that the key parameter, which is the user's key parameter in</color>
<color=#75715e>   * user-initiated search operations, is always the left hand parameter to the Comparator.compare</color>
<color=#75715e>   * method. This allows a comparator to perform specialized searches, when passed down from upper</color>
<color=#75715e>   * layers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is public so that DbCursorTest can access it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the 0'th entry's key is treated specially in an IN. It always compares lower than</color>
<color=#75715e>   * any other key.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key - the key to search for.</color>
<color=#75715e>   * @param indicateIfDuplicate - true if EXACT_MATCH should be or'd onto the return value if key is</color>
<color=#75715e>   *     already present in this node.</color>
<color=#75715e>   * @param exact - true if an exact match must be found.</color>
<color=#75715e>   * @return offset for the entry that has a key LTE the arg. 0 if key is less than the 1st entry.</color>
<color=#75715e>   *     -1 if exact is true and no exact match is found. If indicateIfDuplicate is true and an</color>
<color=#75715e>   *     exact match was found then EXACT_MATCH is or'd onto the return value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>findEntry</color><color=#f8f8f2>(</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>indicateIfDuplicate</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exact</color><color=#f8f8f2>,</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#66d9ef>byte</color><color=#f92672>[]></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>COUNT_FIND</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>idKeyIsSlotKey</color><color=#f8f8f2>();</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>high</color> <color=#f92672>=</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>low</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>middle</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>comparator</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>comparator</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Special Treatment of 0th Entry</color>
<color=#75715e>     * ------------------------------</color>
<color=#75715e>     * IN's are special in that they have a entry[0] where the key is a</color>
<color=#75715e>     * virtual key in that it always compares lower than any other key.</color>
<color=#75715e>     * BIN's don't treat key[0] specially.  But if the caller asked for an</color>
<color=#75715e>     * exact match or to indicate duplicates, then use the key[0] and</color>
<color=#75715e>     * forget about the special entry zero comparison.</color>
<color=#75715e>     *</color>
<color=#75715e>     * We always use inexact searching to get down to the BIN, and then</color>
<color=#75715e>     * call findEntry separately on the BIN if necessary.  So the behavior</color>
<color=#75715e>     * of findEntry is different for BINs and INs, because it's used in</color>
<color=#75715e>     * different ways.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Consider a tree where the lowest key is "b" and we want to insert</color>
<color=#75715e>     * "a".  If we did the comparison (with exact == false), we wouldn't</color>
<color=#75715e>     * find the correct (i.e.  the left) path down the tree.  So the</color>
<color=#75715e>     * virtual key ensures that "a" gets inserted down the left path.</color>
<color=#75715e>     *</color>
<color=#75715e>     * The insertion case is a good specific example.  findBinForInsert</color>
<color=#75715e>     * does inexact searching in the INs only, not the BIN.</color>
<color=#75715e>     *</color>
<color=#75715e>     * There's nothing special about the 0th key itself, only the use of</color>
<color=#75715e>     * the 0th key in the comparison algorithm.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>entryZeroSpecialCompare</color> <color=#f92672>=</color> <color=#f8f8f2>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>exact</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>indicateIfDuplicate</color><color=#f8f8f2>;</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>nEntries</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>low</color> <color=#f92672><=</color> <color=#f8f8f2>high</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>middle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>high</color> <color=#f92672>+</color> <color=#f8f8f2>low</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>s</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>middle</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>entryZeroSpecialCompare</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>middle</color><color=#f8f8f2>,</color> <color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>middle</color><color=#f8f8f2>),</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>high</color> <color=#f92672>=</color> <color=#f8f8f2>middle</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>low</color> <color=#f92672>=</color> <color=#f8f8f2>middle</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indicateIfDuplicate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>middle</color> <color=#f92672>|</color> <color=#f8f8f2>EXACT_MATCH</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>middle</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>ret</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>exact</color> <color=#f92672>&&</color> <color=#f8f8f2>isEntryKnownDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * No match found.  Either return -1 if caller wanted exact matches</color>
<color=#75715e>     * only, or return entry whose key is < search key.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exact</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>high</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Inserts a slot with the given key, lsn and child node into this IN, if a slot with the same key</color>
<color=#75715e>   * does not exist already. The state of the new slot is set to DIRTY. Assumes this node is already</color>
<color=#75715e>   * latched by the caller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the entry was successfully inserted, false if it was a duplicate.</color>
<color=#75715e>   * @throws EnvironmentFailureException if the node is full (it should have been split earlier).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>insertEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>res</color> <color=#f92672>=</color> <color=#f8f8f2>insertEntry1</color><color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>res</color> <color=#f92672>&</color> <color=#f8f8f2>INSERT_SUCCESS</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Inserts a slot with the given key, lsn and child node into this IN, if a slot with the same key</color>
<color=#75715e>   * does not exist already. The state of the new slot is set to DIRTY. Assumes this node is already</color>
<color=#75715e>   * latched by the caller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data If the data portion of a record must be embedded in this BIN, "data" stores the</color>
<color=#75715e>   *     record's data. Null otherwise. See also comment for the keyEntries field.</color>
<color=#75715e>   * @return either (1) the index of location in the IN where the entry was inserted |'d with</color>
<color=#75715e>   *     INSERT_SUCCESS, or (2) the index of the duplicate in the IN if the entry was found to be a</color>
<color=#75715e>   *     duplicate.</color>
<color=#75715e>   * @throws EnvironmentFailureException if the node is full (it should have been split earlier).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>insertEntry1</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Node</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>blindInsertion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>insertEntry1</color><color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>DIRTY_BIT</color><color=#f8f8f2>,</color> <color=#f8f8f2>blindInsertion</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Inserts a slot with the given key, lsn, state, and child node into this IN, if a slot with the</color>
<color=#75715e>   * same key does not exist already. Assumes this node is already latched by the caller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This returns a failure if there's a duplicate match. The caller must do the processing to</color>
<color=#75715e>   * check if the entry is actually deleted and can be overwritten. This is foisted upon the caller</color>
<color=#75715e>   * rather than handled in this object because there may be some latch releasing/retaking in order</color>
<color=#75715e>   * to check a child LN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data If the data portion of a record must be embedded in this BIN, "data" stores the</color>
<color=#75715e>   *     record's data. Null otherwise. See also comment for the keyEntries field.</color>
<color=#75715e>   * @return either (1) the index of location in the IN where the entry was inserted |'d with</color>
<color=#75715e>   *     INSERT_SUCCESS, or (2) the index of the duplicate in the IN if the entry was found to be a</color>
<color=#75715e>   *     duplicate.</color>
<color=#75715e>   * @throws EnvironmentFailureException if the node is full (it should have been split earlier).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>insertEntry1</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Node</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color> <color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>blindInsertion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Search without requiring an exact match, but do let us know the</color>
<color=#75715e>     * index of the match if there is one.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>&</color> <color=#f8f8f2>EXACT_MATCH</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * There is an exact match.  Don't insert; let the caller decide</color>
<color=#75715e>       * what to do with this duplicate.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>index</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>EXACT_MATCH</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * There was no key match, but if this is a bin delta, there may be an</color>
<color=#75715e>     * exact match in the full bin. Mutate to full bin and search again.</color>
<color=#75715e>     * However, if we know for sure that the key does not exist in the full</color>
<color=#75715e>     * BIN, then don't mutate, unless there is no space in the delta to do</color>
<color=#75715e>     * the insertion.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>doBlindInsertion</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color> <color=#f92672><</color> <color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doBlindInsertion</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>blindInsertion</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>mayHaveKeyInFullBin</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>doBlindInsertion</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>doBlindInsertion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>mutateToFullBIN</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*leaveFreeSlot*/</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>&</color> <color=#f8f8f2>EXACT_MATCH</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>index</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>EXACT_MATCH</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>incBinDeltaBlindOps</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceDeltas</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>"-"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>"-"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>blindInsertion</color> <color=#f92672>?</color> <color=#e6db74>" Blind insertion in BIN-delta "</color> <color=#f8f8f2>:</color> <color=#e6db74>" Blind put in BIN-delta "</color><color=#f8f8f2>)</color>
                  <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" nEntries = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>nEntries</color>
                  <color=#f92672>+</color> <color=#e6db74>" max entries = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" full BIN entries = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinNEntries</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" full BIN max entries = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinMaxEntries</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color> <color=#f92672>>=</color> <color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"Node "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" should have been split before calling insertEntry"</color>
              <color=#f92672>+</color> <color=#e6db74>" is BIN-delta: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>isBINDelta</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" num entries: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nEntries</color>
              <color=#f92672>+</color> <color=#e6db74>" max entries: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* There was no key match, so insert to the right of this entry. */</color>
    <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>

    <color=#75715e>/* We found a spot for insert, shift entries as needed. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Adding elements to the LSN array can change the space used. */</color>
      <color=#f8f8f2>shiftEntriesRight</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>oldSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nEntries</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>).</color><color=#a6e22e>incFullBinNEntries</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>child</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setLsnInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>insertKey</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do this after calling insert key to overwrite whatever state changes</color>
<color=#75715e>     * were done by the insertEntry() call.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>adjustCursorsForInsert</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>|</color> <color=#f8f8f2>INSERT_SUCCESS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes the slot at index from this IN. Assumes this node is already latched by the caller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index The index of the entry to delete from the IN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>deleteEntry</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>deleteEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*makeDirty*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*validate*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Variant that allows specifying whether the IN is dirtied and whether validation takes place.</color>
<color=#75715e>   * 'validate' should be false only in tests.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>See BIN.compress and INCompressor for a discussion about why slots can be deleted without</color>
<color=#75715e>   * dirtying the BIN, and why the next delta is prohibited when the slot is dirty.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>deleteEntry</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>makeDirty</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>validate</color> <color=#f92672>||</color> <color=#f8f8f2>validateSubtreeBeforeDelete</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>makeDirty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setProhibitNextDelta</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Node</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>freeLN</color><color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>freeBIN</color><color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>childIN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>childIN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>oldLSNArraySize</color> <color=#f92672>=</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do the actual deletion. Note: setTarget() must be called before</color>
<color=#75715e>     * copyEntries() so that the hasCachedChildrenFlag will be properly</color>
<color=#75715e>     * maintained.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>copyEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#f8f8f2>index</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nEntries</color><color=#f92672>--</color><color=#f8f8f2>;</color>

    <color=#75715e>/* cleanup what used to be the last entry */</color>
    <color=#f8f8f2>clearEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color><color=#f8f8f2>);</color>

    <color=#75715e>/* setLsnInternal can mutate to an array of longs. */</color>
    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldLSNArraySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>());</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Note that we don't have to adjust cursors for delete, since</color>
<color=#75715e>     * there should be nothing pointing at this record.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>traceDelete</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * WARNING: clearEntry() calls entryTargets.set() directly, instead of setTarget(). As a result,</color>
<color=#75715e>   * the hasCachedChildren flag of the IN is not updated here. The caller is responsible for</color>
<color=#75715e>   * updating this flag, if needed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>clearEntry</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryTargets</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>offHeapBINIds</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setLsnInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is called after the idx'th child of this node gets logged, and changes position as</color>
<color=#75715e>   * a result.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newLSN The new on-disk position of the child.</color>
<color=#75715e>   * @param newVLSN The VLSN of the logrec at the new position. For LN children only.</color>
<color=#75715e>   * @param newSize The size of the logrec at the new position. For LN children only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>updateEntry</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>).</color><color=#a6e22e>setCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is called only from BIN.applyDelta(). It applies the info extracted from a delta</color>
<color=#75715e>   * slot to the corresponding slot in the full BIN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unlike other update methods, the LSN may be NULL_LSN if the KD flag is set. This allows</color>
<color=#75715e>   * applying a BIN-delta with a NULL_LSN and KD, for an invisible log entry for example.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>No need to do memory counting in this method because the BIN is not yet attached to the</color>
<color=#75715e>   * tree.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>applyDeltaSlot</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color> <color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>KNOWN_DELETED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>getInListResident</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>).</color><color=#a6e22e>freeOffHeapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*check*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>updateLNSlotKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>));</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>isNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the idx slot of this BIN to reflect a record insertion in an existing KD slot. It is</color>
<color=#75715e>   * called from CursorImpl.insertRecordInternal(), after logging the insertion op.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newLN The LN associated with the new record.</color>
<color=#75715e>   * @param newLSN The LSN of the insertion logrec.</color>
<color=#75715e>   * @param newSize The size of the insertion logrec.</color>
<color=#75715e>   * @param newKey The value for the record's key. It is equal to the current key value in the slot,</color>
<color=#75715e>   *     but may not be identical to that value if a custom comparator is used.</color>
<color=#75715e>   * @param newData If the record's data must be embedded in this BIN, "data" stores the record's</color>
<color=#75715e>   *     data. Null otherwise. See also comment for the keyEntries field.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>insertRecord</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LN</color> <color=#f8f8f2>newLN</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>freeOffHeapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color> <color=#75715e>// old version of the LN is stale</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>updateLNSlotKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>clearLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLN</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNSequence</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSlotSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSlotSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>clearKnownDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>clearPendingDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the idx slot of this BIN to reflect an update of the associated record. It is called</color>
<color=#75715e>   * from CursorImpl.updateRecordInternal(), after logging the update op.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param oldMemSize If the child LN was cached before the update op, it has already been updated</color>
<color=#75715e>   *     in-place by the caller. In this case, oldMemSize stores the size of the child LN before the</color>
<color=#75715e>   *     update, and it is used to do memory counting. Otherwise oldMemSize is 0 and the newly</color>
<color=#75715e>   *     created LN has not been attached to the tree; it will be attached later by the caller, if</color>
<color=#75715e>   *     needed.</color>
<color=#75715e>   * @param newLSN The LSN of the update logrec.</color>
<color=#75715e>   * @param newVLSN The VLSN of the update logrec.</color>
<color=#75715e>   * @param newSize The on-disk size of the update logrec.</color>
<color=#75715e>   * @param newKey The new value for the record's key. It is equal to the current value, but may not</color>
<color=#75715e>   *     be identical to the current value if a custom comparator is used. It may be null, if the</color>
<color=#75715e>   *     caller knows for sure that the key does not change.</color>
<color=#75715e>   * @param newData If the record's data must be embedded in this BIN, "data" stores the record's</color>
<color=#75715e>   *     data. Null otherwise. See also comment for the keyEntries field.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>updateRecord</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>oldMemSize</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newData</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>freeOffHeapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color> <color=#75715e>// old version of the LN is stale</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>updateLNSlotKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>newData</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>).</color><color=#a6e22e>setCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Update mem size for key change. */</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSlotSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSlotSize</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Update mem size for node change. */</color>
      <color=#f8f8f2>Node</color> <color=#f8f8f2>newLN</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newMemSize</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>newLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>newLN</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySizeIncludedByParent</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldMemSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newMemSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the idx slot slot of this BIN to reflect a deletion of the associated record. It is</color>
<color=#75715e>   * called from CursorImpl.deleteCurrentRecord(), after logging the deletion op.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param oldMemSize If the child LN was cached before the deletion, it has already been updated</color>
<color=#75715e>   *     in-place by the caller (the ln contents have been deleted). In this case, oldMemSize stores</color>
<color=#75715e>   *     the in-memory size of the child LN before the update, and it is used to do memory counting.</color>
<color=#75715e>   *     Otherwise oldMemSize is 0 and the newly created LN has not been attached to the tree; it</color>
<color=#75715e>   *     will be attached later by the caller, if needed.</color>
<color=#75715e>   * @param newLSN The LSN of the deletion logrec.</color>
<color=#75715e>   * @param newVLSN The VLSN of the deletion logrec.</color>
<color=#75715e>   * @param newSize The on-disk size of the deletion logrec.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>deleteRecord</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>oldMemSize</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>freeOffHeapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color> <color=#75715e>// old version of the LN is stale</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLSN</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Update mem size for node change. */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldMemSize</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Node</color> <color=#f8f8f2>newLN</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newMemSize</color> <color=#f92672>=</color> <color=#f8f8f2>newLN</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySizeIncludedByParent</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldMemSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newMemSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldMemSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setPendingDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is used by the RecoveryManager to change the current version of a record, either to</color>
<color=#75715e>   * a later version (in case of redo), or to an earlier version (in case of undo). The current</color>
<color=#75715e>   * version may or may not be cached as a child LN of this BIN (it may be only in case of txn abort</color>
<color=#75715e>   * during normal processing). If it is, it is evicted. The new version is not attached to the</color>
<color=#75715e>   * in-memory tree, to save memory during crash recovery.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param idx The BIN slot for the record.</color>
<color=#75715e>   * @param lsn The LSN of the new record version. It may be null in case of undo, if the logrec</color>
<color=#75715e>   *     that is being undone is an insertion and the record did not exist at all in the DB before</color>
<color=#75715e>   *     that insertion.</color>
<color=#75715e>   * @param knownDeleted True if the new version is a committed deletion.</color>
<color=#75715e>   * @param pendingDeleted True if the new version is a deletion, which may or may not be committed.</color>
<color=#75715e>   * @param key The key of the new version. It is null only if we are undoing and the revert-to</color>
<color=#75715e>   *     version was not embedded (in this case the key of the revert-to version is not stored in</color>
<color=#75715e>   *     the logrec). If it is null and the DB allows key updates, the new record version is fetched</color>
<color=#75715e>   *     from disk to retrieve its key, so that the key values stored in the BIN slots are always</color>
<color=#75715e>   *     transactionally correct.</color>
<color=#75715e>   * @param data The data of the new version. It is non-null if and only if the new version must be</color>
<color=#75715e>   *     embedded in the BIN.</color>
<color=#75715e>   * @param vlsn The VLSN of the new version.</color>
<color=#75715e>   * @param logrecSize The on-disk size of the logrec corresponding to the new version. It may be 0</color>
<color=#75715e>   *     (i.e. unknown) in case of undo.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>recoverRecord</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>knownDeleted</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>pendingDeleted</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>logrecSize</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>freeOffHeapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color> <color=#75715e>// old version of the LN is stale</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A NULL lsn means that we are undoing an insertion that was done</color>
<color=#75715e>       * without slot reuse. To undo such an insertion we evict the</color>
<color=#75715e>       * current version (it may cached only in case of normal txn abort)</color>
<color=#75715e>       * and set the KD flag in the slot. We also set the LSN to null to</color>
<color=#75715e>       * ensure that the slot does not point to a logrec that does not</color>
<color=#75715e>       * reflect the slot's current state. The slot can then be put on</color>
<color=#75715e>       * the compressor for complete removal.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>setKnownDeletedAndEvictLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>setLsnInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>queueSlotDeletion</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>allowsKeyUpdates</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>knownDeleted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>WholeEntry</color> <color=#f8f8f2>wholeEntry</color> <color=#f92672>=</color>
            <color=#f8f8f2>getEnv</color><color=#f8f8f2>()</color>
                <color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color>
                <color=#f8f8f2>.</color><color=#a6e22e>getLogEntryAllowInvisibleAtRecovery</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>

        <color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color> <color=#f8f8f2>logrec</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color><color=#f8f8f2>)</color> <color=#f8f8f2>wholeEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getEntry</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>logrec</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#f8f8f2>getDatabase</color><color=#f8f8f2>());</color>

        <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>logrec</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>logrecSize</color> <color=#f92672>=</color> <color=#f8f8f2>wholeEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getHeader</color><color=#f8f8f2>().</color><color=#a6e22e>getEntrySize</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_NOT_FOUND</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>makeFetchErrorMsg</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>updateLNSlotKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>logrecSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>knownDeleted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pendingDeleted</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setKnownDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>queueSlotDeletion</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearKnownDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pendingDeleted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setPendingDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>queueSlotDeletion</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>clearPendingDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSlotSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSlotSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the cached-child and LSN properties of the idx-th slot. This method is used by the</color>
<color=#75715e>   * RecoveryManager.recoverChildIN() to change the version of a child IN, a later version The child</color>
<color=#75715e>   * IN may or may not be already attached to the tree.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>recoverIN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If we are about to detach a cached child IN, make sure that it is</color>
<color=#75715e>     * not in the INList. This is correct, because this method is called</color>
<color=#75715e>     * during the recovery phase where the INList is disabled,</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Node</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
        <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>((</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>child</color><color=#f8f8f2>).</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>()</color>
        <color=#f92672>||</color> <color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#f8f8f2>node</color> <color=#75715e>/* this is needed by a unit test*/</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastLoggedSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>newSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSlotSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSlotSize</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Attach the given node as the idx-th child of "this" node. If the child node is an LN, update</color>
<color=#75715e>   * the key of the parent slot to the given key value, if that value is non-null and an update is</color>
<color=#75715e>   * indeed necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is called after the child node has been either (a) fetched in from disk and is</color>
<color=#75715e>   * not dirty, or (b) is a newly created instance that will be written out later by something like</color>
<color=#75715e>   * a checkpoint. In either case, the slot LSN does not need to be updated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: does not dirty the node unless the LN slot key is changed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>attachNode</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>node</color><color=#f8f8f2>).</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>();</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Make sure we are not using this method to detach a cached child */</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>newKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>updateLNSlotKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSlotSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSlotSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Detach from the tree the child node at the idx-th slot.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The most common caller of this method is the evictor. If the child</color>
<color=#75715e>   * being evicted was dirty, it has just been logged and the lsn of the</color>
<color=#75715e>   * slot must be updated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>detachNode</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>updateLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>newLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>Node</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>updateLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>newSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSlotSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSlotSize</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>remove</color><color=#f8f8f2>((</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>child</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is used in DupConvert, where it is called to convert the keys of an upper IN that</color>
<color=#75715e>   * has just been fetched from the log and is not attached to in-memory tree yet.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>convertKey</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>updateKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>newKey</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSlotSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSlotSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSlotSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>copyEntries</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>entryTargets</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>offHeapBINIds</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>entryStates</color><color=#f8f8f2>,</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryStates</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>fromOff</color> <color=#f92672>=</color> <color=#f8f8f2>from</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>toOff</color> <color=#f92672>=</color> <color=#f8f8f2>to</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nBytes</color> <color=#f92672>=</color> <color=#f8f8f2>n</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>entryLsnByteArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>fromOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryLsnByteArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>toOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>nBytes</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryLsnLongArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return true if this node needs splitting. For the moment, needing to be split is defined by</color>
<color=#75715e>   * there being no free entries available.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>needsSplitting</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>fullBinNEntries</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinNEntries</color><color=#f8f8f2>();</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>fullBinMaxEntries</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinMaxEntries</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fullBinNEntries</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* fullBinNEntries is unknown in logVersions < 10 */</color>
        <color=#f8f8f2>mutateToFullBIN</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*leaveFreeSlot*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>fullBinNEntries</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>fullBinMaxEntries</color> <color=#f92672>-</color> <color=#f8f8f2>fullBinNEntries</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Split this into two nodes. Parent IN is passed in parent and should be latched by the caller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>childIndex is the index in parent of where "this" can be found.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>childIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>grandParent</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxEntries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>splitInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>childIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>grandParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxEntries</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called when we know we are about to split on behalf of a key that is the minimum (leftSide) or</color>
<color=#75715e>   * maximum (!leftSide) of this node. This is achieved by just forcing the split to occur either</color>
<color=#75715e>   * one element in from the left or the right (i.e. splitIndex is 1 or nEntries - 1).</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>IN</color> <color=#a6e22e>splitSpecial</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>parentIndex</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>grandParent</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>maxEntriesPerNode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>leftSide</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>leftSide</color> <color=#f92672>&&</color> <color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>splitInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>parentIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>grandParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxEntriesPerNode</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>leftSide</color> <color=#f92672>&&</color> <color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>splitInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>parentIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>grandParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxEntriesPerNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>split</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#f8f8f2>parentIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>grandParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxEntriesPerNode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#a6e22e>splitInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>childIndex</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>grandParent</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxEntries</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>splitIndex</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Find the index of the existing identifierKey so we know which IN</color>
<color=#75715e>     * (new or old) to put it in.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>unexpectedState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>idKeyIndex</color> <color=#f92672>=</color> <color=#f8f8f2>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>splitIndex</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>splitIndex</color> <color=#f92672>=</color> <color=#f8f8f2>nEntries</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Range of entries to copy to new sibling. */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>low</color><color=#f8f8f2>,</color> <color=#f8f8f2>high</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idKeyIndex</color> <color=#f92672><</color> <color=#f8f8f2>splitIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Current node (this) keeps left half entries.  Right half entries</color>
<color=#75715e>       * will go in the new node.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>low</color> <color=#f92672>=</color> <color=#f8f8f2>splitIndex</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>high</color> <color=#f92672>=</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Current node (this) keeps right half entries.  Left half entries</color>
<color=#75715e>       * will go in the new node.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>low</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>high</color> <color=#f92672>=</color> <color=#f8f8f2>splitIndex</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newIdKey</color> <color=#f92672>=</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>low</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>parentLsn</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Ensure that max entries is large enough to hold the slots being</color>
<color=#75715e>     * moved to the new sibling, with one spare slot for insertions. This</color>
<color=#75715e>     * is important when the maxEntries param is less than nEntries in this</color>
<color=#75715e>     * node, which can occur when the user reduces the fanout or when this</color>
<color=#75715e>     * node has temporarily grown beyond its original fanout.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>newSibling</color> <color=#f92672>=</color> <color=#f8f8f2>createNewInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>newIdKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>maxEntries</color><color=#f8f8f2>,</color> <color=#f8f8f2>high</color> <color=#f92672>-</color> <color=#f8f8f2>low</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>level</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>addedNewSiblingToCompressorQueue</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>newSiblingNEntries</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>high</color> <color=#f92672>-</color> <color=#f8f8f2>low</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>haveCachedChildren</color> <color=#f92672>=</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>();</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>haveCachedChildren</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>());</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#75715e>/** Distribute entries among the split node and the new sibling. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>low</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>high</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>addedNewSiblingToCompressorQueue</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isDefunct</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>addedNewSiblingToCompressorQueue</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>addToCompressorQueue</color><color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>appendEntryFromOtherNode</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>clearEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>low</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>shiftEntriesLeft</color><color=#f8f8f2>(</color><color=#f8f8f2>newSiblingNEntries</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>nEntries</color> <color=#f92672>-=</color> <color=#f8f8f2>newSiblingNEntries</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>haveCachedChildren</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setHasCachedChildrenFlag</color><color=#f8f8f2>(</color><color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>());</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>hasCachedChildrenFlag</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>hasCachedChildren</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>adjustCursors</color><color=#f8f8f2>(</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>,</color> <color=#f8f8f2>low</color><color=#f8f8f2>,</color> <color=#f8f8f2>high</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If this node has no key prefix, calculate it now that it has</color>
<color=#75715e>       * been split.  This must be done before logging, to ensure the</color>
<color=#75715e>       * prefix information is made persistent [#20799].</color>
<color=#75715e>       */</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newKeyPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>computeKeyPrefix</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>recalcSuffixes</color><color=#f8f8f2>(</color><color=#f8f8f2>newKeyPrefix</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Apply compaction after prefixing [#20799]. */</color>
      <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Only recalc if there are multiple entries in newSibling. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newSiblingPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>computeKeyPrefix</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>recalcSuffixes</color><color=#f8f8f2>(</color><color=#f8f8f2>newSiblingPrefix</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#75715e>/* initMemorySize calls entryKeys.compact. */</color>
        <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>initMemorySize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>idKeyIsSlotKey</color><color=#f8f8f2>();</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>idKeyIsSlotKey</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Update size. newSibling and parent are correct, but this IN has</color>
<color=#75715e>       * had its entries shifted and is not correct.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Also, inMemorySize does not reflect changes that may have</color>
<color=#75715e>       * resulted from key prefixing related changes, it needs to be</color>
<color=#75715e>       * brought up to date, so update it appropriately for this and the</color>
<color=#75715e>       * above reason.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>INList</color> <color=#f8f8f2>inMemoryINs</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>();</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>oldMemorySize</color> <color=#f92672>=</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>;</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Parent refers to child through an element of the entries array.</color>
<color=#75715e>       * Depending on which half of the BIN we copied keys from, we</color>
<color=#75715e>       * either have to adjust one pointer and add a new one, or we have</color>
<color=#75715e>       * to just add a new pointer to the new sibling.</color>
<color=#75715e>       *</color>
<color=#75715e>       * We must use the provisional logging for two reasons:</color>
<color=#75715e>       *</color>
<color=#75715e>       *   1) All three log entries must be read atomically. The parent</color>
<color=#75715e>       *   must get logged last, as all referred-to children must precede</color>
<color=#75715e>       *   it. Provisional entries guarantee that all three are processed</color>
<color=#75715e>       *   as a unit. Recovery skips provisional entries, so the changed</color>
<color=#75715e>       *   children are only used if the parent makes it out to the log.</color>
<color=#75715e>       *</color>
<color=#75715e>       *   2) We log all they way to the root to avoid the "great aunt"</color>
<color=#75715e>       *   problem (see LevelRecorder), and provisional logging is</color>
<color=#75715e>       *   necessary during a checkpoint for levels less than</color>
<color=#75715e>       *   maxFlushLevel.</color>
<color=#75715e>       *</color>
<color=#75715e>       * We prohibit compression during logging because there should be</color>
<color=#75715e>       * at least one entry in each IN. Note the use of getKey(0) below.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSiblingLsn</color> <color=#f92672>=</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>optionalLogProvisionalNoCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>myNewLsn</color> <color=#f92672>=</color> <color=#f8f8f2>optionalLogProvisionalNoCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>);</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>nEntries</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * When we update the parent entry, we make sure that we don't</color>
<color=#75715e>       * replace the parent's key that points at 'this' with a key that</color>
<color=#75715e>       * is > than the existing one.  Replacing the parent's key with</color>
<color=#75715e>       * something > would effectively render a piece of the subtree</color>
<color=#75715e>       * inaccessible.  So only replace the parent key with something</color>
<color=#75715e>       * <= the existing one.  See tree/SplitTest.java for more details</color>
<color=#75715e>       * on the scenario.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>low</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Change the original entry to point to the new child and add</color>
<color=#75715e>         * an entry to point to the newly logged version of this</color>
<color=#75715e>         * existing child.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>prepareForSlotReuse</color><color=#f8f8f2>(</color><color=#f8f8f2>childIndex</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>updateSplitSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>childIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSiblingLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>newIdKey</color><color=#f8f8f2>);</color>

        <color=#66d9ef>boolean</color> <color=#f8f8f2>inserted</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>insertEntry</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>),</color> <color=#f8f8f2>myNewLsn</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>inserted</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Update the existing child's LSN to reflect the newly logged</color>
<color=#75715e>         * version and insert new child into parent.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>updateSplitSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>childIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>myNewLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>

        <color=#66d9ef>boolean</color> <color=#f8f8f2>inserted</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>insertEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>,</color> <color=#f8f8f2>newIdKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSiblingLsn</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>inserted</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>inMemoryINs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>);</color>

      <color=#75715e>/**</color>
<color=#75715e>       * Log the parent. Note that the root slot or grandparent slot is not updated with the</color>
<color=#75715e>       * parent's LSN here; this is done by Tree.forceSplit.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>isRoot</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>parentLsn</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>optionalLog</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>parentLsn</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>optionalLogProvisional</color><color=#f8f8f2>(</color><color=#f8f8f2>grandParent</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Coordinate the split with an in-progress checkpoint. */</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getCheckpointer</color><color=#f8f8f2>().</color><color=#a6e22e>coordinateSplitWithCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check whether either the old or the new sibling must be added</color>
<color=#75715e>       * to the LRU (priority-1 LRUSet).</color>
<color=#75715e>       */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isDIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isDBIN</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>hasCachedChildrenFlag</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>traceLRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
              <color=#e6db74>"split-newSibling "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>"-"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>"-"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" Adding UIN to LRU: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>haveCachedChildren</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceLRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
              <color=#e6db74>"split-oldSibling "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>"-"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>"-"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" Adding UIN to LRU: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Debug log this information. */</color>
      <color=#f8f8f2>traceSplit</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>parent</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newSibling</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>parentLsn</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>myNewLsn</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>newSiblingLsn</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>splitIndex</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>idKeyIndex</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>childIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used for moving entries between BINs during splits. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>appendEntryFromOtherNode</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>fromIdx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ohBinId</color> <color=#f92672>=</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>ohBinPri2</color> <color=#f92672>=</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>isOffHeapBINPri2</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>ohBinDirty</color> <color=#f92672>=</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>isOffHeapBINDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>entryStates</color><color=#f92672>[</color><color=#f8f8f2>fromIdx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>from</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(</color><color=#f8f8f2>fromIdx</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>

    <color=#f92672>++</color><color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * When calling setTarget for an IN child we must latch it, because</color>
<color=#75715e>     * setTarget sets the parent.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>target</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>target</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>insertKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>

    <color=#75715e>/* setLsnInternal can mutate to an array of longs. */</color>
    <color=#f8f8f2>setLsnInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBinId</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinPri2</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinDirty</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>setOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>ohBinId</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update a slot that is being split. The slot to be updated here is the one that existed before</color>
<color=#75715e>   * the split.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param child The new child to be placed under the slot. May be the newly created sibling or the</color>
<color=#75715e>   *     pre-existing sibling.</color>
<color=#75715e>   * @param lsn The new lsn of the child (the child was logged just before calling this method, so</color>
<color=#75715e>   *     its slot lsn must be updated)</color>
<color=#75715e>   * @param key The new key for the slot. We should not actually update the slot key, because its</color>
<color=#75715e>   *     value is the lower bound of the key range covered by the slot, and this lower bound does</color>
<color=#75715e>   *     not change as a result of the split (the new slot created as a result of the split is</color>
<color=#75715e>   *     placed to the right of the pre-existing slot). There is however one exception: the key can</color>
<color=#75715e>   *     be updated if "idx" is the 0-slot. The 0-slot key is not a true lower bound; the actual</color>
<color=#75715e>   *     lower bound for the 0-slot is the key in the parent slot for this IN. So, in this case, if</color>
<color=#75715e>   *     the given key is less than the current one, it is better to update the key in order to</color>
<color=#75715e>   *     better approximate the real lower bound (and thus make the isKeyInBounds() method more</color>
<color=#75715e>   *     effective).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>updateSplitSlot</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>());</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>child</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>haveEmbeddedData</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#f8f8f2>getKeyComparator</color><color=#f8f8f2>());</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>multiSlotChange</color> <color=#f92672>=</color> <color=#f8f8f2>updateKey</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*data*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>multiSlotChange</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>oldSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>hasCachedChildrenFlag</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shift entries to the right by one position, starting with (and including) the entry at index.</color>
<color=#75715e>   * Increment nEntries by 1. Called in insertEntry1()</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index - The position to start shifting from.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>shiftEntriesRight</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>copyEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>clearEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nEntries</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shift entries starting at the byHowMuch'th element to the left, thus removing the first</color>
<color=#75715e>   * byHowMuch'th elements of the entries array. This always starts at the 0th entry. Caller is</color>
<color=#75715e>   * responsible for decrementing nEntries.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param byHowMuch - The number of entries to remove from the left side of the entries array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>shiftEntriesLeft</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>byHowMuch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>copyEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>byHowMuch</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#f8f8f2>byHowMuch</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>nEntries</color> <color=#f92672>-</color> <color=#f8f8f2>byHowMuch</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>adjustCursors</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newSiblingLow</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newSiblingHigh</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Cursors never refer to IN's. */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>adjustCursorsForInsert</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>insertIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Cursors never refer to IN's. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called prior to changing a slot to contain a different logical node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Necessary to support assertions for transient LSNs in shouldUpdateLsn. Examples: LN slot</color>
<color=#75715e>   * reuse, and splits where a new node is placed in an existing slot.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Also needed to free the off-heap BIN associated with the old node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>TODO: This method is no longer used for LN slot reuse, and freeing of the off-heap BIN could</color>
<color=#75715e>   * be done by the only caller, splitInternal, and then this method could be removed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>prepareForSlotReuse</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*check*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>getOffHeapCache</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>isEnabled</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>freeBIN</color><color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Get the current memory consumption of this node</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getInMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Compute the current memory consumption of this node, after putting its keys in their compact</color>
<color=#75715e>   * representation, if possible.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>inMemorySize</color> <color=#f92672>=</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Count up the memory usage attributable to this node alone. LNs children are counted by their</color>
<color=#75715e>   * BIN parents, but INs are not counted by their parents because they are resident on the IN list.</color>
<color=#75715e>   * The identifierKey is "intentionally" not kept track of in the memory budget.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>computeMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>calcMemorySize</color> <color=#f92672>=</color> <color=#f8f8f2>getFixedMemoryOverhead</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>entryStates</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>provisionalObsolete</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offHeapBINIds</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>calcMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>calcMemorySize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Overridden by subclasses.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>getFixedMemoryOverhead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>IN_FIXED_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Compute the memory consumption for storing this node's LSNs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>computeLsnOverhead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>entryLsnByteArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>ARRAY_OVERHEAD</color>
            <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>PRIMITIVE_LONG_ARRAY_ITEM_OVERHEAD</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do not count state size here, since it is counted as overhead</color>
<color=#75715e>     * during initialization.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Don't count the key size if the representation has already</color>
<color=#75715e>     * accounted for it.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>accountsForKeyByteMemUsage</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Materialize the key object only if needed, thus avoiding the</color>
<color=#75715e>       * object allocation cost when possible.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color> <color=#f92672>+=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color> <color=#f92672>+=</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySizeIncludedByParent</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Compacts the representation of the IN, if possible.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Called by the evictor to reduce memory usage. Should not be called too often (e.g., every</color>
<color=#75715e>   * CRUD operation), since this could cause lots of memory allocations as the representations</color>
<color=#75715e>   * contract and expend, resulting in expensive GC.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return number of bytes reclaimed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>compactMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>INKeyRep</color> <color=#f8f8f2>oldKeyRep</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>entryTargets</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>offHeapBINIds</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>compact</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>EMPTY_OFFHEAP_BIN_IDS</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Note that we only need to account for mem usage changes in the key</color>
<color=#75715e>     * rep here, not the target rep.  The target rep, unlike the key rep,</color>
<color=#75715e>     * updates its mem usage internally, and the responsibility for mem</color>
<color=#75715e>     * usage of contained nodes is fixed -- it is always managed by the IN.</color>
<color=#75715e>     *</color>
<color=#75715e>     * When the key rep changes, the accountsForKeyByteMemUsage property</color>
<color=#75715e>     * also changes. Recalc the size of the entire IN, because</color>
<color=#75715e>     * responsibility for managing contained key byte mem usage has shifted</color>
<color=#75715e>     * between the key rep and the IN parent.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryKeys</color> <color=#f92672>!=</color> <color=#f8f8f2>oldKeyRep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>inMemorySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>oldSize</color> <color=#f92672>-</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the amount of memory currently budgeted for this IN. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getBudgetedMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inMemorySize</color> <color=#f92672>-</color> <color=#f8f8f2>accumulatedDelta</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called as part of a memory budget reset (during a checkpoint) to clear the accumulated delta</color>
<color=#75715e>   * and return the total memory size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>resetAndGetMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>accumulatedDelta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>updateMemorySize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>oldSize</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>newSize</color> <color=#f92672>-</color> <color=#f8f8f2>oldSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Called when a cached child is replaced by another cached child.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>Node</color> <color=#f8f8f2>oldNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>newNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>newNode</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySizeIncludedByParent</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>-=</color> <color=#f8f8f2>oldNode</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySizeIncludedByParent</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Change this.onMemorySize by the given delta and update the memory</color>
<color=#75715e>   * budget for the cache, but only if the accummulated delta for this</color>
<color=#75715e>   * node exceeds the ACCUMULATED_LIMIT threshold and this IN is actually</color>
<color=#75715e>   * on the IN list. (For example, when we create new INs, they are</color>
<color=#75715e>   * manipulated off the IN list before being added; if we updated the</color>
<color=#75715e>   * environment wide cache then, we'd end up double counting.)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>updateMemorySize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>inMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getInListResident</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * This assertion is disabled if the environment is invalid to</color>
<color=#75715e>       * avoid spurious assertions during testing of IO errors.  If the</color>
<color=#75715e>       * environment is invalid, memory budgeting errors are irrelevant.</color>
<color=#75715e>       * [#21929]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>inMemorySize</color> <color=#f92672>>=</color> <color=#f8f8f2>getFixedMemoryOverhead</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>isValid</color><color=#f8f8f2>()</color>
          <color=#f8f8f2>:</color> <color=#e6db74>"delta: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>delta</color>
              <color=#f92672>+</color> <color=#e6db74>" inMemorySize: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>inMemorySize</color>
              <color=#f92672>+</color> <color=#e6db74>" overhead: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getFixedMemoryOverhead</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" computed: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" dump: "</color>
              <color=#f92672>+</color> <color=#66d9ef>this</color>
              <color=#f92672>+</color> <color=#f8f8f2>assertPrintMemorySize</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>accumulatedDelta</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>accumulatedDelta</color> <color=#f92672>></color> <color=#f8f8f2>ACCUMULATED_LIMIT</color> <color=#f92672>||</color> <color=#f8f8f2>accumulatedDelta</color> <color=#f92672><</color> <color=#f92672>-</color><color=#f8f8f2>ACCUMULATED_LIMIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>updateMemoryBudget</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Move the accumulated delta to the memory budget. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateMemoryBudget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>().</color><color=#a6e22e>memRecalcUpdate</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>accumulatedDelta</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>updateTreeMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>accumulatedDelta</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>accumulatedDelta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the treeAdmin memory in objects referenced by this IN. Specifically, this refers to the</color>
<color=#75715e>   * DbFileSummaryMap held by MapLNs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTreeAdminMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// by default, no treeAdminMemory</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   *  Utility method used during unit testing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>printMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>inOverhead</color> <color=#f92672>=</color> <color=#f8f8f2>getFixedMemoryOverhead</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>statesOverhead</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>entryStates</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lsnOverhead</color> <color=#f92672>=</color> <color=#f8f8f2>computeLsnOverhead</color><color=#f8f8f2>();</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>entryOverhead</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryOverhead</color> <color=#f92672>+=</color> <color=#f8f8f2>getEntryInMemorySize</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>keyPrefixOverhead</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>provisionalOverhead</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>provisionalObsolete</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>targetRepOverhead</color> <color=#f92672>=</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>keyRepOverhead</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>calculateMemorySize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>total</color> <color=#f92672>=</color>
        <color=#f8f8f2>inOverhead</color>
            <color=#f92672>+</color> <color=#f8f8f2>statesOverhead</color>
            <color=#f92672>+</color> <color=#f8f8f2>lsnOverhead</color>
            <color=#f92672>+</color> <color=#f8f8f2>entryOverhead</color>
            <color=#f92672>+</color> <color=#f8f8f2>keyPrefixOverhead</color>
            <color=#f92672>+</color> <color=#f8f8f2>provisionalOverhead</color>
            <color=#f92672>+</color> <color=#f8f8f2>targetRepOverhead</color>
            <color=#f92672>+</color> <color=#f8f8f2>keyRepOverhead</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>offHeapBINIdOverhead</color> <color=#f92672>=</color> <color=#f8f8f2>offHeapBINIds</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
        <color=#e6db74>" nEntries:"</color>
            <color=#f92672>+</color> <color=#f8f8f2>nEntries</color>
            <color=#f92672>+</color> <color=#e6db74>"/"</color>
            <color=#f92672>+</color> <color=#f8f8f2>entryStates</color><color=#f8f8f2>.</color><color=#a6e22e>length</color>
            <color=#f92672>+</color> <color=#e6db74>" in: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>inOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" states: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>statesOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" entry: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>entryOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" lsn: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>lsnOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" keyPrefix: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>keyPrefixOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" provisional: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>provisionalOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" targetRep("</color>
            <color=#f92672>+</color> <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#e6db74>"): "</color>
            <color=#f92672>+</color> <color=#f8f8f2>targetRepOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" keyRep("</color>
            <color=#f92672>+</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color>
            <color=#f92672>+</color> <color=#e6db74>"): "</color>
            <color=#f92672>+</color> <color=#f8f8f2>keyRepOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" offHeapBINIds: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>offHeapBINIdOverhead</color>
            <color=#f92672>+</color> <color=#e6db74>" Total: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>total</color>
            <color=#f92672>+</color> <color=#e6db74>" inMemorySize: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>total</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Utility method used to print memory size in an assertion. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>assertPrintMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>printMemorySize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>verifyMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>calcMemorySize</color> <color=#f92672>=</color> <color=#f8f8f2>computeMemorySize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>calcMemorySize</color> <color=#f92672>!=</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
          <color=#e6db74>"-Warning: Out of sync. Should be "</color>
              <color=#f92672>+</color> <color=#f8f8f2>calcMemorySize</color>
              <color=#f92672>+</color> <color=#e6db74>" / actual: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>inMemorySize</color>
              <color=#f92672>+</color> <color=#e6db74>" node: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>printMemorySize</color><color=#f8f8f2>();</color>

      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds (increments) or removes (decrements) the cache stats for the key and target</color>
<color=#75715e>   * representations. Used when rep objects are being replaced with a new instance, rather than by</color>
<color=#75715e>   * calling their mutator methods. Specifically, it is called when mutating from full bin to bin</color>
<color=#75715e>   * delta or vice-versa.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>updateRepCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>getCompactMaxKeyLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getCompactMaxKeyLength</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called when adding/removing this IN to/from the INList. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setInListResident</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>resident</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>resident</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Decrement the stats before clearing its residency */</color>
      <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resident</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_RESIDENT_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_RESIDENT_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resident</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Increment the stats after setting its residency. */</color>
      <color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheStats</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether this IN is on the INList. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getInListResident</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_RESIDENT_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>getPrevLRUNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>prevLRUNode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPrevLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>prevLRUNode</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>getNextLRUNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nextLRUNode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setNextLRUNode</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nextLRUNode</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Try to compact or otherwise reclaim memory in this IN and return the number of bytes reclaimed.</color>
<color=#75715e>   * For example, a BIN should evict LNs, if possible.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Used by the evictor to reclaim memory by some means short of evicting the entire node. If a</color>
<color=#75715e>   * positive value is returned, the evictor will postpone full eviction of this node.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>partialEviction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether any child is non-null in the main or off-heap cache. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasCachedChildren</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>isLatchOwner</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Disallow delta on next log. Set to true (a) when we we delete a slot from a BIN, (b) when the</color>
<color=#75715e>   * cleaner marks a BIN as dirty so that it will be migrated during the next checkpoint.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setProhibitNextDelta</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>IN_PROHIBIT_NEXT_DELTA_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IN_PROHIBIT_NEXT_DELTA_BIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getProhibitNextDelta</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>IN_PROHIBIT_NEXT_DELTA_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Validate the subtree that we're about to delete.  Make sure there aren't</color>
<color=#75715e>   * more than one valid entry on each IN and that the last level of the tree</color>
<color=#75715e>   * is empty. Also check that there are no cursors on any bins in this</color>
<color=#75715e>   * subtree. Assumes caller is holding the latch on this parent node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * While we could latch couple down the tree, rather than hold latches as</color>
<color=#75715e>   * we descend, we are presumably about to delete this subtree so</color>
<color=#75715e>   * concurrency shouldn't be an issue.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the subtree rooted at the entry specified by "index" is</color>
<color=#75715e>   * ok to delete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Overriden by BIN class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>validateSubtreeBeforeDelete</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * There's no entry here, so of course this entry is deletable.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>fetchIN</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>needToLatch</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>();</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needToLatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isValidForDelete</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needToLatch</color> <color=#f92672>&&</color> <color=#f8f8f2>isLatchOwner</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Check if this node fits the qualifications for being part of a deletable subtree. It can only</color>
<color=#75715e>   * have one IN child and no LN children.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: the method is overwritten by BIN and LN. BIN.isValidForDelete() will not fetch any</color>
<color=#75715e>   * child LNs. LN.isValidForDelete() simply returns false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We assume that this is only called under an assert.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isValidForDelete</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Can only have one valid child, and that child should be</color>
<color=#75715e>     * deletable.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// more than 1 entry.</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// 1 entry, check child</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>fetchIN</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>needToLatch</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needToLatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isValidForDelete</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>needToLatch</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// 0 entries.</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Add self and children to this in-memory IN list. Called by recovery, can run with no latching.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>rebuildINList</color><color=#f8f8f2>(</color><color=#f8f8f2>INList</color> <color=#f8f8f2>inList</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Recompute your in memory size first and then add yourself to the</color>
<color=#75715e>     * list.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>initMemorySize</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>inList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>hasCachedChildren</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Add your children if they're resident. (LNs know how to stop the</color>
<color=#75715e>     * flow).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Node</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>rebuildINList</color><color=#f8f8f2>(</color><color=#f8f8f2>inList</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>hasCachedChildren</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>hasCachedChildren</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isUpperIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasCachedChildren</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setHasCachedChildrenFlag</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setHasCachedChildrenFlag</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isDIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceLRU</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color>
                <color=#e6db74>"rebuildINList "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>"-"</color>
                    <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>"-"</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>" Adding UIN to LRU: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isDBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getEvictor</color><color=#f8f8f2>().</color><color=#a6e22e>addBack</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * DbStat support.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>accumulateStats</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeWalkerStatsAccumulator</color> <color=#f8f8f2>acc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>acc</color><color=#f8f8f2>.</color><color=#a6e22e>processIN</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getLevel</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the last logged LSN, which for a BIN may be a delta.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>It is called from IN.postFetch/RecoveryInit(). If the logrec we have just read was a</color>
<color=#75715e>   * BINDelta, this.lastFullVersion has already been set (in BINDeltaLogEntry.readMainItem() or in</color>
<color=#75715e>   * OldBinDelta.reconstituteBIN()). So, this method will set this.lastDeltaVersion. Otherwise, if</color>
<color=#75715e>   * the logrec was a full BIN, this.lastFullVersion has not been set yet, and it will be set here.</color>
<color=#75715e>   * In this case, this.lastDeltaVersion will remain NULL.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLastLoggedLsn</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getLastFullLsn</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setLastFullLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>).</color><color=#a6e22e>setLastDeltaLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setLastFullLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the LSN of the last last logged version of this IN, or NULL_LSN if never logged. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastLoggedLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>getLastDeltaLsn</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f92672>?</color> <color=#f8f8f2>getLastDeltaLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getLastFullLsn</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getLastFullLsn</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sets the last full version LSN. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setLastFullLsn</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastFullVersion</color> <color=#f92672>=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the last full version LSN, or NULL_LSN if never logged. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastFullVersion</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the last delta version LSN, or NULL_LSN if a delta was not last logged. For BINs, it</color>
<color=#75715e>   * just returns the value of the lastDeltaVersion field. Public for unit testing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastDeltaLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Logging support</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When splits and checkpoints intermingle in a deferred write databases, a checkpoint target may</color>
<color=#75715e>   * appear which has a valid target but a null LSN. Deferred write dbs are written out in</color>
<color=#75715e>   * checkpoint style by either Database.sync() or a checkpoint which has cleaned a file containing</color>
<color=#75715e>   * deferred write entries. For example, INa | BINb</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A checkpoint or Database.sync starts The INList is traversed, dirty nodes are selected BINb</color>
<color=#75715e>   * is bypassed on the INList, since it's not dirty BINb is split, creating a new sibling, BINc,</color>
<color=#75715e>   * and dirtying INa INa is selected as a dirty node for the ckpt</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this happens, INa is in the selected dirty set, but not its dirty child BINb and new</color>
<color=#75715e>   * child BINc.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In a durable db, the existence of BINb and BINc are logged anyway. But in a deferred write</color>
<color=#75715e>   * db, there is an entry that points to BINc, but no logged version.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This will not cause problems with eviction, because INa can't be evicted until BINb and BINc</color>
<color=#75715e>   * are logged, are non-dirty, and are detached. But it can cause problems at recovery, because INa</color>
<color=#75715e>   * will have a null LSN for a valid entry, and the LN children of BINc will not find a home. To</color>
<color=#75715e>   * prevent this, search for all dirty children that might have been missed during the selection</color>
<color=#75715e>   * phase, and write them out. It's not sufficient to write only null-LSN children, because the</color>
<color=#75715e>   * existing sibling must be logged lest LN children recover twice (once in the new sibling, once</color>
<color=#75715e>   * in the old existing sibling.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>TODO: Would the problem above be solved by logging dirty nodes using a tree traversal</color>
<color=#75715e>   * (post-order), rather than using the dirty map?</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Overriden by BIN class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>logDirtyChildren</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabase</color><color=#f8f8f2>().</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Look for targets that are dirty. */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Ask descendants to log their children. */</color>
            <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>logDirtyChildren</color><color=#f8f8f2>();</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>childLsn</color> <color=#f92672>=</color>
                <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// allowDeltas</color>
                    <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// isProvisional</color>
                    <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// backgroundIO</color>
                    <color=#66d9ef>this</color><color=#f8f8f2>);</color> <color=#75715e>// parent</color>

            <color=#f8f8f2>updateEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>childLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color> <color=#75715e>/*lastLoggedSize*/</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>log</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logInternal</color><color=#f8f8f2>(</color>
        <color=#66d9ef>this</color><color=#f8f8f2>,</color>
        <color=#66d9ef>null</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/*allowDeltas*/</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color> <color=#75715e>/*allowCompress*/</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Provisional</color><color=#f8f8f2>.</color><color=#a6e22e>NO</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/*backgroundIO*/</color><color=#f8f8f2>,</color>
        <color=#66d9ef>null</color> <color=#75715e>/*parent*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>log</color><color=#f8f8f2>(</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>allowDeltas</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isProvisional</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logInternal</color><color=#f8f8f2>(</color>
        <color=#66d9ef>this</color><color=#f8f8f2>,</color>
        <color=#66d9ef>null</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>allowDeltas</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color> <color=#75715e>/*allowCompress*/</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>isProvisional</color> <color=#f92672>?</color> <color=#f8f8f2>Provisional</color><color=#f8f8f2>.</color><color=#a6e22e>YES</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Provisional</color><color=#f8f8f2>.</color><color=#a6e22e>NO</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>log</color><color=#f8f8f2>(</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>allowDeltas</color><color=#f8f8f2>,</color> <color=#f8f8f2>Provisional</color> <color=#f8f8f2>provisional</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logInternal</color><color=#f8f8f2>(</color>
        <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>allowDeltas</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*allowCompress*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>provisional</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>optionalLog</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>getLastLoggedLsn</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>logInternal</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*allowDeltas*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>true</color> <color=#75715e>/*allowCompress*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Provisional</color><color=#f8f8f2>.</color><color=#a6e22e>NO</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*backgroundIO*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*parent*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>optionalLogProvisional</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>optionalLogProvisional</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*allowCompress*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>optionalLogProvisionalNoCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>optionalLogProvisional</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*allowCompress*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>optionalLogProvisional</color><color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowCompress</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>getLastLoggedLsn</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>logInternal</color><color=#f8f8f2>(</color>
          <color=#66d9ef>this</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*allowDeltas*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>allowCompress</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Provisional</color><color=#f8f8f2>.</color><color=#a6e22e>YES</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*backgroundIO*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>logEntry</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>INLogEntry</color><color=#f92672><</color><color=#f8f8f2>BIN</color><color=#f92672>></color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>Provisional</color> <color=#f8f8f2>provisional</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>logInternal</color><color=#f8f8f2>(</color>
        <color=#66d9ef>null</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>logEntry</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color> <color=#75715e>/*allowDeltas*/</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/*allowCompress*/</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>provisional</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>parent</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Bottleneck method for all IN logging.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If 'node' is non-null, 'logEntry' must be null. If 'node' is null, 'logEntry' and 'parent'</color>
<color=#75715e>   * must be non-null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When 'logEntry' is non-null we are logging an off-heap BIN, and it is not resident in the</color>
<color=#75715e>   * main cache. The lastFull/DeltaLsns are not updated here, and this must be done instead by the</color>
<color=#75715e>   * caller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When 'node' is non-null, 'parent' may or may not be null. It must be non-null when logging</color>
<color=#75715e>   * provisionally, since obsolete LSNs are added to the parent's collection.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>logInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>INLogEntry</color><color=#f92672><?></color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowDeltas</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowCompress</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Provisional</color> <color=#f8f8f2>provisional</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>isLatchExclusiveOwner</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>(</color><color=#f8f8f2>logEntry</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>countObsoleteNow</color> <color=#f92672>=</color> <color=#f8f8f2>provisional</color> <color=#f92672>!=</color> <color=#f8f8f2>Provisional</color><color=#f8f8f2>.</color><color=#a6e22e>YES</color> <color=#f92672>||</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTemporary</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isBin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>isBin</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isDelta</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * When a logEntry is supplied (node/bin are null), the logic</color>
<color=#75715e>         * below is implemented by OffHeapCache.createBINLogEntry.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>isDelta</color> <color=#f92672>=</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Compress non-dirty slots before determining delta status. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allowCompress</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lazyCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*compressDirtySlots*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>isDelta</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>allowDeltas</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>shouldLogDelta</color><color=#f8f8f2>());</color>

        <color=#75715e>/* Be sure that we didn't illegally mutate to a delta. */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>isDelta</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isDeltaProhibited</color><color=#f8f8f2>()));</color>

        <color=#75715e>/* Also compress dirty slots, if we will not log a delta. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allowCompress</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>lazyCompress</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*compressDirtySlots*/</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Write dirty LNs in deferred-write databases after</color>
<color=#75715e>         * compression to reduce total logging, at least for temp DBs.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>logDirtyChildren</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#f8f8f2>isDelta</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BINDeltaLogEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>INLogEntry</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>isDelta</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>INLogEntry</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogParams</color> <color=#f8f8f2>params</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogParams</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>entry</color> <color=#f92672>=</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>provisional</color> <color=#f92672>=</color> <color=#f8f8f2>provisional</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color> <color=#f92672>=</color> <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>nodeDb</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>backgroundIO</color> <color=#f92672>=</color> <color=#f8f8f2>backgroundIO</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For delta logging:</color>
<color=#75715e>     *  + Count lastDeltaVersion obsolete, if non-null.</color>
<color=#75715e>     *  + Set lastDeltaVersion to newly logged LSN.</color>
<color=#75715e>     *  + Leave lastFullVersion unchanged.</color>
<color=#75715e>     *</color>
<color=#75715e>     * For full version logging:</color>
<color=#75715e>     *  + Count lastFullVersion and lastDeltaVersion obsolete, if non-null.</color>
<color=#75715e>     *  + Set lastFullVersion to newly logged LSN.</color>
<color=#75715e>     *  + Set lastDeltaVersion to null.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>oldLsn</color> <color=#f92672>=</color> <color=#f8f8f2>isDelta</color> <color=#f92672>?</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f8f8f2>:</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevFullLsn</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>auxOldLsn</color> <color=#f92672>=</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevDeltaLsn</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Determine whether to count the prior version of an IN (as well as</color>
<color=#75715e>     * accumulated provisionally obsolete LSNs for child nodes) obsolete</color>
<color=#75715e>     * when logging the new version.</color>
<color=#75715e>     *</color>
<color=#75715e>     * True is set if we are logging the IN non-provisionally, since the</color>
<color=#75715e>     * non-provisional version durably replaces the prior version and</color>
<color=#75715e>     * causes all provisional children to also become durable.</color>
<color=#75715e>     *</color>
<color=#75715e>     * True is also set if the database is temporary. Since we never use a</color>
<color=#75715e>     * temporary DB past recovery, prior versions of an IN are never used.</color>
<color=#75715e>     * [#16928]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>countObsoleteNow</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>oldLsn</color> <color=#f92672>=</color> <color=#f8f8f2>oldLsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>auxOldLsn</color> <color=#f92672>=</color> <color=#f8f8f2>auxOldLsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>packedObsoleteInfo</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>provisionalObsolete</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Log it. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LogItem</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setDirty</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>countObsoleteNow</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>discardProvisionalObsolete</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>trackProvisionalObsolete</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldLsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>trackProvisionalObsolete</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>auxOldLsn</color><color=#f8f8f2>);</color>
      <color=#75715e>/*</color>
<color=#75715e>       * TODO:</color>
<color=#75715e>       * The parent is null and provisional is YES when evicting the root</color>
<color=#75715e>       * of a DW DB. How does obsolete counting happen?</color>
<color=#75715e>       */</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * When a logEntry is supplied (node/bin are null), the logic</color>
<color=#75715e>       * below is implemented by OffHeapCache.postBINLog.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setLastDeltaLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setLastFullLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setLastDeltaLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setProhibitNextDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setLastFullLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>getUseDirtyLRUSet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * To capture all cases where a node needs to be moved to the</color>
<color=#75715e>       * priority-1 LRUSet after being cleaned, we invoke moveToPri1LRU()</color>
<color=#75715e>       * from IN.afterLog(). This includes the case where the node is</color>
<color=#75715e>       * being logged as part of being evicted, in which case we don't</color>
<color=#75715e>       * really want it to go back to the LRU. However, this is ok</color>
<color=#75715e>       * because moveToPri1LRU() checks whether the node is actually</color>
<color=#75715e>       * in the priority-2 LRUSet before moving it to the priority-1</color>
<color=#75715e>       * LRUSet.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>traceLRU</color> <color=#f92672>&&</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>traceLevel</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>"-"</color>
                <color=#f92672>+</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" afterLogCommon(): "</color>
                <color=#f92672>+</color> <color=#e6db74>" Moving UIN to mixed LRU: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>moveToPri1LRU</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds the given obsolete LSN and any tracked obsolete LSNs for the given child IN to this IN's</color>
<color=#75715e>   * tracking list. This method is called to track obsolete LSNs when a child IN is logged</color>
<color=#75715e>   * provisionally. Such LSNs cannot be considered obsolete until an ancestor IN is logged</color>
<color=#75715e>   * non-provisionally.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trackProvisionalObsolete</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>childIN</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>obsoleteLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>moveChildInfo</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>childIN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>childIN</color><color=#f8f8f2>.</color><color=#a6e22e>provisionalObsolete</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>addChildLsn</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>moveChildInfo</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>addChildLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>oldMemSize</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>provisionalObsolete</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>moveChildInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>provisionalObsolete</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Append child info to parent info. */</color>
        <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>copyObsoleteInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>childIN</color><color=#f8f8f2>.</color><color=#a6e22e>provisionalObsolete</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Move reference from child to parent. */</color>
        <color=#f8f8f2>provisionalObsolete</color> <color=#f92672>=</color> <color=#f8f8f2>childIN</color><color=#f8f8f2>.</color><color=#a6e22e>provisionalObsolete</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>childIN</color><color=#f8f8f2>.</color><color=#a6e22e>updateMemorySize</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>childIN</color><color=#f8f8f2>.</color><color=#a6e22e>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>childIN</color><color=#f8f8f2>.</color><color=#a6e22e>provisionalObsolete</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addChildLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>provisionalObsolete</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>provisionalObsolete</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PackedObsoleteInfo</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>addObsoleteInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>obsoleteLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>oldMemSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>provisionalObsolete</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Discards the provisional obsolete tracking information in this node after it has been counted</color>
<color=#75715e>   * in the live tracker. This method is called after this node is logged non-provisionally.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>discardProvisionalObsolete</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>provisionalObsolete</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemorySize</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>provisionalObsolete</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>provisionalObsolete</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * NOOP for upper INs. Overriden by BIN class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>mutateToFullBIN</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>leaveFreeSlot</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getNEntriesToWrite</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNDeltas</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getNDeltas</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>n</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Node#getGenericLogType */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryType</color> <color=#a6e22e>getGenericLogType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getLogType</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get the log type of this node. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LogEntryType</color> <color=#a6e22e>getLogType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_IN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @see Loggable#getLogSize</color>
<color=#75715e>   *     <p>Overrriden by DIN and DBIN classes.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getLogSize</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>haveVLSNCache</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isVLSNCachingEnabled</color><color=#f8f8f2>());</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>haveExpiration</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>base</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationBase</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>haveExpiration</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>base</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>base</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedLongLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getByteArrayLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color><color=#f8f8f2>);</color> <color=#75715e>// identifier key</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getByteArrayLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// one byte for boolean flags</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nEntriesToWrite</color> <color=#f92672>=</color> <color=#f8f8f2>getNEntriesToWrite</color><color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxEntriesToWrite</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>deltasOnly</color> <color=#f92672>?</color> <color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getDeltaCapacity</color><color=#f8f8f2>(</color><color=#f8f8f2>nEntriesToWrite</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>nEntriesToWrite</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>maxEntriesToWrite</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>compactLsnsRep</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getBooleanLogSize</color><color=#f8f8f2>();</color> <color=#75715e>// compactLsnsRep</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compactLsnsRep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>INT_BYTES</color><color=#f8f8f2>;</color> <color=#75715e>// baseFileNumber</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// entries</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>size</color> <color=#f92672>+=</color>
          <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getByteArrayLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color>
              <color=#f92672>+</color> <color=#75715e>// key</color>
              <color=#f8f8f2>(</color><color=#f8f8f2>compactLsnsRep</color> <color=#f92672>?</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>INT_BYTES</color> <color=#f8f8f2>:</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLongLogSize</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#75715e>// LSN</color>
              <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// state</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isLastLoggedSizeStored</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveVLSNCache</color> <color=#f92672>&&</color> <color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedLongLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveExpiration</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinNEntries</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinMaxEntries</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getBloomFilterLogSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Overridden by DIN and DBIN classes.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*deltasOnly*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*clearDirtyBits*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>deltasOnly</color> <color=#75715e>/*clearDirtyBits*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * WARNING: In the case of BINs this method is not only used for logging but also for off-heap</color>
<color=#75715e>   * caching. Therefore, this method should not have side effects unless the clearDirtyBits param is</color>
<color=#75715e>   * true.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clearDirtyBits</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>COUNT_SERIALIZE</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>deltasOnly</color> <color=#f92672>||</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bloomFilter</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color> <color=#f92672>?</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>createBloomFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>haveExpiration</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>base</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationBase</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>haveExpiration</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>base</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>base</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>nodeId</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>identifierKey</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>hasKeyPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>mayHaveLastLoggedSize</color> <color=#f92672>=</color> <color=#f8f8f2>mayHaveLastLoggedSizeStored</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>haveVLSNCache</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isVLSNCachingEnabled</color><color=#f8f8f2>());</color>

    <color=#66d9ef>byte</color> <color=#f8f8f2>booleans</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRoot</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>booleans</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasKeyPrefix</color> <color=#f92672>?</color> <color=#ae81ff>2</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>booleans</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>mayHaveLastLoggedSize</color> <color=#f92672>?</color> <color=#ae81ff>4</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>booleans</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bloomFilter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>8</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>booleans</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveVLSNCache</color> <color=#f92672>?</color> <color=#ae81ff>16</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>booleans</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>isExpirationInHours</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#ae81ff>32</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>booleans</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasKeyPrefix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyPrefix</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nEntriesToWrite</color> <color=#f92672>=</color> <color=#f8f8f2>getNEntriesToWrite</color><color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxEntriesToWrite</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>deltasOnly</color> <color=#f92672>?</color> <color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getDeltaCapacity</color><color=#f8f8f2>(</color><color=#f8f8f2>nEntriesToWrite</color><color=#f8f8f2>));</color>
    <color=#75715e>/*</color>
<color=#75715e>    if (deltasOnly) {</color>
<color=#75715e>        BIN bin = (BIN)this;</color>
<color=#75715e>        System.out.println(</color>
<color=#75715e>            "Logging BIN-delta: " + getNodeId() +</color>
<color=#75715e>            " is delta = " + isBINDelta() +</color>
<color=#75715e>            " nEntries = " + nEntriesToWrite +</color>
<color=#75715e>            " max entries = " + maxEntriesToWrite +</color>
<color=#75715e>            " full BIN entries = " + bin.getFullBinNEntries() +</color>
<color=#75715e>            " full BIN max entries = " + bin.getFullBinMaxEntries());</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>nEntriesToWrite</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>level</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxEntriesToWrite</color><color=#f8f8f2>);</color>

    <color=#75715e>/* true if compact representation. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>compactLsnsRep</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>compactLsnsRep</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compactLsnsRep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A NULL_LSN may be stored when an incomplete insertion occurs,</color>
<color=#75715e>       * but in that case the KnownDeleted flag must be set. See</color>
<color=#75715e>       * Tree.insert.  [#13126]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>checkForNullLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color>
          <color=#f8f8f2>:</color> <color=#e6db74>"logging IN "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getNodeId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" with null lsn child "</color>
              <color=#f92672>+</color> <color=#e6db74>" db="</color>
              <color=#f92672>+</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" isDeferredWriteMode="</color>
              <color=#f92672>+</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" isTemporary="</color>
              <color=#f92672>+</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTemporary</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compactLsnsRep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>fileOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>getFileNumberOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileOffset</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>fileOffset</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>fileOffset</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryLsnLongArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_TRANSIENT_BITS</color><color=#f8f8f2>));</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clearDirtyBits</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_DIRTY_BIT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isLastLoggedSizeStored</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveVLSNCache</color> <color=#f92672>&&</color> <color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveExpiration</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpirationOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinNEntries</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinMaxEntries</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bloomFilter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BINDeltaBloomFilter</color><color=#f8f8f2>.</color><color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>bloomFilter</color><color=#f8f8f2>,</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used for assertion to prevent writing a null lsn to the log.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkForNullLSN</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>ok</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ok</color> <color=#f92672>=</color>
          <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color>
              <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>KNOWN_DELETED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ok</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ok</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether the given serialized IN is a BIN that may have expiration values. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>mayHaveExpirationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>mark</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>expirationBase</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>expirationBase</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>materialize</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*deltasOnly*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*clearDirtyBits*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>materialize</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>,</color> <color=#f92672>!</color><color=#f8f8f2>deltasOnly</color> <color=#75715e>/*clearDirtyBits*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * WARNING: In the case of BINs this method is used not only for logging but also for off-heap</color>
<color=#75715e>   * caching. Therefore, this method should not have side effects unless the clearDirtyBits param is</color>
<color=#75715e>   * true or an older log version is passed (off-heap caching uses the current version).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>materialize</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clearDirtyBits</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>deltasOnly</color> <color=#f92672>||</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>unpacked</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>6</color><color=#f8f8f2>);</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>haveExpiration</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>base</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>haveExpiration</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>base</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setExpirationBase</color><color=#f8f8f2>(</color><color=#f8f8f2>base</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nodeId</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>identifierKey</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>

    <color=#66d9ef>byte</color> <color=#f8f8f2>booleans</color> <color=#f92672>=</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>setIsRootFlag</color><color=#f8f8f2>((</color><color=#f8f8f2>booleans</color> <color=#f92672>&</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>booleans</color> <color=#f92672>&</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>keyPrefix</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>mayHaveLastLoggedSize</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>booleans</color> <color=#f92672>&</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>mayHaveLastLoggedSize</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>9</color><color=#f8f8f2>));</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>hasBloomFilter</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>booleans</color> <color=#f92672>&</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasBloomFilter</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>10</color> <color=#f92672>&&</color> <color=#f8f8f2>deltasOnly</color><color=#f8f8f2>));</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>haveVLSNCache</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>booleans</color> <color=#f92672>&</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>haveVLSNCache</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>11</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>setExpirationInHours</color><color=#f8f8f2>((</color><color=#f8f8f2>booleans</color> <color=#f92672>&</color> <color=#ae81ff>32</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>nEntries</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>entryTargets</color> <color=#f92672>=</color> <color=#f8f8f2>INTargetRep</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>INKeyRep</color><color=#f8f8f2>.</color><color=#a6e22e>Default</color><color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>baseFileNumber</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>storedBaseFileNumber</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>disableCompactLsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryLsnByteArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entryLsnByteArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>length</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>entryStates</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>compactLsnsRep</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>compactLsnsRep</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compactLsnsRep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>baseFileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>storedBaseFileNumber</color> <color=#f92672>=</color> <color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>entryKeys</color> <color=#f92672>=</color> <color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>),</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compactLsnsRep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* LSNs in compact form. */</color>
        <color=#66d9ef>byte</color> <color=#f8f8f2>fileNumberOffset</color> <color=#f92672>=</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>fileOffset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fileOffset</color> <color=#f92672>|=</color> <color=#f8f8f2>((</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>fileOffset</color> <color=#f92672>|=</color> <color=#f8f8f2>((</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileOffset</color> <color=#f92672>==</color> <color=#f8f8f2>THREE_BYTE_NEGATIVE_ONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>storedBaseFileNumber</color> <color=#f92672>+</color> <color=#f8f8f2>fileNumberOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileOffset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* LSNs in long form. */</color>
        <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color> <color=#75715e>// LSN</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>setLsnInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

      <color=#66d9ef>byte</color> <color=#f8f8f2>entryState</color> <color=#f92672>=</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color> <color=#75715e>// state</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clearDirtyBits</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entryState</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_DIRTY_BIT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The MIGRATE_BIT (now the transient OFFHEAP_DIRTY_BIT) was</color>
<color=#75715e>       * accidentally written in a pre-JE 6 log version.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>9</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entryState</color> <color=#f92672>&=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>CLEAR_TRANSIENT_BITS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A NULL_LSN is the remnant of an incomplete insertion and the</color>
<color=#75715e>       * KnownDeleted flag should be set.  But because of bugs in prior</color>
<color=#75715e>       * releases, the KnownDeleted flag may not be set.  So set it here.</color>
<color=#75715e>       * See Tree.insert.  [#13126]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>9</color> <color=#f92672>&&</color> <color=#f8f8f2>lsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entryState</color> <color=#f92672>|=</color> <color=#f8f8f2>EntryStates</color><color=#f8f8f2>.</color><color=#a6e22e>KNOWN_DELETED_BIT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>entryStates</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>entryState</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mayHaveLastLoggedSize</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setLastLoggedSizeUnconditional</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveVLSNCache</color> <color=#f92672>&&</color> <color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setCachedVLSNUnconditional</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>haveExpiration</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setExpirationOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deltasOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>10</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setFullBinNEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setFullBinMaxEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasBloomFilter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>bloomFilter</color> <color=#f92672>=</color> <color=#f8f8f2>BINDeltaBloomFilter</color><color=#f8f8f2>.</color><color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Dup conversion will be done by postFetchInit. */</color>
    <color=#f8f8f2>needDupKeyConversion</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#logicalEquals Always return false, this item should never be compared. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>logicalEquals</color><color=#f8f8f2>(</color><color=#f8f8f2>Loggable</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#dumpLog */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>beginTag</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<nodeId val=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#e6db74>"idKey"</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>

    <color=#75715e>// isRoot</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<isRoot val=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isRoot</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>

    <color=#75715e>// level</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<level val=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#e6db74>"keyPrefix"</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// nEntries, length of entries array</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<entries numEntries=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" length=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getMaxEntries</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" numFullBinEntries=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinNEntries</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" maxFullBinEntries=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getFullBinMaxEntries</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>compactLsnsRep</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryLsnLongArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compactLsnsRep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" baseFileNumber=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>baseFileNumber</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>verbose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<ref"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dumpSlotState</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>">"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>getData</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#e6db74>"data"</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</ref>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</entries>"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>bloomFilter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BINDeltaBloomFilter</color><color=#f8f8f2>.</color><color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>bloomFilter</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Add on any additional items from subclasses before the end tag. */</color>
    <color=#f8f8f2>dumpLogAdditional</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>endTag</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Allows subclasses to add additional fields before the end tag. If they just overload dumpLog,</color>
<color=#75715e>   * the xml isn't nested.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLogAdditional</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>beginTag</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>BEGIN_TAG</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>endTag</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>END_TAG</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For unit test support:</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a string that dumps information about this IN, without</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>nSpaces</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dumpTags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dumpTags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>beginTag</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dumpTags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<nodeId val=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeId</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<idkey>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#e6db74>""</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>identifierKey</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</idkey>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<prefix>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#e6db74>""</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>keyPrefix</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</prefix>\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<dirty val=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getDirty</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<level val=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>)).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<isRoot val=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isRoot</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<isBINDelta val=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>)).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<prohibitNextDelta val=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getProhibitNextDelta</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<cursors val=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>nCursors</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<deltas val=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNDeltas</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<entries nEntries=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nEntries</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<entry id=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>dumpSlotState</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>">\n"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<lsn/>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<key/>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>entryKeys</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>)));</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<ohBIN id=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>">\n"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapLNId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<ohLN id=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapLNId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>">\n"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<target/>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>entryTargets</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</entry>"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</entries>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dumpTags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>endTag</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpSlotState</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" kd=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isEntryKnownDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" pd=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isEntryPendingDeleted</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" dirty=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" embedded=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" noData=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isNoDataLN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" logSize=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLoggedSizeUnconditional</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>vlsn</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getCachedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>isNull</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" vlsn=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" expires=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TTL</color><color=#f8f8f2>.</color><color=#a6e22e>formatExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isExpirationInHours</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts to an identifying string that is safe to output in a log. Keys are not included for</color>
<color=#75715e>   * security/privacy reasons.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toSafeString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f8f8f2>...</color> <color=#f8f8f2>slotIndexes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>isBIN</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"IN nodeId="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lastLoggedLSN="</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>getLastLoggedLsn</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lastFulLSN="</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>getLastFullLsn</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" level="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>getLevel</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" flags="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>flags</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" isBINDelta="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isBINDelta</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" nSlots="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getNEntries</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>slotIndexes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f8f8f2>:</color> <color=#f8f8f2>slotIndexes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" slot-"</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>":["</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"lsn="</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" offset="</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)));</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" offset+logSize="</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLoggedSizeUnconditional</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>dumpSlotState</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"]"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dumpString</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>shortClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"IN"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Send trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>traceSplit</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>newSibling</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>parentLsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>myNewLsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSiblingLsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>splitIndex</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>idKeyIndex</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>childIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TRACE_SPLIT</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" parent="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" child="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" newSibling="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>newSibling</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" parentLsn = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>parentLsn</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" childLsn = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>myNewLsn</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" newSiblingLsn = "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>newSiblingLsn</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" splitIdx="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>splitIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" idKeyIdx="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>idKeyIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" childIdx="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>childIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Send trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>traceDelete</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TRACE_DELETE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" in="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getNodeId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" index="</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>setFetchINHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>fetchINHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>