<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.elections</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.MessageExchange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.RequestMessage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.RepNode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher.ServiceConnectFailedException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.BufferedReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.ConnectException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.SocketException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.SocketTimeoutException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.LinkedList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Utils</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Cleans up the socket and its related streams after a request/response cycle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param channel the channel to be closed</color>
<color=#75715e>   * @param in the request stream to be closed</color>
<color=#75715e>   * @param out the response stream to be closed</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>cleanup</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>BufferedReader</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Ignore it, it's only cleanup. */</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Log it and continue. */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Channel exception on close: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Utility to broadcast a request to set of targets.</color>
<color=#75715e>   * @param targets of the broadcast</color>
<color=#75715e>   * @param requestMessage to be broadcast</color>
<color=#75715e>   * @param threadPool used to issue message in parallel</color>
<color=#75715e>   * @return the CompletionService representing the futures generated by the broadcast</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#a6e22e>broadcastMessage</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>targets</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RequestMessage</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ExecutorService</color> <color=#f8f8f2>threadPool</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#f8f8f2>compService</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>threadPool</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>socketAddress</color> <color=#f8f8f2>:</color> <color=#f8f8f2>targets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>me</color> <color=#f92672>=</color>
          <color=#f8f8f2>requestMessage</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocol</color><color=#f8f8f2>()</color>
          <color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#f8f8f2>MessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>socketAddress</color><color=#f8f8f2>,</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>requestMessage</color><color=#f8f8f2>);</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>compService</color><color=#f8f8f2>.</color><color=#a6e22e>submit</color><color=#f8f8f2>(</color><color=#f8f8f2>me</color><color=#f8f8f2>,</color> <color=#f8f8f2>me</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RejectedExecutionException</color> <color=#f8f8f2>ree</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadPool</color><color=#f8f8f2>.</color><color=#a6e22e>isTerminated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * The thread pool has been shutdown asynchronously as</color>
<color=#75715e>           * part of a general elections shutdown. Discard submitted</color>
<color=#75715e>           * and running tasks.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>compService</color><color=#f8f8f2>.</color><color=#a6e22e>cancelFutures</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>compService</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Unexpected, rethrow so it can be reported at a higher</color>
<color=#75715e>         * level.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>ree</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>compService</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility to wait for completion of futures in unit tests</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param compService the futures to wait for</color>
<color=#75715e>   * @param logger used to report any error messages</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>checkFutures</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#f8f8f2>compService</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>futureTimeout</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>new</color> <color=#f8f8f2>WithFutureExceptionHandler</color><color=#f92672><</color><color=#f8f8f2>MessageExchange</color><color=#f92672>></color><color=#f8f8f2>(</color>
        <color=#f8f8f2>compService</color><color=#f8f8f2>,</color> <color=#f8f8f2>futureTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#a6e22e>@Override</color>
      <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>processResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>result</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Do nothing, merely waiting for a response */</color>
      <color=#f8f8f2>}</color>

      <color=#a6e22e>@Override</color>
      <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}.</color><color=#a6e22e>execute</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden A utility wrapper to handle all exceptions from futures in a consistent way. The above</color>
<color=#75715e>   *     method illustrates its intended usage pattern</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>WithFutureExceptionHandler</color><color=#f92672><</color><color=#f8f8f2>T</color> <color=#66d9ef>extends</color> <color=#f8f8f2>MessageExchange</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>completionService</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>completionTimeout</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Generate a handler for processing future results.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param compService the CompletionService representing the futures</color>
<color=#75715e>     * @param completionTimeout the timeout indicating how long to wait for all the results. If</color>
<color=#75715e>     *     running the tasks involves I/O, especially network I/O, the timeout should be sufficient</color>
<color=#75715e>     *     to ensure that it allows for the associated latency. The timeout assumes that all the</color>
<color=#75715e>     *     tasks are run in parallel, so it represents the max estimated task completion time</color>
<color=#75715e>     *     associated with the tasks in the set.</color>
<color=#75715e>     * @param unit the units associated with the above timeout</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>WithFutureExceptionHandler</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>compService</color><color=#f8f8f2>,</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>completionTimeout</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>();</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>completionService</color> <color=#f92672>=</color> <color=#f8f8f2>compService</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>completionTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>completionTimeout</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>unit</color> <color=#f92672>=</color> <color=#f8f8f2>unit</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>formatter</color> <color=#f92672>=</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The method represents the result processing code being wrapped upon a success response</color>
<color=#75715e>     * message being received.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param result the non null result, with a non null response message</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>processResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The counterpart to processResponse. It's invoked when there was no response to a message. The</color>
<color=#75715e>     * exception, if present, details the reason for the failure; some protocols may choose not to</color>
<color=#75715e>     * require a response, that is, both the response and result.exception could be null. The</color>
<color=#75715e>     * default method simply logs the event.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Note that Timeouts don't come down this path; they result in tasks being cancelled with</color>
<color=#75715e>     * the timeout being logged.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param result the non null result, with a null response message</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>processNullResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>result</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color>
          <color=#e6db74>"No response from: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>target</color>
              <color=#f92672>+</color> <color=#e6db74>" request"</color>
              <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getRequestMessage</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" reason: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>exception</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Determines whether the initiating operation was shutdown.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true if the futures should not be processed but should be cancelled instead.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Processes futures in the order in which they complete, as determined by the completion</color>
<color=#75715e>     * service, to minimize unnecessary waiting.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>execute</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>limitTimeMs</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>unit</color><color=#f8f8f2>.</color><color=#a6e22e>toMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>completionTimeout</color><color=#f8f8f2>);</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>completionService</color><color=#f8f8f2>.</color><color=#a6e22e>getFutures</color><color=#f8f8f2>().</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>count</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>count</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pollTimeoutMs</color> <color=#f92672>=</color> <color=#f8f8f2>limitTimeMs</color> <color=#f92672>-</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pollTimeoutMs</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Timed out. */</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Election messages timed out after "</color> <color=#f92672>+</color> <color=#f8f8f2>unit</color><color=#f8f8f2>.</color><color=#a6e22e>toMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>completionTimeout</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>"ms."</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* Wait for the next task that is ready. */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>completionService</color><color=#f8f8f2>.</color><color=#a6e22e>poll</color><color=#f8f8f2>(</color><color=#f8f8f2>pollTimeoutMs</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Timed out. */</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Election messages timed out after "</color> <color=#f92672>+</color> <color=#f8f8f2>unit</color><color=#f8f8f2>.</color><color=#a6e22e>toMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>completionTimeout</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>"ms."</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Election messages terminated."</color> <color=#f92672>+</color> <color=#e6db74>" Environment being shutdown."</color><color=#f8f8f2>);</color>
            <color=#75715e>/* Simply exit. */</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>isCancelled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>futureTimeoutMs</color> <color=#f92672>=</color> <color=#f8f8f2>limitTimeMs</color> <color=#f92672>-</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>futureTimeoutMs</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>isDone</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>executeInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>rn</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>rn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>rn</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Interrupt for shutdown, it's likely part of a</color>
<color=#75715e>             * "hard" stoppable thread shutdown, ignore it.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>INFO</color><color=#f8f8f2>,</color>
                <color=#e6db74>"Election operation interrupted."</color> <color=#f92672>+</color> <color=#e6db74>" Environment being shutdown."</color><color=#f8f8f2>);</color>
            <color=#75715e>/* Simply exit. */</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Clean up all tasks, in case we exited before they were all</color>
<color=#75715e>         * done.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>completionService</color><color=#f8f8f2>.</color><color=#a6e22e>cancelFutures</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The method represents the future process code being wrapped. It processes generic</color>
<color=#75715e>     * future-specific exceptions, where the impact of the fault can be localized to the future.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param future the "done" future</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>executeInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>future</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* We don't expect to wait, since the future is "done". */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>future</color><color=#f8f8f2>.</color><color=#a6e22e>isDone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>T</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>future</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getResponseMessage</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>processNullResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>processResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CancellationException</color> <color=#f8f8f2>ce</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Ignore. */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ExecutionException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Get the true cause, unwrap the intermediate wrappers */</color>
        <color=#f8f8f2>Exception</color> <color=#f8f8f2>cause</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>cause</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>cause</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>t</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cause</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cause</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ConnectException</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>cause</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SocketException</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>cause</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SocketTimeoutException</color><color=#f8f8f2>)</color>
            <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>cause</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ServiceConnectFailedException</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>// Network exceptions are expected, log it and keep moving</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color>
              <color=#e6db74>"Election connection failure "</color> <color=#f92672>+</color> <color=#f8f8f2>cause</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Unanticipated exception, higher level will handle it */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden A subclass of ExecutorCompletionService that tracks submitted tasks, so that futures</color>
<color=#75715e>   *     associated with tasks can be cancelled in a modular way, without the need for maintaining</color>
<color=#75715e>   *     distinct state about the futures that were created.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FutureTrackingCompService</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>ExecutorCompletionService</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The list of futures resulting from submitted tasks. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>futures</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#66d9ef>public</color> <color=#a6e22e>FutureTrackingCompService</color><color=#f8f8f2>(</color><color=#f8f8f2>Executor</color> <color=#f8f8f2>executor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>executor</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>>></color> <color=#a6e22e>getFutures</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>futures</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Wrapper around submit() method to track futures resulting from submitted tasks. */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>submit</color><color=#f8f8f2>(</color><color=#f8f8f2>Runnable</color> <color=#f8f8f2>task</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>result</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>submit</color><color=#f8f8f2>(</color><color=#f8f8f2>task</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>futures</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Wrapper around submit() method to track futures resulting from submitted tasks. */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>submit</color><color=#f8f8f2>(</color><color=#f8f8f2>Callable</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>task</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>submit</color><color=#f8f8f2>(</color><color=#f8f8f2>task</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>futures</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>cancelFutures</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>mayInterruptIfRunning</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Future</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>f</color> <color=#f8f8f2>:</color> <color=#f8f8f2>futures</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>isCancelled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>mayInterruptIfRunning</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>