<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.ReplicaAckPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederTxnStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.BinaryProtocolStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNIndexStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.FeederManagerStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.ReplayStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.ReplicaStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederTxnStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.BinaryProtocolStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.utilint.CollectionUtils.emptySortedMap</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Statistics for a replicated environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The statistics are logically grouped into four categories. Viewing the statistics through</color>
<color=#75715e> * {@link ReplicatedEnvironmentStats#toString()} displays the values in these categories, as does</color>
<color=#75715e> * viewing the stats through the {@link <a</color>
<color=#75715e> * href="{@docRoot}/../jconsole/JConsole-plugin.html">RepJEMonitor mbean</a>}. Viewing the stats</color>
<color=#75715e> * with {@link ReplicatedEnvironmentStats#toStringVerbose()} will provide more detailed descriptions</color>
<color=#75715e> * of the stats and stat categories.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The current categories are:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li><b>FeederManager</b>: A feed is the {@link <a</color>
<color=#75715e> *       href="{@docRoot}/../ReplicationGuide/introduction.html#replicationstreams">replication</color>
<color=#75715e> *       stream</a>} between a master and replica. The current number of feeders gives a sense of</color>
<color=#75715e> *       the connectivity of the replication group.</color>
<color=#75715e> *   <li><b>BinaryProtocol</b>: These statistics center on the network traffic engendered by the</color>
<color=#75715e> *       replication stream, and provide a sense of the network bandwidth seen by the replication</color>
<color=#75715e> *       group.</color>
<color=#75715e> *   <li><b>Replay</b>: The act of receiving and applying the replication stream at the Replica node</color>
<color=#75715e> *       is called Replay. These stats give a sense of how much load the replica node is</color>
<color=#75715e> *       experiencing when processing the traffic from the replication group.</color>
<color=#75715e> *   <li><b>ConsistencyTracker</b>: The tracker is invoked when consistency policies are used at a</color>
<color=#75715e> *       replica node. This provides a measure of delays experienced by read requests at a replica,</color>
<color=#75715e> *       in order to conform with the consistency specified by the application.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="{@docRoot}/../jconsole/JConsole-plugin.html">Viewing Statistics with JConsole</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ReplicatedEnvironmentStats</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The "impossible" return value used by stats accessors to indicate the statistic is not</color>
<color=#75715e>   * available in this instance of ReplicatedEnvironmentStats, because it represents an earlier</color>
<color=#75715e>   * de-serialized instance in which this statistic was unavailable.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>trackerStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>vlsnIndexStats</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>tipsMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#f8f8f2>ReplicatedEnvironmentStats</color><color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>FeederManager</color> <color=#f8f8f2>feederManager</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>feederManager</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>feederManagerStats</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getFeederManagerStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>feederTxnStats</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getFeederTxns</color><color=#f8f8f2>().</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Replica</color> <color=#f8f8f2>replica</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getReplica</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>replayStats</color> <color=#f92672>=</color> <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getReplayStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>trackerStats</color> <color=#f92672>=</color> <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getTrackerStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>protocolStats</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocolStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>vlsnIndexStats</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocolStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>addMessageRateStats</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>addBytesRateStats</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplicatedEnvironmentStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#a6e22e>getStatGroups</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>replayStats</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>trackerStats</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>protocolStats</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>vlsnIndexStats</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>trackerStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>vlsnIndexStats</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#a6e22e>getStatGroupsMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatGroup</color><color=#f92672>></color> <color=#f8f8f2>statmap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatGroup</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>statmap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>statmap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>statmap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>trackerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>trackerStats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>statmap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>statmap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsnIndexStats</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>vlsnIndexStats</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>statmap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>statmap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setStatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>sg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>FeederManagerStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>feederManagerStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplayStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>replayStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>trackerStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>BinaryProtocolStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>protocolStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSNIndexStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>vlsnIndexStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sg</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>FeederTxnStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>feederTxnStats</color> <color=#f92672>=</color> <color=#f8f8f2>sg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Internal error stat context is not registered"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Internal use only</color>
<color=#75715e>   *     <p>For JConsole plugin support.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getStatGroupTitles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>FeederManagerStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>FeederTxnStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>BinaryProtocolStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplayStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplicaStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>VLSNIndexStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color>
    <color=#f8f8f2>};</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addMessageRateStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>numerator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_READ</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_READ</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>denominator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_READ_NANOS</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_READ_NANOS</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>msgReadRate</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>IntegralLongAvgStat</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>protocolStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MESSAGE_READ_RATE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>,</color> <color=#ae81ff>1000000000</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>numerator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_WRITTEN</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_WRITTEN</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>denominator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_WRITE_NANOS</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_WRITE_NANOS</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>msgWriteRate</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>IntegralLongAvgStat</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>protocolStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MESSAGE_WRITE_RATE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>,</color> <color=#ae81ff>1000000000</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addBytesRateStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>numerator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_BYTES_READ</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_BYTES_READ</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>denominator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_READ_NANOS</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_READ_NANOS</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>bytesReadRate</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>IntegralLongAvgStat</color><color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>BYTES_READ_RATE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>,</color> <color=#ae81ff>1000000000</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>numerator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_BYTES_WRITTEN</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_BYTES_WRITTEN</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>denominator</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_WRITE_NANOS</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#f92672>?</color> <color=#ae81ff>0</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>N_WRITE_NANOS</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>bytesWriteRate</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>IntegralLongAvgStat</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>protocolStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>BYTES_WRITE_RATE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>,</color> <color=#ae81ff>1000000000</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Feeder Stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of Feeder threads since this node was started. A Master supplies the Replication</color>
<color=#75715e>   * Stream to a Replica via a Feeder thread. The Feeder thread is created when a Replica connects</color>
<color=#75715e>   * to the node and is shutdown when the connection is terminated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNFeedersCreated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>N_FEEDERS_CREATED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of Feeder threads that were shut down, either because this node, or the Replica</color>
<color=#75715e>   * terminated the connection.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getNFeedersCreated()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNFeedersShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>N_FEEDERS_SHUTDOWN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The lag (in VLSNs) associated with the replica that's farthest behind in replaying the</color>
<color=#75715e>   * replication stream.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNMaxReplicaLag</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* TODO: Implement using REPLICA_VLSN_LAG_MAP */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MAX_REPLICA_LAG</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The name of the replica that's farthest behind in replaying the replication stream. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getNMaxReplicaLagName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* TODO: Implement using REPLICA_VLSN_LAG_MAP */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getString</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MAX_REPLICA_LAG_NAME</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map from replica node name to the delay, in milliseconds, between when a transaction</color>
<color=#75715e>   * was committed on the master and when the master learned that the transaction was processed on</color>
<color=#75715e>   * the replica, if known. Returns an empty map if this node is not the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getReplicaDelayMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LongDiffMapStat</color> <color=#f8f8f2>stat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LongDiffMapStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getStat</color><color=#f8f8f2>(</color><color=#f8f8f2>REPLICA_DELAY_MAP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>emptySortedMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stat</color><color=#f8f8f2>.</color><color=#a6e22e>getMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map from replica node name to the commit timestamp of the last committed transaction</color>
<color=#75715e>   * that was processed on the replica, if known. Returns an empty map if this node is not the</color>
<color=#75715e>   * master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getReplicaLastCommitTimestampMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongMapStat</color> <color=#f8f8f2>stat</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>AtomicLongMapStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getStat</color><color=#f8f8f2>(</color><color=#f8f8f2>REPLICA_LAST_COMMIT_TIMESTAMP_MAP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>emptySortedMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stat</color><color=#f8f8f2>.</color><color=#a6e22e>getMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map from replica node name to the VLSN of the last committed transaction that was</color>
<color=#75715e>   * processed on the replica, if known. Returns an empty map if this node is not the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getReplicaLastCommitVLSNMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongMapStat</color> <color=#f8f8f2>stat</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>AtomicLongMapStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getStat</color><color=#f8f8f2>(</color><color=#f8f8f2>REPLICA_LAST_COMMIT_VLSN_MAP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>emptySortedMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stat</color><color=#f8f8f2>.</color><color=#a6e22e>getMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map from replica node name to the lag, in VLSNs, between the replication state of the</color>
<color=#75715e>   * replica and the master, if known. Returns an empty map if this node is not the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getReplicaVLSNLagMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LongDiffMapStat</color> <color=#f8f8f2>stat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LongDiffMapStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getStat</color><color=#f8f8f2>(</color><color=#f8f8f2>REPLICA_VLSN_LAG_MAP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>emptySortedMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stat</color><color=#f8f8f2>.</color><color=#a6e22e>getMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a map from replica node name to a moving average of the rate, in VLSNs per minute, that</color>
<color=#75715e>   * the replica is processing replication data, if known. Returns an empty map if this node is not</color>
<color=#75715e>   * the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>SortedMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getReplicaVLSNRateMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LongAvgRateMapStat</color> <color=#f8f8f2>stat</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>LongAvgRateMapStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>feederManagerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getStat</color><color=#f8f8f2>(</color><color=#f8f8f2>REPLICA_VLSN_RATE_MAP</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>emptySortedMap</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stat</color><color=#f8f8f2>.</color><color=#a6e22e>getMap</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Master transaction commit acknowledgment statistics. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of transactions that were successfully acknowledged based upon the {@link</color>
<color=#75715e>   * ReplicaAckPolicy} policy associated with the transaction commit.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNTxnsAcked</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color> <color=#f8f8f2>:</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>TXNS_ACKED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of transactions that were not acknowledged as required by the {@link</color>
<color=#75715e>   * ReplicaAckPolicy} policy associated with the transaction commit. These transactions resulted in</color>
<color=#75715e>   * {@link InsufficientReplicasException} or {@link InsufficientAcksException}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNTxnsNotAcked</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>TXNS_NOT_ACKED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total time in milliseconds spent in replicated transactions. This represents the time from</color>
<color=#75715e>   * the start of the transaction until its successful commit and acknowledgment. It includes the</color>
<color=#75715e>   * time spent waiting for transaction commit acknowledgments, as determined by {@link</color>
<color=#75715e>   * #getAckWaitMs()}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTotalTxnMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>TOTAL_TXN_MS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total time in milliseconds that the master spent waiting for the {@link ReplicaAckPolicy}</color>
<color=#75715e>   * to be satisfied during successful transaction commits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getTotalTxnMs()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAckWaitMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color> <color=#f8f8f2>:</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>ACK_WAIT_MS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The VLSN of the last committed transaction on the master, or 0 if not known or this node is not</color>
<color=#75715e>   * the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastCommitVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LAST_COMMIT_VLSN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The commit timestamp of the last committed transaction on the master, or 0 if not known or this</color>
<color=#75715e>   * node is not the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastCommitTimestamp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getAtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LAST_COMMIT_TIMESTAMP</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A moving average of the rate replication data is being generated by the master, in VLSNs per</color>
<color=#75715e>   * minute, or 0 if not known or this node is not the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 6.3.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getVLSNRate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederTxnStats</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>VALUE_UNAVAILABLE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LongAvgRateStat</color> <color=#f8f8f2>stat</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LongAvgRateStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>feederTxnStats</color><color=#f8f8f2>.</color><color=#a6e22e>getStat</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN_RATE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>stat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>stat</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Replay Stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of commit log records that were replayed by this node when it was a Replica. There</color>
<color=#75715e>   * is one commit record record for each actual commit on the Master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayCommits</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_COMMITS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of commit log records that needed to be acknowledged to the Master by this node when</color>
<color=#75715e>   * it was a Replica. The rate of change of this statistic, will show a strong correlation with</color>
<color=#75715e>   * that of <code>NReplayCommits</code> statistic, if the <code>Durability</code> policy used by</color>
<color=#75715e>   * transactions on the master calls for transaction commit acknowledgments and the Replica is</color>
<color=#75715e>   * current with respect to the Master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayCommitAcks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_COMMIT_ACKS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of commitSync() calls executed when satisfying transaction commit acknowledgment</color>
<color=#75715e>   * requests from the Master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayCommitSyncs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_COMMIT_SYNCS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of commitNoSync() calls executed when satisfying transaction commit acknowledgment</color>
<color=#75715e>   * requests from the Master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayCommitNoSyncs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_COMMIT_NO_SYNCS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of commitNoSync() calls executed when satisfying transaction commit acknowledgment</color>
<color=#75715e>   * requests from the Master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayCommitWriteNoSyncs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_COMMIT_WRITE_NO_SYNCS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of abort records which were replayed while the node was in the Replica state. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayAborts</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_ABORTS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The number of NameLN records which were replayed while the node was in the Replica state. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayNameLNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_NAME_LNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of data records (creation, update, deletion) which were replayed while the node was</color>
<color=#75715e>   * in the Replica state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayLNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_LNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The total elapsed time in milliseconds spent replaying committed and aborted transactions. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayElapsedTxnTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_ELAPSED_TXN_TIME</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of group commits that were initiated due to the {@link</color>
<color=#75715e>   * ReplicationConfig#REPLICA_GROUP_COMMIT_INTERVAL group timeout interval} being exceeded.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 5.0.76</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayGroupCommitTimeouts</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_GROUP_COMMIT_TIMEOUTS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of group commits that were initiated due the {@link</color>
<color=#75715e>   * ReplicationConfig#REPLICA_MAX_GROUP_COMMIT max group size} being exceeded.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 5.0.76</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayGroupCommitMaxExceeded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_GROUP_COMMIT_MAX_EXCEEDED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of replay transaction commits that were part of a group commit operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 5.0.76</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayGroupCommitTxns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_GROUP_COMMIT_TXNS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of group commit operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 5.0.76</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNReplayGroupCommits</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_GROUP_COMMITS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The minimum time taken to replay a transaction commit operation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayMinCommitProcessingNanos</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MIN_COMMIT_PROCESSING_NANOS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The maximum time taken to replay a transaction commit operation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayMaxCommitProcessingNanos</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>MAX_COMMIT_PROCESSING_NANOS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The total time spent to replay all commit operations. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayTotalCommitProcessingNanos</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>TOTAL_COMMIT_PROCESSING_NANOS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden TODO: Make visible after experimenting with this new stat</color>
<color=#75715e>   *     <p>The sum of time periods, measured in milliseconds, between when update operations commit</color>
<color=#75715e>   *     on the master and then subsequently commit on the replica. Divide this value by the total</color>
<color=#75715e>   *     number of commit operations, available by calling {@link #getNReplayCommits}, to find the</color>
<color=#75715e>   *     average commit lag for a single operation.</color>
<color=#75715e>   *     <p>Note that each lag is computed on the replica by comparing the time of the master</color>
<color=#75715e>   *     commit, as measured by the master, and time on the replica when it commits locally. As a</color>
<color=#75715e>   *     result, the return value will be affected by any clock skew between the master and the</color>
<color=#75715e>   *     replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayTotalCommitLagMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>TOTAL_COMMIT_LAG_MS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden TODO: Make visible after experimenting with this new stat</color>
<color=#75715e>   *     <p>The time in milliseconds between when the latest update operation committed on the</color>
<color=#75715e>   *     master and then subsequently committed on the replica.</color>
<color=#75715e>   *     <p>Note that the lag is computed on the replica by comparing the time of the master commit,</color>
<color=#75715e>   *     as measured by the master, and time on the replica when it commits locally. As a result,</color>
<color=#75715e>   *     the return value will be affected by any clock skew between the master and the replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getReplayLatestCommitLagMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replayStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>LATEST_COMMIT_LAG_MS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Protocol Stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of bytes of Replication Stream read over the network. It does not include the TCP/IP</color>
<color=#75715e>   * overhead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the sum total of all Feeder related network activity, as well as Replica network</color>
<color=#75715e>   * activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNProtocolBytesRead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_BYTES_READ</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of Replication Stream messages read over the network.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the sum total of all Feeder related network activity, as well as Replica network</color>
<color=#75715e>   * activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNProtocolMessagesRead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_READ</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of Replication Stream bytes written over the network.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the sum total of all Feeder related network activity, as well as Replica network</color>
<color=#75715e>   * activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNProtocolBytesWritten</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_BYTES_WRITTEN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of Replication Stream messages that were written as part of a message batch instead</color>
<color=#75715e>   * of being written individually.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>It represents a subset of the messages returned by {@link #getNProtocolMessagesWritten()}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getNProtocolMessageBatches</color>
<color=#75715e>   * @since 6.2.7</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNProtocolMessagesBatched</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_BATCHED</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of Replication Stream message batches written to the network.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getNProtocolMessagesBatched</color>
<color=#75715e>   * @since 6.2.7</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNProtocolMessageBatches</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGE_BATCHES</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total number of Replication Stream messages written over the network.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the sum total of all Feeder related network activity, as well as Replica network</color>
<color=#75715e>   * activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNProtocolMessagesWritten</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_MESSAGES_WRITTEN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of nanoseconds spent reading from the network channel.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the sum total of all Feeder related network activity, as well as Replica network</color>
<color=#75715e>   * activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProtocolReadNanos</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_READ_NANOS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of nanoseconds spent writing to the network channel.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the sum total of all Feeder related network activity, as well as Replica network</color>
<color=#75715e>   * activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProtocolWriteNanos</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_WRITE_NANOS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Incoming replication message throughput, in terms of messages received from the replication</color>
<color=#75715e>   * network channels per second.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the message reading rate over all Feeder related network activity, as well as</color>
<color=#75715e>   * Replica network activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProtocolMessageReadRate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>rstat</color> <color=#f92672>=</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getIntegralLongAvgStat</color><color=#f8f8f2>(</color><color=#f8f8f2>MESSAGE_READ_RATE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>rstat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>rstat</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>().</color><color=#a6e22e>longValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Outgoing message throughput, in terms of message written to the replication network channels</color>
<color=#75715e>   * per second.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the message writing rate over all Feeder related network activity, as well as</color>
<color=#75715e>   * Replica network activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProtocolMessageWriteRate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>rstat</color> <color=#f92672>=</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getIntegralLongAvgStat</color><color=#f8f8f2>(</color><color=#f8f8f2>MESSAGE_WRITE_RATE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>rstat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>rstat</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>().</color><color=#a6e22e>longValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Bytes read throughput, in terms of bytes received from the replication network channels per</color>
<color=#75715e>   * second.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the bytes reading rate over all Feeder related network activity, as well as Replica</color>
<color=#75715e>   * network activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProtocolBytesReadRate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>rstat</color> <color=#f92672>=</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getIntegralLongAvgStat</color><color=#f8f8f2>(</color><color=#f8f8f2>BYTES_READ_RATE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>rstat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>rstat</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>().</color><color=#a6e22e>longValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Bytes written throughput, in terms of bytes written to the replication network channels per</color>
<color=#75715e>   * second.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node has served as both a Replica and Master since it was first started, the number</color>
<color=#75715e>   * represents the bytes writing rate over all Feeder related network activity, as well as Replica</color>
<color=#75715e>   * network activity.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getProtocolBytesWriteRate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>IntegralLongAvgStat</color> <color=#f8f8f2>rstat</color> <color=#f92672>=</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getIntegralLongAvgStat</color><color=#f8f8f2>(</color><color=#f8f8f2>BYTES_WRITE_RATE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>rstat</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>rstat</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>().</color><color=#a6e22e>longValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of messages containing log entries that were written to the replication</color>
<color=#75715e>   * stream using the previous log format to support replication to a replica running an earlier</color>
<color=#75715e>   * version during an upgrade.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getNProtocolEntriesWrittenOldVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_ENTRIES_WRITTEN_OLD_VERSION</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* ConsistencyTracker Stats. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of times a Replica held back a {@link</color>
<color=#75715e>   * Environment#beginTransaction(Transaction,TransactionConfig)} operation to satisfy the {@link</color>
<color=#75715e>   * TimeConsistencyPolicy}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTrackerLagConsistencyWaits</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>trackerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_LAG_CONSISTENCY_WAITS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total time (in msec) for which a Replica held back a {@link</color>
<color=#75715e>   * Environment#beginTransaction(Transaction,TransactionConfig)} operation to satisfy the {@link</color>
<color=#75715e>   * TimeConsistencyPolicy}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTrackerLagConsistencyWaitMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>trackerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_LAG_CONSISTENCY_WAIT_MS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of times a Replica held back a {@link</color>
<color=#75715e>   * Environment#beginTransaction(Transaction,TransactionConfig)} operation to satisfy the {@link</color>
<color=#75715e>   * CommitPointConsistencyPolicy}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTrackerVLSNConsistencyWaits</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>trackerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_VLSN_CONSISTENCY_WAITS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total time (in msec) for which a Replica held back a {@link</color>
<color=#75715e>   * Environment#beginTransaction(Transaction,TransactionConfig)} operation to satisfy the {@link</color>
<color=#75715e>   * CommitPointConsistencyPolicy}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTrackerVLSNConsistencyWaitMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>trackerStats</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>N_VLSN_CONSISTENCY_WAIT_MS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a string representation of the statistics. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getStatGroups</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toStringVerbose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getStatGroups</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>toStringVerbose</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getTips</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Add FeederManager stats definition. */</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getStatGroups</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tipsMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getDescription</color><color=#f8f8f2>());</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>StatDefinition</color> <color=#f8f8f2>def</color> <color=#f8f8f2>:</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>().</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tipsMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>def</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>def</color><color=#f8f8f2>.</color><color=#a6e22e>getDescription</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>tipsMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>