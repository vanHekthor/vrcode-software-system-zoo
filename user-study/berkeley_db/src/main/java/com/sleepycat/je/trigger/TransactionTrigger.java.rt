<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.trigger</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Transaction</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * <code>TransactionTrigger</code> defines the methods that track a transaction through its</color>
<color=#75715e> * lifecycle. The following table captures the relationship between transaction lifecycle operations</color>
<color=#75715e> * and their trigger methods.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>WARNING: Only transient triggers are currently supported, and the documention below has not</color>
<color=#75715e> * yet been updated to reflect this fact. See details at the top of Trigger.java. Also see the</color>
<color=#75715e> * warning at the top of ReplicatedDatabaseTrigger.java.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <table BORDER CELLPADDING=3 CELLSPACING=1 width="50%" align="center"></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td ALIGN=CENTER><b>Transaction Operation</b></td></color>
<color=#75715e> * <td ALIGN=CENTER><b>Trigger Method</b></td></color>
<color=#75715e> *</color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td>{@link Transaction#commit Transaction.commit}. If the database was was</color>
<color=#75715e> * modified in the scope of the transaction.</td></color>
<color=#75715e> * <td>{@link #commit commit}</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr></color>
<color=#75715e> * <td>{@link Transaction#abort Transaction.abort}. If the database was was</color>
<color=#75715e> * modified in the scope of the transaction.</td></color>
<color=#75715e> * <td>{@link #abort abort}</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The use of method names in the above table is intended to cover all overloaded methods with</color>
<color=#75715e> * that name.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The trigger methods are also invoked for transactions that are implicitly initiated on behalf</color>
<color=#75715e> * of the application in the following two cases:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>When using auto-commit.</color>
<color=#75715e> *   <li>During the replay of transactions on a Replica when using a ReplicatedEnvironment.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>A TransactionTrigger is associated with a database via {@link DatabaseConfig#setTriggers</color>
<color=#75715e> * DatabaseConfig.setTriggers}. Trigger applications that only make changes to the JE environment in</color>
<color=#75715e> * the transaction scope of the transaction supplied to the <code>DatbaseTrigger</code> do not</color>
<color=#75715e> * typically need to define Transaction triggers, since the changes they make are committed and</color>
<color=#75715e> * rolled back automatically by this transaction. For example, triggers defined solely to create</color>
<color=#75715e> * additional indexes in the environment do not need to define transaction triggers. Only</color>
<color=#75715e> * sophisticated applications that manage state outside of JE, or in independent transactions</color>
<color=#75715e> * typically define such triggers.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>TransactionTrigger</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked after a transaction has been committed. The method is only invoked</color>
<color=#75715e>   * if the database was modified during the course of the transaction, that is, if a trigger method</color>
<color=#75715e>   * was invoked within the scope of the transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction that was committed</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The trigger method invoked after the transaction has been aborted. The method is only invoked</color>
<color=#75715e>   * if the database was modified during the course of the transaction, that is, if a trigger method</color>
<color=#75715e>   * was invoked within the scope of the transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction that was aborted</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>