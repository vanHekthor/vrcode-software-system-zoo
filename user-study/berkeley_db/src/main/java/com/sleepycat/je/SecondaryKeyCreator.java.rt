<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The interface implemented for extracting single-valued secondary keys from primary records.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The key creator object is specified by calling {@link SecondaryConfig#setKeyCreator</color>
<color=#75715e> * SecondaryConfig.setKeyCreator}. The secondary database configuration is specified when calling</color>
<color=#75715e> * {@link Environment#openSecondaryDatabase Environment.openSecondaryDatabase}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     class MyKeyCreator implements SecondaryKeyCreator {</color>
<color=#75715e> *         public boolean createSecondaryKey(SecondaryDatabase secondary,</color>
<color=#75715e> *                                             DatabaseEntry key,</color>
<color=#75715e> *                                             DatabaseEntry data,</color>
<color=#75715e> *                                             DatabaseEntry result) {</color>
<color=#75715e> *             //</color>
<color=#75715e> *             // DO HERE: Extract the secondary key from the primary key and</color>
<color=#75715e> *             // data, and set the secondary key into the result parameter.</color>
<color=#75715e> *             //</color>
<color=#75715e> *             return true;</color>
<color=#75715e> *         }</color>
<color=#75715e> *     }</color>
<color=#75715e> *     ...</color>
<color=#75715e> *     SecondaryConfig secConfig = new SecondaryConfig();</color>
<color=#75715e> *     secConfig.setKeyCreator(new MyKeyCreator());</color>
<color=#75715e> *     // Now pass secConfig to Environment.openSecondaryDatabase</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Use this interface when zero or one secondary key is present in a single primary record, in</color>
<color=#75715e> * other words, for many-to-one and one-to-one relationships. When more than one secondary key may</color>
<color=#75715e> * be present (for many-to-many and one-to-many relationships), use the {@link</color>
<color=#75715e> * SecondaryMultiKeyCreator} interface instead. The table below summarizes how to create all four</color>
<color=#75715e> * variations of relationships. <div></color>
<color=#75715e> *</color>
<color=#75715e> * <table border="yes"></color>
<color=#75715e> *     <tr><th>Relationship</th></color>
<color=#75715e> *         <th>Interface</th></color>
<color=#75715e> *         <th>Duplicates</th></color>
<color=#75715e> *         <th>Example</th></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr><td>One-to-one</td></color>
<color=#75715e> *         <td>{@link SecondaryKeyCreator}</td></color>
<color=#75715e> *         <td>No</td></color>
<color=#75715e> *         <td>A person record with a unique social security number key.</td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr><td>Many-to-one</td></color>
<color=#75715e> *         <td>{@link SecondaryKeyCreator}</td></color>
<color=#75715e> *         <td>Yes</td></color>
<color=#75715e> *         <td>A person record with a non-unique employer key.</td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr><td>One-to-many</td></color>
<color=#75715e> *         <td>{@link SecondaryMultiKeyCreator}</td></color>
<color=#75715e> *         <td>No</td></color>
<color=#75715e> *         <td>A person record with multiple unique email address keys.</td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> *     <tr><td>Many-to-many</td></color>
<color=#75715e> *         <td>{@link SecondaryMultiKeyCreator}</td></color>
<color=#75715e> *         <td>Yes</td></color>
<color=#75715e> *         <td>A person record with multiple non-unique organization keys.</td></color>
<color=#75715e> *     </tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * </div></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To configure a database for duplicates. pass true to {@link</color>
<color=#75715e> * DatabaseConfig#setSortedDuplicates}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>WARNING:</em> Key creator instances are shared by multiple threads and key creator methods</color>
<color=#75715e> * are called without any special synchronization. Therefore, key creators must be thread safe. In</color>
<color=#75715e> * general no shared state should be used and any caching of computed values must be done with</color>
<color=#75715e> * proper synchronization.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>SecondaryKeyCreator</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a secondary key entry, given a primary key and data entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A secondary key may be derived from the primary key, primary data, or a combination of the</color>
<color=#75715e>   * primary key and data. For secondary keys that are optional, the key creator method may return</color>
<color=#75715e>   * false and the key/data pair will not be indexed. To ensure the integrity of a secondary</color>
<color=#75715e>   * database the key creator method must always return the same result for a given set of input</color>
<color=#75715e>   * parameters.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A {@code RuntimeException} may be thrown by this method if an error occurs attempting to</color>
<color=#75715e>   * create the secondary key. This exception will be thrown by the API method currently in</color>
<color=#75715e>   * progress, for example, a {@link Database#put put} method. However, this will cause the write</color>
<color=#75715e>   * operation to be incomplete. When databases are not configured to be transactional, caution</color>
<color=#75715e>   * should be used to avoid integrity problems. See <a</color>
<color=#75715e>   * href="SecondaryDatabase.html#transactions">Special considerations for using Secondary Databases</color>
<color=#75715e>   * with and without Transactions</a>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param secondary the database to which the secondary key will be added. This parameter is</color>
<color=#75715e>   *     passed for informational purposes but is not commonly used. This parameter is always</color>
<color=#75715e>   *     non-null.</color>
<color=#75715e>   * @param key the primary key entry. This parameter must not be modified by this method. This</color>
<color=#75715e>   *     parameter is always non-null.</color>
<color=#75715e>   * @param data the primary data entry. This parameter must not be modified by this method. If</color>
<color=#75715e>   *     {@link SecondaryConfig#setExtractFromPrimaryKeyOnly} is configured as {@code true}, the</color>
<color=#75715e>   *     {@code data} param may be either null or non-null, and the implementation is expected to</color>
<color=#75715e>   *     ignore it; otherwise, this parameter is always non-null.</color>
<color=#75715e>   * @param result the secondary key created by this method. This parameter is always non-null.</color>
<color=#75715e>   * @return true if a key was created, or false to indicate that the key is not present.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>createSecondaryKey</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secondary</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>