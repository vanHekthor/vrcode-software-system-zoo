<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>

<color=#75715e>/** Specifies the attributes of a database environment transaction. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TransactionConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Default configuration used if null is passed to methods that create a transaction. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>DEFAULT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>sync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noSync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>writeNoSync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>consistencyPolicy</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommitted</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readCommitted</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>serializableIsolation</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>localWrite</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An instance created using the default constructor is initialized with the system's default</color>
<color=#75715e>   * settings.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>TransactionConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only.</color>
<color=#75715e>   *     <p>Maps the existing sync settings to the equivalent durability settings. Figure out what</color>
<color=#75715e>   *     we should do on commit. TransactionConfig could be set with conflicting values; take the</color>
<color=#75715e>   *     most stringent ones first. All environment level defaults were applied by the caller.</color>
<color=#75715e>   *     <p>ConfigSync ConfigWriteNoSync ConfigNoSync default 0 0 0 sync 0 0 1 nosync 0 1 0 write</color>
<color=#75715e>   *     nosync 0 1 1 write nosync 1 0 0 sync 1 0 1 sync 1 1 0 sync 1 1 1 sync</color>
<color=#75715e>   * @return the equivalent durability</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Durability</color> <color=#a6e22e>getDurabilityFromSync</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeNoSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_WRITE_NO_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>noSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_NO_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Replicated environments default to commitNoSync, while standalone</color>
<color=#75715e>     * default to commitSync.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_NO_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the transaction to write and synchronously flush the log it when commits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This behavior may be set for a database environment using the Environment.setMutableConfig</color>
<color=#75715e>   * method. Any value specified to this method overrides that setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is false for this class and true for the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true is passed to both setSync and setNoSync, setSync will take precedence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param sync If true, transactions exhibit all the ACID (atomicity, consistency, isolation, and</color>
<color=#75715e>   *     durability) properties.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setSync</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>sync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setSyncVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>sync</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSyncVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>sync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkMixedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>sync</color><color=#f8f8f2>,</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>durability</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sync</color> <color=#f92672>=</color> <color=#f8f8f2>sync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the transaction is configured to write and synchronously flush the log it when</color>
<color=#75715e>   * commits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the transaction is configured to write and synchronously flush the log it when</color>
<color=#75715e>   *     commits.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the transaction to not write or synchronously flush the log it when commits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This behavior may be set for a database environment using the Environment.setMutableConfig</color>
<color=#75715e>   * method. Any value specified to this method overrides that setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is false for this class and the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param noSync If true, transactions exhibit the ACI (atomicity, consistency, and isolation)</color>
<color=#75715e>   *     properties, but not D (durability); that is, database integrity will be maintained, but if</color>
<color=#75715e>   *     the application or system fails, it is possible some number of the most recently committed</color>
<color=#75715e>   *     transactions may be undone during recovery. The number of transactions at risk is governed</color>
<color=#75715e>   *     by how many log updates can fit into the log buffer, how often the operating system flushes</color>
<color=#75715e>   *     dirty buffers to disk, and how often the log is checkpointed.</color>
<color=#75715e>   * @deprecated replaced by {@link #setDurability}</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setNoSync</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setNoSyncVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>noSync</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setNoSyncVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkMixedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>sync</color><color=#f8f8f2>,</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>durability</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>noSync</color> <color=#f92672>=</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the transaction is configured to not write or synchronously flush the log it</color>
<color=#75715e>   * when commits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the transaction is configured to not write or synchronously flush the log it</color>
<color=#75715e>   *     when commits.</color>
<color=#75715e>   * @deprecated replaced by {@link #getDurability}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getNoSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the transaction to write but not synchronously flush the log it when commits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This behavior may be set for a database environment using the Environment.setMutableConfig</color>
<color=#75715e>   * method. Any value specified to this method overrides that setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is false for this class and the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param writeNoSync If true, transactions exhibit the ACI (atomicity, consistency, and</color>
<color=#75715e>   *     isolation) properties, but not D (durability); that is, database integrity will be</color>
<color=#75715e>   *     maintained, but if the operating system fails, it is possible some number of the most</color>
<color=#75715e>   *     recently committed transactions may be undone during recovery. The number of transactions</color>
<color=#75715e>   *     at risk is governed by how often the operating system flushes dirty buffers to disk, and</color>
<color=#75715e>   *     how often the log is checkpointed.</color>
<color=#75715e>   * @deprecated replaced by {@link #setDurability}</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setWriteNoSync</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setWriteNoSyncVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>writeNoSync</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setWriteNoSyncVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkMixedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>sync</color><color=#f8f8f2>,</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>durability</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>writeNoSync</color> <color=#f92672>=</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the transaction is configured to write but not synchronously flush the log it</color>
<color=#75715e>   * when commits.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the transaction is configured to not write or synchronously flush the log it</color>
<color=#75715e>   *     when commits.</color>
<color=#75715e>   * @deprecated replaced by {@link #getDurability}</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getWriteNoSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the durability associated with a transaction when it commits. Changes to durability</color>
<color=#75715e>   * are not reflected back to the "sync" booleans -- there isn't a one to one mapping.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that you should not use both the durability and the XXXSync() apis on the same config</color>
<color=#75715e>   * object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param durability the durability definition</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setDurability</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setDurabilityVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>durability</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDurabilityVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkMixedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>sync</color><color=#f8f8f2>,</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>,</color> <color=#f8f8f2>durability</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>durability</color> <color=#f92672>=</color> <color=#f8f8f2>durability</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the durability associated with the configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If {@link #setDurability} has not been called, this method returns null. When no durability</color>
<color=#75715e>   * settings have been specified using the {@code TransactionConfig}, the default durability is</color>
<color=#75715e>   * applied to the {@link Transaction} by {@link Environment#beginTransaction} using {@link</color>
<color=#75715e>   * EnvironmentConfig} settings.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the durability setting currently associated with this config.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Durability</color> <color=#a6e22e>getDurability</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>durability</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used internally to configure Durability, modifying the existing Durability or explicit sync</color>
<color=#75715e>   * configuration. This method is used to avoid a mixed mode exception, since the existing config</color>
<color=#75715e>   * may be in either mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>overrideDurability</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>noSync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>writeNoSync</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>durability</color> <color=#f92672>=</color> <color=#f8f8f2>durability</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Associates a consistency policy with this configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param consistencyPolicy the consistency definition</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setConsistencyPolicy</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>consistencyPolicy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setConsistencyPolicyVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>consistencyPolicy</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setConsistencyPolicyVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>consistencyPolicy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>consistencyPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>consistencyPolicy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
  <color=#75715e>/**</color>
<color=#75715e>   * Returns the consistency policy associated with the configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the consistency policy currently associated with this config.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#a6e22e>getConsistencyPolicy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>consistencyPolicy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the transaction to not wait if a lock request cannot be immediately granted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is false for this class and the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param noWait If true, transactions will not wait if a lock request cannot be immediately</color>
<color=#75715e>   *     granted, instead {@link com.sleepycat.je.LockNotAvailableException</color>
<color=#75715e>   *     LockNotAvailableException} will be thrown.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setNoWait</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setNoWaitVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>noWait</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setNoWaitVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>noWait</color> <color=#f92672>=</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the transaction is configured to not wait if a lock request cannot be</color>
<color=#75715e>   * immediately granted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the transaction is configured to not wait if a lock request cannot be</color>
<color=#75715e>   *     immediately granted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getNoWait</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures read operations performed by the transaction to return modified but not yet</color>
<color=#75715e>   * committed data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param readUncommitted If true, configure read operations performed by the transaction to</color>
<color=#75715e>   *     return modified but not yet committed data.</color>
<color=#75715e>   * @see LockMode#READ_UNCOMMITTED</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setReadUncommitted</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setReadUncommittedVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>readUncommitted</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReadUncommittedVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>readUncommitted</color> <color=#f92672>=</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if read operations performed by the transaction are configured to return modified</color>
<color=#75715e>   * but not yet committed data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if read operations performed by the transaction are configured to return modified</color>
<color=#75715e>   *     but not yet committed data.</color>
<color=#75715e>   * @see LockMode#READ_UNCOMMITTED</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the transaction for read committed isolation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This ensures the stability of the current data item read by the cursor but permits data read</color>
<color=#75715e>   * by this transaction to be modified or deleted prior to the commit of the transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param readCommitted If true, configure the transaction for read committed isolation.</color>
<color=#75715e>   * @see LockMode#READ_COMMITTED</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setReadCommitted</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setReadCommittedVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>readCommitted</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReadCommittedVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>readCommitted</color> <color=#f92672>=</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the transaction is configured for read committed isolation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the transaction is configured for read committed isolation.</color>
<color=#75715e>   * @see LockMode#READ_COMMITTED</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadCommitted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures this transaction to have serializable (degree 3) isolation. By setting serializable</color>
<color=#75715e>   * isolation, phantoms will be prevented.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By default a transaction provides Repeatable Read isolation; {@link</color>
<color=#75715e>   * EnvironmentConfig#setTxnSerializableIsolation} may be called to override the default. If the</color>
<color=#75715e>   * environment is configured for serializable isolation, all transactions will be serializable</color>
<color=#75715e>   * regardless of whether this method is called; calling {@link #setSerializableIsolation} with a</color>
<color=#75715e>   * false parameter will not disable serializable isolation. The default is false for this class</color>
<color=#75715e>   * and the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see LockMode</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setSerializableIsolation</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>serializableIsolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setSerializableIsolationVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>serializableIsolation</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSerializableIsolationVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>serializableIsolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serializableIsolation</color> <color=#f92672>=</color> <color=#f8f8f2>serializableIsolation</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the transaction has been explicitly configured to have serializable (degree 3)</color>
<color=#75715e>   * isolation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the transaction has been configured to have serializable isolation.</color>
<color=#75715e>   * @see LockMode</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSerializableIsolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>serializableIsolation</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures this transaction to disallow write operations, regardless of whether writes are</color>
<color=#75715e>   * allowed for the {@link Environment} or the {@link Database}s that are accessed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If a write operation is attempted using a read-only transaction, an {@code</color>
<color=#75715e>   * UnsupportedOperationException} will be thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a read-only transaction, the transaction's {@code Durability} is ignored, even when it</color>
<color=#75715e>   * is explicitly specified using {@link #setDurability(Durability)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In a {@link com.sleepycat.je.rep.ReplicatedEnvironment}, a read-only transaction implicitly</color>
<color=#75715e>   * uses {@link Durability.ReplicaAckPolicy#NONE}. A read-only transaction on a Master will thus</color>
<color=#75715e>   * not be held up, or throw {@link com.sleepycat.je.rep.InsufficientReplicasException}, if the</color>
<color=#75715e>   * Master is not in contact with a sufficient number of Replicas at the time the transaction is</color>
<color=#75715e>   * initiated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default setting is false (writes are allowed).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setReadOnly</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setReadOnlyVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>readOnly</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReadOnlyVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localWrite</color> <color=#f92672>&&</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"localWrite and readOnly may not both be true"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>readOnly</color> <color=#f92672>=</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether read-only is configured for this transaction. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures this transaction to allow writing to non-replicated {@link Database}s in a {@link</color>
<color=#75715e>   * com.sleepycat.je.rep.ReplicatedEnvironment}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In a replicated environment, a given transaction may be used to write to either replicated</color>
<color=#75715e>   * databases or non-replicated databases, but not both. If a write operation to a replicated</color>
<color=#75715e>   * database is attempted when local-write is true, or to a non-replicated database when</color>
<color=#75715e>   * local-write is false, an {@code UnsupportedOperationException} will be thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that for auto-commit transactions (when the {@code Transaction} parameter is null), the</color>
<color=#75715e>   * local-write setting is automatically set to correspond to whether the database is replicated.</color>
<color=#75715e>   * With auto-commit, local-write is always true for a non-replicated database, and always false</color>
<color=#75715e>   * for a replicated database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In a replicated environment, a local-write transaction implicitly uses {@link</color>
<color=#75715e>   * Durability.ReplicaAckPolicy#NONE}. A local-write transaction on a Master will thus not be held</color>
<color=#75715e>   * up, or throw {@link com.sleepycat.je.rep.InsufficientReplicasException}, if the Master is not</color>
<color=#75715e>   * in contact with a sufficient number of Replicas at the time the transaction is initiated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By default the local-write setting is false, meaning that the transaction may only write to</color>
<color=#75715e>   * replicated Databases in a replicated environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This configuration setting is ignored in a non-replicated Environment since no databases are</color>
<color=#75715e>   * replicated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @see <a href="rep/ReplicatedEnvironment.html#nonRepDbs>Non-replicated Databases in a Replicated</color>
<color=#75715e>   *     Environment</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>setLocalWrite</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>localWrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setLocalWriteVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>localWrite</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLocalWriteVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>localWrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localWrite</color> <color=#f92672>&&</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"localWrite and readOnly may not both be true"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>localWrite</color> <color=#f92672>=</color> <color=#f8f8f2>localWrite</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether local-write is configured for this transaction. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getLocalWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>localWrite</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of this configuration object. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TransactionConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>willNeverOccur</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks to catch mixing of deprecated and non-deprecated forms of the API. It's invoked before</color>
<color=#75715e>   * setting any of the config parameters. The arguments represent the new state of the durability</color>
<color=#75715e>   * configuration, before it has been changed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalArgumentException via TransactionConfig and EnvironmentMutableConfig setters</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>checkMixedMode</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>sync</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>sync</color> <color=#f92672>||</color> <color=#f8f8f2>noSync</color> <color=#f92672>||</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>durability</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Mixed use of deprecated and current durability APIs is "</color> <color=#f92672>+</color> <color=#e6db74>"not supported"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>sync</color> <color=#f92672>&&</color> <color=#f8f8f2>noSync</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>sync</color> <color=#f92672>&&</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>noSync</color> <color=#f92672>&&</color> <color=#f8f8f2>writeNoSync</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Only one of TxnSync, TxnNoSync, and TxnWriteNoSync "</color> <color=#f92672>+</color> <color=#e6db74>"can be set."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the values for each configuration attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the values for each configuration attribute.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"sync="</color>
        <color=#f92672>+</color> <color=#f8f8f2>sync</color>
        <color=#f92672>+</color> <color=#e6db74>"\nnoSync="</color>
        <color=#f92672>+</color> <color=#f8f8f2>noSync</color>
        <color=#f92672>+</color> <color=#e6db74>"\nwriteNoSync="</color>
        <color=#f92672>+</color> <color=#f8f8f2>writeNoSync</color>
        <color=#f92672>+</color> <color=#e6db74>"\ndurability="</color>
        <color=#f92672>+</color> <color=#f8f8f2>durability</color>
        <color=#f92672>+</color> <color=#e6db74>"\nconsistencyPolicy="</color>
        <color=#f92672>+</color> <color=#f8f8f2>consistencyPolicy</color>
        <color=#f92672>+</color> <color=#e6db74>"\nnoWait="</color>
        <color=#f92672>+</color> <color=#f8f8f2>noWait</color>
        <color=#f92672>+</color> <color=#e6db74>"\nreadUncommitted="</color>
        <color=#f92672>+</color> <color=#f8f8f2>readUncommitted</color>
        <color=#f92672>+</color> <color=#e6db74>"\nreadCommitted="</color>
        <color=#f92672>+</color> <color=#f8f8f2>readCommitted</color>
        <color=#f92672>+</color> <color=#e6db74>"\nSerializableIsolation="</color>
        <color=#f92672>+</color> <color=#f8f8f2>serializableIsolation</color>
        <color=#f92672>+</color> <color=#e6db74>"\n"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>