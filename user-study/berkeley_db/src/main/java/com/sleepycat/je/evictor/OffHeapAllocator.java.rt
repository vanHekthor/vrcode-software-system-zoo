<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.evictor</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Implemented by off-heap memory allocators.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The allocator is responsible for allocating and freeing a block of memory efficiently,</color>
<color=#75715e> * maintaining the size of a block, identifying a block by a long integer value (ID), and looking up</color>
<color=#75715e> * a memory ID efficiently (in constant time) in order to copy bytes, return the size, or free the</color>
<color=#75715e> * block.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The allocator is also responsible for compacting memory when necessary to perform allocations</color>
<color=#75715e> * efficiently. A special case is when the off-heap cache is reduced in size, and memory should be</color>
<color=#75715e> * compacted to make memory available to the OS; the implementation should account for this case.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another responsibility of the allocator is to estimate the RAM usage for all blocks currently</color>
<color=#75715e> * allocated, including overhead and space taken by fragmentation. It is recognized that this may</color>
<color=#75715e> * only be a rough estimate in some implementations (the default allocator, for example). See {@link</color>
<color=#75715e> * #getUsedBytes}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that with the default allocator, the size is not a built-in property of each block, and</color>
<color=#75715e> * the {@link #size} method will be implemented by storing the size at the front of the block. The</color>
<color=#75715e> * {@code size} method is included in the interface to allow for implementations where a block size</color>
<color=#75715e> * property is naturally available.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This interface requires that memory is copied in and out of the Java address space to make use</color>
<color=#75715e> * of the off-heap cache. A future enhancement might involve adding a way to obtain a ByteBuffer for</color>
<color=#75715e> * direct access to the off-heap memory block, to avoid the copy if this is possible in some</color>
<color=#75715e> * implementations. In the default implementation, this is not practical without using non-public</color>
<color=#75715e> * JVM internals and risking incompatibilities.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>All methods in the allocator must be thread safe, and contention among threads should be</color>
<color=#75715e> * minimized.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The memory blocks are not assumed to be fast access RAM and in particular might be NVRAM. JE</color>
<color=#75715e> * makes an effort to only copy memory to/from the block when necessary, and to use single larger</color>
<color=#75715e> * copy operations rather than multiple smaller copy operations.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>OffHeapAllocator</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>class</color> <color=#a6e22e>OffHeapOverflowException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the maximum size of the off-heap cache, to be used as a hint for</color>
<color=#75715e>   * the creation of implementation specific data structures.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The maximum cache size is the amount of RAM that the app would like to</color>
<color=#75715e>   * use for the off-heap cache, at the gross level of dividing up the RAM on</color>
<color=#75715e>   * a machine among processes, the off-heap cache, the file system cache,</color>
<color=#75715e>   * etc. Because there is overhead with any allocation scheme, less bytes</color>
<color=#75715e>   * will actually be available for memory blocks created with the {@link</color>
<color=#75715e>   * #allocate) method. In other words, JE will not assume that it can</color>
<color=#75715e>   * allocate blocks totaling the specified maximum size. See {@link</color>
<color=#75715e>   * #getUsedBytes }.</color>
<color=#75715e>   * <p></color>
<color=#75715e>   * This method is always called once before any other method is called. It</color>
<color=#75715e>   * may be called more than once if the off-heap cache is resized by the</color>
<color=#75715e>   * app.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #allocate(int)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setMaxBytes</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an estimate of the amount of RAM used by the cache, including the metadata and block</color>
<color=#75715e>   * overhead used by the implementation, as well as any free space needed for performing</color>
<color=#75715e>   * compaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should not cause thread contention when called frequently from multiple threads.</color>
<color=#75715e>   * A volatile long field is the suggested implementation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #allocate(int)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>getUsedBytes</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Allocates a block of a given size and returns its ID.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The bytes of the memory block must be initialized to zero.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that because the used cache size is only an estimate, and in fact the maximum size</color>
<color=#75715e>   * might not actually be available (due to memory use by other processes when using the default</color>
<color=#75715e>   * allocator, for example), then the {@link #allocate} method may fail (thrown an exception) even</color>
<color=#75715e>   * when the used size is less than the maximum bytes (the value passed to {@link #setMaxBytes}).</color>
<color=#75715e>   * JE handles this situation as follows.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>JE uses an internal off-heap cache size limit to determine when to perform eviction (which</color>
<color=#75715e>   * frees off-heap blocks). The limit is initialized to the value passed to {@link #setMaxBytes}.</color>
<color=#75715e>   * JE calls {@link #getUsedBytes()} to determine when to evict memory from the cache. If the used</color>
<color=#75715e>   * bytes by grows very close to the limit or exceeds it, JE will perform off-heap cache eviction.</color>
<color=#75715e>   * JE will make a best effort not to call the {@link #allocate} method when the used size exceeds</color>
<color=#75715e>   * the limit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If an allocation failure occurs (i.e., this method throws an exception), JE adjusts the</color>
<color=#75715e>   * limit downward to account for the inaccuracies discussed above. When a RuntimeException is</color>
<color=#75715e>   * thrown, the limit is set to the used size; when an OutOfMemoryError is thrown, the limit is set</color>
<color=#75715e>   * to the used size minus the {@link com.sleepycat.je.EnvironmentConfig#OFFHEAP_EVICT_BYTES}. This</color>
<color=#75715e>   * adjustment should ensure that JE eviction occurs and prevent frequent allocation failures and</color>
<color=#75715e>   * associated exception handling. TODO: This never happens because Linux kills the process</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * @return non-zero memory ID, or zero when the memory cannot be allocated.</color>
<color=#75715e>   * @throws OffHeapOverflowException if the block cannot be allocated because the max size has been</color>
<color=#75715e>   *     reached. The internal off-heap cache size limit will be set as described above.</color>
<color=#75715e>   * @throws OutOfMemoryError if the block cannot be allocated because no system memory is</color>
<color=#75715e>   *     available. The internal off-heap cache size limit will be set as described above. In</color>
<color=#75715e>   *     addition, a SEVERE message for the exception will be logged.</color>
<color=#75715e>   * @see #getUsedBytes</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>OutOfMemoryError</color><color=#f8f8f2>,</color> <color=#f8f8f2>OffHeapOverflowException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Frees a block previously allocated and returns the size freed, including any overhead for the</color>
<color=#75715e>   * block that is now free.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>free</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Returns the size of an allocated block. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Returns the size of an allocated block plus any overhead for the block. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>totalSize</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Copies bytes from an allocated block to a Java byte array. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memOff</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufOff</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Copies bytes from a Java byte array to an allocated block. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufOff</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>memId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memOff</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Copies bytes from one allocated block to another. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>fromMemId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>fromMemOff</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>toMemId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>toMemOff</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>