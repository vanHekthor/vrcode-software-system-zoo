<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.arbiter.impl</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.GroupShutdownException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.InsufficientLogException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicatedEnvironment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.Proposal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Protocol.Value</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.BinaryNodeStateProtocol.BinaryNodeStateResponse</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.ChannelTimeoutTask</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.RepNode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.monitor.LeaveGroupEvent.LeaveReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory.ConnectOptions</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.MasterStatus</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.util.ReplicationGroupAdmin</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils.ExceptionAwareCountDownLatch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ReplicationFormatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StoppableThread</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StringStat</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.HashSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Timer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicBoolean</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicReference</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.arbiter.impl.ArbiterStatDefinition.ARB_STATE</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The implementation of the Arbiter. The Arbiter is a participant in elections and may acknowledge</color>
<color=#75715e> * transaction commits.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The Arbiter persists the Arbiter's replication group node identifier and the highest commit</color>
<color=#75715e> * VLSN that has been acknowledged. Currently the Feeder sends commit acknowledgment requests to the</color>
<color=#75715e> * Arbiter if the replication factor is two and the other Rep node is not available</color>
<color=#75715e> * (RepImpl.preLogCommitHook).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The VLSN is used in response to an election promise request. The priority of the response is</color>
<color=#75715e> * lower than a RepNode. This allows the RepNode to be selected if the VLSN is equal. An Arbiter may</color>
<color=#75715e> * not "win" an election. If the Arbiter's VLSN is the highest in the election, the election result</color>
<color=#75715e> * is ignored. A NULL nodeid in a promise response is used to identify a promise response is from an</color>
<color=#75715e> * Arbiter.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Two pieces of information are persisted by the Arbiter. The replication group node identifier</color>
<color=#75715e> * is persisted because this information is located in the group database and the Arbiter does not</color>
<color=#75715e> * have a copy of the group database. The other is the high VLSN of a Arbiter ACKed commit.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In the future, the algorithm could be changed to request commit acknowledgments when the</color>
<color=#75715e> * replication factor is greater than two. This would allow for better write availability when the</color>
<color=#75715e> * replication factor is an even number.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ArbiterImpl</color> <color=#66d9ef>extends</color> <color=#f8f8f2>StoppableThread</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>DATA_FILE_NAME</color> <color=#f92672>=</color> <color=#e6db74>"00000000.adb"</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of times to sleep between retries when a new node tries to locate</color>
<color=#75715e>   * a master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MASTER_QUERY_INTERVAL</color> <color=#f92672>=</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>MasterStatus</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>MasterChangeListener</color> <color=#f8f8f2>changeListener</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>SuggestionGenerator</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ReplicationGroupAdmin</color> <color=#f8f8f2>repGroupAdmin</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>cachedRepGroupImpl</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Timer</color> <color=#f8f8f2>timer</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ChannelTimeoutTask</color> <color=#f8f8f2>channelTimeoutTask</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ArbiterVLSNTracker</color> <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ArbiterNodeStateService</color> <color=#f8f8f2>nodeStateService</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ArbBinaryStateService</color> <color=#f8f8f2>binaryStateService</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The Arbiter's logger. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Formatter</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Elections</color> <color=#f8f8f2>elections</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>arbiterHome</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ArbiterAcker</color> <color=#f8f8f2>arbiterAcker</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>MonitorEventManager</color> <color=#f8f8f2>monitorEventManager</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Determines whether the Arbiter has been shutdown. Usually this is held</color>
<color=#75715e>   * within the StoppableThread, but the Feeder's two child threads have</color>
<color=#75715e>   * their shutdown coordinated by the parent Feeder.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicBoolean</color> <color=#f8f8f2>shutdown</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The latch used to wait for the ArbiterAcker to establish</color>
<color=#75715e>   * a connection with the Master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color> <color=#f8f8f2>readyLatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f92672>></color> <color=#f8f8f2>currentState</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>joinGroupTime</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The Arbiter implementation. Uses the following replication parameters: RepParams.GROUP_NAME The</color>
<color=#75715e>   * replication group name. RepParams.ENV_UNKNOWN_STATE_TIMEOUT Timeout used for being in the</color>
<color=#75715e>   * unknown state. RepParams.NODE_HOST_PORT The host name and port associated with this node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param arbiterHome - Arbiter home directory.</color>
<color=#75715e>   * @param repImpl - RepImpl</color>
<color=#75715e>   * @throws EnvironmentNotFoundException</color>
<color=#75715e>   * @throws EnvironmentLockedException</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ArbiterImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>arbiterHome</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>EnvironmentNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentLockedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"ArbiterNode "</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>arbiterHome</color> <color=#f92672>=</color> <color=#f8f8f2>arbiterHome</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>initialize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Problem attempting to join on "</color> <color=#f92672>+</color> <color=#f8f8f2>getSocket</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>arbStat</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiterAcker</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>arbStat</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>ArbiterStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>ArbiterStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>arbStat</color> <color=#f92672>=</color> <color=#f8f8f2>arbiterAcker</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>StringStat</color> <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringStat</color><color=#f8f8f2>(</color><color=#f8f8f2>arbStat</color><color=#f8f8f2>,</color> <color=#f8f8f2>ARB_STATE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>state</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>currentState</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>trackerStats</color> <color=#f92672>=</color>
        <color=#f8f8f2>arbiterVLSNTracker</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
            <color=#f92672>?</color> <color=#f8f8f2>ArbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>loadEmptyStats</color><color=#f8f8f2>()</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Add the tracker stats */</color>
    <color=#f8f8f2>arbStat</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>trackerStats</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>arbStat</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initialize</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>currentState</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>UNKNOWN</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>formatter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationFormatter</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>readyLatch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>channelFactory</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getChannelFactory</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>serviceDispatcher</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ServiceDispatcher</color><color=#f8f8f2>(</color><color=#f8f8f2>getSocket</color><color=#f8f8f2>(),</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>masterStatus</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>changeListener</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterChangeListener</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>File</color> <color=#f8f8f2>dataFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>arbiterHome</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separator</color> <color=#f92672>+</color> <color=#f8f8f2>DATA_FILE_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>arbiterVLSNTracker</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArbiterVLSNTracker</color><color=#f8f8f2>(</color><color=#f8f8f2>dataFile</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>suggestionGenerator</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterSuggestionGenerator</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>getCachedNodeId</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_NODE_ID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>getCachedNodeId</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>groupName</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHelperSockets</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>monitorEventManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MonitorEventManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>runArbiter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>elections</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Elections</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ArbElectionsConfig</color><color=#f8f8f2>(),</color> <color=#f8f8f2>changeListener</color><color=#f8f8f2>,</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>startLearner</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>startAcceptor</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>repGroupAdmin</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationGroupAdmin</color><color=#f8f8f2>(</color><color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>timer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Timer</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>channelTimeoutTask</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChannelTimeoutTask</color><color=#f8f8f2>(</color><color=#f8f8f2>timer</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>utilityServicesStart</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>start</color><color=#f8f8f2>();</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_UNKNOWN_STATE_TIMEOUT</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Wait for ArbiterAcker to establish connection to master if there</color>
<color=#75715e>       * is one, or timeout and return, if we could not find one in the</color>
<color=#75715e>       * ENV_UNKNOWN_STATE_TIMEOUT period.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>getReadyLatch</color><color=#f8f8f2>().</color><color=#a6e22e>awaitOrException</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Arbiter started in "</color> <color=#f92672>+</color> <color=#f8f8f2>currentState</color> <color=#f92672>+</color> <color=#e6db74>" state."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Set to indicate an error-initiated shutdown. */</color>
    <color=#f8f8f2>Error</color> <color=#f8f8f2>repNodeError</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>queryGroupForMembership</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>sync</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>arbiterAcker</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArbiterAcker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>arbiterAcker</color><color=#f8f8f2>.</color><color=#a6e22e>runArbiterAckLoop</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Arbiter main thread interrupted - "</color> <color=#f92672>+</color> <color=#e6db74>" forced shutdown."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>GroupShutdownException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Arbiter main thread sees group shutdown - "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InsufficientLogException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Arbiter main thread sees runtime ex - "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color> <color=#f92672>+</color> <color=#e6db74>" incurred during arbiter loop"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>repNodeError</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Arbiter main thread shutting down."</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNodeError</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Node state at shutdown:\n"</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>repNodeError</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Throwable</color> <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#f8f8f2>getSavedShutdownException</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Node state at shutdown:\n"</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Arbiter shutdown exception:\n"</color> <color=#f92672>+</color> <color=#f8f8f2>exception</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>chainExceptionCause</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#f8f8f2>exception</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Unexpected exception during shutdown"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>DETACHED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>cleanup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>getArbState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>currentState</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the shut down reason for this node. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LeaveReason</color> <color=#a6e22e>getLeaveReason</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LeaveReason</color> <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>Exception</color> <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#f8f8f2>getSavedShutdownException</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#f8f8f2>LeaveReason</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL_SHUTDOWN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>GroupShutdownException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#f8f8f2>LeaveReason</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER_SHUTDOWN_GROUP</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#f8f8f2>LeaveReason</color><color=#f8f8f2>.</color><color=#a6e22e>ABNORMAL_TERMINATION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>reason</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the current master name if it exists. */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>getMasterName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_NODE_ID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>String</color> <color=#a6e22e>getNodeName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>RepGroupImpl</color> <color=#a6e22e>getGroup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cachedRepGroupImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Elections</color> <color=#a6e22e>getElections</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>elections</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>currentState</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeState</color><color=#f8f8f2>().</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>utilityServicesStart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Register the node state querying service. */</color>
    <color=#f8f8f2>nodeStateService</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArbiterNodeStateService</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeStateService</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>binaryStateService</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArbBinaryStateService</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>utilityServicesShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binaryStateService</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>binaryStateService</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Error shutting down binaryStateService "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeStateService</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>NodeStateService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Error canceling serviceDispatch "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>changed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>monitorEventManager</color><color=#f8f8f2>.</color><color=#a6e22e>notifyLeaveGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>getLeaveReason</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Error shutting down monitor event manager "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>utilityServicesShutdown</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiterAcker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>arbiterAcker</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Error shutting down ArbiterAcker "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>elections</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Error shutting down elections "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceDispatcher</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color> <color=#f92672>+</color> <color=#e6db74>" shutdown completed."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>setGroupMaster</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>readyLatch</color><color=#f8f8f2>.</color><color=#a6e22e>releaseAwait</color><color=#f8f8f2>(</color><color=#f8f8f2>getSavedShutdownException</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#75715e>/* Cancel the TimerTasks. */</color>
    <color=#f8f8f2>channelTimeoutTask</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>timer</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>getNodeState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>currentState</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>String</color> <color=#a6e22e>getGroupName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>RepImpl</color> <color=#a6e22e>getRepImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>refreshHelperHosts</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helpers</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHelperSockets</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cachedRepGroupImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>helpers</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>cachedRepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getAllHelperSockets</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>helpers</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repGroupAdmin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repGroupAdmin</color><color=#f8f8f2>.</color><color=#a6e22e>setHelperSockets</color><color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>RepGroupImpl</color> <color=#a6e22e>refreshCachedGroup</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>repGroupImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>repGroupImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repGroupAdmin</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>().</color><color=#a6e22e>getRepGroupImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>updateRepGroupOnly</color><color=#f8f8f2>(</color><color=#f8f8f2>repGroupImpl</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>repGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>writeNodeId</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helpers</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHelperSockets</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>helpers</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>repGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getAllHelperSockets</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>helpers</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>cachedRepGroupImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repGroupImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cachedRepGroupImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>updateNameIdPair</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>notifyJoinGroup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>joinGroupTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>monitorEventManager</color><color=#f8f8f2>.</color><color=#a6e22e>notifyJoinGroup</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getJoinGroupTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>joinGroupTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Communicates with existing nodes in the group in order figure out who is the master. In the</color>
<color=#75715e>   * case where the local node does not appear to be in the (local copy of the) GroupDB, typically</color>
<color=#75715e>   * because the node is starting up with an empty env directory. It could be that this is a new</color>
<color=#75715e>   * node (never before been part of the group). Or it could be a pre-existing group member that has</color>
<color=#75715e>   * lost its env dir contents and wants to be restored via a Network Restore operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We query the designated helpers for the Master information. The helpers are the ones that</color>
<color=#75715e>   * were identified via the node's configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Returns normally when the master is found.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InterruptedException if the current thread is interrupted, typically due to a shutdown</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>queryGroupForMembership</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkLoopbackAddresses</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Need a helper to add a new node into the group"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getLearner</color><color=#f8f8f2>().</color><color=#a6e22e>queryForMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>groupMasterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* A new, or pre-query, group master. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Residual obsolete information in replicas, ignore it.</color>
<color=#75715e>           * Can't be master if we don't know our own id, but some</color>
<color=#75715e>           * other node does! This state means that the node was a</color>
<color=#75715e>           * master in the recent past, but has had its environment</color>
<color=#75715e>           * deleted since that time.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#f8f8f2>MASTER_QUERY_INTERVAL</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkGroupMasterIsAlive</color><color=#f8f8f2>(</color><color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Use the current group master if it's alive. */</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>(</color><color=#e6db74>"Arbiter node shutting down."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#f8f8f2>MASTER_QUERY_INTERVAL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"New node "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" located master: "</color> <color=#f92672>+</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>ArbiterVLSNTracker</color> <color=#a6e22e>getArbiterVLSNTracker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the node has been shutdown or if the underlying environment has been</color>
<color=#75715e>   * invalidated. It's used as the basis for exiting the FeederManager or the Replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdownOrInvalid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>wasInvalidated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInvalidatingException</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkLoopbackAddresses</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>InetAddress</color> <color=#f8f8f2>myAddress</color> <color=#f92672>=</color> <color=#f8f8f2>getSocket</color><color=#f8f8f2>().</color><color=#a6e22e>getAddress</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isLoopback</color> <color=#f92672>=</color> <color=#f8f8f2>myAddress</color><color=#f8f8f2>.</color><color=#a6e22e>isLoopbackAddress</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>socketAddress</color> <color=#f8f8f2>:</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InetAddress</color> <color=#f8f8f2>nodeAddress</color> <color=#f92672>=</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getAddress</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeAddress</color><color=#f8f8f2>.</color><color=#a6e22e>isLoopbackAddress</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>isLoopback</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
          <color=#f8f8f2>getSocket</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" the address associated with this node, "</color>
              <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>isLoopback</color> <color=#f92672>?</color> <color=#e6db74>"is "</color> <color=#f8f8f2>:</color> <color=#e6db74>"is not "</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>"a loopback address."</color>
              <color=#f92672>+</color> <color=#e6db74>" It conflicts with an existing use, by a different node "</color>
              <color=#f92672>+</color> <color=#e6db74>" of the address:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color>
              <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isLoopback</color>
                  <color=#f92672>?</color> <color=#e6db74>" which is a loopback address."</color>
                  <color=#f8f8f2>:</color> <color=#e6db74>" which is not a loopback address."</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" Such mixing of addresses within a group is not allowed, "</color>
              <color=#f92672>+</color> <color=#e6db74>"since the nodes will not be able to communicate with "</color>
              <color=#f92672>+</color> <color=#e6db74>"each other."</color><color=#f8f8f2>;</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Check that the master found by querying other group nodes is indeed alive and that we are not</color>
<color=#75715e>   * dealing with obsolete cached information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the master node could be contacted and was truly alive</color>
<color=#75715e>   *     <p>TODO: handle protocol version mismatch here and in DbPing, also consolidate code so that</color>
<color=#75715e>   *     a single copy is shared.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkGroupMasterIsAlive</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>masterSocket</color> <color=#f92672>=</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMaster</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>BinaryNodeStateProtocol</color> <color=#f8f8f2>protocol</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>BinaryNodeStateProtocol</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NOCHECK</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Build the connection. Set the parameter connectTimeout.*/</color>
      <color=#f8f8f2>channel</color> <color=#f92672>=</color>
          <color=#f8f8f2>repImpl</color>
              <color=#f8f8f2>.</color><color=#a6e22e>getChannelFactory</color><color=#f8f8f2>()</color>
              <color=#f8f8f2>.</color><color=#a6e22e>connect</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>masterSocket</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>new</color> <color=#f8f8f2>ConnectOptions</color><color=#f8f8f2>()</color>
                      <color=#f8f8f2>.</color><color=#a6e22e>setTcpNoDelay</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color>
                      <color=#f8f8f2>.</color><color=#a6e22e>setOpenTimeout</color><color=#f8f8f2>(</color><color=#ae81ff>5000</color><color=#f8f8f2>)</color>
                      <color=#f8f8f2>.</color><color=#a6e22e>setReadTimeout</color><color=#f8f8f2>(</color><color=#ae81ff>5000</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>ServiceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>doServiceHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>BinaryNodeStateService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>);</color>
      <color=#75715e>/* Send a NodeState request to the node. */</color>
      <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>protocol</color>
          <color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#f8f8f2>BinaryNodeStateRequest</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>)),</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
      <color=#75715e>/* Get the response and return the NodeState. */</color>
      <color=#f8f8f2>BinaryNodeStateResponse</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>BinaryNodeStateResponse</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeState</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>state</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Queried master:"</color> <color=#f92672>+</color> <color=#f8f8f2>groupMasterNameId</color> <color=#f92672>+</color> <color=#e6db74>" unavailable. Reason:"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Ignore it */</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getSocket</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>getHostName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getPort</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getNameIdPair</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>MasterStatus</color> <color=#a6e22e>getMasterStatus</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>ChannelTimeoutTask</color> <color=#a6e22e>getChannelTimeoutTask</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>channelTimeoutTask</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color> <color=#a6e22e>getReadyLatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readyLatch</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resetReadyLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ExceptionAwareCountDownLatch</color> <color=#f8f8f2>old</color> <color=#f92672>=</color> <color=#f8f8f2>readyLatch</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>readyLatch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>old</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* releasing latch in some error situation. */</color>
      <color=#f8f8f2>old</color><color=#f8f8f2>.</color><color=#a6e22e>releaseAwait</color><color=#f8f8f2>(</color><color=#f8f8f2>exception</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the hostname associated with this node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the hostname</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getHostName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>hostAndPort</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>NODE_HOST_PORT</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>colonToken</color> <color=#f92672>=</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>":"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>colonToken</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>colonToken</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the port used by the replication node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the port number</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>hostAndPort</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>NODE_HOST_PORT</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>colonToken</color> <color=#f92672>=</color> <color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>":"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>colonToken</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
        <color=#f92672>?</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>hostAndPort</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>colonToken</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_PORT</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The Listener used to learn about new Masters */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>MasterChangeListener</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Learner</color><color=#f8f8f2>.</color><color=#a6e22e>Listener</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* The current learned value. */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>MasterValue</color> <color=#f8f8f2>currentValue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/** Implements the Listener protocol. */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Value</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* We have a winning new proposal, is it truly different? */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>currentValue</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>currentValue</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>currentMasterName</color> <color=#f92672>=</color> <color=#f8f8f2>currentValue</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>,</color> <color=#e6db74>"Arbiter notified of new Master: "</color> <color=#f92672>+</color> <color=#f8f8f2>currentMasterName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>setGroupMaster</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>currentValue</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>currentValue</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>(),</color> <color=#f8f8f2>currentValue</color><color=#f8f8f2>.</color><color=#a6e22e>getNameId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>formatter</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>SEVERE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Arbiter change event processing exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>ArbElectionsConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ElectionsConfig</color> <color=#f8f8f2>{</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getGroupName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getNameIdPair</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getElectionPriority</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_VALUE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>RepImpl</color> <color=#a6e22e>getRepImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>RepNode</color> <color=#a6e22e>getRepNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>MasterSuggestionGenerator</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Acceptor</color><color=#f8f8f2>.</color><color=#a6e22e>SuggestionGenerator</color> <color=#f8f8f2>{</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Value</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterValue</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>getPort</color><color=#f8f8f2>(),</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Ranking</color> <color=#a6e22e>getRanking</color><color=#f8f8f2>(</color><color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Ranking</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>getDTVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>getSequence</color><color=#f8f8f2>(),</color> <color=#f8f8f2>arbiterVLSNTracker</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>().</color><color=#a6e22e>getSequence</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>