<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>

<color=#75715e>/** A Lock embodies the lock state of an LSN. It includes a set of owners and a list of waiters. */</color>
<color=#66d9ef>interface</color> <color=#a6e22e>Lock</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Get a list of waiters for debugging and error messages. */</color>
  <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getWaitersListClone</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Remove this locker from the waiter list. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>flushWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Get a new Set of the owners. */</color>
  <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getOwnersClone</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return true if locker is an owner of this Lock for lockType, false otherwise.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is only used by unit tests.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Return true if locker is an owner of this Lock and this is a write lock. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isOwnedWriteLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Returns the LockType if the given locker owns this lock, or null if the lock is not owned. */</color>
  <color=#f8f8f2>LockType</color> <color=#a6e22e>getOwnedLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return true if locker is a waiter on this Lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is only used by unit tests.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>

  <color=#66d9ef>int</color> <color=#a6e22e>nWaiters</color><color=#f8f8f2>();</color>

  <color=#66d9ef>int</color> <color=#a6e22e>nOwners</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Attempts to acquire the lock and returns the LockGrantType.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Assumes we hold the lockTableLatch when entering this method.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>LockAttemptResult</color> <color=#a6e22e>lock</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestType</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>,</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Releases a lock and moves the next waiter(s) to the owners.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return - null if we were not the owner, - a non-empty set if owners should be notified after</color>
<color=#75715e>   *     releasing, - an empty set if no notification is required.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color> <color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes all owners except for the given owner, and sets the Preempted property on the removed</color>
<color=#75715e>   * owners.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>stealLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Downgrade a write lock to a read lock. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>demote</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the locker that has a write ownership on this lock. If no write owner exists, return</color>
<color=#75715e>   * null.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Locker</color> <color=#a6e22e>getWriteOwnerLocker</color><color=#f8f8f2>();</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isThin</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Debug dumper. */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>