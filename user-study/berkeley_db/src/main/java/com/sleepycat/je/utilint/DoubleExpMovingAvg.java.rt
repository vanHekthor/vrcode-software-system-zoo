<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ObjectOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.DecimalFormat</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A double JE stat component generated from an exponential moving average over a specified time</color>
<color=#75715e> * period of values supplied with associated times, to support averaging values that are generated</color>
<color=#75715e> * at irregular intervals.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DoubleExpMovingAvg</color> <color=#66d9ef>extends</color> <color=#f8f8f2>MapStatComponent</color><color=#f92672><</color><color=#f8f8f2>Double</color><color=#f8f8f2>,</color> <color=#f8f8f2>DoubleExpMovingAvg</color><color=#f92672>></color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number format for output. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DecimalFormat</color> <color=#f8f8f2>FORMAT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DecimalFormat</color><color=#f8f8f2>(</color><color=#e6db74>"###,###,###,###,###,###,###.##"</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The name of this stat. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The averaging period in milliseconds. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>periodMillis</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The time in milliseconds specified with the previous value, or 0 if no values have been</color>
<color=#75715e>   * provided. Synchronize on this instance when accessing this field.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>prevTime</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The current average, or 0 if no values have been provided. Synchronize on this instance when</color>
<color=#75715e>   * accessing this field.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>double</color> <color=#f8f8f2>avg</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an instance of this class. The {@code periodMillis} represents the time period in</color>
<color=#75715e>   * milliseconds over which values will be averaged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the name of this stat</color>
<color=#75715e>   * @param periodMillis the averaging period in milliseconds</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DoubleExpMovingAvg</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>periodMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>name</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>periodMillis</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>periodMillis</color> <color=#f92672>=</color> <color=#f8f8f2>periodMillis</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an instance of this class as a copy of another instance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param other the other instance to copy</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DoubleExpMovingAvg</color><color=#f8f8f2>(</color><color=#f8f8f2>DoubleExpMovingAvg</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>periodMillis</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>periodMillis</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>prevTime</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>prevTime</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>avg</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>avg</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the name of this stat.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the name of this stat</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a new value to the average, ignoring values that are not newer than time of the previous</color>
<color=#75715e>   * call.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the new value</color>
<color=#75715e>   * @param time the current time in milliseconds</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>time</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>time</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>time</color> <color=#f92672><=</color> <color=#f8f8f2>prevTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prevTime</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>avg</color> <color=#f92672>=</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Compute the exponential moving average, as described in:</color>
<color=#75715e>       * http://en.wikipedia.org/wiki/</color>
<color=#75715e>       *   Moving_average#Application_to_measuring_computer_performance</color>
<color=#75715e>       */</color>
      <color=#66d9ef>double</color> <color=#f8f8f2>m</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>exp</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>((</color><color=#f8f8f2>time</color> <color=#f92672>-</color> <color=#f8f8f2>prevTime</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>((</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>periodMillis</color><color=#f8f8f2>)));</color>
      <color=#f8f8f2>avg</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>m</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>m</color> <color=#f92672>*</color> <color=#f8f8f2>avg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>prevTime</color> <color=#f92672>=</color> <color=#f8f8f2>time</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Add the values from another average.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param other the other average</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>DoubleExpMovingAvg</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>otherValue</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>otherTime</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>isNotSet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>otherValue</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>avg</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>otherTime</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>prevTime</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>add</color><color=#f8f8f2>(</color><color=#f8f8f2>otherValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>otherTime</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the current average as a primitive value. */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>double</color> <color=#a6e22e>getPrimitive</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>avg</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the current average, or 0 if no values have been added. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Double</color> <color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getPrimitive</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>prevTime</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>avg</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DoubleExpMovingAvg</color> <color=#a6e22e>copy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DoubleExpMovingAvg</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFormattedValue</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>useCommas</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isNotSet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"unknown"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>isNaN</color><color=#f8f8f2>(</color><color=#f8f8f2>avg</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"NaN"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useCommas</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>avg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"%.2f"</color><color=#f8f8f2>,</color> <color=#f8f8f2>avg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNotSet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>prevTime</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"DoubleExpMovingAvg[name="</color>
        <color=#f92672>+</color> <color=#f8f8f2>name</color>
        <color=#f92672>+</color> <color=#e6db74>", avg="</color>
        <color=#f92672>+</color> <color=#f8f8f2>avg</color>
        <color=#f92672>+</color> <color=#e6db74>", prevTime="</color>
        <color=#f92672>+</color> <color=#f8f8f2>prevTime</color>
        <color=#f92672>+</color> <color=#e6db74>", periodMillis="</color>
        <color=#f92672>+</color> <color=#f8f8f2>periodMillis</color>
        <color=#f92672>+</color> <color=#e6db74>"]"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Synchronize access to fields. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>readObject</color><color=#f8f8f2>(</color><color=#f8f8f2>ObjectInputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>defaultReadObject</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Synchronize access to fields. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>writeObject</color><color=#f8f8f2>(</color><color=#f8f8f2>ObjectOutputStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>defaultWriteObject</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>