<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.stream</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseId</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LNLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.ReplicableLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.SingleItemEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.NameLN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.TxnCommit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.TxnEnd</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Format for log entries sent across the wire for replication. In most cases, the bytes are read</color>
<color=#75715e> * directly from the log and never need to be serialized into the backing object.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the ByteBuffer held within the OutputWireRecord has a limited lifetime. Often it's</color>
<color=#75715e> * just sliced, rather than copied from the underlying buffer.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>OutputWireRecord</color> <color=#66d9ef>extends</color> <color=#f8f8f2>WireRecord</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>;</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogItem</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A shared entry of the type specified by the header, or null */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ReplicableLogEntry</color> <color=#f8f8f2>sharedEntry</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A log entry created from the data in the entry buffer, or null */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ReplicableLogEntry</color> <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Whether the log entry will be re-serialized, or null if unknown. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Boolean</color> <color=#f8f8f2>reserialize</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Size of re-serialized log entry, or -1 if reserialize != true. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>reSerializedSize</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Whether an old log format must be used, or null if unknown. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Boolean</color> <color=#f8f8f2>oldFormatRequired</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Make a OutputWireRecord from FileReader output for sending out. */</color>
  <color=#f8f8f2>OutputWireRecord</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>header</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>readerBuffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logItem</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>entryBuffer</color> <color=#f92672>=</color> <color=#f8f8f2>readerBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>slice</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an OutputWireRecord from a log item. This constructor is used when a Feeder can bypass</color>
<color=#75715e>   * access to the log because the log item is available in the log item cache associated with the</color>
<color=#75715e>   * VLSNIndex.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OutputWireRecord</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogItem</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>logItem</color><color=#f8f8f2>.</color><color=#a6e22e>header</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logItem</color> <color=#f92672>=</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>entryBuffer</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>slice</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>:</color> <color=#e6db74>"Limit:"</color> <color=#f92672>+</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" size:"</color> <color=#f92672>+</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit test support. */</color>
  <color=#f8f8f2>OutputWireRecord</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>InputWireRecord</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>header</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logItem</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getLogEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>entryBuffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>writeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the shared replicable log entry associated with the log entry header. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>ReplicableLogEntry</color> <color=#a6e22e>getSharedEntry</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedEntry</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>entryType</color> <color=#f92672>=</color> <color=#f8f8f2>getLogEntryType</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>entryType</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicationPossible</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Log entry type does not support replication: "</color> <color=#f92672>+</color> <color=#f8f8f2>entryType</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sharedEntry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicableLogEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>entryType</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedLogEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sharedEntry</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a log entry corresponding to the entry buffer. Note that the log entry will only be</color>
<color=#75715e>   * created once, at most.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When a LogItem from the LogItemCache was used to construct this record, we cache the</color>
<color=#75715e>   * materialized entry in LogItem to try to avoid redundant materialization in multiple feeders.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>ReplicableLogEntry</color> <color=#a6e22e>instantiateEntry</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logItem</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>.</color><color=#a6e22e>cachedEntry</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ReplicableLogEntry</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Log entry type does not support replication: "</color> <color=#f92672>+</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicableLogEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logItem</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logItem</color><color=#f8f8f2>.</color><color=#a6e22e>cachedEntry</color> <color=#f92672>=</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the log entry type for this record. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>byte</color> <color=#a6e22e>getEntryType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used at syncup, when comparing records received from the feeder against local records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if this OutputWireRecord has the same logical contents as the InputWireRecord. The</color>
<color=#75715e>   *     comparison will disregard portions of the logEntry that may be different, such at</color>
<color=#75715e>   *     timestamps on a Commit entry. Must be called before the entryBuffer that backs this</color>
<color=#75715e>   *     OutputWireRecord is reused.</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>match</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputWireRecord</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Ignore the log version check if the log versions on the feeder and</color>
<color=#75715e>     * replica don't match. This would happen if the group is doing an</color>
<color=#75715e>     * upgrade that requires a log version change.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>logicalEqualsIgnoreVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>header</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>logicalEquals</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getLogEntry</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For unit tests.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if this OutputWireRecord has the same logical contents as "other".</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>match</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>OutputWireRecord</color> <color=#f8f8f2>otherRecord</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>logicalEqualsIgnoreVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>otherRecord</color><color=#f8f8f2>.</color><color=#a6e22e>header</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>otherEntry</color> <color=#f92672>=</color> <color=#f8f8f2>otherRecord</color><color=#f8f8f2>.</color><color=#a6e22e>instantiateEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>otherRecord</color><color=#f8f8f2>.</color><color=#a6e22e>entryBuffer</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>logicalEquals</color><color=#f8f8f2>(</color><color=#f8f8f2>otherEntry</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns lsn if this entry was created from the log item cache, and NULL_LSN otherwise. */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>getLogItemLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>logItem</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>logItem</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Dump the contents.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dump</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>dumpRep</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>dumpRep</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dump</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes needed to represent the message data for this record for the</color>
<color=#75715e>   * specified log version.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getWireSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>+</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_SIZE</color> <color=#f92672>+</color> <color=#f8f8f2>getEntrySize</color><color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes needed to represent the entry portion of the message data for this</color>
<color=#75715e>   * record for the specified log version.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getEntrySize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>willReSerialize</color><color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>reSerializedSize</color> <color=#f8f8f2>:</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the log entry will be re-serialized when written, due to a required format</color>
<color=#75715e>   * change or because an optimized replication format should be used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method caches its result, so that it can be called twice (from getEntrySize and</color>
<color=#75715e>   * writeToWire) and will not repeat the calculation or return different results. If true is</color>
<color=#75715e>   * returned, reSerializedSize will also be set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>willReSerialize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reserialize</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>reserialize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Before version 8, duplicates LN format conversion is necessary</color>
<color=#75715e>       * and we don't have the DatabaseImpl needed to do that, so we</color>
<color=#75715e>       * cannot convert to a later version. Conversion to an earlier</color>
<color=#75715e>       * version is not needed, because we can only convert to versions</color>
<color=#75715e>       * greater than 8. So re-serialization is not possible or needed.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>reserialize</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOldFormatRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Re-serialization is mandatory. */</color>
      <color=#f8f8f2>reserialize</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Determine whether re-serialization is worthwhile. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If we have the entry, then using the optimized replication</color>
<color=#75715e>         * format is worthwhile simply if the entry has an optimized</color>
<color=#75715e>         * format and its size is smaller, since the cost of</color>
<color=#75715e>         * re-serialization is fairly low.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>hasReplicationFormat</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*forReplication*/</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>reserialize</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>newSize</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>reserialize</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If we must materialize the entry in order to re-serialize</color>
<color=#75715e>         * it, then we must make a best guess about whether this is</color>
<color=#75715e>         * worthwhile by examining the entry in serialized format.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>reserialize</color> <color=#f92672>=</color>
            <color=#f8f8f2>getSharedEntry</color><color=#f8f8f2>()</color>
                <color=#f8f8f2>.</color><color=#a6e22e>isReplicationFormatWorthwhile</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>(),</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reserialize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newSize</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>().</color><color=#a6e22e>getSize</color><color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*forReplication*/</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>reSerializedSize</color> <color=#f92672>=</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>reserialize</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>reserialize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the format of the entry needs to be changed in order to be read by a replica</color>
<color=#75715e>   * that only understands versions no later than {@code logVersion}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOldFormatRequired</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldFormatRequired</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>oldFormatRequired</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>oldFormatRequired</color> <color=#f92672>=</color>
        <color=#75715e>/* The requested version is older than the current version, */</color>
        <color=#f8f8f2>logVersion</color> <color=#f92672><</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color>
            <color=#f92672>&&</color>
            <color=#75715e>/* it is older than the entry version, */</color>
            <color=#f8f8f2>logVersion</color> <color=#f92672><</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>()</color>
            <color=#f92672>&&</color>
            <color=#75715e>/* and it is older than the entry class's last format change */</color>
            <color=#f8f8f2>logVersion</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#f8f8f2>getSharedEntry</color><color=#f8f8f2>().</color><color=#a6e22e>getLastFormatChange</color><color=#f8f8f2>());</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>oldFormatRequired</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Write the log header and entry associated with this instance to the specified buffer using the</color>
<color=#75715e>   * format for the specified log version.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param messageBuffer the destination buffer</color>
<color=#75715e>   * @param logVersion the log version of the format</color>
<color=#75715e>   * @return whether the data format was changed to support an old version.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>writeToWire</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>messageBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>willReSerialize</color><color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReplicableLogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>reSerializedSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>getSequence</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>mark</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>writeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*forReplication*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVersion</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>messageBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>getSequence</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>mark</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>messageBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>entryBuffer</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>entryBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isOldFormatRequired</color><color=#f8f8f2>(</color><color=#f8f8f2>logVersion</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Returns the transaction id associated with a commit log entry.</color>
<color=#75715e>   * @return the transaction id, if it's a commit record, zero otherwise.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCommitTxnId</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_COMMIT</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>commitEntry</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>commitEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactionId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the timestamp associated with a commit log entry, or 0.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the commit timestamp or 0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCommitTimeStamp</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_COMMIT</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>TxnCommit</color> <color=#f8f8f2>txnCommit</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>TxnCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>().</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnCommit</color><color=#f8f8f2>.</color><color=#a6e22e>getTime</color><color=#f8f8f2>().</color><color=#a6e22e>getTime</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Returns the timestamp associated with transaction ending log entry, or</color>
<color=#75715e>   * zero if doesn't end a transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the timestamp or zero</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTimeStamp</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use the shared log entry to determine the class of the loggable to</color>
<color=#75715e>     * see if it is worth instantiating it to get the timestamp</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>sharedLogEntry</color> <color=#f92672>=</color> <color=#f8f8f2>getLogEntryType</color><color=#f8f8f2>().</color><color=#a6e22e>getSharedLogEntry</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedLogEntry</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SingleItemEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Loggable</color><color=#f92672>></color> <color=#f8f8f2>logClass</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>SingleItemEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>sharedLogEntry</color><color=#f8f8f2>).</color><color=#a6e22e>getLogClass</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>TxnEnd</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>logClass</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>TxnEnd</color> <color=#f8f8f2>txnEnd</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>TxnEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>().</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>txnEnd</color><color=#f8f8f2>.</color><color=#a6e22e>getTime</color><color=#f8f8f2>().</color><color=#a6e22e>getTime</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the ID of the database containing the associated entry if it is a replicable entry.</color>
<color=#75715e>   * Returns null for non-replicable entries and for entries not associated with a database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the database ID or null</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseId</color> <color=#a6e22e>getReplicableDBId</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>logEntryType</color> <color=#f92672>=</color> <color=#f8f8f2>getLogEntryType</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Return null for non-replicable entries */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>logEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicationPossible</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * LN entries are the only replicable log entries associated with a</color>
<color=#75715e>     * database</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>logEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>isLNType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>().</color><color=#a6e22e>getDbId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Unit test and assertion support: Transaction, database and node IDs in</color>
<color=#75715e>   * the replication sequences are supposed to occupy the negative</color>
<color=#75715e>   * numberspace.</color>
<color=#75715e>   *</color>
<color=#75715e>   * It seems a little fragile to test this here, using instanceof to decide</color>
<color=#75715e>   * what to test. It would be cleaner to put this validity check as part of</color>
<color=#75715e>   * the implementation of a log entry. But this is a HA related check, and</color>
<color=#75715e>   * we want to keep the core code as independent as possible. The check is</color>
<color=#75715e>   * here rather than in some other test code because it needs to access the</color>
<color=#75715e>   * deserialized log entry. We don't want to provide a method which returns</color>
<color=#75715e>   * a logEntry, because in general an OutputWireRecord should not</color>
<color=#75715e>   * instantiate the log entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws RuntimeException if there are any sequences that are not</color>
<color=#75715e>   * negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>verifyNegativeSequences</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>debugTag</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>instantiateEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactionId</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>debugTag</color> <color=#f92672>+</color> <color=#e6db74>" txn id should be negative: "</color> <color=#f92672>+</color> <color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LNLogEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_NAMELN_TRANSACTIONAL</color><color=#f8f8f2>.</color><color=#a6e22e>equalsType</color><color=#f8f8f2>(</color><color=#f8f8f2>getEntryType</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color> <color=#f8f8f2>lnEntry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*isDupDb*/</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>NameLN</color> <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>NameLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>lnEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getLN</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>debugTag</color> <color=#f92672>+</color> <color=#e6db74>" db id should be negative: "</color> <color=#f92672>+</color> <color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getDbId</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>debugTag</color> <color=#f92672>+</color> <color=#e6db74>" db id should be negative: "</color> <color=#f92672>+</color> <color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>