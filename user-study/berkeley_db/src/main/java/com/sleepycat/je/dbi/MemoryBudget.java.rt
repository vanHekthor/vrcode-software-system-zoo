<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.bind.tuple.TupleOutput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentMutableConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.IN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.JVMSystemUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LongStat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.management.ManagementFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicLong</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbiStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * MemoryBudget calculates the available memory for JE and how to apportion it between cache and log</color>
<color=#75715e> * buffers. It is meant to centralize all memory calculations. Objects that ask for memory budgets</color>
<color=#75715e> * should get settings from this class, rather than using the configuration parameter values</color>
<color=#75715e> * directly.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>MemoryBudget</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EnvConfigObserver</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * CLEANUP_DONE can be set to false for unit test debugging</color>
<color=#75715e>   * that is still in progress. When we do the final regression,</color>
<color=#75715e>   * this should be removed to be assured that it is never false.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>CLEANUP_DONE</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * These DEBUG variables are public so unit tests can easily turn them</color>
<color=#75715e>   * on and off for different sections of code.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_ADMIN</color> <color=#f92672>=</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#e6db74>"memAdmin"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_LOCK</color> <color=#f92672>=</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#e6db74>"memLock"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_TXN</color> <color=#f92672>=</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#e6db74>"memTxn"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_TREEADMIN</color> <color=#f92672>=</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#e6db74>"memTreeAdmin"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_TREE</color> <color=#f92672>=</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#e6db74>"memTree"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG_DOS</color> <color=#f92672>=</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#e6db74>"memDOS"</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Object overheads. These are set statically with advance measurements.</color>
<color=#75715e>   * Java doesn't provide a way of assessing object size dynamically. These</color>
<color=#75715e>   * overheads will not be precise, but are close enough to let the system</color>
<color=#75715e>   * behave predictably.</color>
<color=#75715e>   *</color>
<color=#75715e>   * _32 values are the same on Windows and Solaris.</color>
<color=#75715e>   * _64 values are from Linux (were previously 1.5.0_05 on Solaris).</color>
<color=#75715e>   * _OOPS are on a 64b JVM with -XX:+UseCompressedOops</color>
<color=#75715e>   *</color>
<color=#75715e>   * The integer following the // below is the Sizeof argument used to</color>
<color=#75715e>   * compute the value.</color>
<color=#75715e>   */</color>

  <color=#75715e>// 7</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LONG_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LONG_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LONG_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 8</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>// see byteArraySize</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED_32</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED_64</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>// 2</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>// (4 - ARRAY_OVERHEAD) / 256</color>
  <color=#75715e>// 32b: 4 is 1040</color>
  <color=#75715e>// 64b: 4 is 2078</color>
  <color=#75715e>// Oops: 4 is 1040</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#75715e>// 20</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>120</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>219</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>

  <color=#75715e>// 21 - OBJECT_OVERHEAD - HASHMAP_OVERHEAD</color>
  <color=#75715e>// 32b: 21 is 152</color>
  <color=#75715e>// 64b: 21 is max(280,...,287) on Linux/Solaris 1.5/1.6</color>
  <color=#75715e>// Oops: 21 is 176</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>52</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

  <color=#75715e>// 22</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>136</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>240</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>144</color><color=#f8f8f2>;</color>

  <color=#75715e>// 23 - OBJECT_OVERHEAD - HASHSET_OVERHEAD</color>
  <color=#75715e>// 32b: 23 is 168</color>
  <color=#75715e>// 64b: 23 is max(304,...,311) on Linux/Solaris</color>
  <color=#75715e>// Oops: 23 is 192</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>55</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

  <color=#75715e>// HASHMAP_OVERHEAD * 2</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TWOHASHMAPS_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>240</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TWOHASHMAPS_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>438</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TWOHASHMAPS_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color>

  <color=#75715e>// 34</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>80</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>

  <color=#75715e>// 35 - OBJECT_OVERHEAD - TREEMAP_OVERHEAD</color>
  <color=#75715e>// 32b: 35 is 88</color>
  <color=#75715e>// 64b: 35 is 160</color>
  <color=#75715e>// Oops: 35 is 104</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>

  <color=#75715e>// 36</color>
  <color=#75715e>// 32b JDK 1.7 is 928</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAPLN_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>920</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAPLN_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>1624</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAPLN_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>1016</color><color=#f8f8f2>;</color>

  <color=#75715e>// 9</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 17 minus 9</color>
  <color=#75715e>// 32b: 17 is 24</color>
  <color=#75715e>// 64b: 17 is 40</color>
  <color=#75715e>// Oops: 17 is 32</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VERSIONEDLN_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VERSIONEDLN_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VERSIONEDLN_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>// No longer updated, as dups are no longer used except during conversion.</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DUPCOUNTLN_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DUPCOUNTLN_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DUPCOUNTLN_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>

  <color=#75715e>// 12</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BIN_FIXED_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>223</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BIN_FIXED_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>352</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BIN_FIXED_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>232</color><color=#f8f8f2>;</color>

  <color=#75715e>// 18</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BINDELTA_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BINDELTA_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>72</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BINDELTA_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color>

  <color=#75715e>// 19</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINFO_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINFO_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINFO_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

  <color=#75715e>// 47</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>72</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>120</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>80</color><color=#f8f8f2>;</color>

  <color=#75715e>// 48</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>// 49</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 50</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>// 52</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 59</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 54</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DIN_FIXED_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>120</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DIN_FIXED_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>176</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DIN_FIXED_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>120</color><color=#f8f8f2>;</color>

  <color=#75715e>// 53</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBIN_FIXED_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>152</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBIN_FIXED_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>232</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBIN_FIXED_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>168</color><color=#f8f8f2>;</color>

  <color=#75715e>// 13</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_FIXED_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>248</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_FIXED_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>392</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_FIXED_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color>

  <color=#75715e>// 6</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>KEY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>KEY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>KEY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>// 24</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKIMPL_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKIMPL_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKIMPL_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

  <color=#75715e>// 42</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>THINLOCKIMPL_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>THINLOCKIMPL_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>THINLOCKIMPL_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 25</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKINFO_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKINFO_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKINFO_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 37</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>72</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>56</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Txn memory is the size for the Txn + a hashmap entry</color>
<color=#75715e>   * overhead for being part of the transaction table.</color>
<color=#75715e>   */</color>
  <color=#75715e>// 15</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TXN_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>224</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TXN_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>361</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TXN_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>240</color><color=#f8f8f2>;</color>

  <color=#75715e>// 26</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE_32</color> <color=#f92672>=</color> <color=#ae81ff>40</color> <color=#f92672>+</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE_64</color> <color=#f92672>=</color> <color=#ae81ff>56</color> <color=#f92672>+</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>48</color> <color=#f92672>+</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The per-log-file bytes used in UtilizationProfile. */</color>
  <color=#75715e>// 29 / 10.0 (That is the number 10, not the Sizeof type 10)</color>
  <color=#75715e>// 32b: 29 is 1088</color>
  <color=#75715e>// 64b: 29 is 1600</color>
  <color=#75715e>// Oops: 29 is 1248</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY_32</color> <color=#f92672>=</color> <color=#ae81ff>109</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY_64</color> <color=#f92672>=</color> <color=#ae81ff>160</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>125</color><color=#f8f8f2>;</color>

  <color=#75715e>// 38</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBFILESUMMARY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBFILESUMMARY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBFILESUMMARY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Tracked File Summary overheads. */</color>
  <color=#75715e>// 31</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>464</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>504</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>464</color><color=#f8f8f2>;</color>

  <color=#75715e>// 30</color>
  <color=#75715e>// 64b: 30 is max(464,464,464,465) on Linux/Solaris on 1.5/1.6</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>440</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>465</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>440</color><color=#f8f8f2>;</color>

  <color=#75715e>// 33</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_INFO_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_INFO_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_INFO_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>30</color><color=#f8f8f2>;</color>

  <color=#75715e>// 43</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILESUMMARYLN_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>112</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILESUMMARYLN_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>168</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILESUMMARYLN_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>

  <color=#75715e>// 51</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INENTRY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INENTRY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INENTRY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>// 46</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINENTRY_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINENTRY_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINENTRY_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

  <color=#75715e>// 55</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>72</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>48</color><color=#f8f8f2>;</color>

  <color=#75715e>// 56</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>40</color><color=#f8f8f2>;</color>

  <color=#75715e>// 57</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>88</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>88</color><color=#f8f8f2>;</color>

  <color=#75715e>// 58</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>// 27 minus zero length Object array</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EMPTY_OBJ_ARRAY</color> <color=#f92672>=</color> <color=#f8f8f2>objectArraySize</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAYLIST_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>40</color> <color=#f92672>-</color> <color=#f8f8f2>EMPTY_OBJ_ARRAY</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAYLIST_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>64</color> <color=#f92672>-</color> <color=#f8f8f2>EMPTY_OBJ_ARRAY</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAYLIST_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>40</color> <color=#f92672>-</color> <color=#f8f8f2>EMPTY_OBJ_ARRAY</color><color=#f8f8f2>;</color>

  <color=#75715e>// 44 minus 45</color>
  <color=#75715e>// 32b: 44 and 45 are 40 and 16, resp.</color>
  <color=#75715e>// 64b: 44 and 45 are 56 and 24, resp.</color>
  <color=#75715e>// Oops: 44 and 45 are 40 and 16, resp.</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD_32</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD_64</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD_OOPS</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LONG_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TWOHASHMAPS_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAPLN_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VERSIONEDLN_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DUPCOUNTLN_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BIN_FIXED_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BINDELTA_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINFO_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DIN_FIXED_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBIN_FIXED_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IN_FIXED_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>KEY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKIMPL_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>THINLOCKIMPL_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOCKINFO_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TXN_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DBFILESUMMARY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_INFO_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILESUMMARYLN_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DELTAINENTRY_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAYLIST_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Primitive long array item size is the same on all platforms. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>PRIMITIVE_LONG_ARRAY_ITEM_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>JVM_ARCH_PROPERTY</color> <color=#f92672>=</color> <color=#e6db74>"sun.arch.data.model"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FORCE_JVM_ARCH</color> <color=#f92672>=</color> <color=#e6db74>"je.forceJVMArch"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>COMPRESSED_OOPS_REQUESTED</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>COMPRESSED_OOPS_KNOWN</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>COMPRESSED_OOPS_KNOWN_ON</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>is64</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>overrideArch</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>FORCE_JVM_ARCH</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>overrideArch</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>arch</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>JVM_ARCH_PROPERTY</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>is64</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>arch</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>is64</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>overrideArch</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>NFE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>NFE</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Boolean</color> <color=#f8f8f2>checkCompressedOops</color> <color=#f92672>=</color> <color=#f8f8f2>CompressedOopsDetector</color><color=#f8f8f2>.</color><color=#a6e22e>isEnabled</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkCompressedOops</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>COMPRESSED_OOPS_KNOWN</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>COMPRESSED_OOPS_KNOWN_ON</color> <color=#f92672>=</color> <color=#f8f8f2>checkCompressedOops</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>args</color> <color=#f92672>=</color> <color=#f8f8f2>ManagementFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getRuntimeMXBean</color><color=#f8f8f2>().</color><color=#a6e22e>getInputArguments</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>arg</color> <color=#f8f8f2>:</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"-XX:+UseCompressedOops"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>arg</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>COMPRESSED_OOPS_REQUESTED</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useCompressedOops</color> <color=#f92672>=</color>
        <color=#f8f8f2>COMPRESSED_OOPS_KNOWN</color> <color=#f92672>?</color> <color=#f8f8f2>COMPRESSED_OOPS_KNOWN_ON</color> <color=#f8f8f2>:</color> <color=#f8f8f2>COMPRESSED_OOPS_REQUESTED</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useCompressedOops</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LONG_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LONG_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAY_SIZE_INCLUDED</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OBJECT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>OBJECT_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHSET_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHSET_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TREEMAP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TREEMAP_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>MAPLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>MAPLN_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>BIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>BIN_FIXED_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>BINDELTA_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>BINDELTA_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DELTAINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DELTAINFO_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DIN_FIXED_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DBIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DBIN_FIXED_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>IN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>IN_FIXED_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHMAP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHMAP_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TWOHASHMAPS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TWOHASHMAPS_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LN_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>VERSIONEDLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>VERSIONEDLN_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DUPCOUNTLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DUPCOUNTLN_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TXN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TXN_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE</color> <color=#f92672>=</color> <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>KEY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>KEY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LOCKIMPL_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>THINLOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>THINLOCKIMPL_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LOCKINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LOCKINFO_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY</color> <color=#f92672>=</color> <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DBFILESUMMARY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DBFILESUMMARY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LN_INFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LN_INFO_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>FILESUMMARYLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>FILESUMMARYLN_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>INENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>INENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DELTAINENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DELTAINENTRY_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAYLIST_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAYLIST_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD_OOPS</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>is64</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LONG_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LONG_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAY_SIZE_INCLUDED</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OBJECT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>OBJECT_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHSET_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHSET_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TREEMAP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TREEMAP_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>MAPLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>MAPLN_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>BIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>BIN_FIXED_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DIN_FIXED_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DBIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DBIN_FIXED_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>IN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>IN_FIXED_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHMAP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHMAP_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TWOHASHMAPS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TWOHASHMAPS_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>BINDELTA_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>BINDELTA_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DELTAINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DELTAINFO_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LN_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>VERSIONEDLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>VERSIONEDLN_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DUPCOUNTLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DUPCOUNTLN_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TXN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TXN_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE</color> <color=#f92672>=</color> <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>KEY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>KEY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LOCKIMPL_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>THINLOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>THINLOCKIMPL_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LOCKINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LOCKINFO_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY</color> <color=#f92672>=</color> <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DBFILESUMMARY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DBFILESUMMARY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LN_INFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LN_INFO_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>FILESUMMARYLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>FILESUMMARYLN_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>INENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>INENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DELTAINENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DELTAINENTRY_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAYLIST_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAYLIST_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD_64</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD_64</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LONG_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LONG_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAY_SIZE_INCLUDED</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OBJECT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>OBJECT_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHMAP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHMAP_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHMAP_ENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHSET_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHSET_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>HASHSET_ENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TWOHASHMAPS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TWOHASHMAPS_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TREEMAP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TREEMAP_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>MAPLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>MAPLN_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TREEMAP_ENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LN_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>VERSIONEDLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>VERSIONEDLN_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DUPCOUNTLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DUPCOUNTLN_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>BIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>BIN_FIXED_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>BINDELTA_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>BINDELTA_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DELTAINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DELTAINFO_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>SPARSE_TARGET_ENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_TARGET_ENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_KEYVALS_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>MAX_KEY_SIZE_KEYVALS_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_LONG_REP_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>SPARSE_LONG_REP_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DIN_FIXED_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DBIN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DBIN_FIXED_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>IN_FIXED_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>IN_FIXED_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TXN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TXN_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE</color> <color=#f92672>=</color> <color=#f8f8f2>CHECKPOINT_REFERENCE_SIZE_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>KEY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>KEY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LOCKIMPL_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>THINLOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>THINLOCKIMPL_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LOCKINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LOCKINFO_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>WRITE_LOCKINFO_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY</color> <color=#f92672>=</color> <color=#f8f8f2>UTILIZATION_PROFILE_ENTRY_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DBFILESUMMARY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DBFILESUMMARY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TFS_LIST_INITIAL_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TFS_LIST_SEGMENT_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LN_INFO_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>LN_INFO_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>FILESUMMARYLN_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>FILESUMMARYLN_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>INENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>INENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DELTAINENTRY_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DELTAINENTRY_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ARRAYLIST_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAYLIST_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_WEAK_BINREF_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_OFFHEAP_BINREF_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_DEFERRED_LSN_BATCH_OVERHEAD_32</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>DOS_DEFERRED_DELTAREF_OVERHEAD_32</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* public for unit tests. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>MIN_MAX_MEMORY_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>96</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MIN_MAX_MEMORY_SIZE_STRING</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>MIN_MAX_MEMORY_SIZE</color><color=#f8f8f2>);</color>

  <color=#75715e>/* This value prevents cache churn for apps with a high write rate. */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DEFAULT_MIN_BTREE_CACHE_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>500</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>N_64MB</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>26</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Note that this class contains long fields that are accessed by multiple</color>
<color=#75715e>   * threads.  Access to these fields is synchronized when changing them but</color>
<color=#75715e>   * not when reading them to detect cache overflow or get stats.  Although</color>
<color=#75715e>   * inaccuracies may occur when reading the values, correcting this is not</color>
<color=#75715e>   * worth the cost of synchronizing every time we access them.  The worst</color>
<color=#75715e>   * that can happen is that we may invoke eviction unnecessarily.</color>
<color=#75715e>   */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of memory cached for tree objects.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>treeMemoryUsage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of memory cached for disk ordered scans.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>dosMemoryUsage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of memory cached for txn usage.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>txnMemoryUsage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of memory cached for log cleaning, dirty IN list, and other admin</color>
<color=#75715e>   * functions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>adminMemoryUsage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of memory cached for admininstrative structures that are</color>
<color=#75715e>   * sometimes housed within tree nodes. Right now, that's</color>
<color=#75715e>   * DbFileSummaryMap, which is sometimes referenced by a MapLN by</color>
<color=#75715e>   * way of a DatabaseImpl, and sometimes is just referenced by</color>
<color=#75715e>   * a DatabaseImpl without a MapLN (the id and name databases.)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>treeAdminMemoryUsage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of memory cached for locks. Protected by the</color>
<color=#75715e>   * LockManager.lockTableLatches[lockTableIndex].</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>lockMemoryUsage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Memory available to JE, based on je.maxMemory and the memory available</color>
<color=#75715e>   * to this process.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Totals</color> <color=#f8f8f2>totals</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Memory available to log buffers. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>logBufferBudget</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Maximum allowed use of the admin budget by the UtilizationTracker. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>trackerBudget</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Mininum to prevent cache churn. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>minTreeMemoryUsage</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Request notification of mutable property changes. */</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>addConfigObserver</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Perform first time budget initialization. */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sharedCacheEnv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>totals</color> <color=#f92672>=</color> <color=#f8f8f2>sharedCacheEnv</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>totals</color><color=#f8f8f2>;</color>
        <color=#75715e>/* For a new environment, do not override existing budget. */</color>
        <color=#f8f8f2>newMaxMemory</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>totals</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SharedTotals</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>newMaxMemory</color> <color=#f92672>=</color> <color=#f8f8f2>calcMaxMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>totals</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PrivateTotals</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>newMaxMemory</color> <color=#f92672>=</color> <color=#f8f8f2>calcMaxMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>reset</color><color=#f8f8f2>(</color><color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*newEnv*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>checkCompressedOops</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Logs a SEVERE message if compressed oops was specified but did not take effect. Must be called</color>
<color=#75715e>   * after the environment is initialized so the message makes it to the output file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkCompressedOops</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>COMPRESSED_OOPS_REQUESTED</color> <color=#f92672>&&</color> <color=#f8f8f2>COMPRESSED_OOPS_KNOWN</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>COMPRESSED_OOPS_KNOWN_ON</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"-XX:+UseCompressedOops was specified but is not in effect,"</color>
              <color=#f92672>+</color> <color=#e6db74>" probably because the heap size is too large for this JVM"</color>
              <color=#f92672>+</color> <color=#e6db74>" option on this platform.  This is likely to cause an"</color>
              <color=#f92672>+</color> <color=#e6db74>" OutOfMemoryError!"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Respond to config updates. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>envConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Reinitialize the cache budget and the log buffer pool. */</color>
    <color=#f8f8f2>reset</color><color=#f8f8f2>(</color><color=#f8f8f2>calcMaxMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color> <color=#75715e>/*newEnv*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws IllegalArgumentException via Environment ctor and setMutableConfig. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>calcMaxMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Calculate the total memory allotted to JE.</color>
<color=#75715e>     * 1. If je.maxMemory is specified, use that. Check that it's not more</color>
<color=#75715e>     * than the JVM memory.</color>
<color=#75715e>     * 2. Otherwise, take je.maxMemoryPercent * JVM max memory.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>newMaxMemory</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_MEMORY</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>jvmMemory</color> <color=#f92672>=</color> <color=#f8f8f2>JVMSystemUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getRuntimeMaxMemory</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newMaxMemory</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Application specified a cache size number, validate it. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>jvmMemory</color> <color=#f92672><</color> <color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_MEMORY</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" has a value of "</color>
                <color=#f92672>+</color> <color=#f8f8f2>newMaxMemory</color>
                <color=#f92672>+</color> <color=#e6db74>" but the JVM is only configured for "</color>
                <color=#f92672>+</color> <color=#f8f8f2>jvmMemory</color>
                <color=#f92672>+</color> <color=#e6db74>". Consider using je.maxMemoryPercent."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newMaxMemory</color> <color=#f92672><</color> <color=#f8f8f2>MIN_MAX_MEMORY_SIZE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_MEMORY</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" is "</color>
                <color=#f92672>+</color> <color=#f8f8f2>newMaxMemory</color>
                <color=#f92672>+</color> <color=#e6db74>" which is less than the minimum: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>MIN_MAX_MEMORY_SIZE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * When no explicit cache size is specified and the JVM memory size</color>
<color=#75715e>       * is unknown, assume a default sized (64 MB) heap.  This produces</color>
<color=#75715e>       * a reasonable cache size when no heap size is known.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>jvmMemory</color> <color=#f92672>==</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>jvmMemory</color> <color=#f92672>=</color> <color=#f8f8f2>N_64MB</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Use the configured percentage of the JVM memory size. */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>maxMemoryPercent</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_MEMORY_PERCENT</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>newMaxMemory</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxMemoryPercent</color> <color=#f92672>*</color> <color=#f8f8f2>jvmMemory</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initialize at construction time and when the cache is resized.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newMaxMemory is the new total cache budget or is less than 0 if the total should remain</color>
<color=#75715e>   *     unchanged.</color>
<color=#75715e>   * @param newEnv is true if this is the first time we are resetting the budget for a new</color>
<color=#75715e>   *     environment. Note that a new environment has not yet been added to the set of shared cache</color>
<color=#75715e>   *     environments.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>newEnv</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>oldLogBufferBudget</color> <color=#f92672>=</color> <color=#f8f8f2>logBufferBudget</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Update the new total cache budget.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newMaxMemory</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newMaxMemory</color> <color=#f92672>=</color> <color=#f8f8f2>getMaxMemory</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>setMaxMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This environment's portion is adjusted for a shared cache.  Further</color>
<color=#75715e>     * below we make buffer and tracker sizes a fixed percentage (7% and</color>
<color=#75715e>     * 2%, by default) of the total shared cache size.  The math for this</color>
<color=#75715e>     * starts by dividing the total size by number of environments to get</color>
<color=#75715e>     * myCachePortion.  Then we take 7% or 2% of myCachePortion to get each</color>
<color=#75715e>     * environment's portion.  In other words, if there are 10 environments</color>
<color=#75715e>     * then each gets 7%/10 and 2%/10 of the total cache size, by default.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Note that when we resize the shared cache, we resize the buffer</color>
<color=#75715e>     * pools and tracker budgets for all environments.  Resizing the</color>
<color=#75715e>     * tracker budget has no overhead, but resizing the buffer pools causes</color>
<color=#75715e>     * new buffers to be allocated.  If reallocation of the log buffers is</color>
<color=#75715e>     * not desirable, the user can configure a byte amount rather than a</color>
<color=#75715e>     * percentage.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>myCachePortion</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSharedCache</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nEnvs</color> <color=#f92672>=</color> <color=#f8f8f2>DbEnvPool</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>().</color><color=#a6e22e>getNSharedCacheEnvironments</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newEnv</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nEnvs</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>myCachePortion</color> <color=#f92672>=</color> <color=#f8f8f2>newMaxMemory</color> <color=#f92672>/</color> <color=#f8f8f2>nEnvs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>myCachePortion</color> <color=#f92672>=</color> <color=#f8f8f2>newMaxMemory</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Calculate the memory budget for log buffering.  If the LOG_MEM_SIZE</color>
<color=#75715e>     * parameter is not set, start by using 7% (1/16th) of the cache</color>
<color=#75715e>     * size. If it is set, use that explicit setting.</color>
<color=#75715e>     *</color>
<color=#75715e>     * No point in having more log buffers than the maximum size. If</color>
<color=#75715e>     * this starting point results in overly large log buffers,</color>
<color=#75715e>     * reduce the log buffer budget again.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_MEM_SIZE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>=</color> <color=#f8f8f2>myCachePortion</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>></color> <color=#f8f8f2>myCachePortion</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>=</color> <color=#f8f8f2>myCachePortion</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We have a first pass at the log buffer budget. See what</color>
<color=#75715e>     * size log buffers result. Don't let them be too big, it would</color>
<color=#75715e>     * be a waste.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numBuffers</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>NUM_LOG_BUFFERS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>startingBufferSize</color> <color=#f92672>=</color> <color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>/</color> <color=#f8f8f2>numBuffers</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>logBufferSize</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_BUFFER_MAX_SIZE</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startingBufferSize</color> <color=#f92672>></color> <color=#f8f8f2>logBufferSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>startingBufferSize</color> <color=#f92672>=</color> <color=#f8f8f2>logBufferSize</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>=</color> <color=#f8f8f2>numBuffers</color> <color=#f92672>*</color> <color=#f8f8f2>startingBufferSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startingBufferSize</color> <color=#f92672><</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_LOG_BUFFER_SIZE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>startingBufferSize</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_LOG_BUFFER_SIZE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newLogBufferBudget</color> <color=#f92672>=</color> <color=#f8f8f2>numBuffers</color> <color=#f92672>*</color> <color=#f8f8f2>startingBufferSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>newCriticalThreshold</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>newMaxMemory</color>
                <color=#f92672>*</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_CRITICAL_PERCENTAGE</color><color=#f8f8f2>))</color>
            <color=#f92672>/</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>newTrackerBudget</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>myCachePortion</color>
                <color=#f92672>*</color> <color=#f8f8f2>envImpl</color>
                    <color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>()</color>
                    <color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>CLEANER_DETAIL_MAX_MEMORY_PERCENTAGE</color><color=#f8f8f2>))</color>
            <color=#f92672>/</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>newMinTreeMemoryUsage</color> <color=#f92672>=</color>
        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_TREE_MEMORY</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>myCachePortion</color> <color=#f92672>-</color> <color=#f8f8f2>newLogBufferBudget</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If all has gone well, update the budget fields.  Once the log buffer</color>
<color=#75715e>     * budget is determined, the remainder of the memory is left for tree</color>
<color=#75715e>     * nodes.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>logBufferBudget</color> <color=#f92672>=</color> <color=#f8f8f2>newLogBufferBudget</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>setCriticalThreshold</color><color=#f8f8f2>(</color><color=#f8f8f2>newCriticalThreshold</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>trackerBudget</color> <color=#f92672>=</color> <color=#f8f8f2>newTrackerBudget</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>minTreeMemoryUsage</color> <color=#f92672>=</color> <color=#f8f8f2>newMinTreeMemoryUsage</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The log buffer budget is counted in the cache usage. */</color>
    <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>logBufferBudget</color> <color=#f92672>-</color> <color=#f8f8f2>oldLogBufferBudget</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Only reset the log buffer pool if the log buffer has already been</color>
<color=#75715e>     * initialized (we're updating an existing budget) and the log buffer</color>
<color=#75715e>     * budget has changed (resetting it is expensive and may cause I/O).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>newEnv</color> <color=#f92672>&&</color> <color=#f8f8f2>oldLogBufferBudget</color> <color=#f92672>!=</color> <color=#f8f8f2>logBufferBudget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>resetPool</color><color=#f8f8f2>(</color><color=#f8f8f2>configManager</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initialize the starting environment memory state. We really only need to recalibrate the tree</color>
<color=#75715e>   * and treeAdmin categories, since there are no locks and txns yet, and the items in the admin</color>
<color=#75715e>   * category are cleaner items and aren't affected by the recovery splicing process.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>initCacheMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>dbTreeAdminMemory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>totalTree</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>treeAdmin</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color> <color=#f8f8f2>in</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>totalTree</color> <color=#f92672>+=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getBudgetedMemorySize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>treeAdmin</color> <color=#f92672>+=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getTreeAdminMemorySize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>refreshTreeMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>totalTree</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>refreshTreeAdminMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>treeAdmin</color> <color=#f92672>+</color> <color=#f8f8f2>dbTreeAdminMemory</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called by INList when clearing tree memory usage. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>refreshTreeAdminMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>getAndSet</color><color=#f8f8f2>(</color><color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>diff</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>newSize</color> <color=#f92672>-</color> <color=#f8f8f2>oldSize</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DEBUG_TREEADMIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"RESET = "</color> <color=#f92672>+</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>diff</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>alertEvictor</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called by INList when recalculating tree memory usage. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>refreshTreeMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>oldSize</color> <color=#f92672>=</color> <color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>getAndSet</color><color=#f8f8f2>(</color><color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>diff</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>newSize</color> <color=#f92672>-</color> <color=#f8f8f2>oldSize</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>diff</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>alertEvictor</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether eviction of INList information is allowed. To prevent extreme cache churn,</color>
<color=#75715e>   * eviction of Btree information is prohibited unless the tree memory usage is above this minimum</color>
<color=#75715e>   * value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTreeUsageAboveMinimum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>minTreeMemoryUsage</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit tests. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getMinTreeMemoryUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>minTreeMemoryUsage</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the environment wide tree memory count, wake up the evictor if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param increment note that increment may be negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateTreeMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>updateCounter</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>,</color> <color=#e6db74>"tree"</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEBUG_TREE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the environment wide tree memory count, wake up the evictor if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param increment note that increment may be negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateDOSMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>updateCounter</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>dosMemoryUsage</color><color=#f8f8f2>,</color> <color=#e6db74>"DOS"</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEBUG_DOS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the environment wide txn memory count, wake up the evictor if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param increment note that increment may be negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateTxnMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>updateCounter</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnMemoryUsage</color><color=#f8f8f2>,</color> <color=#e6db74>"txn"</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEBUG_TXN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the environment wide admin memory count, wake up the evictor if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param increment note that increment may be negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateAdminMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>updateCounter</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>adminMemoryUsage</color><color=#f8f8f2>,</color> <color=#e6db74>"admin"</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEBUG_ADMIN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the treeAdmin memory count, wake up the evictor if necessary.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param increment note that increment may be negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateTreeAdminMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>updateCounter</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>,</color> <color=#e6db74>"treeAdmin"</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEBUG_TREEADMIN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>updateCounter</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>counter</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>debugName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>counter</color><color=#f8f8f2>.</color><color=#a6e22e>addAndGet</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>);</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>sizeNotNegative</color><color=#f8f8f2>(</color><color=#f8f8f2>newSize</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#f8f8f2>makeErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>debugName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>increment</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"INC-------- ="</color> <color=#f92672>+</color> <color=#f8f8f2>increment</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>debugName</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"-------DEC="</color> <color=#f92672>+</color> <color=#f8f8f2>increment</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>debugName</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>alertEvictor</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>sizeNotNegative</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>newSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>CLEANUP_DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>newSize</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lockMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>addAndGet</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>);</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>lockMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>0</color>
          <color=#f8f8f2>:</color> <color=#f8f8f2>makeErrorMessage</color><color=#f8f8f2>(</color><color=#e6db74>"lockMem"</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(),</color> <color=#f8f8f2>increment</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DEBUG_LOCK</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
              <color=#e6db74>"INC-------- ="</color>
                  <color=#f92672>+</color> <color=#f8f8f2>increment</color>
                  <color=#f92672>+</color> <color=#e6db74>" lock["</color>
                  <color=#f92672>+</color> <color=#f8f8f2>lockTableIndex</color>
                  <color=#f92672>+</color> <color=#e6db74>"] "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>lockMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
              <color=#e6db74>"-------DEC="</color> <color=#f92672>+</color> <color=#f8f8f2>increment</color> <color=#f92672>+</color> <color=#e6db74>" lock["</color> <color=#f92672>+</color> <color=#f8f8f2>lockTableIndex</color> <color=#f92672>+</color> <color=#e6db74>"] "</color> <color=#f92672>+</color> <color=#f8f8f2>lockMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>alertEvictor</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>makeErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>memoryType</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>total</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>memoryType</color>
        <color=#f92672>+</color> <color=#e6db74>"="</color>
        <color=#f92672>+</color> <color=#f8f8f2>total</color>
        <color=#f92672>+</color> <color=#e6db74>" increment="</color>
        <color=#f92672>+</color> <color=#f8f8f2>increment</color>
        <color=#f92672>+</color> <color=#e6db74>" "</color>
        <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Throwable</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>subtractCacheUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>getLocalCacheUsage</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLocalCacheUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>logBufferBudget</color>
        <color=#f92672>+</color> <color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>dosMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>adminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>getLockMemoryUsage</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getVariableCacheUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>dosMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>adminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>getLockMemoryUsage</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Public for unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLockMemoryUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>accLockMemoryUsage</color> <color=#f92672>=</color> <color=#f8f8f2>txnMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>lockMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>accLockMemoryUsage</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The following 2 methods are shorthand for getTotals.getXxx().</color>
<color=#75715e>   */</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getCacheMemoryUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheUsage</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getMaxMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used for unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTreeMemoryUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used for unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDOSMemoryUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dosMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used for unit testing. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAdminMemoryUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>adminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For unit testing</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTreeAdminMemoryUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLogBufferBudget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logBufferBudget</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTrackerBudget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>trackerBudget</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>tupleOutputSize</color><color=#f8f8f2>(</color><color=#f8f8f2>TupleOutput</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>TUPLE_OUTPUT_OVERHEAD</color> <color=#f92672>+</color> <color=#f8f8f2>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferBytes</color><color=#f8f8f2>().</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the memory size occupied by a byte array of a given length. All arrays (regardless of</color>
<color=#75715e>   * element type) have the same overhead for a zero length array. On 32b Java, there are 4 bytes</color>
<color=#75715e>   * included in that fixed overhead that can be used for the first N elements -- however many fit</color>
<color=#75715e>   * in 4 bytes. On 64b Java, there is no extra space included. In all cases, space is allocated in</color>
<color=#75715e>   * 8 byte chunks.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>arrayLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * ARRAY_OVERHEAD accounts for N bytes of data, which is 4 bytes on 32b</color>
<color=#75715e>     * Java and 0 bytes on 64b Java.  Data larger than N bytes is allocated</color>
<color=#75715e>     * in 8 byte increments.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>ARRAY_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arrayLen</color> <color=#f92672>></color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>((</color><color=#f8f8f2>arrayLen</color> <color=#f92672>-</color> <color=#f8f8f2>ARRAY_SIZE_INCLUDED</color> <color=#f92672>+</color> <color=#ae81ff>7</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>shortArraySize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>arrayLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>arrayLen</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>intArraySize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>arrayLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>arrayLen</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>longArraySize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>arrayLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>arrayLen</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>objectArraySize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>arrayLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>arrayLen</color> <color=#f92672>*</color> <color=#f8f8f2>OBJECT_ARRAY_ITEM_OVERHEAD</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>StatGroup</color> <color=#a6e22e>loadStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>MB_GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_SHARED_CACHE_TOTAL_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>isSharedCache</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>totals</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_TOTAL_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLocalCacheUsage</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_DATA_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_DATA_ADMIN_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_DOS_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>dosMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_ADMIN_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>adminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>MB_LOCK_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>getLockMemoryUsage</color><color=#f8f8f2>());</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"treeUsage = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>treeMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"treeAdminUsage = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>treeAdminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"dosUsage = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>dosMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"adminUsage = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>adminMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"txnUsage = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>txnMemoryUsage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"lockUsage = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getLockMemoryUsage</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Totals</color> <color=#a6e22e>getTotals</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>totals</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Common base class for shared and private totals. This abstraction allows most other classes to</color>
<color=#75715e>   * be unaware of whether we're using a SharedEvictor or PrivateEvictor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Totals</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>maxMemory</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>criticalThreshold</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>Totals</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>maxMemory</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaxMemory</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>maxMemory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxMemory</color> <color=#f92672>=</color> <color=#f8f8f2>maxMemory</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getMaxMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>maxMemory</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setCriticalThreshold</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>criticalThreshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>criticalThreshold</color> <color=#f92672>=</color> <color=#f8f8f2>criticalThreshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getCriticalThreshold</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>criticalThreshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>long</color> <color=#a6e22e>getCacheUsage</color><color=#f8f8f2>();</color>

    <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>);</color>

    <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSharedCache</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Totals for a single environment's non-shared cache. Used when</color>
<color=#75715e>   * EnvironmentConfig.setSharedCache(false) and a PrivateEvictor are used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>PrivateTotals</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Totals</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>PrivateTotals</color><color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>parent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getCacheUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalCacheUsage</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalCacheUsage</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>maxMemory</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSharedCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Totals for the multi-environment shared cache. Used when</color>
<color=#75715e>   * EnvironmentConfig.setSharedCache(false) and the SharedEvictor are used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>SharedTotals</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Totals</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>usage</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>SharedTotals</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>usage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getCacheUsage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>usage</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateCacheUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>usage</color><color=#f8f8f2>.</color><color=#a6e22e>addAndGet</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>maxMemory</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSharedCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>