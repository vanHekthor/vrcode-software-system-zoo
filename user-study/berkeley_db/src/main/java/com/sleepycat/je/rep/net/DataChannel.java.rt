<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.net</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.ByteChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.GatheringByteChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.ScatteringByteChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.SocketChannel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * @hidden An interface that associates a delegate socketChannel for network I/O, which provides</color>
<color=#75715e> *     ByteChannel, GatheringByteChannel, and ScatteringByteChannel, interfaces for callers.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>DataChannel</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ByteChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>GatheringByteChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ScatteringByteChannel</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Accessor for the underlying SocketChannel. Callers may used the returned SocketChannel in order</color>
<color=#75715e>   * to query/modify connections attributes, but may not directly close, read from or write to the</color>
<color=#75715e>   * SocketChannel.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the socket channel underlying this data channel instance</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>SocketChannel</color> <color=#a6e22e>getSocketChannel</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks whether the channel encrypted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the data channel provides network privacy</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isSecure</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks whether the channel capable of determining peer trust.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the data channel implementation has the capability to determine trust.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isTrustCapable</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks whether the channel peer is trusted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the channel has determined that the peer is trusted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isTrusted</color><color=#f8f8f2>();</color>

  <color=#75715e>/** The status of the flush method. */</color>
  <color=#66d9ef>enum</color> <color=#f8f8f2>FlushStatus</color> <color=#f8f8f2>{</color>

    <color=#75715e>/** Flushes are not being used. */</color>
    <color=#f8f8f2>DISABLED</color><color=#f8f8f2>,</color>

    <color=#75715e>/** Nothing needs to be flushed. */</color>
    <color=#f8f8f2>DONE</color><color=#f8f8f2>,</color>

    <color=#75715e>/** Flush not complete because there is something left to flush. */</color>
    <color=#f8f8f2>AGAIN</color><color=#f8f8f2>,</color>

    <color=#75715e>/** Flush not complete because socket is busy for write. */</color>
    <color=#f8f8f2>WRITE_BUSY</color><color=#f8f8f2>,</color>

    <color=#75715e>/** Flush not complete due to read data dependency. */</color>
    <color=#f8f8f2>NEED_READ</color><color=#f8f8f2>,</color>

    <color=#75715e>/** Flush not complete due to task execution dependency. */</color>
    <color=#f8f8f2>NEED_TASK</color><color=#f8f8f2>,</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Attempt to flush any pending writes to the underlying socket buffer. The caller should ensure</color>
<color=#75715e>   * that it is the only thread accessing the DataChannel in order that the return value be</color>
<color=#75715e>   * meaningful.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the flush status</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>FlushStatus</color> <color=#a6e22e>flush</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>