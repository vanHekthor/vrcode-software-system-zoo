<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The root of all BDB JE-defined exceptions.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Exceptions thrown by BDB JE fall into three categories.</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>When a method is used incorrectly as the result of an application programming error, a</color>
<color=#75715e> *       standard Java runtime exception is thrown: {@link IllegalArgumentException}, {@link</color>
<color=#75715e> *       IllegalStateException} or {@link UnsupportedOperationException}. These exceptions have the</color>
<color=#75715e> *       standard meaning defined by their javadoc. Note that JE throws {@link</color>
<color=#75715e> *       IllegalArgumentException} rather than {@link NullPointerException} when a required</color>
<color=#75715e> *       parameter is null.</color>
<color=#75715e> *   <li>When an operation failure occurs, {@link OperationFailureException} or one of its</color>
<color=#75715e> *       subclasses is thrown. See {@link OperationFailureException} for details.</color>
<color=#75715e> *   <li>When an {@code Environment} failure occurs, {@link EnvironmentFailureException} or one of</color>
<color=#75715e> *       its subclasses is thrown. See {@link EnvironmentFailureException} for details.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>{@link OperationFailureException} and {@link EnvironmentFailureException} are the only two</color>
<color=#75715e> * direct subclasses of {@code DatabaseException}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>(Actually the above statement is not strictly correct. {@link EnvironmentFailureException}</color>
<color=#75715e> * extends {@link RunRecoveryException} which extends {@code DatabaseException}. {@link</color>
<color=#75715e> * RunRecoveryException} exists for backward compatibility and has been deprecated. {@link</color>
<color=#75715e> * EnvironmentFailureException} should be used instead.)</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that in some cases, certain methods return status values without issuing an exception.</color>
<color=#75715e> * This occurs in situations that are not normally considered an error, but when some informational</color>
<color=#75715e> * status is returned. For example, {@link Database#get Database.get} returns {@link</color>
<color=#75715e> * OperationStatus#NOTFOUND OperationStatus.NOTFOUND} when a requested key does not appear in the</color>
<color=#75715e> * database.</color>
<color=#75715e> */</color>
<color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"javadoc"</color><color=#f8f8f2>)</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>DatabaseException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1535562945L</color><color=#f8f8f2>;</color>

  <color=#75715e>/* String appended to original message, see addErrorMessage. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>extraInfo</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Per-thread re-thrown stack traces, see addRethrownStackTrace. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>transient</color> <color=#f8f8f2>ThreadLocal</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>rethrownStackTraces</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadLocal</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DatabaseException</color><color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>getVersionHeader</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DatabaseException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>getVersionHeader</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DatabaseException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>((</color><color=#f8f8f2>getVersionHeader</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>message</color><color=#f8f8f2>),</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden Utility for generating the version at the start of the exception message. Public for</color>
<color=#75715e>   *     unit tests.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getVersionHeader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"(JE "</color> <color=#f92672>+</color> <color=#f8f8f2>JEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT_VERSION</color> <color=#f92672>+</color> <color=#e6db74>") "</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden Support the addition of extra error information. Use this approach rather than wrapping</color>
<color=#75715e>   *     exceptions whenever possible for two reasons: 1) so the user can catch the original</color>
<color=#75715e>   *     exception class and handle it appropriately, and 2) because the EnvironmentFailureException</color>
<color=#75715e>   *     hierarchy does some intricate things with setting the environment as invalid.</color>
<color=#75715e>   * @param newExtraInfo the message to add, not including separator space.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>newExtraInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>extraInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>extraInfo</color> <color=#f92672>=</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>newExtraInfo</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>extraInfo</color> <color=#f92672>=</color> <color=#f8f8f2>extraInfo</color> <color=#f92672>+</color> <color=#e6db74>' '</color> <color=#f92672>+</color> <color=#f8f8f2>newExtraInfo</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden Adds the current stack trace to the exception message, before it is re-thrown in a</color>
<color=#75715e>   *     different thread. The full stack trace will then show both where it was generated and where</color>
<color=#75715e>   *     it was re-thrown. Use this approach rather than wrapping (via wrapSelf) when user code</color>
<color=#75715e>   *     relies on the getCause method to return a specific exception, and wrapping would change the</color>
<color=#75715e>   *     cause exception to something unexpected.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addRethrownStackTrace</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>localEx</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Stacktrace where exception below was rethrown ("</color> <color=#f92672>+</color> <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>rethrownStackTraces</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>localEx</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If extraInfo and rethrownStackTrace are null, don't allocate memory</color>
<color=#75715e>     * by constructing a new string. An OutOfMemoryError (or related Error)</color>
<color=#75715e>     * may have occurred, and we'd rather not cause another one here.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>extraInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>extraInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>rethrownStackTrace</color> <color=#f92672>=</color> <color=#f8f8f2>rethrownStackTraces</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rethrownStackTrace</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>msg</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>rethrownStackTrace</color> <color=#f92672>+</color> <color=#e6db74>"\n"</color> <color=#f92672>+</color> <color=#f8f8f2>msg</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>