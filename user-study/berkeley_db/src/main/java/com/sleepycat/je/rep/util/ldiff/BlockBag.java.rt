<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.util.ldiff</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A bag of Blocks used during the LDiff process. Blocks are accessed by their checksum; when</color>
<color=#75715e> * checksums collide, blocks are returned in insertion order.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BlockBag</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#f8f8f2>{</color>
  <color=#75715e>/* Map checksums to the corresponding block's index in blocks. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>>></color> <color=#f8f8f2>chksums</color><color=#f8f8f2>;</color>
  <color=#75715e>/* Maintain the list of blocks in insertion order. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#f8f8f2>blocks</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The index in blocks of the first block that has not yet been removed.</color>
<color=#75715e>   * Items in blocks prior to blockIndex have been deleted from the bag.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>blockIndex</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Instantiate a new BlockBag object. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>BlockBag</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>blockIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>blocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>chksums</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>>></color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a new Block to the bag.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b The Block to be added.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Block</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>chksum</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>getRollingChksum</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Integer</color> <color=#f8f8f2>indx</color> <color=#f92672>=</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>indices</color> <color=#f92672>=</color> <color=#f8f8f2>chksums</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>chksum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indices</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>indices</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>indices</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>indx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>chksums</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>chksum</color><color=#f8f8f2>,</color> <color=#f8f8f2>indices</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns all Blocks in the bag with a given checksum.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param chksum The checksum to match</color>
<color=#75715e>   * @return A List of blocks with the given checksum, in insertion order, or null if no matching</color>
<color=#75715e>   *     blocks were found.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>chksum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>indices</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>indices</color> <color=#f92672>=</color> <color=#f8f8f2>chksums</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Long</color><color=#f8f8f2>(</color><color=#f8f8f2>chksum</color><color=#f8f8f2>));</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indices</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Integer</color> <color=#f8f8f2>indx</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indices</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>indx</color><color=#f8f8f2>.</color><color=#a6e22e>intValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>blockIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an iterator over the blocks in the bag, in insertion order.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an iterator over the blocks in the bag, in insertion order.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BagIterator</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes the given Block, plus any blocks inserted previous to the given Block.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b The Block to remove.</color>
<color=#75715e>   * @return A List of all unmatched blocks, or null</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Block</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>startIndex</color> <color=#f92672>=</color> <color=#f8f8f2>blockIndex</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color> <color=#f92672><</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Block</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>blockIndex</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>==</color> <color=#f8f8f2>b2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color> <color=#f92672>-</color> <color=#f8f8f2>startIndex</color> <color=#f92672><=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>subList</color><color=#f8f8f2>(</color><color=#f8f8f2>startIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>blockIndex</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes all blocks from the bag.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return A list of all blocks removed, or null if the bag is already empty.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#a6e22e>removeAll</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color> <color=#f92672><</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Block</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>blockIndex</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getBlockIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>blockIndex</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Block</color> <color=#a6e22e>getBlock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of blocks in this bag.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of blocks in the bag</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>blockIndex</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>BagIterator</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Block</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>BagIterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>blockIndex</color> <color=#f92672><</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>BlockBag</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Block</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>blocks</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>blockIndex</color> <color=#f92672>+</color> <color=#f8f8f2>offset</color><color=#f92672>++</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>