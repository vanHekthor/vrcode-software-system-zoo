<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#75715e>/** Specifies the attributes of an application invoked preload operation. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>PreloadConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>loadLNs</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>Phases</color><color=#f92672>></color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsnBatchSize</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>internalMemoryLimit</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Default configuration used if null is passed to {@link Database#preload Database.preload}. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>PreloadConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configure the maximum number of bytes to preload.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is 0 for this class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param maxBytes If the maxBytes parameter is non-zero, a preload will stop when the cache</color>
<color=#75715e>   *     contains this number of bytes.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>setMaxBytes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setMaxBytesVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>maxBytes</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaxBytesVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxBytes</color> <color=#f92672>=</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the number of bytes in the cache to stop the preload at.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called at any time during the life of the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The number of bytes in the cache to stop the preload at.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getMaxBytes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configure the maximum number of milliseconds to execute preload.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is 0 for this class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param maxMillisecs If the maxMillisecs parameter is non-zero, a preload will stop when this</color>
<color=#75715e>   *     amount of time has passed.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>setMaxMillisecs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setMaxMillisecsVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaxMillisecsVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxMillisecs</color> <color=#f92672>=</color> <color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the number of millisecs to stop the preload after.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called at any time during the life of the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The number of millisecs to stop the preload after.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getMaxMillisecs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configure the preload load LNs option.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is false for this class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param loadLNs If set to true, the preload will load Leaf Nodes (LNs) containing the data</color>
<color=#75715e>   *     values.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>setLoadLNs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>loadLNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setLoadLNsVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>loadLNs</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLoadLNsVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>loadLNs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>loadLNs</color> <color=#f92672>=</color> <color=#f8f8f2>loadLNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the configuration of the preload load LNs option.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The configuration of the preload load LNs option.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getLoadLNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>loadLNs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Preload progress listeners report this phase value, along with a count of the number if times</color>
<color=#75715e>   * that the preload has fetched from disk.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>Phases</color> <color=#f8f8f2>{</color>
    <color=#75715e>/** Preload is in progress and resulted in a fetch from disk. */</color>
    <color=#f8f8f2>PRELOAD</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configure the preload operation to make periodic calls to a {@link ProgressListener} to provide</color>
<color=#75715e>   * feedback on preload progress. The ProgressListener.progress() method is called each time the</color>
<color=#75715e>   * preload mush fetch a btree node or data record from disk.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When using progress listeners, review the information at {@link ProgressListener#progress}</color>
<color=#75715e>   * to avoid any unintended disruption to replication stream syncup.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param progressListener The ProgressListener to callback during preload.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>setProgressListener</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>Phases</color><color=#f92672>></color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setProgressListenerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>progressListener</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setProgressListenerVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>Phases</color><color=#f92672>></color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>progressListener</color> <color=#f92672>=</color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the ProgressListener for this PreloadConfig.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the ProgressListener for this PreloadConfig.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>Phases</color><color=#f92672>></color> <color=#a6e22e>getProgressListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the maximum number of LSNs to gather and sort at any one time. The default is an unlimited</color>
<color=#75715e>   * number of LSNs. Setting this lower causes the preload to use less memory, but it sorts and</color>
<color=#75715e>   * processes LSNs more frequently thereby causing slower performance. Setting this higher will in</color>
<color=#75715e>   * general improve performance at the expense of memory. Each LSN uses 16 bytes of memory.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param lsnBatchSize the maximum number of LSNs to accumulate and sort per batch.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>setLSNBatchSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setLSNBatchSizeVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLSNBatchSizeVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lsnBatchSize</color> <color=#f92672>=</color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Preload is implemented to optimize I/O cost by fetching the records of a Database by disk</color>
<color=#75715e>   * order, so that disk access is are sequential rather than random. LSNs (log sequence numbers)</color>
<color=#75715e>   * are the disk addresses of database records. Setting this value causes the preload to process</color>
<color=#75715e>   * batches of LSNs rather than all in-memory LSNs at one time, which bounds the memory usage of</color>
<color=#75715e>   * the preload processing, at the expense of preload performance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the maximum number of LSNs to be sorted that this preload is configured for.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLSNBatchSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the maximum amount of non JE Cache Memory that preload can use at one time. The default is</color>
<color=#75715e>   * an unlimited amount of memory. Setting this lower causes the preload to use less memory, but</color>
<color=#75715e>   * generally results in slower performance. Setting this higher will often improve performance at</color>
<color=#75715e>   * the expense of higher memory utilization.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param internalMemoryLimit the maximum number of non JE Cache bytes to use.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>setInternalMemoryLimit</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>internalMemoryLimit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setInternalMemoryLimitVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>internalMemoryLimit</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setInternalMemoryLimitVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>internalMemoryLimit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>internalMemoryLimit</color> <color=#f92672>=</color> <color=#f8f8f2>internalMemoryLimit</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the maximum amount of non JE Cache Memory that preload can use at one time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the maximum amount of non JE Cache Memory that preload can use at one time.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getInternalMemoryLimit</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>internalMemoryLimit</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of this configuration object. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>willNeverOccur</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the values for each configuration attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the values for each configuration attribute.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"maxBytes="</color>
        <color=#f92672>+</color> <color=#f8f8f2>maxBytes</color>
        <color=#f92672>+</color> <color=#e6db74>"\nmaxMillisecs="</color>
        <color=#f92672>+</color> <color=#f8f8f2>maxMillisecs</color>
        <color=#f92672>+</color> <color=#e6db74>"\nloadLNs="</color>
        <color=#f92672>+</color> <color=#f8f8f2>loadLNs</color>
        <color=#f92672>+</color> <color=#e6db74>"\nlsnBatchSize="</color>
        <color=#f92672>+</color> <color=#f8f8f2>lsnBatchSize</color>
        <color=#f92672>+</color> <color=#e6db74>"\ninternalMemoryLimit="</color>
        <color=#f92672>+</color> <color=#f8f8f2>internalMemoryLimit</color>
        <color=#f92672>+</color> <color=#e6db74>"\n"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>