<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatDefinition.StatType</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A long JE stat generated from an exponential moving average over a specified time period of the</color>
<color=#75715e> * rate of change in a value over time.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LongAvgRateStat</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Stat</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The underlying average rate. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongAvgRate</color> <color=#f8f8f2>avg</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an instance of this class. The definition type must be INCREMENTAL.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param group the statistics group</color>
<color=#75715e>   * @param definition the statistics definition</color>
<color=#75715e>   * @param periodMillis the averaging period in milliseconds</color>
<color=#75715e>   * @param reportTimeUnit the time unit for reporting the rate</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LongAvgRateStat</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>group</color><color=#f8f8f2>,</color> <color=#f8f8f2>StatDefinition</color> <color=#f8f8f2>definition</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>periodMillis</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>reportTimeUnit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>,</color> <color=#f8f8f2>definition</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>definition</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>StatType</color><color=#f8f8f2>.</color><color=#a6e22e>INCREMENTAL</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>avg</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongAvgRate</color><color=#f8f8f2>(</color><color=#f8f8f2>definition</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>periodMillis</color><color=#f8f8f2>,</color> <color=#f8f8f2>reportTimeUnit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#a6e22e>LongAvgRateStat</color><color=#f8f8f2>(</color><color=#f8f8f2>StatDefinition</color> <color=#f8f8f2>definition</color><color=#f8f8f2>,</color> <color=#f8f8f2>LongAvgRate</color> <color=#f8f8f2>avg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>definition</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>avg</color> <color=#f92672>=</color> <color=#f8f8f2>avg</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a new value to the average.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the new value</color>
<color=#75715e>   * @param time the current time</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>time</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>avg</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>time</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Long</color> <color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>avg</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>avg</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LongAvgRateStat</color> <color=#a6e22e>copy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongAvgRateStat</color><color=#f8f8f2>(</color><color=#f8f8f2>definition</color><color=#f8f8f2>,</color> <color=#f8f8f2>avg</color><color=#f8f8f2>.</color><color=#a6e22e>copy</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFormattedValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>avg</color><color=#f8f8f2>.</color><color=#a6e22e>getFormattedValue</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNotSet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>avg</color><color=#f8f8f2>.</color><color=#a6e22e>isNotSet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws UnsupportedOperationException always */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws UnsupportedOperationException always */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Stat</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a stat that includes the newest entries from this stat and the base stat. This method</color>
<color=#75715e>   * does not use negative intervals, since negation does not work properly for this non-additive</color>
<color=#75715e>   * stat. The base argument must be a LongAvgRateStat.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LongAvgRateStat</color> <color=#a6e22e>computeInterval</color><color=#f8f8f2>(</color><color=#f8f8f2>Stat</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>base</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>base</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LongAvgRateStat</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LongAvgRate</color> <color=#f8f8f2>baseAvg</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>LongAvgRateStat</color><color=#f8f8f2>)</color> <color=#f8f8f2>base</color><color=#f8f8f2>).</color><color=#a6e22e>avg</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongAvgRateStat</color><color=#f8f8f2>(</color><color=#f8f8f2>definition</color><color=#f8f8f2>,</color> <color=#f8f8f2>avg</color><color=#f8f8f2>.</color><color=#a6e22e>copyLatest</color><color=#f8f8f2>(</color><color=#f8f8f2>baseAvg</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Do nothing for this non-additive stat. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>negate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>
<color=#f8f8f2>}</color>