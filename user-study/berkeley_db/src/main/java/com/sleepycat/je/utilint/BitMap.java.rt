<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.BitSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Bitmap which supports indexing with long arguments. java.util.BitSet provides all the</color>
<color=#75715e> * functionality and performance we need, but requires integer indexing.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Long indexing is implemented by keeping a Map of java.util.BitSets, where each bitset covers</color>
<color=#75715e> * 2^16 bits worth of values. The Bitmap may be sparse, in that each segment is only instantiated</color>
<color=#75715e> * when needed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that this class is currently not thread safe; adding a new bitset segment is not</color>
<color=#75715e> * protected.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BitMap</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SEGMENT_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SEGMENT_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Map of segment value -> bitset, where the segment value is index >>16</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>BitSet</color><color=#f92672>></color> <color=#f8f8f2>bitSegments</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>BitMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>bitSegments</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>BitSet</color><color=#f92672>></color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if index is negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#e6db74>" is negative."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>BitSet</color> <color=#f8f8f2>bitset</color> <color=#f92672>=</color> <color=#f8f8f2>getBitSet</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitset</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#e6db74>" is out of bounds"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>useIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getIntIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>bitset</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>useIndex</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * @throws IndexOutOfBoundsException if index is negative.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#e6db74>" is negative."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>BitSet</color> <color=#f8f8f2>bitset</color> <color=#f92672>=</color> <color=#f8f8f2>getBitSet</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitset</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>useIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getIntIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>bitset</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>useIndex</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Since the BitMap is implemented by a collection of BitSets, return</color>
<color=#75715e>   * the one which covers the numeric range for this index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the bit we want to access</color>
<color=#75715e>   * @param allowCreate if true, return the BitSet that would hold this</color>
<color=#75715e>   * index even if it wasn't previously set. If false, return null</color>
<color=#75715e>   * if the bit has not been set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>BitSet</color> <color=#a6e22e>getBitSet</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Long</color> <color=#f8f8f2>segmentId</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>>></color> <color=#f8f8f2>SEGMENT_SIZE</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>BitSet</color> <color=#f8f8f2>bitset</color> <color=#f92672>=</color> <color=#f8f8f2>bitSegments</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>segmentId</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allowCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitset</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bitset</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BitSet</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>bitSegments</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>segmentId</color><color=#f8f8f2>,</color> <color=#f8f8f2>bitset</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>bitset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getIntIndex</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>&</color> <color=#f8f8f2>SEGMENT_MASK</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getNumSegments</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>bitSegments</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Currently for unit testing, though note that java.util.BitSet does</color>
<color=#75715e>   * support cardinality().</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>cardinality</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>BitSet</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>bitSegments</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>BitSet</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>count</color> <color=#f92672>+=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>cardinality</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>