<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.stream</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Class used by a node to track changes in Master Status. It's updated by the Listener. It</color>
<color=#75715e> * represents the abstract notion that the notion of the current Replica Group is definitive and is</color>
<color=#75715e> * always in advance of the notion of a master at each node. A node is typically playing catch up as</color>
<color=#75715e> * it tries to bring its view in line with that of the group.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>MasterStatus</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* This node's identity */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The current master resulting from election notifications */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>groupMasterHostName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>groupMasterPort</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#75715e>/* The node ID used to identify the master. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>groupMasterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The Master as implemented by the Node. It can lag the groupMaster</color>
<color=#75715e>   * as the node tries to catch up.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nodeMasterHostName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nodeMasterPort</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nodeMasterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>MasterStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a read-only snapshot of the object. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>Object</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if it's the master from the Group's perspective */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isGroupMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672>!=</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_NODE_ID</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672>==</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if it's the master from the node's localized perspective */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNodeMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672>!=</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_NODE_ID</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672>==</color> <color=#f8f8f2>nodeMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setGroupMaster</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>hostname</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>port</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>newGroupMasterNameId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>groupMasterHostName</color> <color=#f92672>=</color> <color=#f8f8f2>hostname</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>groupMasterPort</color> <color=#f92672>=</color> <color=#f8f8f2>port</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>groupMasterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>newGroupMasterNameId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Predicate to determine whether the group and node have a consistent notion of the Master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return false if the node does not know of a Master, or the group Master is different from the</color>
<color=#75715e>   *     node's notion the master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>boolean</color> <color=#a6e22e>inSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>!</color><color=#f8f8f2>nodeMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>nodeMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>unSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nodeMasterHostName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nodeMasterPort</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nodeMasterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An assertion form of the above. By combining the check and exception generation in an atomic</color>
<color=#75715e>   * operation, it provides for an accurate exception message.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws MasterSyncException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>assertSync</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>MasterSyncException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>inSync</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterSyncException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Syncs to the group master */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>sync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nodeMasterHostName</color> <color=#f92672>=</color> <color=#f8f8f2>groupMasterHostName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nodeMasterPort</color> <color=#f92672>=</color> <color=#f8f8f2>groupMasterPort</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nodeMasterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Node's current idea of the Master. It may be "out of sync" with the Group's notion</color>
<color=#75715e>   * of the Master</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getNodeMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeMasterHostName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeMasterHostName</color><color=#f8f8f2>,</color> <color=#f8f8f2>nodeMasterPort</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getNodeMasterNameId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeMasterNameId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a socket that can be used to communicate with the group master. It can return null, if</color>
<color=#75715e>   * there is no current group master, that is, groupMasterNameId is NULL.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getGroupMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupMasterHostName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>groupMasterHostName</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupMasterPort</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"serial"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>MasterSyncException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>savedGroupMasterId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>savedNodeMasterId</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>MasterSyncException</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>savedGroupMasterId</color> <color=#f92672>=</color> <color=#f8f8f2>MasterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>savedNodeMasterId</color> <color=#f92672>=</color> <color=#f8f8f2>MasterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMasterNameId</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMessage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"Master change. Node master id: "</color>
          <color=#f92672>+</color> <color=#f8f8f2>savedNodeMasterId</color>
          <color=#f92672>+</color> <color=#e6db74>" Group master id: "</color>
          <color=#f92672>+</color> <color=#f8f8f2>savedGroupMasterId</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>