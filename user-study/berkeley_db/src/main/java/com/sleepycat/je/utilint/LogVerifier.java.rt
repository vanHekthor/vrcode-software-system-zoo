<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DbInternal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.LogVerificationException</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Verifies the checksums in the contents of a log file in a JE {@code Environment}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The caller supplies the contents of the log file by passing arrays of bytes in a series of</color>
<color=#75715e> * calls to the {@link #verify} method, which verifies the checksums for log records, and by calling</color>
<color=#75715e> * the {@link #verifyAtEof} when the entire contents are complete, to detect incomplete entries at</color>
<color=#75715e> * the end of the file. The primary intended use of this class is to verify the contents of log</color>
<color=#75715e> * files that are being copied as part of a programmatic backup. It is critical that invalid files</color>
<color=#75715e> * are not added to a backup set, since then both the live environment and the backup will be</color>
<color=#75715e> * invalid.</color>
<color=#75715e> *</color>
<color=#75715e> * @see com.sleepycat.je.util.LogVerificationInputStream</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LogVerifier</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>FILE_HEADER_TYPE_NUM</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_HEADER</color><color=#f8f8f2>.</color><color=#a6e22e>getTypeNum</color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Stream verification state information. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>enum</color> <color=#f8f8f2>State</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>INIT</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>FIXED_HEADER</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>VARIABLE_HEADER</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>ITEM</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>FILE_HEADER_ITEM</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>INVALID</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>State</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>entryStart</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>prevEntryStart</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ChecksumValidator</color> <color=#f8f8f2>validator</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LogEntryHeader</color> <color=#f8f8f2>header</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>itemPosition</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a log verifier.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param env the {@code Environment} associated with the log</color>
<color=#75715e>   * @param fileName the file name of the log, for reporting in the {@code</color>
<color=#75715e>   *     LogVerificationException}. This should be a simple file name of the form {@code</color>
<color=#75715e>   *     NNNNNNNN.jdb}, where NNNNNNNN is the file number in hexadecimal format.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LogVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>),</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a log verifier.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param envImpl the {@code EnvironmentImpl} associated with the log</color>
<color=#75715e>   * @param fileName the file name of the log, for reporting in the {@code</color>
<color=#75715e>   *     LogVerificationException}. This should be a simple file name of the form {@code</color>
<color=#75715e>   *     NNNNNNNN.jdb}, where NNNNNNNN is the file number in hexadecimal format.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LogVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1L</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a log verifier for use with an internal environment. If {@code fileNum} is less than</color>
<color=#75715e>   * zero, it is derived from {@code fileName}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param envImpl the {@code EnvironmentImpl} associated with the log</color>
<color=#75715e>   * @param fileName the file name of the log, for reporting in the {@code</color>
<color=#75715e>   *     LogVerificationException}. This should be a simple file name of the form {@code</color>
<color=#75715e>   *     NNNNNNNN.jdb}, where NNNNNNNN is the file number in hexadecimal format.</color>
<color=#75715e>   * @param fileNum the file number</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LogVerifier</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fileName</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>fileNum</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getFileManager</color><color=#f8f8f2>().</color><color=#a6e22e>getNumFromName</color><color=#f8f8f2>(</color><color=#f8f8f2>fileName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>entryStart</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>prevEntryStart</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>validator</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChecksumValidator</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The headerBuf is used to hold the fixed entry header, variable entry</color>
<color=#75715e>     * header portion, and file header entry.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>headerBuf</color> <color=#f92672>=</color>
        <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_HEADER_SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileHeader</color><color=#f8f8f2>.</color><color=#a6e22e>entrySize</color><color=#f8f8f2>()));</color>

    <color=#75715e>/* Initial log version for reading the file header. */</color>
    <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>UNKNOWN_FILE_HEADER_VERSION</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Verifies the next portion of the log file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the buffer containing the log file bytes</color>
<color=#75715e>   * @param off the start offset of the log file bytes in the buffer</color>
<color=#75715e>   * @param len the number of log file bytes in the buffer</color>
<color=#75715e>   * @throws LogVerificationException if a checksum cannot be verified or a log entry is determined</color>
<color=#75715e>   *     to be invalid by examining its contents</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>LogVerificationException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>endOffset</color> <color=#f92672>=</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>curOffset</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>curOffset</color> <color=#f92672><</color> <color=#f8f8f2>endOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>remaining</color> <color=#f92672>=</color> <color=#f8f8f2>endOffset</color> <color=#f92672>-</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>INIT</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>processInit</color><color=#f8f8f2>();</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>FIXED_HEADER</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>curOffset</color> <color=#f92672>=</color> <color=#f8f8f2>processFixedHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>VARIABLE_HEADER</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>curOffset</color> <color=#f92672>=</color> <color=#f8f8f2>processVariableHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>FILE_HEADER_ITEM</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>curOffset</color> <color=#f92672>=</color> <color=#f8f8f2>processFileHeaderItem</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ITEM</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>curOffset</color> <color=#f92672>=</color> <color=#f8f8f2>processItem</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>INVALID</color><color=#f8f8f2>:</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color><color=#e6db74>"May not read after LogVerificationException is thrown"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>assert</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks that the log file ends with a complete log entry, after having completed verifying the</color>
<color=#75715e>   * log file contents through calls to {@link #verify}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws LogVerificationException if the stream does not end with a complete log entry</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>verifyAtEof</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>LogVerificationException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* State should be INIT at EOF. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Ignore partial entry at end of last log file. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color> <color=#f92672>==</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getFileManager</color><color=#f8f8f2>().</color><color=#a6e22e>getLastFileNum</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Report partial entry at end of any other file. */</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color><color=#e6db74>"Entry is incomplete"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initializes all state variables before the start of a log entry. Moves the state to</color>
<color=#75715e>   * FIXED_HEADER, the first part of a log entry.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processInit</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>itemPosition</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>FIXED_HEADER</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Processes the fixed initial portion of a log entry. After all bytes for the fixed portion are</color>
<color=#75715e>   * read, moves the state to VARIABLE_HEADER if the header contains a variable portion, or to ITEM</color>
<color=#75715e>   * if it does not.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>processFixedHeader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>LogVerificationException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>header</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxSize</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_HEADER_SIZE</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>processSize</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>remaining</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSize</color> <color=#f92672>-</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>makeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryStart</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color><color=#e6db74>"Invalid header bytes="</color> <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>()),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevOffset</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>prevEntryStart</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Header prevOffset=0x"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getPrevOffset</color><color=#f8f8f2>())</color>
                <color=#f92672>+</color> <color=#e6db74>" but prevEntryStart=0x"</color>
                <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>prevEntryStart</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* If the header is invisible, turn off the invisible bit. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>isInvisible</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>turnOffInvisible</color><color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Do not validate the bytes of the checksum itself. */</color>
      <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>CHECKSUM_BYTES</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>maxSize</color> <color=#f92672>-</color> <color=#f8f8f2>LogEntryHeader</color><color=#f8f8f2>.</color><color=#a6e22e>CHECKSUM_BYTES</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>isVariableLength</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>VARIABLE_HEADER</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>FILE_HEADER_TYPE_NUM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>FILE_HEADER_ITEM</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>ITEM</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>curOffset</color> <color=#f92672>+</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Processes the variable portion of a log entry. After all bytes for the variable portion are</color>
<color=#75715e>   * read, moves the state to ITEM.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>processVariableHeader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>header</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>isVariableLength</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxSize</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getVariablePortionSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>processSize</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>remaining</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSize</color> <color=#f92672>-</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>readVariablePortion</color><color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>FILE_HEADER_TYPE_NUM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>FILE_HEADER_ITEM</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>ITEM</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>curOffset</color> <color=#f92672>+</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>processFileHeaderItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>LogVerificationException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>header</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>logVersion</color> <color=#f92672>==</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>UNKNOWN_FILE_HEADER_VERSION</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxSize</color> <color=#f92672>=</color> <color=#f8f8f2>FileHeader</color><color=#f8f8f2>.</color><color=#a6e22e>entrySize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>processSize</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>remaining</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSize</color> <color=#f92672>-</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>);</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getChecksum</color><color=#f8f8f2>(),</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryStart</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>headerBuf</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>fileHeaderEntry</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_FILE_HEADER</color><color=#f8f8f2>.</color><color=#a6e22e>getNewLogEntry</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fileHeaderEntry</color><color=#f8f8f2>.</color><color=#a6e22e>readEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color><color=#f8f8f2>,</color> <color=#f8f8f2>headerBuf</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>FileHeader</color> <color=#f8f8f2>fileHeaderItem</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileHeader</color><color=#f8f8f2>)</color> <color=#f8f8f2>fileHeaderEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Log version in the file header applies to all other entries. */</color>
      <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>fileHeaderItem</color><color=#f8f8f2>.</color><color=#a6e22e>getLogVersion</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>prevEntryStart</color> <color=#f92672>=</color> <color=#f8f8f2>entryStart</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>entryStart</color> <color=#f92672>+=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>curOffset</color> <color=#f92672>+</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Processes the item portion of a log entry. After all bytes for the item are read, moves the</color>
<color=#75715e>   * state back to INIT and bumps the entryStart.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>processItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>LogVerificationException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>header</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxSize</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>processSize</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>remaining</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSize</color> <color=#f92672>-</color> <color=#f8f8f2>itemPosition</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>curOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>itemPosition</color> <color=#f92672>+=</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>itemPosition</color> <color=#f92672><=</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>itemPosition</color> <color=#f92672>==</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validator</color><color=#f8f8f2>.</color><color=#a6e22e>validate</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getChecksum</color><color=#f8f8f2>(),</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryStart</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ChecksumException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>        LogEntryType lastEntryType = LogEntryType.findType(header.getType());</color>
<color=#75715e>        System.out.println();</color>
<color=#75715e>        System.out.println(</color>
<color=#75715e>        "Checksum error in logrec of tyoe " +</color>
<color=#75715e>        lastEntryType.toStringNoVersion() + " log version: " + logVersion);</color>
<color=#75715e>        System.out.println();</color>
<color=#75715e>        */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>prevEntryStart</color> <color=#f92672>=</color> <color=#f8f8f2>entryStart</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>entryStart</color> <color=#f92672>+=</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>INIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>curOffset</color> <color=#f92672>+</color> <color=#f8f8f2>processSize</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>LogVerificationException</color> <color=#a6e22e>newVerifyException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>reason</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color><color=#f8f8f2>reason</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>LogVerificationException</color> <color=#a6e22e>newVerifyException</color><color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newVerifyException</color><color=#f8f8f2>(</color><color=#f8f8f2>cause</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cause</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>LogVerificationException</color> <color=#a6e22e>newVerifyException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>reason</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>State</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>logEntrySize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>header</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logEntrySize</color> <color=#f92672>=</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>header</color><color=#f8f8f2>.</color><color=#a6e22e>getItemSize</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logEntrySize</color> <color=#f92672>=</color> <color=#e6db74>"unknown"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogVerificationException</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Log is invalid, fileName: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>fileName</color>
            <color=#f92672>+</color> <color=#e6db74>" fileNumber: 0x"</color>
            <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#e6db74>" logEntryOffset: 0x"</color>
            <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>entryStart</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#e6db74>" logEntrySize: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>logEntrySize</color>
            <color=#f92672>+</color> <color=#e6db74>" verifyState: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>state</color>
            <color=#f92672>+</color> <color=#e6db74>" reason: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>reason</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>cause</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>