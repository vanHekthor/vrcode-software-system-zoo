<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Provides information about the file store associated with a specific file. This class is a</color>
<color=#75715e> * wrapper for the information made available by the {@code java.nio.file.FileStore} class</color>
<color=#75715e> * introduced in Java 7, but using reflection to permit Java 6 to determine cleanly at runtime that</color>
<color=#75715e> * file stores are not supported.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>TODO: We no longer support Java 6 so much of this mechanism can be removed. Other code can</color>
<color=#75715e> * assume that a FileStore is always available. Also, if an IOException is thrown by FileStore</color>
<color=#75715e> * methods, instead of tolerating this we should invalidate the Environment, since this is standard</color>
<color=#75715e> * JE policy. However, we may want to leave the factory interface in place to support testing with</color>
<color=#75715e> * arbitrary disk space limits.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>FileStoreInfo</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The full name of the Java 7 FileStore class, which must be present for this class to be</color>
<color=#75715e>   * supported.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FILE_STORE_CLASS</color> <color=#f92672>=</color> <color=#e6db74>"java.nio.file.FileStore"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The full name of the Java 7 implementation factory class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>JAVA7_FILE_STORE_FACTORY_CLASS</color> <color=#f92672>=</color>
      <color=#e6db74>"com.sleepycat.je.utilint.Java7FileStoreInfo$Java7Factory"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The standard factory. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Factory</color> <color=#f8f8f2>standardFactory</color> <color=#f92672>=</color> <color=#f8f8f2>createFactory</color><color=#f8f8f2>();</color>

  <color=#75715e>/** If not null, a factory to use for testing. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Factory</color> <color=#f8f8f2>testFactory</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A factory interface for getting FileStoreInfo instances. */</color>
  <color=#66d9ef>interface</color> <color=#a6e22e>Factory</color> <color=#f8f8f2>{</color>

    <color=#75715e>/** @see #checkSupported */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>factoryCheckSupported</color><color=#f8f8f2>();</color>

    <color=#75715e>/** @see #getInfo */</color>
    <color=#f8f8f2>FileStoreInfo</color> <color=#a6e22e>factoryGetInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A factory class whose operations fail with a given exception. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>FailingFactory</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Factory</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>exception</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>FailingFactory</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>exception</color> <color=#f92672>=</color> <color=#f8f8f2>exception</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>factoryCheckSupported</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>exception</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>FileStoreInfo</color> <color=#a6e22e>factoryGetInfo</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>String</color> <color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>exception</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Support subclasses. */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>FileStoreInfo</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** Create the standard factory. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Factory</color> <color=#a6e22e>createFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>FILE_STORE_CLASS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FailingFactory</color><color=#f8f8f2>(</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"FileStoreInfo is only supported for Java 7 and later"</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>JAVA7_FILE_STORE_FACTORY_CLASS</color><color=#f8f8f2>).</color><color=#a6e22e>asSubclass</color><color=#f8f8f2>(</color><color=#f8f8f2>Factory</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>).</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FailingFactory</color><color=#f8f8f2>(</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Problem accessing class "</color> <color=#f92672>+</color> <color=#f8f8f2>JAVA7_FILE_STORE_FACTORY_CLASS</color> <color=#f92672>+</color> <color=#e6db74>": "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks whether the current Java runtime supports providing information about file stores.</color>
<color=#75715e>   * Returns normally if called on a Java 7 runtime or later, otherwise throws {@link</color>
<color=#75715e>   * UnsupportedOperationException}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws UnsupportedOperationException if the current runtime does not support file stores</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>checkSupported</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>getFactory</color><color=#f8f8f2>().</color><color=#a6e22e>factoryCheckSupported</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the current factory. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>Factory</color> <color=#a6e22e>getFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>testFactory</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>standardFactory</color> <color=#f8f8f2>:</color> <color=#f8f8f2>testFactory</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For testing: specifies the factory, or null for the default. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setFactory</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Factory</color> <color=#f8f8f2>factory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>testFactory</color> <color=#f92672>=</color> <color=#f8f8f2>factory</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a {@link FileStoreInfo} instance that provides information about the file store</color>
<color=#75715e>   * associated with the specified file. Throws {@link UnsupportedOperationException} if called on a</color>
<color=#75715e>   * Java runtime prior to Java 7. Equal objects will be returned for all files associated with the</color>
<color=#75715e>   * same file store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param file the file</color>
<color=#75715e>   * @return an instance of {@code FileStoreInfo}</color>
<color=#75715e>   * @throws UnsupportedOperationException if called on a Java runtime prior to Java 7</color>
<color=#75715e>   * @throws IllegalStateException if an unexpected exception occurs when attempting to use</color>
<color=#75715e>   *     reflection to access the underlying implementation</color>
<color=#75715e>   * @throws IOException if an I/O error occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>FileStoreInfo</color> <color=#a6e22e>getInfo</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getFactory</color><color=#f8f8f2>().</color><color=#a6e22e>factoryGetInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size, in bytes, of the file store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the size of the file store, in bytes</color>
<color=#75715e>   * @throws IOException if an I/O error occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>long</color> <color=#a6e22e>getTotalSpace</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes available in the file store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of bytes available</color>
<color=#75715e>   * @throws IOException if an I/O error occurs</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>long</color> <color=#a6e22e>getUsableSpace</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>