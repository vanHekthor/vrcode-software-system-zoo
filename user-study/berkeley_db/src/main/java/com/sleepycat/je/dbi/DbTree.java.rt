<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.utilint.StringUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicLong</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.log.entry.DbOperationType.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * DbTree represents the database directory for this environment. DbTree is itself implemented</color>
<color=#75715e> * through two databases. The nameDatabase maps databaseName-> an internal databaseId. The</color>
<color=#75715e> * idDatabase maps databaseId->DatabaseImpl.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example, suppose we have two databases, foo and bar. We have the following structure:</color>
<color=#75715e> *</color>
<color=#75715e> * <p>nameDatabase idDatabase IN IN | | BIN BIN +-------------+--------+ +---------------+--------+</color>
<color=#75715e> * . | | . | | NameLNs NameLN NameLN MapLNs for MapLN MapLN for internal key=bar key=foo internal</color>
<color=#75715e> * dbs key=53 key=79 dbs data= data= data= data= dbId79 dbId53 DatabaseImpl DatabaseImpl | | Tree</color>
<color=#75715e> * for foo Tree for bar | | root IN root IN</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Databases, Cursors, the cleaner, compressor, and other entities have references to</color>
<color=#75715e> * DatabaseImpls. It's important that object identity is properly maintained, and that all</color>
<color=#75715e> * constituents reference the same DatabaseImpl for the same db, lest they develop disparate views</color>
<color=#75715e> * of the in-memory database; corruption would ensue. To ensure that, all entities must obtain their</color>
<color=#75715e> * DatabaseImpl by going through the idDatabase.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>DDL type operations such as create, rename, remove and truncate get their transactional</color>
<color=#75715e> * semantics by transactionally locking the NameLN appropriately. A read-lock on the NameLN, called</color>
<color=#75715e> * a handle lock, is maintained for all DBs opened via the public API (openDatabase). This prevents</color>
<color=#75715e> * them from being renamed or removed while open. See HandleLocker for details.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>However, for internal database operations, no handle lock on the NameLN is acquired and MapLNs</color>
<color=#75715e> * are locked with short-lived non-transactional Lockers. An entity that is trying to get a</color>
<color=#75715e> * reference to the DatabaseImpl gets a short lived read lock just for the fetch of the MapLN, and a</color>
<color=#75715e> * DatabaseImpl usage count is incremented to prevent eviction; see getDb and releaseDb. A write</color>
<color=#75715e> * lock on the MapLN is taken when the database is created, deleted, or when the MapLN is evicted.</color>
<color=#75715e> * (see DatabaseImpl.isInUse())</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The nameDatabase operates pretty much as a regular application database in terms of eviction</color>
<color=#75715e> * and recovery. The idDatabase requires special treatment for both eviction and recovery.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The issues around eviction of the idDatabase center on the need to ensure that there are no</color>
<color=#75715e> * other current references to the DatabaseImpl other than that held by the mapLN. The presence of a</color>
<color=#75715e> * current reference would both make the DatabaseImpl not GC'able, and more importantly, would lead</color>
<color=#75715e> * to object identity confusion later on. For example, if the MapLN is evicted while there is a</color>
<color=#75715e> * current reference to its DatabaseImpl, and then refetched, there will be two in-memory versions</color>
<color=#75715e> * of the DatabaseImpl. Since locks on the idDatabase are short lived, DatabaseImpl.useCount acts as</color>
<color=#75715e> * a reference count of active current references. DatabaseImpl.useCount must be modified and read</color>
<color=#75715e> * in conjunction with appropriate locking on the MapLN. See DatabaseImpl.isInUse() for details.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This reference count checking is only needed when the entire MapLN is evicted. It's possible</color>
<color=#75715e> * to evict only the root IN of the database in question, since that doesn't interfere with the</color>
<color=#75715e> * DatabaseImpl object identity.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another dependency on usage counts was introduced to prevent MapLN deletion during cleaner and</color>
<color=#75715e> * checkpointer operations that are processing entries for a DB. (Without usage counts, this problem</color>
<color=#75715e> * would have occurred even if DB eviction were never implemented.) When the usage count is non-zero</color>
<color=#75715e> * it prohibits deleteMapLN from running. The deleted state of the MapLN must not change during a</color>
<color=#75715e> * reader operation (operation by a thread that has called getDb and not yet called releaseDb).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Why not just hold a MapLN read lock during a reader operation?</color>
<color=#75715e> * -------------------------------------------------------------- Originally this was not done</color>
<color=#75715e> * because of cleaner performance. We afraid that * either of the following solutions would not</color>
<color=#75715e> * perform well: + If we get (and release) a MapLN lock for every entry in a log file, this adds a</color>
<color=#75715e> * lot of per-entry overhead. + If we hold the MapLN read lock for the duration of a log file</color>
<color=#75715e> * cleaning (the assumption is that many entries are for the same DB), then we block checkpoints</color>
<color=#75715e> * during that period, when they call modifyDbRoot. Therefore, the usage count is incremented once</color>
<color=#75715e> * per DB encountered during log cleaning, and the count is decremented at the end. This caching</color>
<color=#75715e> * approach is also used by the HA replayer. In both cases, we do not want to lock the MapLN every</color>
<color=#75715e> * entry/operation, and we do not want to block checkpoints or other callers of modifyDbRoot. It is</color>
<color=#75715e> * acceptable, however, to block DB naming operations.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In addition we allow modifyDbRoot to run when even the usage count is non-zero, which would</color>
<color=#75715e> * not be possible using a read-write locking strategy. I'm not sure why this was done originally,</color>
<color=#75715e> * perhaps to avoid blocking. But currently, it is necessary to prevent a self-deadlock. All callers</color>
<color=#75715e> * of modifyDbRoot first call getDb, which increments the usage count. So if modifyDbRoot was to</color>
<color=#75715e> * check the usage count and retry if non-zero (like deleteMapLN), then it would loop forever.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Why are the retry loops necessary in the DbTree methods?</color>
<color=#75715e> * -------------------------------------------------------- Three methods that access the MapLN</color>
<color=#75715e> * perform retries (forever) when there is a lock conflict: getDb, modifyDbRoot and deleteMapLN.</color>
<color=#75715e> * Initially the retry loops were added to compensate for certain slow operations. To solve that</color>
<color=#75715e> * problem, perhaps there are alternative solutions (increasing the lock timeout). However, the</color>
<color=#75715e> * deleteMapLN retry loop is necessary to avoid deleting it when the DB is in use by reader</color>
<color=#75715e> * operations.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Tendency to livelock -------------------- Because MapLN locks are short lived, but a reader</color>
<color=#75715e> * operation may hold a MapLN/DatabaseImpl for a longer period by incrementing the usage count,</color>
<color=#75715e> * there is the possibility of livelock. One strategy for avoiding livelock is to avoid algorithms</color>
<color=#75715e> * where multiple threads continuously call getDb and releaseDb, since this could prevent completion</color>
<color=#75715e> * of deleteMapLN. [#20816]</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DbTree</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Loggable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* The id->DatabaseImpl tree is always id 0 */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>ID_DB_ID</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#75715e>/* The name->id tree is always id 1 */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>NAME_DB_ID</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Map from internal DB name to type. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbType</color><color=#f92672>></color> <color=#f8f8f2>INTERNAL_TYPES_BY_NAME</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>EnumSet</color><color=#f92672><</color><color=#f8f8f2>DbType</color><color=#f92672>></color> <color=#f8f8f2>set</color> <color=#f92672>=</color> <color=#f8f8f2>EnumSet</color><color=#f8f8f2>.</color><color=#a6e22e>allOf</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>INTERNAL_TYPES_BY_NAME</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbType</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>set</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbType</color> <color=#f8f8f2>t</color> <color=#f8f8f2>:</color> <color=#f8f8f2>set</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>isInternal</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>INTERNAL_TYPES_BY_NAME</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the DbType for a given DB name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that we allow dbName to be null, because it may be null when the 'debug database name'</color>
<color=#75715e>   * is not yet known to DatabaseImpl. This works because the debug name is always known immediately</color>
<color=#75715e>   * for internal DBs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DbType</color> <color=#a6e22e>typeForDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DbType</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>INTERNAL_TYPES_BY_NAME</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>USER</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Database Ids:</color>
<color=#75715e>   * We need to ensure that local and replicated databases use different</color>
<color=#75715e>   * number spaces for their ids, so there can't be any possible conflicts.</color>
<color=#75715e>   * Local, non replicated databases use positive values, replicated</color>
<color=#75715e>   * databases use negative values.  Values -1 thru NEG_DB_ID_START are</color>
<color=#75715e>   * reserved for future special use.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>NEG_DB_ID_START</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>256L</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLong</color> <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>idDatabase</color><color=#f8f8f2>;</color> <color=#75715e>// map db ids -> databases</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>;</color> <color=#75715e>// map names -> dbIds</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The log version at the time the env was created. Is -1 if the initial</color>
<color=#75715e>   * version is unknown, which means it is prior to version 15 because this</color>
<color=#75715e>   * field was added in version 15. For environments created with log version</color>
<color=#75715e>   * 15 and greater, no log entries can have a version LT this field's value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>initialLogVersion</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The flags byte holds a variety of attributes. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color> <color=#f8f8f2>flags</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The replicated bit is set for environments that are opened with</color>
<color=#75715e>   * replication. The behavior is as follows:</color>
<color=#75715e>   *</color>
<color=#75715e>   * Env is     Env is     Persistent          Follow-on action</color>
<color=#75715e>   * replicated brand new  value of</color>
<color=#75715e>   *                       DbTree.isReplicated</color>
<color=#75715e>   *</color>
<color=#75715e>   * 0             1         n/a               replicated bit = 0;</color>
<color=#75715e>   * 0             0           0               none</color>
<color=#75715e>   * 0             0           1               true for r/o, false for r/w</color>
<color=#75715e>   * 1             1          n/a              replicated bit = 1</color>
<color=#75715e>   * 1             0           0               require config of all dbs</color>
<color=#75715e>   * 1             0           1               none</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>REPLICATED_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x1</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The rep converted bit is set when an environments was originally created</color>
<color=#75715e>   * as a standalone (non-replicated) environment, and has been changed to a</color>
<color=#75715e>   * replicated environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The behaviors are as follows:</color>
<color=#75715e>   *</color>
<color=#75715e>   * Value of      Value of the    What happens      Can open     Can open</color>
<color=#75715e>   * RepConfig.      DbTree        when we call       as r/o       as r/2</color>
<color=#75715e>   * allowConvert  replicated bit  ReplicatedEnv()  Environment  Environment</color>
<color=#75715e>   *                                                   later on?   later on?</color>
<color=#75715e>   *</color>
<color=#75715e>   *                           throw exception,   Yes, because  Yes, because</color>
<color=#75715e>   *                            complain that the    env is not   env is not</color>
<color=#75715e>   *  false          false         env is not        converted    converted</color>
<color=#75715e>   *                               replicated</color>
<color=#75715e>   *</color>
<color=#75715e>   *                                              Yes, always ok  No, this is</color>
<color=#75715e>   *                                                 open a         now a</color>
<color=#75715e>   *  true           false          do conversion   replicated     replicated</color>
<color=#75715e>   *                                               env with r/o       env</color>
<color=#75715e>   *</color>
<color=#75715e>   *</color>
<color=#75715e>   *  Ignore         true or      open as a replicated</color>
<color=#75715e>   * allowConvert   brand new      env the usual way       Yes         No</color>
<color=#75715e>   *               Environment</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>REP_CONVERTED_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x2</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The dups converted bit is set when we have successfully converted all</color>
<color=#75715e>   * dups databases after recovery, to indicate that we don't need to perform</color>
<color=#75715e>   * this conversion again for this environment.  It is set initially for a</color>
<color=#75715e>   * brand new environment that uses the new dup database format.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>DUPS_CONVERTED_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x4</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The preserve VLSN bit is set in a replicated environment only, and may</color>
<color=#75715e>   * never be changed after initial environment creation.  See</color>
<color=#75715e>   * RepParams.PRESERVE_RECORD_VERSION.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>PRESERVE_VLSN_BIT</color> <color=#f92672>=</color> <color=#ae81ff>0x8</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of LNs in the naming DB considered to be fairly small, and therefore to result in fairly</color>
<color=#75715e>   * fast execution of getDbName.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>FAST_NAME_LOOKUP_MAX_LNS</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Create a dbTree from the log. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DbTree</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>idDatabase</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>setDebugDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>ID</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>());</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The default is false, but just in case we ever turn it on globally</color>
<color=#75715e>     * for testing this forces it off.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>clearKeyPrefixing</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nameDatabase</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>clearKeyPrefixing</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>setDebugDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>());</color>

    <color=#75715e>/* These sequences are initialized by readFromLog. */</color>
    <color=#f8f8f2>lastAllocatedLocalDbId</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>lastAllocatedReplicatedDbId</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>initialLogVersion</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Create a new dbTree for a new environment. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DbTree</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>replicationIntended</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>preserveVLSN</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Sequences must be initialized before any databases are created.  0</color>
<color=#75715e>     * and 1 are reserved, so we start at 2. We've put -1 to</color>
<color=#75715e>     * NEG_DB_ID_START asided for the future.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>lastAllocatedLocalDbId</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>lastAllocatedReplicatedDbId</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLong</color><color=#f8f8f2>(</color><color=#f8f8f2>NEG_DB_ID_START</color><color=#f8f8f2>);</color>

    <color=#75715e>/* The id database is local */</color>
    <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>idConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>idConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setReplicated</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/* replicated */</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The default is false, but just in case we ever turn it on globally</color>
<color=#75715e>     * for testing this forces it off.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>idConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setKeyPrefixing</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>idDatabase</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>ID</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>),</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>idConfig</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Force a reset if enabled globally. */</color>
    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>clearKeyPrefixing</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>nameConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nameConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setKeyPrefixing</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nameDatabase</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameConfig</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Force a reset if enabled globally. */</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>clearKeyPrefixing</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicationIntended</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setIsReplicated</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>preserveVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setPreserveVLSN</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* New environments don't need dup conversion. */</color>
    <color=#f8f8f2>setDupsConverted</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>initialLogVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The last allocated local and replicated db ids are used for ckpts. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastLocalDbId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastReplicatedDbId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** We get a new database id of the appropriate kind when creating a new database. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getNextLocalDbId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getNextReplicatedDbId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Initialize the db ids, from recovery. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLastDbId</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lastReplicatedDbId</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lastLocalDbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>lastReplicatedDbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>lastLocalDbId</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this id is for a replicated db. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicatedId</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>id</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>id</color> <color=#f92672><</color> <color=#f8f8f2>NEG_DB_ID_START</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Tracks the lowest replicated database id used during a replay of the</color>
<color=#75715e>   * replication stream, so that it's available as the starting point if this</color>
<color=#75715e>   * replica transitions to being the master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateFromReplay</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>replayDbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>replayVal</color> <color=#f92672>=</color> <color=#f8f8f2>replayDbId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replayVal</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isRepConverted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"replay database id is unexpectedly positive "</color> <color=#f92672>+</color> <color=#f8f8f2>replayDbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replayVal</color> <color=#f92672><</color> <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>replayVal</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Initialize the db tree during recovery, after instantiating the tree from the log. a. set up</color>
<color=#75715e>   * references to the environment impl b. check for replication rules.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>initExistingEnvironment</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>eImpl</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>eImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkRulesForExistingEnv</color><color=#f8f8f2>(</color><color=#f8f8f2>isReplicated</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getPreserveVLSN</color><color=#f8f8f2>());</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>eImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>setEnvironmentImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>eImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>setEnvironmentImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>eImpl</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a new database object given a database name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Increments the use count of the new DB to prevent it from being evicted. releaseDb should be</color>
<color=#75715e>   * called when the returned object is no longer used, to allow it to be evicted. See</color>
<color=#75715e>   * DatabaseImpl.isInUse. [#13415]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>createDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>HandleLocker</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>doCreateDb</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>handleLocker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>// replicatedLN</color>
        <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// repContext, to be decided by new db</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a database for internal use. It may or may not be replicated. Since</color>
<color=#75715e>   * DatabaseConfig.replicated is true by default, be sure to set it to false if this is a internal,</color>
<color=#75715e>   * not replicated database.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>createInternalDb</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Force all internal databases to not use key prefixing. */</color>
    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setKeyPrefixing</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color>
        <color=#f8f8f2>doCreateDb</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>// handleLocker,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>// replicatedLN</color>
            <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// repContext, to be decided by new db</color>
    <color=#75715e>/* Force a reset if enabled globally. */</color>
    <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>clearKeyPrefixing</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Create a replicated database on this client node. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>createReplicaDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NameLN</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>doCreateDb</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color>
        <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>// databaseHndle</color>
        <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Increments the use count of the new DB to prevent it from being evicted. releaseDb should be</color>
<color=#75715e>   * called when the returned object is no longer used, to allow it to be evicted. See</color>
<color=#75715e>   * DatabaseImpl.isInUse. [#13415]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do not evict (do not call CursorImpl.setAllowEviction(true)) during low level DbTree</color>
<color=#75715e>   * operation. [#15176]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>doCreateDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>nameLocker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>HandleLocker</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NameLN</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Create a new database object. */</color>
    <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>newId</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>allocatedLocalDbId</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>allocatedRepDbId</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicatedLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * This database was created on a master node and is being</color>
<color=#75715e>       * propagated to this client node.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>newId</color> <color=#f92672>=</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * This database has been created locally, either because this is</color>
<color=#75715e>       * a non-replicated node or this is the replicated group master.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newId</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f8f8f2>(</color><color=#f8f8f2>getNextReplicatedDbId</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>allocatedRepDbId</color> <color=#f92672>=</color> <color=#f8f8f2>newId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>newId</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f8f8f2>(</color><color=#f8f8f2>getNextLocalDbId</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>allocatedLocalDbId</color> <color=#f92672>=</color> <color=#f8f8f2>newId</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDb</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Locker</color> <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>newDb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>nameLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#75715e>/*newId*/</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Get effective rep context and check for replica write. */</color>
      <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>useRepContext</color> <color=#f92672>=</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repContext</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>useRepContext</color> <color=#f92672>=</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>CREATE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>checkReplicaWrite</color><color=#f8f8f2>(</color><color=#f8f8f2>nameLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>useRepContext</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Insert it into name -> id db. */</color>
      <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>nameDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameLocker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LN</color> <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicatedLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NameLN</color><color=#f8f8f2>(</color><color=#f8f8f2>newId</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>insertRecord</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>),</color> <color=#75715e>// key</color>
          <color=#f8f8f2>nameLN</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*blindInsertion*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>useRepContext</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Record handle lock. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handleLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>acquireHandleLock</color><color=#f8f8f2>(</color><color=#f8f8f2>nameCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Insert it into id -> name db, in auto commit mode. */</color>
      <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>idDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>insertRecord</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>newId</color><color=#f8f8f2>.</color><color=#a6e22e>getBytes</color><color=#f8f8f2>()</color> <color=#75715e>/*key*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>MapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>)</color> <color=#75715e>/*ln*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*blindInsertion*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Increment DB use count with lock held. */</color>
      <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>incrementUseCount</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idDbLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Undo the allocation of the database ID if DB creation fails.  We</color>
<color=#75715e>       * use compareAndSet so that we don't undo the assignment of the ID</color>
<color=#75715e>       * by another concurrent operation, for example, truncation.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Note that IDs are not conserved in doTruncateDb when a failure</color>
<color=#75715e>       * occurs.  This inconsistency is historical and may or may not be</color>
<color=#75715e>       * the best approach.</color>
<color=#75715e>       *</color>
<color=#75715e>       * [#18642]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allocatedRepDbId</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#f8f8f2>allocatedRepDbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>allocatedRepDbId</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>allocatedLocalDbId</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#f8f8f2>allocatedLocalDbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>allocatedLocalDbId</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens (or creates if it does not exist) an internal, non-replicated DB. Returns null only if</color>
<color=#75715e>   * the DB does not exist and the env is read-only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>openNonRepInternalDB</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DbType</color> <color=#f8f8f2>dbType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>dbType</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>autoTxn</color> <color=#f92672>=</color> <color=#f8f8f2>Txn</color><color=#f8f8f2>.</color><color=#a6e22e>createLocalAutoTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>());</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>autoTxn</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseConfig</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setReplicated</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>createInternalDb</color><color=#f8f8f2>(</color><color=#f8f8f2>autoTxn</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>autoTxn</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called after locking a NameLN with nameCursor when opening a database. The NameLN may be locked</color>
<color=#75715e>   * for read or write, depending on whether the database existed when openDatabase was called. Here</color>
<color=#75715e>   * we additionally lock the NameLN for read on behalf of the handleLocker, which is kept by the</color>
<color=#75715e>   * Database handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The lock must be acquired while the BIN is latched, so the locker will be updated if the LSN</color>
<color=#75715e>   * changes. There is no lock contention possible because the HandleLocker shares locks with the</color>
<color=#75715e>   * nameCursor locker, and jumpAheadOfWaiters=true is passed in case another locker is waiting on a</color>
<color=#75715e>   * write lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the lock is denied, checkPreempted is called on the nameCursor locker, in case the lock</color>
<color=#75715e>   * is denied because the nameCursor's lock was preempted. If so, DatabasePreemptedException will</color>
<color=#75715e>   * be thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see CursorImpl#lockLN</color>
<color=#75715e>   * @see HandleLocker</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>acquireHandleLock</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>HandleLocker</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>latchBIN</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentLsn</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>LockResult</color> <color=#f8f8f2>lockResult</color> <color=#f92672>=</color>
          <color=#f8f8f2>handleLocker</color><color=#f8f8f2>.</color><color=#a6e22e>nonBlockingLock</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>READ</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*jumpAheadOfWaiters*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockResult</color><color=#f8f8f2>.</color><color=#a6e22e>getLockGrant</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>DENIED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>().</color><color=#a6e22e>checkPreempted</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#e6db74>"No contention is possible with HandleLocker: "</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Check deferred write settings before writing the MapLN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param db the database represented by this MapLN</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>optionalModifyDbRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>modifyDbRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Write the MapLN to disk.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param db the database represented by this MapLN</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>modifyDbRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>modifyDbRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#75715e>/*ifBeforeLsn*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*mustExist*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Write a MapLN to the log in order to: - propagate a root change - save per-db utilization</color>
<color=#75715e>   * information - save database config information. Any MapLN writes must be done through this</color>
<color=#75715e>   * method, in order to ensure that the root latch is taken, and updates to the rootIN are properly</color>
<color=#75715e>   * safeguarded. See MapN.java for more detail.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param db the database whose root is held by this MapLN</color>
<color=#75715e>   * @param ifBeforeLsn if argument is not NULL_LSN, only do the write if this MapLN's current LSN</color>
<color=#75715e>   *     is before isBeforeLSN.</color>
<color=#75715e>   * @param mustExist if true, throw DatabaseException if the DB does not exist; if false, silently</color>
<color=#75715e>   *     do nothing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>modifyDbRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>ifBeforeLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>mustExist</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do not write LNs in read-only env.  This method is called when</color>
<color=#75715e>     * recovery causes a root split. [#21493]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInInit</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ID_DB_ID</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>NAME_DB_ID</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>logMapTreeRoot</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyDbt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>().</color><color=#a6e22e>getBytes</color><color=#f8f8f2>());</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Retry indefinitely in the face of lock timeouts since the</color>
<color=#75715e>       * lock on the MapLN is only supposed to be held for short</color>
<color=#75715e>       * periods.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Locker</color> <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>idDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>);</color>

          <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>keyDbt</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mustExist</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INTEGRITY</color><color=#f8f8f2>,</color>
                  <color=#e6db74>"Can't find database ID: "</color> <color=#f92672>+</color> <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
            <color=#75715e>/* Do nothing silently. */</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* Check BIN LSN while latched. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ifBeforeLsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color>
              <color=#f92672>||</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentLsn</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ifBeforeLsn</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>MapLN</color> <color=#f8f8f2>mapLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MapLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentLN</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>/*isLatched*/</color> <color=#66d9ef>true</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>

            <color=#66d9ef>assert</color> <color=#f8f8f2>mapLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>/* Should be locked. */</color>

            <color=#75715e>/* Perform rewrite. */</color>
            <color=#f8f8f2>RewriteMapLN</color> <color=#f8f8f2>writeMapLN</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RewriteMapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>cursor</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>mapLN</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>().</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>withRootLatchedExclusive</color><color=#f8f8f2>(</color><color=#f8f8f2>writeMapLN</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Continue loop and retry. */</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idDbLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>RewriteMapLN</color> <color=#66d9ef>implements</color> <color=#f8f8f2>WithRootLatched</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>RewriteMapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cursor</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>doWork</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>ChildReference</color> <color=#f8f8f2>root</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataDbt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>updateCurrentRecord</color><color=#f8f8f2>(</color>
          <color=#66d9ef>null</color> <color=#75715e>/*replaceKey*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>dataDbt</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*expirationInfo*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*foundData*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*returnNewData*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * In other places (e.g., when write locking a record in ReadOnlyTxn) we allow writes to the</color>
<color=#75715e>   * naming DB on a replica, since we allow both replicated and non-replicated DBs and therefore</color>
<color=#75715e>   * some NameLNs are replicated and some are not. Below is the sole check to prevent a creation,</color>
<color=#75715e>   * removal, truncation, or configuration update of a replicated DB on a replica. It will throw</color>
<color=#75715e>   * ReplicaWriteException on a replica if this operation would assign a new VLSN. [#20543]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkReplicaWrite</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repContext</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>.</color><color=#a6e22e>mustGenerateVLSN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>disallowReplicaWrite</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used by lockNameLN to get the rep context, which is needed for calling checkReplicaWrite. */</color>
  <color=#66d9ef>interface</color> <color=#a6e22e>GetRepContext</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ReplicationContext</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Thrown by lockNameLN when an incorrect locker was used via auto-commit. See</color>
<color=#75715e>   * Environment.DbNameOperation. A checked exception is used to ensure that it is always handled</color>
<color=#75715e>   * internally and never propagated to the app.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>NeedRepLockerException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Helper for database operations. This method positions a cursor on the NameLN that represents</color>
<color=#75715e>   * this database and write locks it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do not evict (do not call CursorImpl.setAllowEviction(true)) during low level DbTree</color>
<color=#75715e>   * operation. [#15176]</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException via Environment.remove/rename/truncateDatabase</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>NameLockResult</color> <color=#a6e22e>lockNameLN</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>action</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetRepContext</color> <color=#f8f8f2>getRepContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We have to return both a cursor on the naming tree and a</color>
<color=#75715e>     * reference to the found DatabaseImpl.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>NameLockResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NameLockResult</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Find the existing DatabaseImpl and establish a cursor. */</color>
    <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Attempted to "</color> <color=#f92672>+</color> <color=#f8f8f2>action</color> <color=#f92672>+</color> <color=#e6db74>" non-existent database "</color> <color=#f92672>+</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Get effective rep context and check for replica write. */</color>
      <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color> <color=#f92672>=</color> <color=#f8f8f2>getRepContext</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>checkReplicaWrite</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check for an incorrect locker created via auto-commit.  This</color>
<color=#75715e>       * check is made after we have the DatabaseImpl and can check</color>
<color=#75715e>       * whether it is replicated.  See Environment.DbNameOperation.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnLocker</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
          <color=#f92672>&&</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnLocker</color><color=#f8f8f2>().</color><color=#a6e22e>isAutoTxn</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NeedRepLockerException</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>nameDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Position the cursor at the specified NameLN. */</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>));</color>
      <color=#75715e>/* See [#16210]. */</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Attempted to "</color> <color=#f92672>+</color> <color=#f8f8f2>action</color> <color=#f92672>+</color> <color=#e6db74>" non-existent database "</color> <color=#f92672>+</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Call lockAndGetCurrentLN to write lock the nameLN. */</color>
      <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>NameLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentLN</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>/*isLatched*/</color> <color=#66d9ef>true</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>/* Should be locked. */</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check for open handles after we have the write lock and no other</color>
<color=#75715e>       * transactions can open a handle.  After obtaining the write lock,</color>
<color=#75715e>       * other handles may be open only if (1) we preempted their locks,</color>
<color=#75715e>       * or (2) a handle was opened with the same transaction as used for</color>
<color=#75715e>       * this operation.  For (1), we mark the handles as preempted to</color>
<color=#75715e>       * cause a DatabasePreemptedException the next time they are</color>
<color=#75715e>       * accessed.  For (2), we throw IllegalStateException.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getImportunate</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* We preempted the lock of all open DB handles. [#17015] */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
            <color=#e6db74>"Database "</color>
                <color=#f92672>+</color> <color=#f8f8f2>databaseName</color>
                <color=#f92672>+</color> <color=#e6db74>" has been forcibly closed in order to apply a"</color>
                <color=#f92672>+</color> <color=#e6db74>" replicated "</color>
                <color=#f92672>+</color> <color=#f8f8f2>action</color>
                <color=#f92672>+</color> <color=#e6db74>" operation.  This Database"</color>
                <color=#f92672>+</color> <color=#e6db74>" and all associated Cursors must be closed.  All"</color>
                <color=#f92672>+</color> <color=#e6db74>" associated Transactions must be aborted."</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>db</color> <color=#f8f8f2>:</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getReferringHandles</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>setPreempted</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Disallow open handles for the same transaction. */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>handleCount</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getReferringHandleCount</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handleCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Can't "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>action</color>
                  <color=#f92672>+</color> <color=#e6db74>" database "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>databaseName</color>
                  <color=#f92672>+</color> <color=#e6db74>", "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>handleCount</color>
                  <color=#f92672>+</color> <color=#e6db74>" open Database handles exist"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>NameLockResult</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>NameLN</color> <color=#f8f8f2>nameLN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the NameLN for the DatabaseImpl when the DatabaseConfig changes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>JE MapLN actually includes the DatabaseImpl information, but it is not transactional, so the</color>
<color=#75715e>   * DatabaseConfig information is stored in NameLNLogEntry and replicated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>So when there is a DatabaseConfig changes, we'll update the NameLN for the database, which</color>
<color=#75715e>   * will log a new NameLNLogEntry so that the rep stream will transfer it to the replicas and it</color>
<color=#75715e>   * will be replayed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param locker the locker used to update the NameLN</color>
<color=#75715e>   * @param dbName the name of the database whose corresponding NameLN needs to be updated</color>
<color=#75715e>   * @param repContext information used while replaying a NameLNLogEntry on the replicas, it's null</color>
<color=#75715e>   *     on master</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateNameLN</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>dbName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Find and write lock on the NameLN. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>NameLockResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>lockNameLN</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color>
              <color=#e6db74>"updateConfig"</color><color=#f8f8f2>,</color>
              <color=#66d9ef>new</color> <color=#f8f8f2>GetRepContext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationContext</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                  <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>repContext</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                      <color=#f92672>?</color> <color=#f8f8f2>repContext</color>
                      <color=#f8f8f2>:</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>UPDATE_CONFIG</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
              <color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen; db is known when locker is created. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>useRepContext</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Log a NameLN. */</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataDbt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>updateCurrentRecord</color><color=#f8f8f2>(</color>
          <color=#66d9ef>null</color> <color=#75715e>/*replaceKey*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>dataDbt</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*expirationInfo*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*foundData*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*returnNewData*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>useRepContext</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Rename the database by creating a new NameLN and deleting the old one.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the database handle of the impacted database</color>
<color=#75715e>   * @throws DatabaseNotFoundException if the operation fails because the given DB name is not</color>
<color=#75715e>   *     found.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>doRenameDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NameLN</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>NameLockResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>lockNameLN</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
            <color=#e6db74>"rename"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>GetRepContext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

              <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationContext</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>repContext</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>repContext</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>RENAME</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>useRepContext</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Rename simply deletes the one entry in the naming tree and</color>
<color=#75715e>       * replaces it with a new one. Remove the oldName->dbId entry and</color>
<color=#75715e>       * insert newName->dbId.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>deleteCurrentRecord</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>NameLN</color> <color=#f8f8f2>useLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicatedLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>replicatedLN</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>NameLN</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Reset cursor to remove old BIN before calling insertRecord.</color>
<color=#75715e>       * [#16280]</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>insertRecord</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>),</color> <color=#f8f8f2>useLN</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*blindInsertion*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>useRepContext</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setDebugDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>newName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Stand alone and Master invocations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #doRenameDb</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>dbRename</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>doRenameDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Replica invocations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #doRenameDb</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>renameReplicaDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>newName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NameLN</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>doRenameDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>newName</color><color=#f8f8f2>,</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen; db is known when locker is created. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Remove the database by deleting the nameLN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a handle to the renamed database</color>
<color=#75715e>   * @throws DatabaseNotFoundException if the operation fails because the given DB name is not</color>
<color=#75715e>   *     found, or the non-null checkId argument does not match the database identified by</color>
<color=#75715e>   *     databaseName.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>doRemoveDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>checkId</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>NameLockResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>lockNameLN</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
            <color=#e6db74>"remove"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>GetRepContext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

              <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationContext</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>repContext</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>repContext</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>useRepContext</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkId</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>checkId</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>(</color><color=#e6db74>"ID mismatch: "</color> <color=#f92672>+</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Delete the NameLN. There's no need to mark any Database</color>
<color=#75715e>       * handle invalid, because the handle must be closed when we</color>
<color=#75715e>       * take action and any further use of the handle will re-look</color>
<color=#75715e>       * up the database.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>deleteCurrentRecord</color><color=#f8f8f2>(</color><color=#f8f8f2>useRepContext</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Schedule database for final deletion during commit. This</color>
<color=#75715e>       * should be the last action taken, since this will take</color>
<color=#75715e>       * effect immediately for non-txnal lockers.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Do not call releaseDb here on result.dbImpl, since that is</color>
<color=#75715e>       * taken care of by markDeleteAtTxnEnd.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>markDeleteAtTxnEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Stand alone and Master invocations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #doRemoveDb</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>dbRemove</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>checkId</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>doRemoveDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkId</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Replica invocations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #doRemoveDb</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeReplicaDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>checkId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>doRemoveDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkId</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen; db is known when locker is created. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * To truncate, remove the database named by databaseName and create a new database in its place.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do not evict (do not call CursorImpl.setAllowEviction(true)) during low level DbTree</color>
<color=#75715e>   * operation. [#15176]</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param returnCount if true, must return the count of records in the database, which can be an</color>
<color=#75715e>   *     expensive option.</color>
<color=#75715e>   * @return the record count, oldDb and newDb packaged in a TruncateDbResult</color>
<color=#75715e>   * @throws DatabaseNotFoundException if the operation fails because the given DB name is not</color>
<color=#75715e>   *     found.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TruncateDbResult</color> <color=#a6e22e>doTruncateDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>returnCount</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NameLN</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicatedLN</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>repContext</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>NameLockResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>lockNameLN</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
            <color=#e6db74>"truncate"</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>GetRepContext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

              <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationContext</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>repContext</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                    <color=#f92672>?</color> <color=#f8f8f2>repContext</color>
                    <color=#f8f8f2>:</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getOperationRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>TRUNCATE</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameCursor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>useRepContext</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Make a new database with an empty tree. Make the nameLN refer to</color>
<color=#75715e>       * the id of the new database. If this database is replicated, the</color>
<color=#75715e>       * new one should also be replicated, and vice versa.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>oldDb</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>newId</color> <color=#f92672>=</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>replicatedLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
              <color=#f92672>?</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color>
              <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseId</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>isReplicatedId</color><color=#f8f8f2>(</color><color=#f8f8f2>oldDb</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>())</color>
                      <color=#f92672>?</color> <color=#f8f8f2>getNextReplicatedDbId</color><color=#f8f8f2>()</color>
                      <color=#f8f8f2>:</color> <color=#f8f8f2>getNextLocalDbId</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDb</color> <color=#f92672>=</color> <color=#f8f8f2>oldDb</color><color=#f8f8f2>.</color><color=#a6e22e>cloneDatabase</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>incrementUseCount</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>newId</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>setTree</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Tree</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>));</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Insert the new MapLN into the id tree. Do not use a transaction</color>
<color=#75715e>       * on the id database, because we can not hold long term locks on</color>
<color=#75715e>       * the mapLN.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>idDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>insertRecord</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>newId</color><color=#f8f8f2>.</color><color=#a6e22e>getBytes</color><color=#f8f8f2>()</color> <color=#75715e>/*key*/</color><color=#f8f8f2>,</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>MapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>),</color>
            <color=#66d9ef>false</color> <color=#75715e>/*blindInsertion*/</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idDbLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>

      <color=#75715e>/* If required, count the number of records in the database. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>recordCount</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>returnCount</color> <color=#f92672>?</color> <color=#f8f8f2>oldDb</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

      <color=#75715e>/* log the nameLN. */</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataDbt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>updateCurrentRecord</color><color=#f8f8f2>(</color>
          <color=#66d9ef>null</color> <color=#75715e>/*replaceKey*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>dataDbt</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*expirationInfo*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*foundData*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color> <color=#75715e>/*returnNewData*/</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>useRepContext</color><color=#f8f8f2>);</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Marking the lockers should be the last action, since it</color>
<color=#75715e>       * takes effect immediately for non-txnal lockers.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Do not call releaseDb here on oldDb or newDb, since that is</color>
<color=#75715e>       * taken care of by markDeleteAtTxnEnd.</color>
<color=#75715e>       */</color>

      <color=#75715e>/* Schedule old database for deletion if txn commits. */</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>markDeleteAtTxnEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>oldDb</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Schedule new database for deletion if txn aborts. */</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>markDeleteAtTxnEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>newDb</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TruncateDbResult</color><color=#f8f8f2>(</color><color=#f8f8f2>oldDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>recordCount</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Effectively a struct used to return multiple values of interest.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>TruncateDbResult</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>oldDB</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>recordCount</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>TruncateDbResult</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>oldDB</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>recordCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>oldDB</color> <color=#f92672>=</color> <color=#f8f8f2>oldDB</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>newDb</color> <color=#f92672>=</color> <color=#f8f8f2>newDb</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>recordCount</color> <color=#f92672>=</color> <color=#f8f8f2>recordCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see #doTruncateDb */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TruncateDbResult</color> <color=#a6e22e>truncate</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>returnCount</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>doTruncateDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>returnCount</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see #doTruncateDb */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>TruncateDbResult</color> <color=#a6e22e>truncateReplicaDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>returnCount</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>NameLN</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DbOpReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>doTruncateDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>returnCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>replicatedLN</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NeedRepLockerException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Should never happen; db is known when locker is created. */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Remove the mapLN that refers to this database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Do not evict (do not call CursorImpl.setAllowEviction(true)) during low</color>
<color=#75715e>   * level DbTree operation. [#15176]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>deleteMapLN</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Retry indefinitely in the face of lock timeouts since the lock on</color>
<color=#75715e>     * the MapLN is only supposed to be held for short periods.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>idDbLocker</color> <color=#f92672>=</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>idDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>);</color>

        <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>getBytes</color><color=#f8f8f2>()),</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * If the database is in use by an internal JE operation</color>
<color=#75715e>           * (checkpointing, cleaning, etc), release the lock (done</color>
<color=#75715e>           * in the finally block) and retry.  [#15805]</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>MapLN</color> <color=#f8f8f2>mapLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MapLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentLN</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>/*isLatched*/</color> <color=#66d9ef>true</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>

          <color=#66d9ef>assert</color> <color=#f8f8f2>mapLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>mapLN</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInUseDuringDbRemove</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>deleteCurrentRecord</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* MapLN does not exist. */</color>
          <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Continue loop and retry. */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* searchExact leaves BIN latched. */</color>
          <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idDbLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>idDbLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a database object given a database name. Increments the use count of the given DB to</color>
<color=#75715e>   * prevent it from being evicted. releaseDb should be called when the returned object is no longer</color>
<color=#75715e>   * used, to allow it to be evicted. See DatabaseImpl.isInUse. [#13415]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do not evict (do not call CursorImpl.setAllowEviction(true)) during low level DbTree</color>
<color=#75715e>   * operation. [#15176]</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nameLocker is used to access the NameLN. As always, a NullTxn is used to access the</color>
<color=#75715e>   *     MapLN.</color>
<color=#75715e>   * @param databaseName target database</color>
<color=#75715e>   * @return null if database doesn't exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>nameLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>HandleLocker</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>writeLock</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Use count is not incremented for idDatabase and nameDatabase. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>ID</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>idDatabase</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Search the nameDatabase tree for the NameLn for this name.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nameCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>nameDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameLocker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyDbt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseName</color><color=#f8f8f2>));</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>keyDbt</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>keyDbt</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>READ</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>NameLN</color> <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>NameLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentLN</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>/*isLatched*/</color> <color=#66d9ef>true</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>nameLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>/* Should be locked. */</color>
        <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#f8f8f2>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>

        <color=#75715e>/* Record handle lock. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handleLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>acquireHandleLock</color><color=#f8f8f2>(</color><color=#f8f8f2>nameCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>nameCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Now search the id tree.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a database object based on an id only. Used by recovery, cleaning and other clients who</color>
<color=#75715e>   * have an id in hand, and don't have a resident node, to find the matching database for a given</color>
<color=#75715e>   * log entry.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a database object based on an id only. Specify the lock timeout to use, or -1 to use the</color>
<color=#75715e>   * default timeout. A timeout should normally only be specified by daemons with their own timeout</color>
<color=#75715e>   * configuration. public for unit tests.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get a database object based on an id only, caching the id-db mapping in the given map. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbCache</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbCache</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get a database object based on an id only. Specify the lock timeout to use, or -1 to use the</color>
<color=#75715e>   * default timeout. A timeout should normally only be specified by daemons with their own timeout</color>
<color=#75715e>   * configuration. public for unit tests.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Increments the use count of the given DB to prevent it from being evicted. releaseDb should</color>
<color=#75715e>   * be called when the returned object is no longer used, to allow it to be evicted. See</color>
<color=#75715e>   * DatabaseImpl.isInUse. [#13415]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do not evict (do not call CursorImpl.setAllowEviction(true)) during low level DbTree</color>
<color=#75715e>   * operation. [#15176]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lockTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbNameIfAvailable</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* We're looking for the id database itself. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>idDatabase</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* We're looking for the name database itself. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Scan the tree for this db. */</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>foundDbImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Retry indefinitely in the face of lock timeouts.  Deadlocks may</color>
<color=#75715e>       * be due to conflicts with modifyDbRoot.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockTimeout</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>setLockTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>lockTimeout</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>idCursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>idDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyDbt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>.</color><color=#a6e22e>getBytes</color><color=#f8f8f2>());</color>

          <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>searchExact</color><color=#f8f8f2>(</color><color=#f8f8f2>keyDbt</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>READ</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>MapLN</color> <color=#f8f8f2>mapLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MapLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentLN</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>/*isLatched*/</color> <color=#66d9ef>true</color> <color=#75715e>/*unlatch*/</color><color=#f8f8f2>);</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>mapLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>/* Should be locked. */</color>
            <color=#f8f8f2>foundDbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>mapLN</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>();</color>
            <color=#75715e>/* Increment DB use count with lock held. */</color>
            <color=#f8f8f2>foundDbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>incrementUseCount</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>operationOk</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Continue loop and retry. */</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idCursor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>releaseBIN</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>idCursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>operationOk</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Set the debugging name in the databaseImpl.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>setDebugNameForDatabaseImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>foundDbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbNameIfAvailable</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>foundDbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Decrements the use count of the given DB, allowing it to be evicted if the use count reaches</color>
<color=#75715e>   * zero. Must be called to release a DatabaseImpl that was returned by a method in this class. See</color>
<color=#75715e>   * DatabaseImpl.isInUse. [#13415]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Use count is not incremented for idDatabase and nameDatabase. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>db</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>db</color> <color=#f92672>!=</color> <color=#f8f8f2>idDatabase</color> <color=#f92672>&&</color> <color=#f8f8f2>db</color> <color=#f92672>!=</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>decrementUseCount</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Calls releaseDb for all DBs in the given map of DatabaseId to DatabaseImpl. See</color>
<color=#75715e>   * getDb(DatabaseId, long, Map). [#13415]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseDbs</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbCache</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>databaseImpl</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbCache</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>databaseImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * We need to cache a database name in the dbImpl for later use in error</color>
<color=#75715e>   * messages, when it may be unsafe to walk the mapping tree.  Finding a</color>
<color=#75715e>   * name by id is slow, so minimize the number of times we must set the</color>
<color=#75715e>   * debug name.  The debug name will only be uninitialized when an existing</color>
<color=#75715e>   * databaseImpl is faulted in.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setDebugNameForDatabaseImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* If a name was provided, use that. */</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setDebugDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Only worry about searching for a name if the name is</color>
<color=#75715e>         * uninitialized.  Only search after recovery had finished</color>
<color=#75715e>         * setting up the tree.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Only do name lookup if it will be fairly fast.  Debugging</color>
<color=#75715e>         * info isn't important enough to cause long lookups during log</color>
<color=#75715e>         * cleaning, for example.  [#21015]</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDebugNameAvailable</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>getFastNameLookup</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setDebugDatabaseName</color><color=#f8f8f2>(</color><color=#f8f8f2>getDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Rebuild the IN list after recovery. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>rebuildINListMapDb</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>rebuildINList</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the naming DB has a fairly small number of names, and therefore execution of</color>
<color=#75715e>   * getDbName will be fairly fast.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getFastNameLookup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>getMaxLNs</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>FAST_NAME_LOOKUP_MAX_LNS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the database name for a given db. Slow, must traverse. Called by Database.getName.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Do not evict (do not call CursorImpl.setAllowEviction(true)) during low level DbTree</color>
<color=#75715e>   * operation. [#15176]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDbName</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ID_DB_ID</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>ID</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>NAME_DB_ID</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DbType</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>class</color> <color=#a6e22e>Traversal</color> <color=#66d9ef>implements</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>WithCursor</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>withCursor</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color>
          <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>NameLN</color> <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>NameLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrentLN</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameLN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>());</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Traversal</color> <color=#f8f8f2>traversal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Traversal</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>traverseDbWithCursor</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*allowEviction*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>traversal</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>traversal</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return a map of database ids to database names (Strings). */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getDbNamesAndIds</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>nameMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#66d9ef>class</color> <color=#a6e22e>Traversal</color> <color=#66d9ef>implements</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>WithCursor</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>withCursor</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color>
          <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>NameLN</color> <color=#f8f8f2>nameLN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>NameLN</color><color=#f8f8f2>)</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>lockAndGetCurrentLN</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#f8f8f2>nameLN</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>nameMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>()));</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Traversal</color> <color=#f8f8f2>traversal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Traversal</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>traverseDbWithCursor</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*allowEviction*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>traversal</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return a list of database names held in the environment, as strings. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getDbNames</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>nameList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>traverseDbWithCursor</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color> <color=#75715e>/*allowEviction*/</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>CursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>WithCursor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>withCursor</color><color=#f8f8f2>(</color>
              <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
              <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color>
              <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>());</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isReservedDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>nameList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>nameList</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the name is a reserved JE database name. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReservedDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>typeForDbName</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>).</color><color=#a6e22e>isInternal</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the higest level node for this database. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getHighestLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The highest level in the map side */</color>
    <color=#f8f8f2>RootLevel</color> <color=#f8f8f2>getLevel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RootLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>withRootLatchedShared</color><color=#f8f8f2>(</color><color=#f8f8f2>getLevel</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getLevel</color><color=#f8f8f2>.</color><color=#a6e22e>getRootLevel</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>REPLICATED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setIsReplicated</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>REPLICATED_BIT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Return true if this environment is converted from standalone to</color>
<color=#75715e>   * replicated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isRepConverted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>REP_CONVERTED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setIsRepConverted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>REP_CONVERTED_BIT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getIdDatabaseImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>idDatabase</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getNameDatabaseImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>getDupsConverted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>DUPS_CONVERTED_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setDupsConverted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>DUPS_CONVERTED_BIT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getPreserveVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>PRESERVE_VLSN_BIT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setPreserveVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>flags</color> <color=#f92672>|=</color> <color=#f8f8f2>PRESERVE_VLSN_BIT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the initial log version at the time the env was created, or -1 if the env was created</color>
<color=#75715e>   * prior to log version 15.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getInitialLogVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>initialLogVersion</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Release resources and update memory budget. Should only be called when this dbtree is closed</color>
<color=#75715e>   * and will never be accessed again.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>releaseTreeAdminMemory</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>releaseTreeAdminMemory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTreeAdminMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getTreeAdminMemory</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getTreeAdminMemory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * RootLevel lets us fetch the root IN within the root latch.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>RootLevel</color> <color=#66d9ef>implements</color> <color=#f8f8f2>WithRootLatched</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>rootLevel</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>RootLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>db</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>rootLevel</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>IN</color> <color=#a6e22e>doWork</color><color=#f8f8f2>(</color><color=#f8f8f2>ChildReference</color> <color=#f8f8f2>root</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>root</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>IN</color> <color=#f8f8f2>rootIN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IN</color><color=#f8f8f2>)</color> <color=#f8f8f2>root</color><color=#f8f8f2>.</color><color=#a6e22e>fetchTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>rootLevel</color> <color=#f92672>=</color> <color=#f8f8f2>rootIN</color><color=#f8f8f2>.</color><color=#a6e22e>getLevel</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#a6e22e>getRootLevel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>rootLevel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Logging support</color>
<color=#75715e>   */</color>

  <color=#75715e>/** @see Loggable#getLogSize */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLongLogSize</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#75715e>// lastAllocatedLocalDbId</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLongLogSize</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#75715e>// lastAllocatedReplicatedDbId</color>
        <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color>
        <color=#f92672>+</color> <color=#ae81ff>1</color>
        <color=#f92672>+</color> <color=#75715e>// 1 byte of flags</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>initialLogVersion</color><color=#f8f8f2>);</color>
    <color=#75715e>// initialLogVersion</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This log entry type is configured to perform marshaling (getLogSize and writeToLog) under the</color>
<color=#75715e>   * write log mutex. Otherwise, the size could change in between calls to these two methods as the</color>
<color=#75715e>   * result of utilizaton tracking.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Loggable#writeToLog</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Long format, rather than packed long format, is used for the last</color>
<color=#75715e>     * allocated DB IDs.  The IDs, and therefore their packed length, can</color>
<color=#75715e>     * change between the getLogSize and writeToLog calls. Since the root</color>
<color=#75715e>     * is infrequently logged, the simplest solution is to use fixed size</color>
<color=#75715e>     * values. [#18540]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>logBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>flags</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>initialLogVersion</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#readFromLog */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color> <color=#75715e>// id db</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>);</color> <color=#75715e>// name db</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#f8f8f2>itemBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672>>=</color> <color=#ae81ff>15</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>initialLogVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readPackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>itemBuffer</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>initialLogVersion</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#dumpLog */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<dbtree lastLocalDbId = \""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" lastReplicatedDbId = \""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lastAllocatedReplicatedDbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<idDb>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</idDb><nameDb>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</nameDb>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</dbtree>"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#getTransactionId */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTransactionId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#logicalEquals Always return false, this item should never be compared. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>logicalEquals</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>Loggable</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For unit test support</color>
<color=#75715e>   */</color>

  <color=#f8f8f2>String</color> <color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>nSpaces</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>self</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>TreeUtils</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<dbTree lastDbId =\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lastAllocatedLocalDbId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>dumpString</color><color=#f8f8f2>(</color><color=#f8f8f2>nSpaces</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</dbtree>"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>self</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dumpString</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For debugging. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dump</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>idDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>dump</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nameDatabase</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>().</color><color=#a6e22e>dump</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>