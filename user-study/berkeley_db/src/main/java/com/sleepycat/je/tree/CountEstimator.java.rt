<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.tree</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.OperationResult</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.CursorImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockType</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Estimates the number of non-deleted BIN entries between two end points, using information</color>
<color=#75715e> * returned in TrackingInfo from Tree.getParentINForChildIN. Used for estimating dup counts, e.g.,</color>
<color=#75715e> * for join query optimization. Accuracy is limited by the number of samples taken to compute the</color>
<color=#75715e> * average number of entries at each level. Currently only two samples (at the end points) are</color>
<color=#75715e> * taken, and because the tree is not balanced making the number of entries highly variable, the</color>
<color=#75715e> * count can easily be off by a factor of two.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CountEstimator</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* If exceeded, there must be a bug of some kind. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_RETRIES_AFTER_SPLIT</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an estimate of the number of records between two end points specified by begin/end</color>
<color=#75715e>   * cursor positions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>beginCursor</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>beginInclusive</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>endCursor</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>endInclusive</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* If the two cursors are at the same position, return 1. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>beginCursor</color><color=#f8f8f2>.</color><color=#a6e22e>isOnSamePosition</color><color=#f8f8f2>(</color><color=#f8f8f2>endCursor</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Compute estimate for cursors at different positions. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>CountEstimator</color> <color=#f8f8f2>estimator</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CountEstimator</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>estimator</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#f8f8f2>beginCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>endCursor</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>beginInclusive</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>endInclusive</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>beginStack</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>endStack</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>>></color> <color=#f8f8f2>avgEntriesStacks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>>></color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>levelCount</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>rootLevel</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>avgEntries</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#a6e22e>CountEstimator</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>beginCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>endCursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numRetries</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>numRetries</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If we have retried too many times, give up.  This is probably</color>
<color=#75715e>       * due to a bug of some kind, and we shouldn't loop forever.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numRetries</color> <color=#f92672>></color> <color=#f8f8f2>MAX_RETRIES_AFTER_SPLIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Set up the initial info for the computation.  Retry if a split</color>
<color=#75715e>       * occurs.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>beginStack</color> <color=#f92672>=</color> <color=#f8f8f2>beginCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getAncestorPath</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>beginStack</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>endStack</color> <color=#f92672>=</color> <color=#f8f8f2>endCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getAncestorPath</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>endStack</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>findCommonAncestor</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Get the the average entries from the two end points.  */</color>
      <color=#f8f8f2>getAvgEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>beginCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>endCursor</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Return the count.  FUTURE: Taking more samples between the two</color>
<color=#75715e>       * end points would increase accuracy.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>countTotal</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Find the common ancestor node for the two end points, which we'll call the root level. If no</color>
<color=#75715e>   * common ancestor can be found, return false to restart the process, because a split must have</color>
<color=#75715e>   * occurred in between getting the two stacks for the end points.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>findCommonAncestor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>levelCount</color> <color=#f92672>=</color> <color=#f8f8f2>beginStack</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>levelCount</color> <color=#f92672>!=</color> <color=#f8f8f2>endStack</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Must have been a root split. */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>rootLevel</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>levelCount</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>beginStack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>).</color><color=#a6e22e>nodeId</color> <color=#f92672>==</color> <color=#f8f8f2>endStack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>).</color><color=#a6e22e>nodeId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rootLevel</color> <color=#f92672>=</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
      <color=#75715e>/* Must have been a split. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>rootLevel</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This method starts with a preliminary average using just the two end points. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>getAvgEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>beginCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>endCursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>avgEntriesStacks</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>addAvgEntriesSample</color><color=#f8f8f2>(</color><color=#f8f8f2>beginStack</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sampleNextBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>beginCursor</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*moveForward*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>addAvgEntriesSample</color><color=#f8f8f2>(</color><color=#f8f8f2>endStack</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sampleNextBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>endCursor</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*moveForward*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>computeAvgEntries</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** FUTURE: use internal skip method instead, saving a btree lookup. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>sampleNextBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>beginOrEndCursor</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>moveForward</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#f8f8f2>beginOrEndCursor</color><color=#f8f8f2>.</color><color=#a6e22e>cloneCursor</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/*samePosition*/</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>latchBIN</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>moveForward</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>setOnLastSlot</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>setOnFirstSlot</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
              <color=#66d9ef>null</color> <color=#75715e>/*foundKey*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*foundData*/</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>,</color>
              <color=#66d9ef>false</color> <color=#75715e>/*dirtyReadAll*/</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>moveForward</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*alreadyLatched*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*rangeConstraint*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>stack</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getAncestorPath</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stack</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>addAvgEntriesSample</color><color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * At each level we compute the average number of entries. This will be used as a multipler to</color>
<color=#75715e>   * estimate the number of nodes for any IN at that level.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>computeAvgEntries</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>avgEntries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>levelCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>avgEntries</color><color=#f92672>[</color><color=#f8f8f2>levelCount</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>1.0F</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>avgEntriesStacks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>levelCount</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>totalEntries</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>stack</color> <color=#f8f8f2>:</color> <color=#f8f8f2>avgEntriesStacks</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>totalEntries</color> <color=#f92672>+=</color> <color=#f8f8f2>stack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>).</color><color=#a6e22e>entries</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>avg</color> <color=#f92672>=</color> <color=#f8f8f2>totalEntries</color> <color=#f92672>/</color> <color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>avgEntriesStacks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>avgEntries</color><color=#f92672>[</color><color=#f8f8f2>level</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>avg</color> <color=#f92672>*</color> <color=#f8f8f2>avgEntries</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addAvgEntriesSample</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>stack</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFirstBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>isLastBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>avgEntriesStacks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFirstBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>stack</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>stack</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>TrackingInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>stack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLastBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>stack</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>stack</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>TrackingInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>stack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>!=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Count the total for each node that is between the two end points. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>countTotal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>total</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Add nodes between the end points at the root level. */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>rootIndex1</color> <color=#f92672>=</color> <color=#f8f8f2>beginStack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>rootLevel</color><color=#f8f8f2>).</color><color=#a6e22e>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>rootIndex2</color> <color=#f92672>=</color> <color=#f8f8f2>endStack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>rootLevel</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootIndex2</color> <color=#f92672>></color> <color=#f8f8f2>rootIndex1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>total</color> <color=#f92672>+=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>((</color><color=#f8f8f2>rootIndex2</color> <color=#f92672>-</color> <color=#f8f8f2>rootIndex1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>avgEntries</color><color=#f92672>[</color><color=#f8f8f2>rootLevel</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Add nodes under the end points at lower levels. */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>rootLevel</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672><</color> <color=#f8f8f2>levelCount</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Add nodes under left end point that are to its right. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>leftIndex</color> <color=#f92672>=</color> <color=#f8f8f2>beginStack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastIndex</color> <color=#f92672>=</color> <color=#f8f8f2>beginStack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>).</color><color=#a6e22e>entries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastIndex</color> <color=#f92672>></color> <color=#f8f8f2>leftIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>total</color> <color=#f92672>+=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>((</color><color=#f8f8f2>lastIndex</color> <color=#f92672>-</color> <color=#f8f8f2>leftIndex</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>avgEntries</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Add nodes under right end point that are to its left. */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>rightIndex</color> <color=#f92672>=</color> <color=#f8f8f2>endStack</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>firstIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rightIndex</color> <color=#f92672>></color> <color=#f8f8f2>firstIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>total</color> <color=#f92672>+=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>((</color><color=#f8f8f2>rightIndex</color> <color=#f92672>-</color> <color=#f8f8f2>firstIndex</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>avgEntries</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>total</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For future use, if getKeyRatios is exposed in the API. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>KeyRatios</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>less</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>equal</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>greater</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>KeyRatios</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>less</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color> <color=#f8f8f2>equal</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color> <color=#f8f8f2>greater</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>less</color> <color=#f92672>=</color> <color=#f8f8f2>less</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>equal</color> <color=#f92672>=</color> <color=#f8f8f2>equal</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>greater</color> <color=#f92672>=</color> <color=#f8f8f2>greater</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"less: "</color> <color=#f92672>+</color> <color=#f8f8f2>less</color> <color=#f92672>+</color> <color=#e6db74>" equal: "</color> <color=#f92672>+</color> <color=#f8f8f2>equal</color> <color=#f92672>+</color> <color=#e6db74>" greater: "</color> <color=#f92672>+</color> <color=#f8f8f2>greater</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For future use, if getKeyRatios is exposed in the API.  Be sure to test</color>
<color=#75715e>   * boundary conditions when index is 0 or nEntries.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Algorithm copied from __bam_key_range in BDB btree/bt_stat.c.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>KeyRatios</color> <color=#a6e22e>getKeyRatios</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TrackingInfo</color><color=#f92672>></color> <color=#f8f8f2>infoByLevel</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>exact</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>double</color> <color=#f8f8f2>factor</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>double</color> <color=#f8f8f2>less</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>double</color> <color=#f8f8f2>greater</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * At each level we know that INs greater than index contain keys</color>
<color=#75715e>     * greater than what we are looking for and those less than index are</color>
<color=#75715e>     * less than.  The one pointed to by index may have some less, some</color>
<color=#75715e>     * greater or even equal.  If index is equal to the number of entries,</color>
<color=#75715e>     * then the key is out of range and everything is less.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>TrackingInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>infoByLevel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>greater</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>factor</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f92672>/</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>==</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>less</color> <color=#f92672>+=</color> <color=#f8f8f2>factor</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>less</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>factor</color> <color=#f92672>*</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>greater</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>factor</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color> <color=#f92672>-</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f92672>/</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Factor at next level down is 1/n'th the amount at this level. */</color>
      <color=#f8f8f2>factor</color> <color=#f92672>/=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>      System.out.println("factor: " + factor +</color>
<color=#75715e>                         " less: " + less +</color>
<color=#75715e>                         " greater: " + greater);</color>
<color=#75715e>      */</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If there was an exact match then assign the 1/n'th factor to the key</color>
<color=#75715e>     * itself.  Otherwise that factor belongs to those greater than the</color>
<color=#75715e>     * key, unless the key was out of range.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>equal</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exact</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>equal</color> <color=#f92672>=</color> <color=#f8f8f2>factor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>less</color> <color=#f92672>!=</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>greater</color> <color=#f92672>+=</color> <color=#f8f8f2>factor</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>equal</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>KeyRatios</color><color=#f8f8f2>(</color><color=#f8f8f2>less</color><color=#f8f8f2>,</color> <color=#f8f8f2>equal</color><color=#f8f8f2>,</color> <color=#f8f8f2>greater</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>