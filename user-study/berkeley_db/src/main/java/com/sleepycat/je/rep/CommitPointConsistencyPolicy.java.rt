<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.CommitToken</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ReplicaConsistencyPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.Replica</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.PropUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A consistency policy which ensures that the environment on a Replica node is at least as current</color>
<color=#75715e> * as denoted by the specified {@link CommitToken}. This token represents a point in the serialized</color>
<color=#75715e> * transaction schedule created by the master. In other words, this token is like a bookmark,</color>
<color=#75715e> * representing a particular transaction commit in the replication stream. The Replica ensures that</color>
<color=#75715e> * the commit identified by the {@link CommitToken} has been executed on this node before allowing</color>
<color=#75715e> * the application's {@link</color>
<color=#75715e> * com.sleepycat.je.Environment#beginTransaction(com.sleepycat.je.Transaction,</color>
<color=#75715e> * com.sleepycat.je.TransactionConfig) Environment.beginTransaction()} operation on the Replica to</color>
<color=#75715e> * proceed.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example, suppose the application is a web application where a replicated group is</color>
<color=#75715e> * implemented within a load balanced web server group. Each request to the web server consists of</color>
<color=#75715e> * an update operation followed by read operations (say from the same client), The read operations</color>
<color=#75715e> * naturally expect to see the data from the updates executed by the same request. However, the read</color>
<color=#75715e> * operations might have been routed to a node that did not execute the update.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In such a case, the update request would generate a {@link CommitToken}, which would be</color>
<color=#75715e> * resubmitted by the browser, along with subsequent read requests. The read request could be</color>
<color=#75715e> * directed at any one of the available web servers by a load balancer. The node which executes the</color>
<color=#75715e> * read request would create a CommitPointConsistencyPolicy with that {@link CommitToken} and use it</color>
<color=#75715e> * at transaction begin. If the environment at the web server was already current (wrt the commit</color>
<color=#75715e> * token), it could immediately execute the transaction and satisfy the request. If not, the</color>
<color=#75715e> * "transaction begin" would stall until the Replica replay had caught up and the change was</color>
<color=#75715e> * available at that web server.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Consistency policies are specified at either a per-transaction level through {@link</color>
<color=#75715e> * com.sleepycat.je.TransactionConfig#setConsistencyPolicy} or as an replication node wide default</color>
<color=#75715e> * through {@link ReplicationConfig#setConsistencyPolicy}</color>
<color=#75715e> *</color>
<color=#75715e> * @see com.sleepycat.je.CommitToken</color>
<color=#75715e> * @see <a href="{@docRoot}/../ReplicationGuide/consistency.html" target="_top">Managing</color>
<color=#75715e> *     Consistency</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CommitPointConsistencyPolicy</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The name:{@value} associated with this policy. The name can be used when constructing policy</color>
<color=#75715e>   * property values for use in je.properties files.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>NAME</color> <color=#f92672>=</color> <color=#e6db74>"CommitPointConsistencyPolicy"</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Identifies the commit of interest in a serialized transaction schedule.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>CommitToken</color> <color=#f8f8f2>commitToken</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of time (in milliseconds) to wait for consistency to be</color>
<color=#75715e>   * reached.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Defines how current a Replica needs to be in terms of a specific transaction that was committed</color>
<color=#75715e>   * on the Master. A transaction on the Replica that uses this consistency policy is allowed to</color>
<color=#75715e>   * start only after the transaction identified by the <code>commitToken</code> has been committed</color>
<color=#75715e>   * on the Replica. The {@link com.sleepycat.je.Environment#beginTransaction(</color>
<color=#75715e>   * com.sleepycat.je.Transaction, com.sleepycat.je.TransactionConfig)</color>
<color=#75715e>   * Environment.beginTransaction()} will wait for at most <code>timeout</code> for the Replica to</color>
<color=#75715e>   * catch up. If the Replica has not caught up in this period, the <code>beginTransaction()</code></color>
<color=#75715e>   * method will throw a {@link ReplicaConsistencyException}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param commitToken the token identifying the transaction</color>
<color=#75715e>   * @param timeout the maximum amount of time that the transaction start will wait to allow the</color>
<color=#75715e>   *     Replica to catch up.</color>
<color=#75715e>   * @param timeoutUnit the {@code TimeUnit} for the timeout parameter.</color>
<color=#75715e>   * @throws IllegalArgumentException if the commitToken or timeoutUnit is null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>CommitPointConsistencyPolicy</color><color=#f8f8f2>(</color><color=#f8f8f2>CommitToken</color> <color=#f8f8f2>commitToken</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>timeoutUnit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>commitToken</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"commitToken must not be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>commitToken</color> <color=#f92672>=</color> <color=#f8f8f2>commitToken</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>durationToMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeoutUnit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the name:{@value #NAME}, associated with this policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #NAME</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>NAME</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only. Ensures that the replica has replayed the replication stream to</color>
<color=#75715e>   *     the point identified by the commit token or past it. If it has not, the method waits until</color>
<color=#75715e>   *     the constraint is satisfied, or the timeout period has expired, whichever event takes place</color>
<color=#75715e>   *     first.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>ensureConsistency</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicaConsistencyException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Cast is done to preserve replication/non replication code</color>
<color=#75715e>     * boundaries.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>commitToken</color><color=#f8f8f2>.</color><color=#a6e22e>getRepenvUUID</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>getUUID</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Replication environment mismatch. "</color>
              <color=#f92672>+</color> <color=#e6db74>"The UUID associated with the commit token is: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>commitToken</color><color=#f8f8f2>.</color><color=#a6e22e>getRepenvUUID</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" but this replica environment has the UUID: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>getUUID</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Replica</color> <color=#f8f8f2>replica</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>replica</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getConsistencyTracker</color><color=#f8f8f2>().</color><color=#a6e22e>awaitVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>commitToken</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSN</color><color=#f8f8f2>(),</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the <code>CommitToken</code> used to create this consistency policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the <code>CommitToken</code> used to create this consistency policy.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CommitToken</color> <color=#a6e22e>getCommitToken</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>commitToken</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the timeout specified when creating this consistency policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param unit the {@code TimeUnit} of the returned value.</color>
<color=#75715e>   * @return the timeout specified when creating this consistency policy</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>PropUtil</color><color=#f8f8f2>.</color><color=#a6e22e>millisToDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Object#hashCode() */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>prime</color> <color=#f92672>=</color> <color=#ae81ff>31</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>prime</color> <color=#f92672>*</color> <color=#f8f8f2>result</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>commitToken</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>commitToken</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>prime</color> <color=#f92672>*</color> <color=#f8f8f2>result</color> <color=#f92672>+</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Object#equals(Object) */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#f8f8f2>obj</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>CommitPointConsistencyPolicy</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>CommitPointConsistencyPolicy</color> <color=#f8f8f2>other</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>CommitPointConsistencyPolicy</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>commitToken</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>commitToken</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>commitToken</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>commitToken</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>timeout</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" commitToken="</color> <color=#f92672>+</color> <color=#f8f8f2>commitToken</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>