<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher.Response</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.utilint.StringUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.DataInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.ByteChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.Channel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Provides Dispatcher service handshake logic, including identification of the service to be</color>
<color=#75715e> * accessed and authentication for access to the service.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The service initialization protocol looks like one of these flows. In the flows, the notation</color>
<color=#75715e> * byte(X) indicates that X is a 1-byte network field and 2byte(X) indicates that X is a 2-byte</color>
<color=#75715e> * network field.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If No authentication is configured: Client Dispatcher -> "Service:" + byte(len) + <service</color>
<color=#75715e> * name> <- byte(OK|BUSY|UNKNOWN_SERVICE)</color>
<color=#75715e> *</color>
<color=#75715e> * <p>If authentication is configured: Client Dispatcher -> "Service:" + byte(len) + <service name></color>
<color=#75715e> * <- byte(AUTHENTICATE) -> "Authenticate:" + byte(<len>) + <mechanism list> <- "Mechanism:" +</color>
<color=#75715e> * 2byte(<len>) + <server-selected mech name> + ":" + <auth mech params> -> <Mechanism-specific</color>
<color=#75715e> * payload> <- byte(OK|BUSY|UNKNOWN_SERVICE|INVALID)</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The code here is organized into client-side and server-side functions. Client-side code is</color>
<color=#75715e> * presumed to operated in blocking mode and server-side code is presumed to operate in non-blocking</color>
<color=#75715e> * mode.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ServiceHandshake</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** The maximum length of a service name */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SERVICE_NAME_LIMIT</color> <color=#f92672>=</color> <color=#ae81ff>127</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Maximum number of times to retry a write operation</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CHANNEL_WRITE_ATTEMPT_LIMIT</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Operation-level result indicator */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* A failure has been detected */</color>
    <color=#f8f8f2>FAIL</color><color=#f8f8f2>,</color>
    <color=#75715e>/* Need to read additional input - only applicable server-side*/</color>
    <color=#f8f8f2>READ</color><color=#f8f8f2>,</color>
    <color=#75715e>/* Successful completion */</color>
    <color=#f8f8f2>DONE</color><color=#f8f8f2>,</color>
    <color=#75715e>/* Authentication failure, but no notification sent yet. */</color>
    <color=#f8f8f2>REJECT</color>
  <color=#f8f8f2>}</color>

    <color=#75715e>/** Server-side handshake state */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ServerHandshake</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* The communication channel on which we are operating */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The dispatcher on whose behalf we are operating */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The set of valid authentication mechanisms available for use */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>

    <color=#75715e>/* The current handshake operation being processed */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ServerInitOp</color> <color=#f8f8f2>currentOp</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Discovered as part of the handshake protocol */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ServerHandshake</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>dataChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channel</color> <color=#f92672>=</color> <color=#f8f8f2>dataChannel</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dispatcher</color> <color=#f92672>=</color> <color=#f8f8f2>dispatcher</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>authInfo</color> <color=#f92672>=</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>currentOp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReceiveNameOp</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DataChannel</color> <color=#a6e22e>getChannel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Callback for underlying init operations upon successful discovery of the requested service</color>
<color=#75715e>     * name.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>setServiceName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceName</color> <color=#f92672>=</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>String</color> <color=#a6e22e>getServiceName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Process the handshake incrementally, as channel is presumed to be in non-blocking mode.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This function returns one of the following: InitResult.READ: handshake is not complete;</color>
<color=#75715e>     * more data needed InitResult.FAIL: handshake was rejected or otherwise failed the underlying</color>
<color=#75715e>     * data channel has been closed. InitResult.DONE: handshake is complete, and any authentication</color>
<color=#75715e>     * has been performed. A Response still needs to be sent to the client. Caller must do this</color>
<color=#75715e>     * after any additional validation that may be required.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>InitResult</color> <color=#a6e22e>process</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>currentOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>isTrustCapable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>isTrusted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Authentication of the requester has been handled at the</color>
<color=#75715e>           * DataChannel level, so no need to worry further about</color>
<color=#75715e>           * authentication.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
            <color=#e6db74>"DataChannel is trust-capable but is not trusted"</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Defer rejecting the connection until the</color>
<color=#75715e>         * RequireAuthenticateOp step, in case there is an alternate</color>
<color=#75715e>         * authentication mechanism.</color>
<color=#75715e>         */</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentOp</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RequireAuthenticateOp</color> <color=#f92672>||</color> <color=#f8f8f2>authInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Either we've just successfully completed authentication or</color>
<color=#75715e>         * no authentication is required.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Initiate the authentication step. */</color>
      <color=#f8f8f2>currentOp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RequireAuthenticateOp</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>currentOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noteError</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>noteError</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Client-side handshake state */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ClientHandshake</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ClientHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>,</color> <color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>authInfo</color> <color=#f92672>=</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceName</color> <color=#f92672>=</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ioAdapter</color> <color=#f92672>=</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Process the entire handshake sequence and report the final response code received from the</color>
<color=#75715e>     * service dispatcher.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Response</color> <color=#a6e22e>process</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SendNameOp</color> <color=#f8f8f2>nameOp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SendNameOp</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>nameResult</color> <color=#f92672>=</color> <color=#f8f8f2>nameOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ioAdapter</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameResult</color> <color=#f92672>==</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameOp</color><color=#f8f8f2>.</color><color=#a6e22e>getResponse</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>AUTHENTICATE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>nameOp</color><color=#f8f8f2>.</color><color=#a6e22e>getResponse</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>DoAuthenticateOp</color> <color=#f8f8f2>authOp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DoAuthenticateOp</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>authResult</color> <color=#f92672>=</color> <color=#f8f8f2>authOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ioAdapter</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authResult</color> <color=#f92672>==</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>authOp</color><color=#f8f8f2>.</color><color=#a6e22e>getResponse</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The base class of elemental service initialization protocol operations for the server side. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ServerInitOp</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The handshake to which the operation belongs */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#a6e22e>ServerInitOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>initState</color> <color=#f92672>=</color> <color=#f8f8f2>initState</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Incrementally process the operation. The operation may require multiple passes since we are</color>
<color=#75715e>     * presumed to be in non-blocking mode.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This function returns one of the following: InitResult.READ: operation is not complete;</color>
<color=#75715e>     * more data needed InitResult.FAIL: operation was rejected or otherwise failed the underlying</color>
<color=#75715e>     * data channel has been closed. InitResult.DONE: operation has completed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/** Helper function to read until the buffer is full. */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>fillBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Premature EOF */</color>
          <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
              <color=#e6db74>"Premature EOF on channel: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>channel</color>
                  <color=#f92672>+</color> <color=#e6db74>", service: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceName</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" - read() returned: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>READ</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Helper function to write the contents of the buffer. We make the simplifying assumption here</color>
<color=#75715e>     * that we will be able to write as much as we want (within reason).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>sendBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>tryCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Premature EOF */</color>
          <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
              <color=#e6db74>"Premature EOF on channel: "</color> <color=#f92672>+</color> <color=#f8f8f2>channel</color> <color=#f92672>+</color> <color=#e6db74>" write() returned: "</color> <color=#f92672>+</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>tryCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tryCount</color> <color=#f92672>></color> <color=#f8f8f2>CHANNEL_WRITE_ATTEMPT_LIMIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
                <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
                <color=#e6db74>"Failed to write to channel. "</color>
                    <color=#f92672>+</color> <color=#e6db74>"Send buffer size: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketChannel</color><color=#f8f8f2>().</color><color=#a6e22e>socket</color><color=#f8f8f2>().</color><color=#a6e22e>getSendBufferSize</color><color=#f8f8f2>());</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Failed to write to channel"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>tryCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Closes the channel, logging any resulting exceptions.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param channel the channel being closed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>Channel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
              <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
              <color=#e6db74>"Exception during cleanup: "</color> <color=#f92672>+</color> <color=#f8f8f2>e1</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The base class of elemental service initialization protocol operations for the client side. The</color>
<color=#75715e>   * operation is assumed to be in blocking I/O mode.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ClientInitOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#a6e22e>ClientInitOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>initState</color> <color=#f92672>=</color> <color=#f8f8f2>initState</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Process the operation in support of the handshake. This operation may consist of read and/or</color>
<color=#75715e>     * write operations.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This function returns one of the following: InitResult.FAIL: operation was rejected or</color>
<color=#75715e>     * otherwise failed. The underlying communication channel needs to be closed by the caller.</color>
<color=#75715e>     * InitResult.DONE: operation has completed. The most recent Response from the server received</color>
<color=#75715e>     * during this operation is available for inspection. Note that this may return DONE with the</color>
<color=#75715e>     * response set to a failure response value (e.g. INVALID)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/** Response is set after processOp returns InitResult.DONE. */</color>
    <color=#f8f8f2>Response</color> <color=#a6e22e>getResponse</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>response</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>setResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>Response</color> <color=#f8f8f2>response</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>response</color> <color=#f92672>=</color> <color=#f8f8f2>response</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Operations to communicate the requested service name. This is the initial portion of the</color>
<color=#75715e>   * message and if we have a connection from a foreign entity, this is most likely to detect an</color>
<color=#75715e>   * error.</color>
<color=#75715e>   */</color>

  <color=#75715e>/* The prefix for a service request. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>REQUEST_PREFIX</color> <color=#f92672>=</color> <color=#e6db74>"Service:"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>REQUEST_PREFIX_BYTES</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>REQUEST_PREFIX</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Server-side: expect client to provide a service name. Expected data format: Literal: "Service:"</color>
<color=#75715e>   * in ASCII encoding Length: 1 byte Service Name: <Length> bytes in ASCII encoding</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ReceiveNameOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ServerInitOp</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The initial size is the prefix plus the byte that holds the</color>
<color=#75715e>     * length of the service name.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INITIAL_BUFFER_SIZE</color> <color=#f92672>=</color> <color=#f8f8f2>REQUEST_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ReceiveNameOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>INITIAL_BUFFER_SIZE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>InitResult</color> <color=#f8f8f2>readResult</color> <color=#f92672>=</color> <color=#f8f8f2>fillBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>readResult</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>capacity</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>INITIAL_BUFFER_SIZE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * We've received exactly enough data to contain:</color>
<color=#75715e>         * "Service:"<Length></color>
<color=#75715e>         * Make sure that it has the right format.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>prefix</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>REQUEST_PREFIX</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>prefix</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>REQUEST_PREFIX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
              <color=#e6db74>"Malformed service request: "</color> <color=#f92672>+</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>FORMAT_ERROR</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Enlarge the buffer to read the service name as well */</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nameLength</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>INITIAL_BUFFER_SIZE</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameLength</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
              <color=#e6db74>"Bad service service name length: "</color> <color=#f92672>+</color> <color=#f8f8f2>nameLength</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>FORMAT_ERROR</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>newBuffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>INITIAL_BUFFER_SIZE</color> <color=#f92672>+</color> <color=#f8f8f2>nameLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>newBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>newBuffer</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Recursive call to get the service name</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If we made it here, we have a complete service request</color>
<color=#75715e>       * message. Extract the service name from the buffer</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>request</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>setServiceName</color><color=#f8f8f2>(</color><color=#f8f8f2>request</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>REQUEST_PREFIX</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Client-side: Send the initial service request to the server and await a Response. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>SendNameOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ClientInitOp</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>SendNameOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceName</color> <color=#f92672>=</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>message</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>message</color> <color=#f92672>=</color> <color=#f8f8f2>serviceRequestMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to encode requested service name"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>responseBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>responseBytes</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"No service response byte: "</color> <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>responseBytes</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected read response byte: "</color> <color=#f92672>+</color> <color=#f8f8f2>responseBytes</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>setResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Builds a service request suitable for sending over to a ServiceDispatcher.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param serviceName the service that is being requested. The service name must be less than</color>
<color=#75715e>     *     SERVICE_NAME_LIMIT in size.</color>
<color=#75715e>     * @return the byte encoding of the service request message</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>serviceRequestMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>serviceNameBytes</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>serviceNameBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#f8f8f2>SERVICE_NAME_LIMIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"The provided service name is too long: "</color> <color=#f92672>+</color> <color=#f8f8f2>serviceName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>REQUEST_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>serviceNameBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>REQUEST_PREFIX_BYTES</color><color=#f8f8f2>).</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>serviceNameBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>).</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceNameBytes</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Top-level operations for handling service authentication.</color>
<color=#75715e>   * This class is used upon receipt of a service request which we have</color>
<color=#75715e>   * responded to with an AUTHENTICATE.  The operation has two</color>
<color=#75715e>   * sub-phases:</color>
<color=#75715e>   *   1) negotiate an authentication methods,</color>
<color=#75715e>   *   2) complete the negotiated method.</color>
<color=#75715e>   */</color>

  <color=#75715e>/* The prefix for an authentication request. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>AUTH_PREFIX</color> <color=#f92672>=</color> <color=#e6db74>"Authenticate:"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>AUTH_PREFIX_BYTES</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The prefix for an authentication mechanism response. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>AUTH_MECH_PREFIX</color> <color=#f92672>=</color> <color=#e6db74>"Mechanism:"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>AUTH_PREFIX_BYTES</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>AUTH_PREFIX</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>AUTH_MECH_PREFIX</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Server side operation to communicate the need for authentication to the client, negotiate an</color>
<color=#75715e>   * authentication mechanism and then complete the authentication.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>RequireAuthenticateOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ServerInitOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ExpectAuthRequestOp</color> <color=#f8f8f2>expectRequestOp</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ServerInitOp</color> <color=#f8f8f2>authOp</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>RequireAuthenticateOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>authInfo</color> <color=#f92672>=</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expectRequestOp</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Tell the other end that they need to authenticate */</color>
        <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>AUTHENTICATE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>InitResult</color> <color=#f8f8f2>writeResult</color> <color=#f92672>=</color> <color=#f8f8f2>sendBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>writeResult</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>expectRequestOp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ExpectAuthRequestOp</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authOp</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Waiting for the authentication initiation request */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>readResult</color> <color=#f92672>=</color> <color=#f8f8f2>expectRequestOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>readResult</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>AuthenticationMethod</color> <color=#f8f8f2>selectedAuth</color> <color=#f92672>=</color> <color=#f8f8f2>expectRequestOp</color><color=#f8f8f2>.</color><color=#a6e22e>getSelectedAuthentication</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>selectedAuth</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>selectedAuth</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoMatchAuthentication</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>authOp</color> <color=#f92672>=</color> <color=#f8f8f2>selectedAuth</color><color=#f8f8f2>.</color><color=#a6e22e>getServerOp</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>

        <color=#75715e>/* Prepare the response message */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>authResponseStr</color> <color=#f92672>=</color>
            <color=#f8f8f2>selectedAuth</color><color=#f8f8f2>.</color><color=#a6e22e>getMechanismName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>":"</color> <color=#f92672>+</color> <color=#f8f8f2>selectedAuth</color><color=#f8f8f2>.</color><color=#a6e22e>getServerParams</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>authResponseBytes</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>authResponseStr</color><color=#f8f8f2>);</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#f8f8f2>authResponseBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>PROCEED</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>authResponseBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>authResponseBytes</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>

        <color=#75715e>/* Send the response message */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>writeResult</color> <color=#f92672>=</color> <color=#f8f8f2>sendBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>writeResult</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>authOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Client side operation to request authentication. This is done in response to a message from the</color>
<color=#75715e>   * server notifying us that authentication is required. The implementation of processOp()</color>
<color=#75715e>   * aggregates functionality from SendRequestOp, which tells the server what authentication we can</color>
<color=#75715e>   * provide, and then when we've agreed with the server on how to communicate, another ClientOp is</color>
<color=#75715e>   * created that provides the actual authentication implementation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DoAuthenticateOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ClientInitOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DoAuthenticateOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>authInfo</color> <color=#f92672>=</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Tell the server that we want to authenticate ourselves, and</color>
<color=#75715e>       * negotiate with the server how that will happen.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>SendRequestOp</color> <color=#f8f8f2>sendOp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SendRequestOp</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>sendResult</color> <color=#f92672>=</color> <color=#f8f8f2>sendOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ioAdapter</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sendResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>sendResult</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Now use the authOp determined by sendOp() to perform the</color>
<color=#75715e>       * actual authentication steps.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClientInitOp</color> <color=#f8f8f2>authOp</color> <color=#f92672>=</color> <color=#f8f8f2>sendOp</color><color=#f8f8f2>.</color><color=#a6e22e>getAuthOp</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InitResult</color> <color=#f8f8f2>authResult</color> <color=#f92672>=</color> <color=#f8f8f2>authOp</color><color=#f8f8f2>.</color><color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ioAdapter</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authResult</color> <color=#f92672>==</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>authOp</color><color=#f8f8f2>.</color><color=#a6e22e>getResponse</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>authResult</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Server side Authentication request setup. Expect an authentication request that looks like:</color>
<color=#75715e>   * Authenticate:<len><mechanism list> where len is a 1-byte length and mechanism list is a</color>
<color=#75715e>   * comma-separated list of available authentication mechanisms. Upon completion, selectedMechanism</color>
<color=#75715e>   * is non-null if the client supports an authentication mechanism in common with us.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ExpectAuthRequestOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ServerInitOp</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Three pieces of information that we need to get */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WAIT_FOR_REQUEST</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WAIT_FOR_LIST_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WAIT_FOR_LIST</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>phase</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>availableAuth</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>AuthenticationMethod</color> <color=#f8f8f2>selectedAuth</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ExpectAuthRequestOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>availableAuth</color> <color=#f92672>=</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>phase</color> <color=#f92672>=</color> <color=#f8f8f2>WAIT_FOR_REQUEST</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>AUTH_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return the negotiated authentication mechanism. Returns null if no common authentication</color>
<color=#75715e>     * mechanism found.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>AuthenticationMethod</color> <color=#a6e22e>getSelectedAuthentication</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>selectedAuth</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>InitResult</color> <color=#f8f8f2>readResult</color> <color=#f92672>=</color> <color=#f8f8f2>fillBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>readResult</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>phase</color> <color=#f92672>==</color> <color=#f8f8f2>WAIT_FOR_REQUEST</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>prefix</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>AUTH_PREFIX</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>prefix</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>AUTH_PREFIX</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
              <color=#e6db74>"Malformed authentication request: "</color> <color=#f92672>+</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sendBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>FORMAT_ERROR</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Get the length of auth mechanism list */</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>limit</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>phase</color> <color=#f92672>=</color> <color=#f8f8f2>WAIT_FOR_LIST_SIZE</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>readResult</color> <color=#f92672>=</color> <color=#f8f8f2>fillBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>readResult</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>phase</color> <color=#f92672>==</color> <color=#f8f8f2>WAIT_FOR_LIST_SIZE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>mechListSize</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mechListSize</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
              <color=#e6db74>"Negative mechanism list size received: "</color> <color=#f92672>+</color> <color=#f8f8f2>mechListSize</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sendBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>FORMAT_ERROR</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Now get the list itself */</color>
        <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>mechListSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>phase</color> <color=#f92672>=</color> <color=#f8f8f2>WAIT_FOR_LIST</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>readResult</color> <color=#f92672>=</color> <color=#f8f8f2>fillBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readResult</color> <color=#f92672>!=</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>readResult</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>phase</color> <color=#f92672>!=</color> <color=#f8f8f2>WAIT_FOR_LIST</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected state: + phase"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get the mechanism list in string form and then split into</color>
<color=#75715e>       * constituent components.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>mechListStr</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>capacity</color><color=#f8f8f2>());</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>mechList</color> <color=#f92672>=</color> <color=#f8f8f2>mechListStr</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#e6db74>","</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Find the first available match */</color>
      <color=#f8f8f2>selectedAuth</color> <color=#f92672>=</color> <color=#f8f8f2>findMatch</color><color=#f8f8f2>(</color><color=#f8f8f2>mechList</color><color=#f8f8f2>,</color> <color=#f8f8f2>availableAuth</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>selectedAuth</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* No acceptable mechanism found */</color>
        <color=#f8f8f2>initState</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color>
            <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// noteError</color>
            <color=#e6db74>"No acceptable authentication mechanism in list: "</color> <color=#f92672>+</color> <color=#f8f8f2>mechListStr</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sendBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>closeChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Client side: Send authentication request to the server. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>SendRequestOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ClientInitOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ClientInitOp</color> <color=#f8f8f2>authOp</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>SendRequestOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>authInfo</color> <color=#f92672>=</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>responseByte</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Send the authenticate message to the service dispatcher,</color>
<color=#75715e>       * including reporting our available authentication mechanisms.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceAuthenticateMessage</color><color=#f8f8f2>());</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Wait for a response indicating whether to proceed with</color>
<color=#75715e>       * authentication</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>responseByte</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"No service authenticate response byte: "</color> <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Response</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>responseByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>setResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected read response byte: "</color> <color=#f92672>+</color> <color=#f8f8f2>responseByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>!=</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>PROCEED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * response is PROCEED, so find out what mechanism we are</color>
<color=#75715e>       * to use.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>mechPrefix</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>mechPrefix</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"EOF reading service authenticate response: "</color> <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>arraysEqual</color><color=#f8f8f2>(</color><color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color><color=#f8f8f2>,</color> <color=#f8f8f2>mechPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Unexpected service authenticate response: "</color> <color=#f92672>+</color> <color=#f8f8f2>encodeBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>mechPrefix</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>mechLen</color> <color=#f92672>=</color> <color=#f8f8f2>getShort</color><color=#f8f8f2>(</color><color=#f8f8f2>mechPrefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>AUTH_MECH_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mechLen</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Invalid mechanism length received: "</color> <color=#f92672>+</color> <color=#f8f8f2>mechLen</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>mechBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>mechLen</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>mechBytes</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"EOF reading service authenticate mechanism: "</color> <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The mechStr is a concatenation of mechanism name and</color>
<color=#75715e>       * mechanism parameters, if required, separated by a ':'.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>mechStr</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fromASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>mechBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>mechBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>mechList</color> <color=#f92672>=</color> <color=#f8f8f2>mechStr</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#e6db74>":"</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Get the authentication mechanism object based on the name.</color>
<color=#75715e>       */</color>

      <color=#f8f8f2>AuthenticationMethod</color> <color=#f8f8f2>selectedAuth</color> <color=#f92672>=</color> <color=#f8f8f2>findMatch</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>mechList</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>},</color> <color=#f8f8f2>authInfo</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>selectedAuth</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Requested authentication mechanism not supported; "</color> <color=#f92672>+</color> <color=#f8f8f2>mechList</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Then get the client-side operation from the authentication</color>
<color=#75715e>       * mechanism object.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>authOp</color> <color=#f92672>=</color> <color=#f8f8f2>selectedAuth</color><color=#f8f8f2>.</color><color=#a6e22e>getClientOp</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>mechList</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>1</color> <color=#f92672>?</color> <color=#f8f8f2>mechList</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f8f8f2>:</color> <color=#e6db74>""</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>ClientInitOp</color> <color=#a6e22e>getAuthOp</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>authOp</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Builds an authentication request suitable for sending over to a ServiceDispatcher. Looks</color>
<color=#75715e>     * like: Authenticate:<len><mech list></color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the byte encoding of the authentication request message</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>serviceAuthenticateMessage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>mechListBytes</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtils</color><color=#f8f8f2>.</color><color=#a6e22e>toASCII</color><color=#f8f8f2>(</color><color=#f8f8f2>mechanisms</color><color=#f8f8f2>(</color><color=#f8f8f2>authInfo</color><color=#f8f8f2>));</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>AUTH_PREFIX_BYTES</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>mechListBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>AUTH_PREFIX_BYTES</color><color=#f8f8f2>).</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>mechListBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>).</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>mechListBytes</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a comma-delimited list of authentication mechanism names from the authList argument */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>mechanisms</color><color=#f8f8f2>(</color><color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>mechList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>authList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>AuthenticationMethod</color> <color=#f8f8f2>auth</color> <color=#f8f8f2>:</color> <color=#f8f8f2>authList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mechList</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>mechList</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>","</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>mechList</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>auth</color><color=#f8f8f2>.</color><color=#a6e22e>getMechanismName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mechList</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Find the first Authentication instance whose mechanism name matches one of the entries in</color>
<color=#75715e>   * mechList.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>AuthenticationMethod</color> <color=#a6e22e>findMatch</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>mechList</color><color=#f8f8f2>,</color> <color=#f8f8f2>AuthenticationMethod</color><color=#f92672>[]</color> <color=#f8f8f2>authList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* find the first match */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>AuthenticationMethod</color> <color=#f8f8f2>auth</color> <color=#f8f8f2>:</color> <color=#f8f8f2>authList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>mech</color> <color=#f8f8f2>:</color> <color=#f8f8f2>mechList</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mech</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>auth</color><color=#f8f8f2>.</color><color=#a6e22e>getMechanismName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>auth</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The base of all authentication implementations. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>AuthenticationMethod</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#a6e22e>getMechanismName</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>String</color> <color=#a6e22e>getServerParams</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>ServerInitOp</color> <color=#a6e22e>getServerOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>ClientInitOp</color> <color=#a6e22e>getClientOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>params</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * NoMatchAuthenticationOp communicates that none of the proposed authentication mechanisms</color>
<color=#75715e>   * available on the client are available on the dispatcher.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>NoMatchAuthentication</color> <color=#66d9ef>implements</color> <color=#f8f8f2>AuthenticationMethod</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* The indicator for the no available authentication method. */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MECHANISM</color> <color=#f92672>=</color> <color=#e6db74>"NoMatch"</color><color=#f8f8f2>;</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMechanismName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>MECHANISM</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ClientInitOp</color> <color=#a6e22e>getClientOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ClientHandshake</color> <color=#f8f8f2>initIgnored</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>paramsIgnored</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* This should never be called */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getServerParams</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ServerInitOp</color> <color=#a6e22e>getServerOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoMatchAuthenticateOp</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>NoMatchAuthenticateOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ServerInitOp</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>NoMatchAuthenticateOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#a6e22e>@Override</color>
      <color=#66d9ef>protected</color> <color=#f8f8f2>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* This always fails */</color>
        <color=#f8f8f2>sendBuffer</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>Response</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>.</color><color=#a6e22e>byteBuffer</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A simple interface providing simple blocking I/O. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>IOAdapter</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Read fully into buf</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the number of bytes read</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Write buf fully</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the number of bytes wrtten</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Implementation of IOAdapter based on a ByteChannel. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ByteChannelIOAdapter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ByteChannelIOAdapter</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channel</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Implementation of IOAdapter based on a pair of streams. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>IOStreamIOAdapter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>IOAdapter</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataInputStream</color> <color=#f8f8f2>dataInputStream</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>outputStream</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>IOStreamIOAdapter</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dataInputStream</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DataInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>outputStream</color> <color=#f92672>=</color> <color=#f8f8f2>output</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dataInputStream</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>outputStream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>outputStream</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Check whether the contents of two arrays are equal.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param array1 the first array to compare - must be non-null</color>
<color=#75715e>   * @param array2 the second array to compare - must be non-null</color>
<color=#75715e>   * @param len the number of bytes to compare - must be less than or equal to the length of the</color>
<color=#75715e>   *     shorter of array1, array2</color>
<color=#75715e>   * @return true if the first "len" bytes of the arrays are equal</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>arraysEqual</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>array1</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>array2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>array1</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#f8f8f2>array2</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>encodeBytes</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>b</color> <color=#f8f8f2>:</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"%02X"</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Write a short to a ByteBuffer, in network byte order. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>short</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>byte</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>i</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>i</color> <color=#f92672>>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Read a short from a byte array, in network byte order. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>short</color> <color=#a6e22e>getShort</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>