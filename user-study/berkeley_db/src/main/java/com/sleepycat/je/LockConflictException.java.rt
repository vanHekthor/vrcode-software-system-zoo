<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The common base class for all exceptions that result from record lock conflicts during read and</color>
<color=#75715e> * write operations.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This exception normally indicates that a transaction may be retried. Catching this exception,</color>
<color=#75715e> * rather than its subclasses, is convenient and recommended for handling lock conflicts and</color>
<color=#75715e> * performing transaction retries in a general purpose manner. See below for information on</color>
<color=#75715e> * performing transaction retries.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The exception carries two arrays of transaction ids, one of the owners and the other of the</color>
<color=#75715e> * waiters, at the time of the lock conflict. This information may be used along with the {@link</color>
<color=#75715e> * Transaction#getId Transaction ID} for diagnosing locking problems. See {@link #getOwnerTxnIds}</color>
<color=#75715e> * and {@link #getWaiterTxnIds}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link Transaction} handle is invalidated as a result of this exception. <a</color>
<color=#75715e> * name="retries"></color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Performing Transaction Retries</h3></color>
<color=#75715e> *</color>
<color=#75715e> * </a></color>
<color=#75715e> *</color>
<color=#75715e> * <p>If a lock conflict occurs during a transaction, the transaction may be retried by performing</color>
<color=#75715e> * the following steps. Some applications may also wish to sleep for a short interval before</color>
<color=#75715e> * retrying, to give other concurrent transactions a chance to finish and release their locks.</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>Close all cursors opened under the transaction.</color>
<color=#75715e> *   <li>Abort the transaction.</color>
<color=#75715e> *   <li>Begin a new transaction and repeat the operations.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To handle {@link LockConflictException} reliably for all types of JE applications including</color>
<color=#75715e> * JE-HA applications, it is important to handle it when it is thrown by all {@link Database} and</color>
<color=#75715e> * {@link Cursor} read and write operations.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following example code illustrates the recommended approach. Note that the {@code</color>
<color=#75715e> * Environment.beginTransaction} and {@code Transaction.commit} calls are intentially inside the</color>
<color=#75715e> * {@code try} block. When using JE-HA, this will make it easy to add a {@code catch} for other</color>
<color=#75715e> * exceptions that can be resolved by retrying the transaction, such as consistency exceptions.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class="code"></color>
<color=#75715e> *  void doTransaction(final Environment env,</color>
<color=#75715e> *                     final Database db1,</color>
<color=#75715e> *                     final Database db2,</color>
<color=#75715e> *                     final int maxTries)</color>
<color=#75715e> *      throws DatabaseException {</color>
<color=#75715e> *</color>
<color=#75715e> *      boolean success = false;</color>
<color=#75715e> *      long sleepMillis = 0;</color>
<color=#75715e> *      for (int i = 0; i &lt; maxTries; i++) {</color>
<color=#75715e> *          // Sleep before retrying.</color>
<color=#75715e> *          if (sleepMillis != 0) {</color>
<color=#75715e> *              Thread.sleep(sleepMillis);</color>
<color=#75715e> *              sleepMillis = 0;</color>
<color=#75715e> *          }</color>
<color=#75715e> *          Transaction txn = null;</color>
<color=#75715e> *          try {</color>
<color=#75715e> *              txn = env.beginTransaction(null, null);</color>
<color=#75715e> *              final Cursor cursor1 = db1.openCursor(txn, null);</color>
<color=#75715e> *              try {</color>
<color=#75715e> *                  final Cursor cursor2 = db2.openCursor(txn, null);</color>
<color=#75715e> *                  try {</color>
<color=#75715e> *                      // INSERT APP-SPECIFIC CODE HERE:</color>
<color=#75715e> *                      // Perform read and write operations.</color>
<color=#75715e> *                  } finally {</color>
<color=#75715e> *                      cursor2.close();</color>
<color=#75715e> *                  }</color>
<color=#75715e> *              } finally {</color>
<color=#75715e> *                  cursor1.close();</color>
<color=#75715e> *              }</color>
<color=#75715e> *              txn.commit();</color>
<color=#75715e> *              success = true;</color>
<color=#75715e> *              return;</color>
<color=#75715e> *          } catch (LockConflictException e) {</color>
<color=#75715e> *              sleepMillis = LOCK_CONFLICT_RETRY_SEC * 1000;</color>
<color=#75715e> *              continue;</color>
<color=#75715e> *          } finally {</color>
<color=#75715e> *              if (!success) {</color>
<color=#75715e> *                  if (txn != null) {</color>
<color=#75715e> *                      txn.abort();</color>
<color=#75715e> *                  }</color>
<color=#75715e> *              }</color>
<color=#75715e> *          }</color>
<color=#75715e> *      }</color>
<color=#75715e> *      // INSERT APP-SPECIFIC CODE HERE:</color>
<color=#75715e> *      // Transaction failed, despite retries.</color>
<color=#75715e> *      // Take some app-specific course of action.</color>
<color=#75715e> *  }</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>For more information on transactions and lock conflicts, see <a</color>
<color=#75715e> * href="{@docRoot}/../TransactionGettingStarted/index.html" target="_top">Writing Transactional</color>
<color=#75715e> * Applications</a>.</color>
<color=#75715e> *</color>
<color=#75715e> * @since 4.0</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>LockConflictException</color> <color=#66d9ef>extends</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>ownerTxnIds</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>waiterTxnIds</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeoutMillis</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>LockConflictException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#66d9ef>null</color> <color=#75715e>/*locker*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*abortOnly*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*cause*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>LockConflictException</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*abortOnly*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*cause*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>LockConflictException</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*abortOnly*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>cause</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * For internal use only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @hidden</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>LockConflictException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>cause</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOwnerTxnIds</color><color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>ownerTxnIds</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ownerTxnIds</color> <color=#f92672>=</color> <color=#f8f8f2>ownerTxnIds</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an array of longs containing transaction ids of owners at the the time of the timeout.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an array of longs containing transaction ids of owners at the the time of the timeout.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getOwnerTxnIds</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ownerTxnIds</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setWaiterTxnIds</color><color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>waiterTxnIds</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>waiterTxnIds</color> <color=#f92672>=</color> <color=#f8f8f2>waiterTxnIds</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an array of longs containing transaction ids of waiters at the the time of the timeout.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an array of longs containing transaction ids of waiters at the the time of the timeout.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getWaiterTxnIds</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>waiterTxnIds</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTimeoutMillis</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeoutMillis</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>timeoutMillis</color> <color=#f92672>=</color> <color=#f8f8f2>timeoutMillis</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden Internal use only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTimeoutMillis</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>timeoutMillis</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>