<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.OffHeapCache</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.BIN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.IN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.HandleLocker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.Locker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.LockerFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DatabaseUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Closeable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collection</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collections</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.CopyOnWriteArraySet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A database handle.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Database attributes are specified in the {@link com.sleepycat.je.DatabaseConfig</color>
<color=#75715e> * DatabaseConfig} class. Database handles are free-threaded and may be used concurrently by</color>
<color=#75715e> * multiple threads.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To open an existing database with default attributes:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     Environment env = new Environment(home, null);</color>
<color=#75715e> *     Database myDatabase = env.openDatabase(null, "mydatabase", null);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To create a transactional database that supports duplicates:</color>
<color=#75715e> *</color>
<color=#75715e> * <blockquote></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     DatabaseConfig dbConfig = new DatabaseConfig();</color>
<color=#75715e> *     dbConfig.setTransactional(true);</color>
<color=#75715e> *     dbConfig.setAllowCreate(true);</color>
<color=#75715e> *     dbConfig.setSortedDuplicates(true);</color>
<color=#75715e> *     Database db = env.openDatabase(txn, "mydatabase", dbConfig);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * </blockquote></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Database</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Closeable</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>DEFAULT_CURSOR_CONFIG</color> <color=#f92672>=</color> <color=#f8f8f2>CursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>().</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>READ_COMMITTED_CURSOR_CONFIG</color> <color=#f92672>=</color>
      <color=#f8f8f2>CursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>READ_COMMITTED</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>().</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * DbState embodies the Database handle state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>enum</color> <color=#f8f8f2>DbState</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>OPEN</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>CLOSED</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>INVALID</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>PREEMPTED</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>CORRUPTED</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The current state of the handle. When the state is non-open, the</color>
<color=#75715e>   * databaseImpl should not be accessed, since the databaseImpl is set to</color>
<color=#75715e>   * null during close. This check does not guarantee that an NPE will not</color>
<color=#75715e>   * occur, since we do not synchronize -- the state could change after</color>
<color=#75715e>   * checking it and before accessing the databaseImpl. But the check makes</color>
<color=#75715e>   * an NPE unlikely.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>DbState</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The DatabasePreemptedException cause when state == PREEMPTED. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>preemptedCause</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The SecondaryIntegrityException cause when state == CORRUPTED. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>corruptedCause</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The envHandle field cannot be declared as final because it is</color>
<color=#75715e>   * initialized by methods called by the ctor. However, after construction</color>
<color=#75715e>   * it is non-null and should be treated as final.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Environment</color> <color=#f8f8f2>envHandle</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The databaseImpl field is set to null during close to avoid OOME. It</color>
<color=#75715e>   * should normally only be accessed via the checkOpen and getDbImpl</color>
<color=#75715e>   * methods. It is guaranteed to be non-null if state == DbState.OPEN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to store per-Database handle properties: allow create,</color>
<color=#75715e>   * exclusive create, read only and use existing config. Other Database-wide</color>
<color=#75715e>   * properties are stored in DatabaseImpl.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>;</color>

  <color=#75715e>/* True if this handle permits write operations; */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isWritable</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Record how many open cursors on this database. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>openCursors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Locker that owns the NameLN lock held while the Database is open.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The handleLocker field is set to null during close to avoid OOME. It</color>
<color=#75715e>   * is only accessed during close, while synchronized, so checking for null</color>
<color=#75715e>   * is unnecessary.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>HandleLocker</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * If a user-supplied SecondaryAssociation is configured, this field</color>
<color=#75715e>   * contains it.  Otherwise, it contains an internal SecondaryAssociation</color>
<color=#75715e>   * that uses the simpleAssocSecondaries to store associations between a</color>
<color=#75715e>   * single primary and its secondaries.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>SecondaryAssociation</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#f8f8f2>simpleAssocSecondaries</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Secondaries whose keys have values contrained to the primary keys in</color>
<color=#75715e>   * this database.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#f8f8f2>foreignKeySecondaries</color><color=#f8f8f2>;</color>

  <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a database but does not open or fully initialize it. Is protected for use in compat</color>
<color=#75715e>   * package.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Database</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envHandle</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Creates a database, called by Environment. */</color>
  <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>initNew</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>dbConfig</color><color=#f8f8f2>.</color><color=#a6e22e>validateForNewDb</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>init</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Make the databaseImpl. */</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>addReferringHandle</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Opens a database, called by Environment. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>initExisting</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Make sure the configuration used for the open is compatible with the</color>
<color=#75715e>     * existing databaseImpl.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>validateConfigAgainstExistingDb</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>init</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>addReferringHandle</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>handleLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>envHandle</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>configuration</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>isWritable</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>secAssoc</color> <color=#f92672>=</color> <color=#f8f8f2>makeSecondaryAssociation</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>SecondaryAssociation</color> <color=#a6e22e>makeSecondaryAssociation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>foreignKeySecondaries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CopyOnWriteArraySet</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociation</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Duplicates not allowed for a primary database"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>simpleAssocSecondaries</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptySet</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociation</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>simpleAssocSecondaries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CopyOnWriteArraySet</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SecondaryAssociation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>simpleAssocSecondaries</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getPrimary</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>primaryKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Database</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>public</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#a6e22e>getSecondaries</color><color=#f8f8f2>(</color>
          <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>primaryKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>simpleAssocSecondaries</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>};</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to remove references to this database from other objects, when this database is closed. We</color>
<color=#75715e>   * don't remove references from cursors or secondaries here, because it's an error to close a</color>
<color=#75715e>   * database before its cursors and to close a primary before its secondaries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeReferringAssociations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>removeReferringHandle</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sees if this new handle's configuration is compatible with the pre-existing database. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>validateConfigAgainstExistingDb</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * The sortedDuplicates, temporary, and replicated properties are</color>
<color=#75715e>     * persistent and immutable.  But they do not need to be specified if</color>
<color=#75715e>     * the useExistingConfig property is set.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getUseExistingConfig</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>validatePropertyMatches</color><color=#f8f8f2>(</color>
          <color=#e6db74>"sortedDuplicates"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>validatePropertyMatches</color><color=#f8f8f2>(</color><color=#e6db74>"temporary"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTemporary</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getTemporary</color><color=#f8f8f2>());</color>
      <color=#75715e>/* Only check replicated if the environment is replicated. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validatePropertyMatches</color><color=#f8f8f2>(</color><color=#e6db74>"replicated"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicated</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The transactional and deferredWrite properties are kept constant</color>
<color=#75715e>     * while any handles are open, and set when the first handle is opened.</color>
<color=#75715e>     * But if an existing handle is open and the useExistingConfig property</color>
<color=#75715e>     * is set, then they do not need to be specified.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>hasOpenHandles</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getUseExistingConfig</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validatePropertyMatches</color><color=#f8f8f2>(</color>
            <color=#e6db74>"transactional"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>validatePropertyMatches</color><color=#f8f8f2>(</color>
            <color=#e6db74>"deferredWrite"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDurableDeferredWrite</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getDeferredWrite</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getTransactional</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setDeferredWrite</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getDeferredWrite</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getDeferredWrite</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mutateDeferredWriteBINDeltas</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If this database handle uses the existing config, we shouldn't</color>
<color=#75715e>     * search for and write any changed attributes to the log.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getUseExistingConfig</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Write any changed, persistent attributes to the log. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>dbImplModified</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Only re-set the comparators if the override is allowed. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getOverrideBtreeComparator</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImplModified</color> <color=#f92672>|=</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setBtreeComparator</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparator</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getBtreeComparatorByClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getOverrideDuplicateComparator</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImplModified</color> <color=#f92672>|=</color>
          <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setDuplicateComparator</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getDuplicateComparator</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getDuplicateComparatorByClassName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>dbImplModified</color> <color=#f92672>|=</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setTriggers</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>databaseName</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getTriggers</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getOverrideTriggers</color><color=#f8f8f2>());</color>

    <color=#75715e>/* Check if KeyPrefixing property is updated. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>newKeyPrefixing</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixing</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newKeyPrefixing</color> <color=#f92672>!=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyPrefixing</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImplModified</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newKeyPrefixing</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setKeyPrefixing</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>clearKeyPrefixing</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Check if NodeMaxEntries properties are updated.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newNodeMaxEntries</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMaxEntries</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newNodeMaxEntries</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>newNodeMaxEntries</color> <color=#f92672>!=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMaxTreeEntries</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dbImplModified</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setNodeMaxTreeEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>newNodeMaxEntries</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Do not write LNs in a read-only environment.  Also see [#15743]. */</color>
    <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImplModified</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Write a new NameLN to the log. */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>updateNameLN</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"DatabaseConfig properties may not be updated when the "</color>
                <color=#f92672>+</color> <color=#e6db74>"database is already open; first close other open "</color>
                <color=#f92672>+</color> <color=#e6db74>"handles for this database."</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Dirty the root. */</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>modifyDbRoot</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* CacheMode is changed for all handles, but is not persistent. */</color>
    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setCacheMode</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Mutate BIN-deltas to full BINs for the given DW DB. [#25999]</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Any BIN-deltas in cache must be mutated to full BINs, since BIN-deltas are not allowed in DW</color>
<color=#75715e>   * mode. This can be expensive, and is only a workaround for the underlying problem that</color>
<color=#75715e>   * BIN-deltas are not supported in DW mode. The mutation is necessary when a db transitions from</color>
<color=#75715e>   * non-DW to DW mode. In that case there may be BIN-deltas in cache, even if the DB has not yet</color>
<color=#75715e>   * been opened since BIN-deltas may be placed in the Btree by recovery. This method is not</color>
<color=#75715e>   * optimized because ultimately BIN-deltas will be supported in DW mode or DW mode will be</color>
<color=#75715e>   * discontinued.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>At the time this method is called, the DW flag on this object has already been set.</color>
<color=#75715e>   * Therefore, this workaround doesn't guarantee that internal operations on the db (e.g.,</color>
<color=#75715e>   * compression or eviction) won't operation on a BIN-delta in a DW DB. Therefore, we cannot</color>
<color=#75715e>   * assume/assert that a cached BIN-delta does not exist in a DW DB. Such assertions were removed</color>
<color=#75715e>   * as part of this workaround.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Setting the DW flag before mutating the BINs is necessary to ensure that no new BIN-deltas</color>
<color=#75715e>   * appear in cache during this process. BINs loaded into cache for a DW db are mutated to full</color>
<color=#75715e>   * BINs in IN.postFetchInit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see BIN#shouldLogDelta</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>mutateDeferredWriteBINDeltas</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>in</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>getInMemoryINs</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>isBIN</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>mutateToFullBIN</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohCache</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNormalizedLevel</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>loadIN</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>mutateToFullBIN</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws IllegalArgumentException via Environment.openDatabase and openSecondaryDatabase. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>validatePropertyMatches</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>propName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>existingValue</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newValue</color> <color=#f92672>!=</color> <color=#f8f8f2>existingValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"You can't open a Database with a "</color>
              <color=#f92672>+</color> <color=#f8f8f2>propName</color>
              <color=#f92672>+</color> <color=#e6db74>" configuration of "</color>
              <color=#f92672>+</color> <color=#f8f8f2>newValue</color>
              <color=#f92672>+</color> <color=#e6db74>" if the underlying database was created with a "</color>
              <color=#f92672>+</color> <color=#f8f8f2>propName</color>
              <color=#f92672>+</color> <color=#e6db74>" setting of "</color>
              <color=#f92672>+</color> <color=#f8f8f2>existingValue</color>
              <color=#f92672>+</color> <color=#e6db74>'.'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Discards the database handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When closing the last open handle for a deferred-write database, any cached database</color>
<color=#75715e>   * information is flushed to disk as if {@link #sync} were called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The database handle should not be closed while any other handle that refers to it is not yet</color>
<color=#75715e>   * closed; for example, database handles should not be closed while cursor handles into the</color>
<color=#75715e>   * database remain open, or transactions that include operations on the database have not yet been</color>
<color=#75715e>   * committed or aborted. Specifically, this includes {@link Cursor Cursor} and {@link</color>
<color=#75715e>   * com.sleepycat.je.Transaction Transaction} handles.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When multiple threads are using the {@link Database Database} handle concurrently, only a</color>
<color=#75715e>   * single thread may call this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When called on a database that is the primary database for a secondary index, the primary</color>
<color=#75715e>   * database should be closed only after all secondary indices which reference it have been closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The database handle may not be accessed again after this method is called, regardless of the</color>
<color=#75715e>   * method's success or failure, with one exception: the {@code close} method itself may be called</color>
<color=#75715e>   * any number of times.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see DatabaseConfig#setDeferredWrite DatabaseConfig.setDeferredWrite</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if cursors associated with this database are still open.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>closeInternal</color><color=#f8f8f2>(</color>
          <color=#66d9ef>true</color> <color=#75715e>/*doSyncDw*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*deleteTempDb*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*preemptedException*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * This method is private for now because it is incomplete.  To fully</color>
<color=#75715e>   * implement it we must clear all dirty nodes for the database that is</color>
<color=#75715e>   * closed, since otherwise they will be flushed during the next checkpoint.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>closeNoSync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>closeInternal</color><color=#f8f8f2>(</color>
          <color=#66d9ef>false</color> <color=#75715e>/*doSyncDw*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*deleteTempDb*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*preemptedException*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Marks the handle as preempted when the handle lock is stolen by the HA replayer, during replay</color>
<color=#75715e>   * of a naming operation (remove, truncate or rename). This causes DatabasePreemptedException to</color>
<color=#75715e>   * be thrown on all subsequent use of the handle or cursors opened on this handle. [#17015]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setPreempted</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Return silently when the DB is closed, because the calling thread is</color>
<color=#75715e>     * performing an DbTree operation, and a "database closed" exception</color>
<color=#75715e>     * should not be thrown there.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>preemptedException</color> <color=#f92672>=</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>createDatabasePreemptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbName</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>closeInternal</color><color=#f8f8f2>(</color>
        <color=#66d9ef>false</color> <color=#75715e>/*doSyncDw*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*deleteTempDb*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>PREEMPTED</color><color=#f8f8f2>,</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setCorrupted</color><color=#f8f8f2>(</color><color=#f8f8f2>SecondaryIntegrityException</color> <color=#f8f8f2>sie</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>!=</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>corruptedCause</color> <color=#f92672>=</color> <color=#f8f8f2>sie</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CORRUPTED</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isCorrupted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>corruptedCause</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invalidates the handle when the transaction used to open the database is aborted.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method (unlike close) does not perform sync and removal of DW DBs. A DW DB</color>
<color=#75715e>   * cannot be transactional.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>invalidate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>closeInternal</color><color=#f8f8f2>(</color>
        <color=#66d9ef>false</color> <color=#75715e>/*doSyncDw*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*deleteTempDb*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color> <color=#75715e>/*preemptedException*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>closeInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doSyncDw</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deleteTempDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbState</color> <color=#f8f8f2>newState</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We acquire the SecondaryAssociationLatch exclusively because</color>
<color=#75715e>     * associations are changed by removeReferringAssociations, and</color>
<color=#75715e>     * operations using the associations should not run concurrently with</color>
<color=#75715e>     * close.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>writeLock</color><color=#f8f8f2>().</color><color=#a6e22e>lockInterruptibly</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>closeInternalWork</color><color=#f8f8f2>(</color><color=#f8f8f2>doSyncDw</color><color=#f8f8f2>,</color> <color=#f8f8f2>deleteTempDb</color><color=#f8f8f2>,</color> <color=#f8f8f2>newState</color><color=#f8f8f2>,</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaryAssociationLock</color><color=#f8f8f2>().</color><color=#a6e22e>writeLock</color><color=#f8f8f2>().</color><color=#a6e22e>unlock</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>minimalClose</color><color=#f8f8f2>(</color><color=#f8f8f2>newState</color><color=#f8f8f2>,</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Nulls-out indirect references to the environment, to allow GC. It also sets the state to the</color>
<color=#75715e>   * given non-open state, if the state is currently open. We must set the state to non-open before</color>
<color=#75715e>   * setting references to null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The app may hold the Database references longer than expected. In particular during an</color>
<color=#75715e>   * Environment re-open we need to give GC a fighting chance while handles from two environments</color>
<color=#75715e>   * are temporarily referenced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this is needed even when the db or env is invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>minimalClose</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbState</color> <color=#f8f8f2>newState</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>newState</color> <color=#f92672>!=</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>newState</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>preemptedCause</color> <color=#f92672>=</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>databaseImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>handleLocker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>closeInternalWork</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>doSyncDw</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deleteTempDb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbState</color> <color=#f8f8f2>newState</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>newState</color> <color=#f92672>!=</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>handleRefErrors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>triggerException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Do nothing if handle was previously closed.</color>
<color=#75715e>       *</color>
<color=#75715e>       * When the state is set to CLOSED, INVALID and PREEMPTED, the</color>
<color=#75715e>       * database has been closed. So for these states, do not close the</color>
<color=#75715e>       * database again.</color>
<color=#75715e>       *</color>
<color=#75715e>       * The CORRUPTED state is set when SecondaryIntegrityException is</color>
<color=#75715e>       * thrown, but the database is not closed at that time.</color>
<color=#75715e>       * This state is currently only set for a secondary database.</color>
<color=#75715e>       * For this state, we want to let the user close the database.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Besides, if the database was not opened, just return.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color>
          <color=#f92672>||</color> <color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>INVALID</color>
          <color=#f92672>||</color> <color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>PREEMPTED</color>
          <color=#f92672>||</color> <color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * databaseImpl and handleLocker are set to null only while</color>
<color=#75715e>       * synchronized, at which time the state is also changed to</color>
<color=#75715e>       * non-open. So they should not be null here.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>handleLocker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check env only after checking for closed db, to mimic close()</color>
<color=#75715e>       * behavior for Cursors, etc, and avoid unnecessary exception</color>
<color=#75715e>       * handling.  [#21264]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The state should be changed ASAP during close, so that</color>
<color=#75715e>       * addCursor and removeCursor will see the updated state ASAP.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>newState</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>preemptedCause</color> <color=#f92672>=</color> <color=#f8f8f2>preemptedException</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Throw an IllegalStateException if there are open cursors or</color>
<color=#75715e>       * associated secondaries.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newState</color> <color=#f92672>==</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCursors</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>handleRefErrors</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>openCursors</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" open cursors."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>simpleAssocSecondaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>simpleAssocSecondaries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>handleRefErrors</color>
              <color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>)</color>
              <color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>simpleAssocSecondaries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color>
              <color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" associated SecondaryDatabases."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>foreignKeySecondaries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>foreignKeySecondaries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>handleRefErrors</color>
              <color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>)</color>
              <color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>foreignKeySecondaries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color>
              <color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" associated foreign key SecondaryDatabases."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.close: "</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>removeReferringAssociations</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>removeReferringHandle</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the handle was preempted, we mark the locker as</color>
<color=#75715e>       * only-abortable with the DatabasePreemptedException.  If</color>
<color=#75715e>       * the handle locker is a user txn, this causes the</color>
<color=#75715e>       * DatabasePreemptedException to be thrown if the user</color>
<color=#75715e>       * attempts to commit, or continue to use, the txn, rather</color>
<color=#75715e>       * than throwing a LockConflictException.  [#17015]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newState</color> <color=#f92672>==</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>PREEMPTED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>handleLocker</color><color=#f8f8f2>.</color><color=#a6e22e>setOnlyAbortable</color><color=#f8f8f2>(</color><color=#f8f8f2>preemptedException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Tell our protecting txn that we're closing. If this type</color>
<color=#75715e>       * of transaction doesn't live beyond the life of the</color>
<color=#75715e>       * handle, it will release the db handle lock.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newState</color> <color=#f92672>==</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CLOSED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isWritable</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>noteWriteHandleClose</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runCloseTriggers</color><color=#f8f8f2>(</color><color=#f8f8f2>handleLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>triggerException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>handleLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>handleLocker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Notify the database when a handle is closed.  This should not be</color>
<color=#75715e>     * done while synchronized since it may perform database removal or</color>
<color=#75715e>     * sync.  Statements above are synchronized but this section must not</color>
<color=#75715e>     * be.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Note that handleClosed may throw an exception, so any following code</color>
<color=#75715e>     * may not be executed.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>handleClosed</color><color=#f8f8f2>(</color><color=#f8f8f2>doSyncDw</color><color=#f8f8f2>,</color> <color=#f8f8f2>deleteTempDb</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Throw exceptions for previously encountered problems. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handleRefErrors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Database closed while still referenced by other handles."</color> <color=#f92672>+</color> <color=#f8f8f2>handleRefErrors</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggerException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>triggerException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flushes any cached information for this database to disk; only applicable for deferred-write</color>
<color=#75715e>   * databases.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that deferred-write databases are automatically flushed to disk when the {@link #close}</color>
<color=#75715e>   * method is called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see DatabaseConfig#setDeferredWrite DatabaseConfig.setDeferredWrite</color>
<color=#75715e>   * @throws com.sleepycat.je.rep.DatabasePreemptedException in a replicated environment if the</color>
<color=#75715e>   *     master has truncated, removed or renamed the database.</color>
<color=#75715e>   * @throws OperationFailureException if this exception occurred earlier and caused the transaction</color>
<color=#75715e>   *     to be invalidated.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this is not a deferred-write database, or this</color>
<color=#75715e>   *     database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>sync</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.sync"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>sync</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Opens a sequence in the database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified, or null may</color>
<color=#75715e>   *     be specified to use auto-commit. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param key The key {@link DatabaseEntry} of the sequence.</color>
<color=#75715e>   * @param config The sequence attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return a new Sequence handle.</color>
<color=#75715e>   * @throws SequenceExistsException if the sequence record already exists and the {@code</color>
<color=#75715e>   *     SequenceConfig ExclusiveCreate} parameter is true.</color>
<color=#75715e>   * @throws SequenceNotFoundException if the sequence record does not exist and the {@code</color>
<color=#75715e>   *     SequenceConfig AllowCreate} parameter is false.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#readFailures">Read Operation Failures</a></color>
<color=#75715e>   *     occurs. If the sequence does not exist and the {@link SequenceConfig#setAllowCreate</color>
<color=#75715e>   *     AllowCreate} parameter is true, then one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a> may</color>
<color=#75715e>   *     also occur.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this database is read-only, or this database is</color>
<color=#75715e>   *     configured for duplicates.</color>
<color=#75715e>   * @throws IllegalStateException if the Sequence record is deleted by another thread during this</color>
<color=#75715e>   *     method invocation, or the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, an invalid</color>
<color=#75715e>   *     {@code SequenceConfig} parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Sequence</color> <color=#a6e22e>openSequence</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SequenceConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.openSequence"</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Sequence</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes the sequence from the database. This method should not be called if there are open</color>
<color=#75715e>   * handles on this sequence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified, or null may</color>
<color=#75715e>   *     be specified to use auto-commit. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param key The key {@link com.sleepycat.je.DatabaseEntry DatabaseEntry} of the sequence.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this database is read-only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeSequence</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a cursor into the database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn the transaction used to protect all operations performed with the cursor, or null if</color>
<color=#75715e>   *     the operations should not be transaction protected. If the database is non-transactional,</color>
<color=#75715e>   *     null must be specified. For a transactional database, the transaction is optional for</color>
<color=#75715e>   *     read-only access and required for read-write access.</color>
<color=#75715e>   * @param cursorConfig The cursor attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return A database cursor.</color>
<color=#75715e>   * @throws com.sleepycat.je.rep.DatabasePreemptedException in a replicated environment if the</color>
<color=#75715e>   *     master has truncated, removed or renamed the database.</color>
<color=#75715e>   * @throws OperationFailureException if this exception occurred earlier and caused the transaction</color>
<color=#75715e>   *     to be invalidated.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, an invalid</color>
<color=#75715e>   *     {@code CursorConfig} parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Cursor</color> <color=#a6e22e>openCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorConfig</color> <color=#f92672>=</color> <color=#f8f8f2>CursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Only one may be specified: "</color> <color=#f92672>+</color> <color=#e6db74>"ReadCommitted or ReadUncommitted"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.openCursor"</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newDbcInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a DiskOrderedCursor to iterate over the records in 'this' Database. Because the</color>
<color=#75715e>   * retrieval is based on Log Sequence Number (LSN) order rather than key order, records are</color>
<color=#75715e>   * returned in unsorted order in exchange for generally faster retrieval. LSN order approximates</color>
<color=#75715e>   * disk sector order.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>See {@link DiskOrderedCursor} for more details and a description of the consistency</color>
<color=#75715e>   * guarantees provided by the scan.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><em>WARNING:</em> After calling this method, deletion of log files by the JE log cleaner</color>
<color=#75715e>   * will be disabled until {@link DiskOrderedCursor#close()} is called. To prevent unbounded growth</color>
<color=#75715e>   * of disk usage, be sure to call {@link DiskOrderedCursor#close()} to re-enable log file</color>
<color=#75715e>   * deletion.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DiskOrderedCursor</color> <color=#a6e22e>openCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedCursorConfig</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursorConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorConfig</color> <color=#f92672>=</color> <color=#f8f8f2>DiskOrderedCursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.openForwardCursor"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>Database</color><color=#f92672>[]</color> <color=#f8f8f2>dbs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Database</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>

      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DiskOrderedCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>dbs</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is overridden by SecondaryDatabase. */</color>
  <color=#f8f8f2>Cursor</color> <color=#a6e22e>newDbcInstance</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color><color=#75715e>//    return new Cursor(this, txn, cursorConfig);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only.</color>
<color=#75715e>   * @deprecated in favor of {@link #populateSecondaries(Transaction, DatabaseEntry, DatabaseEntry,</color>
<color=#75715e>   *     long, CacheMode)}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>populateSecondaries</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>populateSecondaries</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color> <color=#75715e>/*expirationTime*/</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only.</color>
<color=#75715e>   *     <p>Given the {@code key}, {@code data} and {@code expirationTime} for a locked primary DB</color>
<color=#75715e>   *     record, update the corresponding secondary database (index) records, for secondaries</color>
<color=#75715e>   *     enabled for incremental population.</color>
<color=#75715e>   *     <p>The secondaries associated the primary record are determined by calling {@link</color>
<color=#75715e>   *     SecondaryAssociation#getSecondaries}. For each of these secondaries, {@link</color>
<color=#75715e>   *     SecondaryDatabase#isIncrementalPopulationEnabled} is called to determine whether</color>
<color=#75715e>   *     incremental population is enabled. If so, appropriate secondary records are inserted and</color>
<color=#75715e>   *     deleted so that the index accurately reflects the current state of the primary record.</color>
<color=#75715e>   *     <p>Note that for a given primary record, this method will not modify the secondary database</color>
<color=#75715e>   *     if the secondary has already been updated for the primary record, due to concurrent primary</color>
<color=#75715e>   *     write operations. Due to this behavior, certain integrity checks are not performed as</color>
<color=#75715e>   *     documented in {@link SecondaryDatabase#startIncrementalPopulation}.</color>
<color=#75715e>   *     <p>The primary record must be locked (read or write locked) when this method is called.</color>
<color=#75715e>   *     Therefore, the caller should not use dirty-read to read the primary record. The simplest</color>
<color=#75715e>   *     way to ensure that the primary record is locked is to use a cursor to read primary records,</color>
<color=#75715e>   *     and call this method while the cursor is still positioned on the primary record.</color>
<color=#75715e>   *     <p>It is the caller's responsibility to pass all primary records to this method that</color>
<color=#75715e>   *     contain index keys for a secondary DB being incrementally populated, before calling {@link</color>
<color=#75715e>   *     SecondaryDatabase#endIncrementalPopulation} on that secondary DB.</color>
<color=#75715e>   * @param txn is the transaction to be used to write secondary records. If null and the secondary</color>
<color=#75715e>   *     DBs are transactional, auto-commit will be used.</color>
<color=#75715e>   * @param key is the key of the locked primary record.</color>
<color=#75715e>   * @param data is the data of the locked primary record.</color>
<color=#75715e>   * @param expirationTime the expiration time of the locked primary record. This can be obtained</color>
<color=#75715e>   *     from {@link OperationResult#getExpirationTime()} when reading the primary record.</color>
<color=#75715e>   * @param cacheMode the CacheMode to use, or null for the Database default.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>populateSecondaries</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#e6db74>"key"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#e6db74>"true"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"populateSecondaries"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#f8f8f2>secondaries</color> <color=#f92672>=</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>getSecondaries</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color>
          <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envHandle</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>isTransactional</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>());</color> <color=#75715e>// autoTxnIsReplicated</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cacheMode</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultCacheMode</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SecondaryDatabase</color> <color=#f8f8f2>secDb</color> <color=#f8f8f2>:</color> <color=#f8f8f2>secondaries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>isIncrementalPopulationEnabled</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>secDb</color><color=#f8f8f2>.</color><color=#a6e22e>updateSecondary</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
                <color=#66d9ef>null</color> <color=#75715e>/*cursor*/</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>key</color> <color=#75715e>/*priKey*/</color><color=#f8f8f2>,</color>
                <color=#66d9ef>null</color> <color=#75715e>/*oldData*/</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>data</color> <color=#75715e>/*newData*/</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color>
                <color=#66d9ef>false</color> <color=#75715e>/*expirationUpdated*/</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>expirationTime</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>success</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes records with a given key from the database. In the presence of duplicate keys, all</color>
<color=#75715e>   * records associated with the given key will be removed. When the database has associated</color>
<color=#75715e>   * secondary databases, this method also deletes the associated index records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified, or null may</color>
<color=#75715e>   *     be specified to use auto-commit. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param options the WriteOptions, or null to use default options.</color>
<color=#75715e>   * @return the OperationResult if the record is deleted, else null if the given key was not found</color>
<color=#75715e>   *     in the database.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified. This includes passing a</color>
<color=#75715e>   *     null input key parameter, an input key parameter with a null data array, or a partial key</color>
<color=#75715e>   *     input parameter.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.delete"</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color>
          <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envHandle</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>isTransactional</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>());</color> <color=#75715e>// autoTxnIsReplicated</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>deleteInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Internal version of delete() that does no parameter checking. Notify triggers, update</color>
<color=#75715e>   * secondaries and enforce foreign key constraints. Deletes all duplicates.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OperationResult</color> <color=#a6e22e>deleteInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>noData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>noData</color><color=#f8f8f2>.</color><color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color><color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color> <color=#f92672>=</color>
          <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>isSerializableIsolation</color><color=#f8f8f2>(</color><color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>)</color>
              <color=#f92672>?</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color>
              <color=#f8f8f2>:</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_UNCOMMITTED_ALL</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>searchResult</color> <color=#f92672>=</color>
          <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>search</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>noData</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>SET</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDbImpl</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>anyResult</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchResult</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>deleteResult</color> <color=#f92672>=</color>
            <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>deleteInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getRepContext</color><color=#f8f8f2>(),</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteResult</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>anyResult</color> <color=#f92672>=</color> <color=#f8f8f2>deleteResult</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>searchResult</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>retrieveNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>noData</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_DUP</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>anyResult</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>incDeleteFailOps</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>anyResult</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes records with a given key from the database. In the presence of duplicate keys, all</color>
<color=#75715e>   * records associated with the given key will be removed. When the database has associated</color>
<color=#75715e>   * secondary databases, this method also deletes the associated index records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #delete(Transaction, DatabaseEntry,</color>
<color=#75715e>   * WriteOptions)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified, or null may</color>
<color=#75715e>   *     be specified to use auto-commit. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @return The method will return {@link com.sleepycat.je.OperationStatus#NOTFOUND</color>
<color=#75715e>   *     OperationStatus.NOTFOUND} if the given key is not found in the database; otherwise {@link</color>
<color=#75715e>   *     com.sleepycat.je.OperationStatus#SUCCESS OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="../je/OperationFailureException.html#writeFailures">Write Operation Failures</a></color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws UnsupportedOperationException if this database is read-only.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified. This includes passing a</color>
<color=#75715e>   *     null input key parameter, an input key parameter with a null data array, or a partial key</color>
<color=#75715e>   *     input parameter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Retrieves a record according to the specified {@link Get} type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the operation succeeds, the record will be locked according to the {@link</color>
<color=#75715e>   * ReadOptions#getLockMode() lock mode} specified, the key and/or data will be returned via the</color>
<color=#75715e>   * (non-null) DatabaseEntry parameters, and a non-null OperationResult will be returned. If the</color>
<color=#75715e>   * operation fails because the record requested is not found, null is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The following table lists each allowed operation and whether the key and data parameters are</color>
<color=#75715e>   * <a href="DatabaseEntry.html#params">input or output parameters</a>. See the individual {@link</color>
<color=#75715e>   * Get} operations for more information. <div></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1" summary=""></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <th>Get operation</th></color>
<color=#75715e>   *     <th>Description</th></color>
<color=#75715e>   *     <th>'key' parameter</th></color>
<color=#75715e>   *     <th>'data' parameter</th></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#outParam">output</a></td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   *     <td>{@link Get#SEARCH_BOTH}</td></color>
<color=#75715e>   *     <td>Searches using an exact match by key and data.</td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   *     <td><a href="DatabaseEntry.html#inParam">input</a></td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * </div></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified to</color>
<color=#75715e>   *     transaction-protect the operation, or null may be specified to perform the operation</color>
<color=#75715e>   *     without transaction protection. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param key the key input parameter.</color>
<color=#75715e>   * @param data the data input or output parameter, depending on getType.</color>
<color=#75715e>   * @param getType the Get operation type. May not be null.</color>
<color=#75715e>   * @param options the ReadOptions, or null to use default options.</color>
<color=#75715e>   * @return the OperationResult if the record requested is found, else null.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified. This includes passing a</color>
<color=#75715e>   *     null getType, a null input key/data parameter, an input key/data parameter with a null data</color>
<color=#75715e>   *     array, and a partial key/data input parameter.</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>options</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>options</color> <color=#f92672>=</color> <color=#f8f8f2>Cursor</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_READ_OPTIONS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color> <color=#f92672>=</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getLockMode</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.get"</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>),</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>checkLockModeWithoutTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>==</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>READ_COMMITTED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorConfig</color> <color=#f92672>=</color> <color=#f8f8f2>READ_COMMITTED_CURSOR_CONFIG</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>lockMode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cursorConfig</color> <color=#f92672>=</color> <color=#f8f8f2>DEFAULT_CURSOR_CONFIG</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color>
          <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getReadableLocker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>());</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursorConfig</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Retrieves the key/data pair with the given key. If the matching key has duplicate values, the</color>
<color=#75715e>   * first data item in the set of duplicates is returned. Retrieval of duplicates requires the use</color>
<color=#75715e>   * of {@link Cursor} operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(Transaction, DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Get, ReadOptions)} with {@link Get#SEARCH}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified to</color>
<color=#75715e>   *     transaction-protect the operation, or null may be specified to perform the operation</color>
<color=#75715e>   *     without transaction protection. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param data the data returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Retrieves the key/data pair with the given key and data value, that is, both the key and data</color>
<color=#75715e>   * items must match.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Calling this method is equivalent to calling {@link #get(Transaction, DatabaseEntry,</color>
<color=#75715e>   * DatabaseEntry, Get, ReadOptions)} with {@link Get#SEARCH_BOTH}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param txn For a transactional database, an explicit transaction may be specified to</color>
<color=#75715e>   *     transaction-protect the operation, or null may be specified to perform the operation</color>
<color=#75715e>   *     without transaction protection. For a non-transactional database, null must be specified.</color>
<color=#75715e>   * @param key the key used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param data the data used as <a href="DatabaseEntry.html#inParam">input</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getSearchBoth</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
        <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>SEARCH_BOTH</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Put</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>WriteOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>putType</color> <color=#f92672>==</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>CURRENT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"putType may not be Put.CURRENT"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#e6db74>"Database.put"</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>putType</color><color=#f8f8f2>),</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>transactionalDb</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color>
        <color=#f8f8f2>LockerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getWritableLocker</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envHandle</color><color=#f8f8f2>,</color>
              <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDb</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>transactionalDb</color><color=#f8f8f2>,</color>
              <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// autoTxnIsReplicated</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>PutMode</color> <color=#f8f8f2>putMode</color> <color=#f92672>=</color> <color=#f8f8f2>putType</color><color=#f8f8f2>.</color><color=#a6e22e>getPutMode</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>cursor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>putMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>DEFAULT_CURSOR_CONFIG</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>putInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ExpirationInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>options</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putNoOverwrite</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Put</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color><color=#f8f8f2>(</color><color=#f8f8f2>putType</color> <color=#f92672>!=</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>NO_OVERWRITE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"putType needs to be Put.NO_OVERWRITE"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEXIST</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>putDupData</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Put</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color><color=#f8f8f2>(</color><color=#f8f8f2>putType</color> <color=#f92672>!=</color> <color=#f8f8f2>Put</color><color=#f8f8f2>.</color><color=#a6e22e>DUP_DATA</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"putType needs to be Put.DUP_DATA"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>putType</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>KEYEXIST</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a specialized join cursor for use in performing equality or natural joins on secondary</color>
<color=#75715e>   * indices.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Each cursor in the <code>cursors</code> array must have been initialized to refer to the key</color>
<color=#75715e>   * on which the underlying database should be joined. Typically, this initialization is done by</color>
<color=#75715e>   * calling {@link Cursor#getSearchKey Cursor.getSearchKey}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Once the cursors have been passed to this method, they should not be accessed or modified</color>
<color=#75715e>   * until the newly created join cursor has been closed, or else inconsistent results may be</color>
<color=#75715e>   * returned. However, the position of the cursors will not be changed by this method or by the</color>
<color=#75715e>   * methods of the join cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cursors an array of cursors associated with this primary database.</color>
<color=#75715e>   * @param config The join attributes. If null, default attributes are used.</color>
<color=#75715e>   * @return a specialized cursor that returns the results of the equality join operation.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified, for example, an invalid</color>
<color=#75715e>   *     {@code JoinConfig} parameter.</color>
<color=#75715e>   * @see JoinCursor</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>JoinCursor</color> <color=#a6e22e>join</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color><color=#f92672>[]</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>JoinConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullParam</color><color=#f8f8f2>(</color><color=#f8f8f2>cursors</color><color=#f8f8f2>,</color> <color=#e6db74>"cursors"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"At least one cursor is required."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check that all cursors use the same locker, if any cursor is</color>
<color=#75715e>       * transactional.  And if non-transactional, that all databases are</color>
<color=#75715e>       * in the same environment.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>cursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker2</color> <color=#f92672>=</color> <color=#f8f8f2>cursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker2</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"All cursors must use the same transaction."</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env2</color> <color=#f92672>=</color> <color=#f8f8f2>cursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>env</color> <color=#f92672>!=</color> <color=#f8f8f2>env2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"All cursors must use the same environment."</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker2</color> <color=#f92672>=</color> <color=#f8f8f2>cursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnLocker</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>locker2</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnLocker</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"All cursors must use the same transaction."</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Create the join cursor. */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>JoinCursor</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Preloads the cache. This method should only be called when there are no operations being</color>
<color=#75715e>   * performed on the database in other threads. Executing preload during concurrent updates may</color>
<color=#75715e>   * result in some or all of the tree being loaded into the JE cache. Executing preload during any</color>
<color=#75715e>   * other types of operations may result in JE exceeding its allocated cache size. preload()</color>
<color=#75715e>   * effectively locks the entire database and therefore will lock out the checkpointer, cleaner,</color>
<color=#75715e>   * and compressor, as well as not allow eviction to occur.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated As of JE 2.0.83, replaced by {@link Database#preload(PreloadConfig)}.</color>
<color=#75715e>   * @param maxBytes The maximum number of bytes to load. If maxBytes is 0, je.evictor.maxMemory is</color>
<color=#75715e>   *     used.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setMaxBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>maxBytes</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Preloads the cache. This method should only be called when there are no operations being</color>
<color=#75715e>   * performed on the database in other threads. Executing preload during concurrent updates may</color>
<color=#75715e>   * result in some or all of the tree being loaded into the JE cache. Executing preload during any</color>
<color=#75715e>   * other types of operations may result in JE exceeding its allocated cache size. preload()</color>
<color=#75715e>   * effectively locks the entire database and therefore will lock out the checkpointer, cleaner,</color>
<color=#75715e>   * and compressor, as well as not allow eviction to occur.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated As of JE 2.0.101, replaced by {@link Database#preload(PreloadConfig)}.</color>
<color=#75715e>   * @param maxBytes The maximum number of bytes to load. If maxBytes is 0, je.evictor.maxMemory is</color>
<color=#75715e>   *     used.</color>
<color=#75715e>   * @param maxMillisecs The maximum time in milliseconds to use when preloading. Preloading stops</color>
<color=#75715e>   *     once this limit has been reached. If maxMillisecs is 0, preloading can go on indefinitely</color>
<color=#75715e>   *     or until maxBytes (if non-0) is reached.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setMaxBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>maxBytes</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>setMaxMillisecs</color><color=#f8f8f2>(</color><color=#f8f8f2>maxMillisecs</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Preloads the cache. This method should only be called when there are no operations being</color>
<color=#75715e>   * performed on the database in other threads. Executing preload during concurrent updates may</color>
<color=#75715e>   * result in some or all of the tree being loaded into the JE cache. Executing preload during any</color>
<color=#75715e>   * other types of operations may result in JE exceeding its allocated cache size. preload()</color>
<color=#75715e>   * effectively locks the entire database and therefore will lock out the checkpointer, cleaner,</color>
<color=#75715e>   * and compressor, as well as not allow eviction to occur. If the database is replicated and the</color>
<color=#75715e>   * environment is in the replica state, then the replica may become temporarily disconnected from</color>
<color=#75715e>   * the master if the replica needs to replay changes against the database and is locked out</color>
<color=#75715e>   * because the time taken by the preload operation exceeds {@link</color>
<color=#75715e>   * com.sleepycat.je.rep.ReplicationConfig#FEEDER_TIMEOUT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>While this method preloads a single database, {@link Environment#preload} lets you preload</color>
<color=#75715e>   * multiple databases.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The PreloadConfig object that specifies the parameters of the preload.</color>
<color=#75715e>   * @return A PreloadStats object with various statistics about the preload() operation.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if {@code PreloadConfig.getMaxBytes} is greater than size of</color>
<color=#75715e>   *     the JE cache.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadStats</color> <color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>useConfig</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>PreloadConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>preload</color><color=#f8f8f2>(</color><color=#f8f8f2>useConfig</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts the key/data pairs in the database. This operation is faster than obtaining a count from</color>
<color=#75715e>   * a cursor based scan of the database, and will not perturb the current contents of the cache.</color>
<color=#75715e>   * However, the count is not guaranteed to be accurate if there are concurrent updates. Note that</color>
<color=#75715e>   * this method does scan a significant portion of the database and should be considered a fairly</color>
<color=#75715e>   * expensive operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation uses the an internal infrastructure and algorithm that is similar to the one</color>
<color=#75715e>   * used for the {@link DiskOrderedCursor}. Specifically, it will disable deletion of log files by</color>
<color=#75715e>   * the JE log cleaner during its execution and will consume a certain amount of memory (but</color>
<color=#75715e>   * without affecting the memory that is available for the JE cache). To avoid excessive memory</color>
<color=#75715e>   * consumption (and a potential {@code OutOfMemoryError}) this method places an internal limit on</color>
<color=#75715e>   * its memory consumption. If this limit is reached, the method will still work properly, but its</color>
<color=#75715e>   * performance will degrade. To specify a different memory limit than the one used by this method,</color>
<color=#75715e>   * use the {@link Database#count(long memoryLimit)} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Currently, the internal memory limit is calculated as 10% of the difference between the max</color>
<color=#75715e>   * JVM memory (the value returned by Runtime.getRuntime().maxMemory()) and the configured JE cache</color>
<color=#75715e>   * size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The count of key/data pairs in the database.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheUnexpectedSizes">Cache Statistics: Unexpected</color>
<color=#75715e>   *     Sizes</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Counts the key/data pairs in the database. This operation is faster than obtaining a count from</color>
<color=#75715e>   * a cursor based scan of the database, and will not perturb the current contents of the cache.</color>
<color=#75715e>   * However, the count is not guaranteed to be accurate if there are concurrent updates. Note that</color>
<color=#75715e>   * this method does scan a significant portion of the database and should be considered a fairly</color>
<color=#75715e>   * expensive operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This operation uses the an internal infrastructure and algorithm that is similar to the one</color>
<color=#75715e>   * used for the {@link DiskOrderedCursor}. Specifically, it will disable deletion of log files by</color>
<color=#75715e>   * the JE log cleaner during its execution and will consume a certain amount of memory (but</color>
<color=#75715e>   * without affecting the memory that is available for the JE cache). To avoid excessive memory</color>
<color=#75715e>   * consumption (and a potential {@code OutOfMemoryError}) this method takes as input an upper</color>
<color=#75715e>   * bound on the memory it may consume. If this limit is reached, the method will still work</color>
<color=#75715e>   * properly, but its performance will degrade.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param memoryLimit The maximum memory (in bytes) that may be consumed by this method.</color>
<color=#75715e>   * @return The count of key/data pairs in the database.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheUnexpectedSizes">Cache Statistics: Unexpected</color>
<color=#75715e>   *     Sizes</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>memoryLimit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>(</color><color=#f8f8f2>memoryLimit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns database statistics.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this method has not been configured to avoid expensive operations (using the {@link</color>
<color=#75715e>   * com.sleepycat.je.StatsConfig#setFast StatsConfig.setFast} method), it will access some of or</color>
<color=#75715e>   * all the pages in the database, incurring a severe performance penalty as well as possibly</color>
<color=#75715e>   * flushing the underlying cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the presence of multiple threads or processes accessing an active database, the</color>
<color=#75715e>   * information returned by this method may be out-of-date.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config The statistics returned; if null, default statistics are returned.</color>
<color=#75715e>   * @return Database statistics.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseStats</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>StatsConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>stat</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Verifies the integrity of the database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Verification is an expensive operation that should normally only be used for troubleshooting</color>
<color=#75715e>   * and debugging.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config Configures the verify operation; if null, the default operation is performed.</color>
<color=#75715e>   * @return Database statistics.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if a corruption is detected, or if an unexpected, internal</color>
<color=#75715e>   *     or environment-wide failure occurs. If a persistent corruption is detected, {@link</color>
<color=#75715e>   *     EnvironmentFailureException#isCorrupted()} will return true.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseStats</color> <color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>VerifyConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>VerifyConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the database name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called at any time during the life of the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The database name.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDatabaseName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Non-transactional database name, safe to access when creating error</color>
<color=#75715e>   * messages.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>getDebugName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#e6db74>"[closed]"</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns this Database object's configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This may differ from the configuration used to open this object if the database existed</color>
<color=#75715e>   * previously.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Unlike most Database methods, this method may be called after the database is closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return This Database object's configuration.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>DatabaseConfig</color> <color=#a6e22e>getConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>DatabaseConfig</color><color=#f8f8f2>.</color><color=#a6e22e>combineConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>configuration</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Equivalent to getConfig().getTransactional() but cheaper. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isTransactional</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the {@link com.sleepycat.je.Environment Environment} handle for the database</color>
<color=#75715e>   * environment underlying the {@link Database Database}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called at any time during the life of the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The {@link com.sleepycat.je.Environment Environment} handle for the database</color>
<color=#75715e>   *     environment underlying the {@link Database Database}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Environment</color> <color=#a6e22e>getEnvironment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envHandle</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a list of all {@link com.sleepycat.je.SecondaryDatabase SecondaryDatabase} objects</color>
<color=#75715e>   * associated with a primary database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If no secondaries are associated with this database, an empty list is returned.</color>
<color=#75715e>   */</color>
  <color=#75715e>/*</color>
<color=#75715e>   * Replacement for above paragraph when SecondaryAssociation is published:</color>
<color=#75715e>   * <p>If no secondaries are associated with this database, or a {@link</color>
<color=#75715e>   * SecondaryAssociation} is {@link DatabaseConfig#setSecondaryAssociation</color>
<color=#75715e>   * configured}, an empty list is returned.</p></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>SecondaryDatabase</color><color=#f92672>></color> <color=#a6e22e>getSecondaryDatabases</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>simpleAssocSecondaries</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Compares two keys using either the default comparator if no BTree comparator has been set or</color>
<color=#75715e>   * the BTree comparator if one has been set.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return -1 if entry1 compares less than entry2, 0 if entry1 compares equal to entry2, 1 if</color>
<color=#75715e>   *     entry1 compares greater than entry2</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if either entry is a partial DatabaseEntry, or is null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>doCompareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry2</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*duplicates*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Compares two data elements using either the default comparator if no duplicate comparator has</color>
<color=#75715e>   * been set or the duplicate comparator if one has been set.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return -1 if entry1 compares less than entry2, 0 if entry1 compares equal to entry2, 1 if</color>
<color=#75715e>   *     entry1 compares greater than entry2</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed.</color>
<color=#75715e>   * @throws IllegalArgumentException if either entry is a partial DatabaseEntry, or is null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compareDuplicates</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>doCompareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry2</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*duplicates*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>doCompareKeys</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>entry2</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>duplicates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkEnv</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#e6db74>"entry1"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForNullDbt</color><color=#f8f8f2>(</color><color=#f8f8f2>entry2</color><color=#f8f8f2>,</color> <color=#e6db74>"entry2"</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#e6db74>"entry1"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>DatabaseUtil</color><color=#f8f8f2>.</color><color=#a6e22e>checkForPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>entry2</color><color=#f8f8f2>,</color> <color=#e6db74>"entry2"</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>compareEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>entry1</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry2</color><color=#f8f8f2>,</color> <color=#f8f8f2>duplicates</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Helpers, not part of the public API</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the Database was opened read/write.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the Database was opened read/write.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isWritable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isWritable</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the non-null, underlying getDbImpl.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should always be called to access the databaseImpl, to guard against NPE when</color>
<color=#75715e>   * the database has been closed after the initial checks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>However, callers should additionally call checkOpen at API entry points to reject the</color>
<color=#75715e>   * operation as soon as possible. Plus, if the database has been closed, this method may return</color>
<color=#75715e>   * non-null because the databaseImpl field is not volatile.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if the database has been closed since checkOpen was last called.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDbImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>databaseImpl</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * checkOpen should have thrown an exception, but we'll throw again</color>
<color=#75715e>     * here just in case.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Database is closed. State="</color> <color=#f92672>+</color> <color=#f8f8f2>state</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called during database open to set the handleLocker field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see HandleLocker</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>HandleLocker</color> <color=#a6e22e>initHandleLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>openDbLocker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>handleLocker</color> <color=#f92672>=</color> <color=#f8f8f2>HandleLocker</color><color=#f8f8f2>.</color><color=#a6e22e>createHandleLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>openDbLocker</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>handleLocker</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ForwardCursor</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do not call checkOpen if the handle was preempted or corrupted, to</color>
<color=#75715e>     * allow closing a cursor after an operation failure. [#17015]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>!=</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>PREEMPTED</color> <color=#f92672>&&</color> <color=#f8f8f2>state</color> <color=#f92672>!=</color> <color=#f8f8f2>DbState</color><color=#f8f8f2>.</color><color=#a6e22e>CORRUPTED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>openCursors</color><color=#f8f8f2>.</color><color=#a6e22e>getAndDecrement</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ForwardCursor</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>getDatabaseImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>openCursors</color><color=#f8f8f2>.</color><color=#a6e22e>getAndIncrement</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>DatabaseImpl</color> <color=#a6e22e>getDatabaseImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>OPEN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>databaseImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>CLOSED</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Database was closed."</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>INVALID</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"The Transaction used to open the Database was aborted."</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>PREEMPTED</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>preemptedCause</color><color=#f8f8f2>.</color><color=#a6e22e>wrapSelf</color><color=#f8f8f2>(</color><color=#f8f8f2>preemptedCause</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>CORRUPTED</color><color=#f8f8f2>:</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>corruptedCause</color><color=#f8f8f2>.</color><color=#a6e22e>wrapSelf</color><color=#f8f8f2>(</color><color=#f8f8f2>corruptedCause</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>assert</color> <color=#66d9ef>false</color> <color=#f8f8f2>:</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @throws EnvironmentFailureException if the underlying environment is invalid.</color>
<color=#75715e>   * @throws IllegalStateException if the environment is not open.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>checkEnv</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envHandle</color><color=#f8f8f2>.</color><color=#a6e22e>checkOpen</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>checkLockModeWithoutTxn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>userTxn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>userTxn</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>LockMode</color><color=#f8f8f2>.</color><color=#a6e22e>RMW</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>lockMode</color>
              <color=#f92672>+</color> <color=#e6db74>" is meaningless and can not be specified "</color>
              <color=#f92672>+</color> <color=#e6db74>"when a null (autocommit) transaction is used. There "</color>
              <color=#f92672>+</color> <color=#e6db74>"will never be a follow on operation which will promote "</color>
              <color=#f92672>+</color> <color=#e6db74>"the lock to WRITE."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trace</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>getOrPutType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getOrPutType</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" txnId="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" key="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" data="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lockMode="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trace</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" txnId="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" key="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" data="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>dumpData</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" lockMode="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sends trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>trace</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Level</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>txn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>level</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" name="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getDebugName</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" txnId="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" config="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>logMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>level</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>hasSecondaryOrForeignKeyAssociations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>secAssoc</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>foreignKeySecondaries</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>SecondaryAssociation</color> <color=#a6e22e>getSecondaryAssociation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>secAssoc</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a SecondaryIntegrityException using the information given.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is in the Database class, rather than in SecondaryDatabase, to support joins</color>
<color=#75715e>   * with plain Cursors [#21258].</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>SecondaryIntegrityException</color> <color=#a6e22e>secondaryRefersToMissingPrimaryKey</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SecondaryIntegrityException</color><color=#f8f8f2>(</color>
        <color=#66d9ef>this</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Secondary refers to a missing key in the primary database"</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>getDebugName</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>secKey</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>priKey</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>expirationTime</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>