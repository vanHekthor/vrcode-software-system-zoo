<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Specifies the attributes of database cursor. An instance created with the default constructor is</color>
<color=#75715e> * initialized with the system's default settings.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CursorConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Default configuration used if null is passed to methods that create a cursor. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>DEFAULT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorConfig</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience instance to configure read operations performed by the cursor to return modified</color>
<color=#75715e>   * but not yet committed data.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>READ_UNCOMMITTED</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorConfig</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience instance to configure a cursor for read committed isolation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This ensures the stability of the current data item read by the cursor but permits data read</color>
<color=#75715e>   * by this cursor to be modified or deleted prior to the commit of the transaction.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>CursorConfig</color> <color=#f8f8f2>READ_COMMITTED</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CursorConfig</color><color=#f8f8f2>();</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>READ_UNCOMMITTED</color><color=#f8f8f2>.</color><color=#a6e22e>setReadUncommitted</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>READ_COMMITTED</color><color=#f8f8f2>.</color><color=#a6e22e>setReadCommitted</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommitted</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readCommitted</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nonSticky</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An instance created using the default constructor is initialized with the system's default</color>
<color=#75715e>   * settings.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>CursorConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures read operations performed by the cursor to return modified but not yet committed</color>
<color=#75715e>   * data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param readUncommitted If true, configure read operations performed by the cursor to return</color>
<color=#75715e>   *     modified but not yet committed data.</color>
<color=#75715e>   * @see LockMode#READ_UNCOMMITTED</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CursorConfig</color> <color=#a6e22e>setReadUncommitted</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setReadUncommittedVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>readUncommitted</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReadUncommittedVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>readUncommitted</color> <color=#f92672>=</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if read operations performed by the cursor are configured to return modified but</color>
<color=#75715e>   * not yet committed data.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if read operations performed by the cursor are configured to return modified but</color>
<color=#75715e>   *     not yet committed data.</color>
<color=#75715e>   * @see LockMode#READ_UNCOMMITTED</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures read operations performed by the cursor to obey read committed isolation. Read</color>
<color=#75715e>   * committed isolation provides for cursor stability but not repeatable reads. Data items which</color>
<color=#75715e>   * have been previously read by this transaction may be deleted or modified by other transactions</color>
<color=#75715e>   * before the cursor is closed or the transaction completes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param readCommitted If true, configure read operations performed by the cursor to obey read</color>
<color=#75715e>   *     committed isolation.</color>
<color=#75715e>   * @see LockMode#READ_COMMITTED</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CursorConfig</color> <color=#a6e22e>setReadCommitted</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setReadCommittedVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>readCommitted</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReadCommittedVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>readCommitted</color> <color=#f92672>=</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if read operations performed by the cursor are configured to obey read committed</color>
<color=#75715e>   * isolation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if read operations performed by the cursor are configured to obey read committed</color>
<color=#75715e>   *     isolation.</color>
<color=#75715e>   * @see LockMode#READ_COMMITTED</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadCommitted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readCommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the behavior of the cursor when a cursor movement operation returns {@link</color>
<color=#75715e>   * OperationStatus#NOTFOUND}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By default, a cursor is "sticky", meaning that the prior position is maintained by cursor</color>
<color=#75715e>   * movement operations, and the cursor stays at the prior position when the operation does not</color>
<color=#75715e>   * succeed. For example, if {@link Cursor#getFirst} is called successfully, and then {@link</color>
<color=#75715e>   * Cursor#getNext} is called, if {@code getNext} returns {@code NOTFOUND} the cursor will remain</color>
<color=#75715e>   * positioned on the first record.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Also, as part of maintaining the prior position, the lock on the record at the current</color>
<color=#75715e>   * position will be held (at least) until after a cursor movement operation succeeds and acquires</color>
<color=#75715e>   * a lock on the record at the new position. In the example above, a lock on the first record will</color>
<color=#75715e>   * still be held after {@code getNext} returns {@code NOTFOUND}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the cursor is configured to be non-sticky, the prior position is not maintained, and this</color>
<color=#75715e>   * has certain performance advantages:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>Some processing is avoided because the prior position is not maintained.</color>
<color=#75715e>   *   <li>The lock on the record at the prior position is released before acquiring the lock on the</color>
<color=#75715e>   *       record at the new position (when the cursor movement operation succeeds.) This can help</color>
<color=#75715e>   *       to prevent deadlocks in certain situations. Namely, if the cursor's isolation mode allows</color>
<color=#75715e>   *       locks to be released when moving to a new position, then only one lock at a time will be</color>
<color=#75715e>   *       held by the cursor. Holding multiple locks at a time can cause deadlocks, when locks are</color>
<color=#75715e>   *       acquired in different orders by different threads, for example, when one cursor is</color>
<color=#75715e>   *       scanning forward and another cursor is scanning backward. Note that this optimization</color>
<color=#75715e>   *       does not apply to repeatable-read or serializable isolation, since these modes require</color>
<color=#75715e>   *       that locks are not released by cursor movement operations.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>However, when the cursor is configured as non-sticky and {@code getNext} returns {@code</color>
<color=#75715e>   * NOTFOUND} in the example above, the cursor position will be uninitialized, as if it had just</color>
<color=#75715e>   * been opened. Also, the lock on the first record will have been released (except when</color>
<color=#75715e>   * repeatable-read or serializable isolation is configured.) To move to the first record (and lock</color>
<color=#75715e>   * it), {@code getFirst} must be called again.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Also note that in certain circumstances, internal algorithms require that the prior position</color>
<color=#75715e>   * is retained, and the operation will behave as if the cursor is sticky. Specifically, these are</color>
<color=#75715e>   * only the following methods, and only when called on a database with duplicates configured:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>{@link Cursor#putNoOverwrite}</color>
<color=#75715e>   *   <li>{@link Cursor#getNextDup}}</color>
<color=#75715e>   *   <li>{@link Cursor#getPrevDup}}</color>
<color=#75715e>   *   <li>{@link Cursor#getNextNoDup}}</color>
<color=#75715e>   *   <li>{@link Cursor#getPrevNoDup}}</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nonSticky if false (the default), the prior position is maintained by cursor movement</color>
<color=#75715e>   *     operations, and the cursor stays at the prior position when {@code NOTFOUND} is returned.</color>
<color=#75715e>   *     If true, the prior position is not maintained, and the cursor is reinitialized when {@code</color>
<color=#75715e>   *     NOTFOUND} is returned.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CursorConfig</color> <color=#a6e22e>setNonSticky</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>nonSticky</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setNonStickyVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>nonSticky</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setNonStickyVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>nonSticky</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nonSticky</color> <color=#f92672>=</color> <color=#f8f8f2>nonSticky</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the non-sticky setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setNonSticky</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getNonSticky</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nonSticky</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of this configuration object. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CursorConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>CursorConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>willNeverOccur</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the values for each configuration attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the values for each configuration attribute.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"readUncommitted="</color> <color=#f92672>+</color> <color=#f8f8f2>readUncommitted</color> <color=#f92672>+</color> <color=#e6db74>"\nreadCommitted="</color> <color=#f92672>+</color> <color=#f8f8f2>readCommitted</color> <color=#f92672>+</color> <color=#e6db74>"\n"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>