<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.NamedChannelWithTimeout</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The ChannelTimeoutTask ensures that all channels registered with it are periodically checked to</color>
<color=#75715e> * ensure that they are active. The period roughly corresponds to a second, although intervening GC</color>
<color=#75715e> * activity may expand this period considerably. Note that elapsedMs used for timeouts is always</color>
<color=#75715e> * ticked up in 1 second increments. Thus multiple seconds of real time may correspond to a single</color>
<color=#75715e> * second of "timer time" if the system is paricularly busy, or the gc has been particularly active.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This property allows the underlying timeout implementation to compensate for GC pauses in</color>
<color=#75715e> * which activity on the channel at the java level would have been suspended and thus reduces the</color>
<color=#75715e> * number of false timeouts.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ChannelTimeoutTask</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TimerTask</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>ONE_SECOND_MS</color> <color=#f92672>=</color> <color=#ae81ff>1000l</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Elapsed time as measured by the timer task. It's always incremented</color>
<color=#75715e>   * in one second intervals.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>elapsedMs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>NamedChannelWithTimeout</color><color=#f92672>></color> <color=#f8f8f2>channels</color> <color=#f92672>=</color>
      <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>synchronizedList</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><</color><color=#f8f8f2>NamedChannelWithTimeout</color><color=#f92672>></color><color=#f8f8f2>());</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates and schedules the timer task.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param timer the timer associated with this task</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ChannelTimeoutTask</color><color=#f8f8f2>(</color><color=#f8f8f2>Timer</color> <color=#f8f8f2>timer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>timer</color><color=#f8f8f2>.</color><color=#a6e22e>schedule</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>ONE_SECOND_MS</color><color=#f8f8f2>,</color> <color=#f8f8f2>ONE_SECOND_MS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Runs once a second checking to see if a channel is still active. Each channel establishes its</color>
<color=#75715e>   * own timeout period using elapsedMs to check for timeouts. Inactive channels are removed from</color>
<color=#75715e>   * the list of registered channels.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>elapsedMs</color> <color=#f92672>+=</color> <color=#f8f8f2>ONE_SECOND_MS</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>channels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>NamedChannelWithTimeout</color><color=#f92672>></color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>channels</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>().</color><color=#a6e22e>isActive</color><color=#f8f8f2>(</color><color=#f8f8f2>elapsedMs</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Registers a channel so that the timer can make periodic calls to isActive(). Note that closing</color>
<color=#75715e>   * a channel renders it inactive and causes it to be removed from the list by the run() method.</color>
<color=#75715e>   * Consequently, there is no corresponding unregister operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param channel the channel being registered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>NamedChannelWithTimeout</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>channels</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>