<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentFailureReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicatedEnvironment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.StateChangeEvent</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.StateChangeListener</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicReference</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * NodeState encapsulates the current replicator state, and the ability to wait for state transition</color>
<color=#75715e> * and fire state change notifications.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>NodeState</color> <color=#f8f8f2>{</color>
  <color=#75715e>/* The rep impl whose state is being tracked. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The application registered state change listener for this node. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StateChangeListener</color> <color=#f8f8f2>stateChangeListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The state change event that resulted in the current state. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StateChangeEvent</color> <color=#f8f8f2>stateChangeEvent</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f92672>></color> <color=#f8f8f2>currentState</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>NodeState</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>currentState</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>AtomicReference</color><color=#f92672><</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>DETACHED</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setChangeListener</color><color=#f8f8f2>(</color><color=#f8f8f2>StateChangeListener</color> <color=#f8f8f2>stateChangeListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>stateChangeListener</color> <color=#f92672>=</color> <color=#f8f8f2>stateChangeListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>StateChangeListener</color> <color=#a6e22e>getChangeListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stateChangeListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Change to a new node state and release any threads waiting for a state transition. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>masterNameId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>newState</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>oldState</color> <color=#f92672>=</color> <color=#f8f8f2>currentState</color><color=#f8f8f2>.</color><color=#a6e22e>getAndSet</color><color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>stateChangeEvent</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StateChangeEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterNameId</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"node:"</color> <color=#f92672>+</color> <color=#f8f8f2>masterNameId</color> <color=#f92672>+</color> <color=#e6db74>" state change from "</color> <color=#f92672>+</color> <color=#f8f8f2>oldState</color> <color=#f92672>+</color> <color=#e6db74>" to "</color> <color=#f92672>+</color> <color=#f8f8f2>newState</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stateChangeListener</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stateChangeListener</color><color=#f8f8f2>.</color><color=#a6e22e>stateChange</color><color=#f8f8f2>(</color><color=#f8f8f2>stateChangeEvent</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"State Change listener exception"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LISTENER_EXCEPTION</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Make things obvious in thread dumps */</color>
    <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>setName</color><color=#f8f8f2>(</color><color=#f8f8f2>currentState</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>getRepEnvState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>currentState</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>StateChangeEvent</color> <color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stateChangeEvent</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>