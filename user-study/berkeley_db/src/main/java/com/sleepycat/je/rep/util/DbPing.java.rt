<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.NodeState</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationNetworkConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicationNode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.BinaryNodeStateProtocol</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.BinaryNodeStateProtocol.BinaryNodeStateResponse</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.BinaryNodeStateService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory.ConnectOptions</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher.ServiceConnectFailedException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.net.DataChannelFactoryBuilder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.CmdUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileNotFoundException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.StringTokenizer</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class provides the utility to request the current state of a replica in a JE replication</color>
<color=#75715e> * group, see more details in {@link com.sleepycat.je.rep.NodeState}.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DbPing</color> <color=#f8f8f2>{</color>
  <color=#75715e>/* The name of the state requested node. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>;</color>
  <color=#75715e>/* The name of group which the requested node joins. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
  <color=#75715e>/* The SocketAddress of the requested node. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>;</color>
  <color=#75715e>/* The timeout value for building the connection. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>socketTimeout</color> <color=#f92672>=</color> <color=#ae81ff>10000</color><color=#f8f8f2>;</color>
  <color=#75715e>/* The factory for channel creation */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>undocumentedUsageString</color> <color=#f92672>=</color>
      <color=#e6db74>"  -netProps <optional>    # name of a property file containing\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"                             # properties needed for replication\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"                             # service access\n"</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>usageString</color> <color=#f92672>=</color>
      <color=#e6db74>"Usage: "</color>
          <color=#f92672>+</color> <color=#f8f8f2>CmdUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getJavaCommand</color><color=#f8f8f2>(</color><color=#f8f8f2>DbPing</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color>
          <color=#f92672>+</color> <color=#e6db74>"\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"  -nodeName <node name>      # name of the node whose state is\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"                             # requested\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"  -groupName <group name>    # name of the group which the node\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"                             # joins\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"  -nodeHost <host:port>      # the host name and port pair the\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"                             # node used to join the group\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"  -socketTimeout <optional>  # the timeout value for creating a\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"                             # socket connection with the node,\n"</color>
          <color=#f92672>+</color> <color=#e6db74>"                             # default is 10 seconds if not set"</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Undocumented usage - SSL deferred</color>
<color=#75715e>   *   -netProps &lt;optional&gt; # name of a property file containing</color>
<color=#75715e>   *                               # properties needed for replication</color>
<color=#75715e>   *                               # service access</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Usage:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   * java {com.sleepycat.je.rep.util.DbPing |</color>
<color=#75715e>   *       -jar je-&lt;version&gt;.jar DbPing}</color>
<color=#75715e>   *   -nodeName &lt;node name&gt; # name of the node whose state is</color>
<color=#75715e>   *                               # requested</color>
<color=#75715e>   *   -groupName &lt;group name&gt; # name of the group which the node joins</color>
<color=#75715e>   *   -nodeHost &lt;host:port&gt; # the host name and port pair the node</color>
<color=#75715e>   *                               # used to join the group</color>
<color=#75715e>   *   -socketTimeout              # the timeout value for creating a</color>
<color=#75715e>   *                               # socket connection with the node,</color>
<color=#75715e>   *                               # default is 10 seconds if not set</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbPing</color> <color=#f8f8f2>ping</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DbPing</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>ping</color><color=#f8f8f2>.</color><color=#a6e22e>parseArgs</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>ping</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeState</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Print usage information for this utility.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param message the errors description.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>printUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>msg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>msg</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>msg</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>usageString</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Parse the command line parameters.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param argv Input command line parameters.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>parseArgs</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>argv</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>argc</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nArgs</color> <color=#f92672>=</color> <color=#f8f8f2>argv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>netPropsName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nArgs</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>argc</color> <color=#f92672><</color> <color=#f8f8f2>nArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>thisArg</color> <color=#f92672>=</color> <color=#f8f8f2>argv</color><color=#f92672>[</color><color=#f8f8f2>argc</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisArg</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-nodeName"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argc</color> <color=#f92672><</color> <color=#f8f8f2>nArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nodeName</color> <color=#f92672>=</color> <color=#f8f8f2>argv</color><color=#f92672>[</color><color=#f8f8f2>argc</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"-nodeName requires an argument"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisArg</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-groupName"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argc</color> <color=#f92672><</color> <color=#f8f8f2>nArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>groupName</color> <color=#f92672>=</color> <color=#f8f8f2>argv</color><color=#f92672>[</color><color=#f8f8f2>argc</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"-groupName requires an argument"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisArg</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-nodeHost"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argc</color> <color=#f92672><</color> <color=#f8f8f2>nArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>StringTokenizer</color> <color=#f8f8f2>st</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringTokenizer</color><color=#f8f8f2>(</color><color=#f8f8f2>argv</color><color=#f92672>[</color><color=#f8f8f2>argc</color><color=#f92672>++]</color><color=#f8f8f2>,</color> <color=#e6db74>":"</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>st</color><color=#f8f8f2>.</color><color=#a6e22e>countTokens</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"Argument for -nodeHost is not valid."</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>socketAddress</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InetSocketAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>st</color><color=#f8f8f2>.</color><color=#a6e22e>nextToken</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>st</color><color=#f8f8f2>.</color><color=#a6e22e>nextToken</color><color=#f8f8f2>()));</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"the port of -nodeHost is not valid"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"-nodeHost requires an argument"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisArg</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-socketTimeout"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argc</color> <color=#f92672><</color> <color=#f8f8f2>nArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>socketTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>argv</color><color=#f92672>[</color><color=#f8f8f2>argc</color><color=#f92672>++]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"Argument for -socketTimeout is not valid"</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"-socketTimeout requires an argument"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisArg</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"-netProps"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argc</color> <color=#f92672><</color> <color=#f8f8f2>nArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>netPropsName</color> <color=#f92672>=</color> <color=#f8f8f2>argv</color><color=#f92672>[</color><color=#f8f8f2>argc</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"-netProps requires an argument"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>thisArg</color> <color=#f92672>+</color> <color=#e6db74>" is not a valid argument"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>socketTimeout</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color><color=#e6db74>"-socketTimeout requires a positive integer number"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color> <color=#f92672>=</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>createDefault</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>netPropsName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>repNetConfig</color> <color=#f92672>=</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>netPropsName</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>fnfe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color>
            <color=#e6db74>"The net properties file "</color> <color=#f92672>+</color> <color=#f8f8f2>netPropsName</color> <color=#f92672>+</color> <color=#e6db74>" does not exist: "</color> <color=#f92672>+</color> <color=#f8f8f2>fnfe</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color>
            <color=#e6db74>"The net properties file "</color> <color=#f92672>+</color> <color=#f8f8f2>netPropsName</color> <color=#f92672>+</color> <color=#e6db74>" is not valid: "</color> <color=#f92672>+</color> <color=#f8f8f2>iae</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>groupName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>socketAddress</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>printUsage</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node name, group name and the node host port are "</color>
              <color=#f92672>+</color> <color=#e6db74>"mandatory arguments, please configure."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channelFactory</color> <color=#f92672>=</color> <color=#f8f8f2>initializeFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#a6e22e>DbPing</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Create a DbPing instance for programmatic use.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param repNode a class that implements {@link com.sleepycat.je.rep.ReplicationNode}</color>
<color=#75715e>   * @param groupName name of the group which the node joins</color>
<color=#75715e>   * @param socketTimeout timeout value for creating a socket connection with the node</color>
<color=#75715e>   */</color>
  <color=#75715e>/*</color>
<color=#75715e>   * SSL deferred</color>
<color=#75715e>   * This constructor form does not support setting of non-default service</color>
<color=#75715e>   * access properties.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DbPing</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden SSL deferred Create a DbPing instance for programmatic use.</color>
<color=#75715e>   * @param repNode a class that implements {@link com.sleepycat.je.rep.ReplicationNode}</color>
<color=#75715e>   * @param groupName name of the group which the node joins</color>
<color=#75715e>   * @param socketTimeout timeout value for creating a socket connection with the node</color>
<color=#75715e>   * @param netPropsFile a File containing replication net property settings. Null is allowed.</color>
<color=#75715e>   * @throws FileNotFoundException if the netPropsFile does not exist</color>
<color=#75715e>   * @throws IllegalArgumentException if the netProps file contains invalid settings.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DbPing</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>netPropsFile</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>makeRepNetConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>netPropsFile</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden SSL deferred Create a DbPing instance for programmatic use.</color>
<color=#75715e>   * @param repNode a class that implements {@link com.sleepycat.je.rep.ReplicationNode}</color>
<color=#75715e>   * @param groupName name of the group which the node joins</color>
<color=#75715e>   * @param socketTimeout timeout value for creating a socket connection with the node</color>
<color=#75715e>   * @param netConfig a replication-net configuration object property settings. Null is allowed.</color>
<color=#75715e>   * @throws IllegalArgumentException if the netProps contains invalid settings.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DbPing</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicationNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>netConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>initializeFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>netConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden SSL deferred Create a DbPing instance for programmatic use.</color>
<color=#75715e>   * @param repNode a class that implements {@link com.sleepycat.je.rep.ReplicationNode}</color>
<color=#75715e>   * @param groupName name of the group which the node joins</color>
<color=#75715e>   * @param socketTimeout timeout value for creating a socket connection with the node</color>
<color=#75715e>   * @param channelFactory the factory for channel creation</color>
<color=#75715e>   * @throws IllegalArgumentException if the netProps contains invalid settings.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DbPing</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicationNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DataChannelFactory</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nodeName</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>groupName</color> <color=#f92672>=</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>socketAddress</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketAddress</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>socketTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>socketTimeout</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>channelFactory</color> <color=#f92672>=</color> <color=#f8f8f2>channelFactory</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the state of the specified node. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>NodeState</color> <color=#a6e22e>getNodeState</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceConnectFailedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>BinaryNodeStateProtocol</color> <color=#f8f8f2>protocol</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BinaryNodeStateProtocol</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NOCHECK</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Build the connection. */</color>
      <color=#f8f8f2>channel</color> <color=#f92672>=</color>
          <color=#f8f8f2>channelFactory</color><color=#f8f8f2>.</color><color=#a6e22e>connect</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>socketAddress</color><color=#f8f8f2>,</color>
              <color=#66d9ef>new</color> <color=#f8f8f2>ConnectOptions</color><color=#f8f8f2>()</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>setTcpNoDelay</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>setOpenTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>socketTimeout</color><color=#f8f8f2>)</color>
                  <color=#f8f8f2>.</color><color=#a6e22e>setReadTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>socketTimeout</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>ServiceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>doServiceHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>BinaryNodeStateService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Send a NodeState request to the node. */</color>
      <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>BinaryNodeStateRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>groupName</color><color=#f8f8f2>),</color> <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Get the response and return the NodeState. */</color>
      <color=#f8f8f2>BinaryNodeStateResponse</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>BinaryNodeStateResponse</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>convertToNodeState</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>makeRepNetConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>propFile</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>propFile</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>createDefault</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>((</color><color=#f8f8f2>propFile</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>DataChannelFactory</color> <color=#a6e22e>initializeFactory</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repNetConfig</color> <color=#f92672>=</color> <color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>.</color><color=#a6e22e>createDefault</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DataChannelFactoryBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>construct</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetConfig</color><color=#f8f8f2>,</color> <color=#f8f8f2>logContext</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>