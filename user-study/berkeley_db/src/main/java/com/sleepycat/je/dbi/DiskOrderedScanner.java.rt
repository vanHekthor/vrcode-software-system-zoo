<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.CacheMode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.ThreadInterruptedException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.DbFileSummary</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.FileProtector</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.Evictor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.evictor.OffHeapCache</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LNLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHookExecute</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.ref.WeakReference</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Provides an enumeration of all key/data pairs in a database, striving to fetch in disk order.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Unlike SortedLSNTreeWalker, for which the primary use case is preload, this class notifies the</color>
<color=#75715e> * callback while holding a latch only if that can be done without blocking (e.g., when the callback</color>
<color=#75715e> * can buffer the data without blocking). In other words, while holding a latch, the callback will</color>
<color=#75715e> * not be notified if it might block. This is appropriate for the DOS (DiskOrderedCursor) use case,</color>
<color=#75715e> * since the callback will block if the DOS queue is full, and the user's consumer thread may not</color>
<color=#75715e> * empty the queue as quickly as it can be filled by the producer thread. If the callback were</color>
<color=#75715e> * allowed to block while a latch is held, this would block other threads attempting to access the</color>
<color=#75715e> * database, including JE internal threads, which would have a very detrimental impact.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Algorithm =========</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Terminology ----------- callback: object implementing the RecordProcessor interface process:</color>
<color=#75715e> * invoking the callback with a key-data pair iteration: top level iteration consisting of phase I</color>
<color=#75715e> * and II phase I: accumulate LSNs phase II: sort, fetch and process LSNs</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Phase I and II -------------- To avoid processing resident nodes (invoking the callback with a</color>
<color=#75715e> * latch held), a non-recursive algorithm is used. Instead of recursively accumulating LSNs in a</color>
<color=#75715e> * depth-first iteration of the tree (like the SortedLSNTreeWalker algorithm), level 2 INs are</color>
<color=#75715e> * traversed in phase I and LSNs are accumulated for LNs or BINs (more on this below). When the</color>
<color=#75715e> * memory or LSN batch size limit is exceeded, phase I ends and all tree latches are released.</color>
<color=#75715e> * During phase II the previously accumulated LSNs are fetched and the callback is invoked for each</color>
<color=#75715e> * key or key-data pair. Since no latches are held, it is permissible for the callback to block.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>One iteration of phase I and II processes some subset of the database. Since INs are traversed</color>
<color=#75715e> * in tree order in phase I, this subset is described by a range of keys. When performing the next</color>
<color=#75715e> * iteration, the IN traversal is restarted at the highest key that was processed by the previous</color>
<color=#75715e> * iteration. The previous highest key is used to avoid duplication of entries, since some overlap</color>
<color=#75715e> * between iterations may occur.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>LN and BIN modes ---------------- As mentioned above, we accumulate LSNs for either LNs or</color>
<color=#75715e> * BINs. The BIN accumulation mode provides an optimization for key-only traversals and for all</color>
<color=#75715e> * traversals of duplicate DBs (in a dup DB, the data is included in the key). In these cases we</color>
<color=#75715e> * never need to fetch the LN, so we can sort and fetch the BIN LSNs instead. This supports at least</color>
<color=#75715e> * some types of traversals that are efficient when all BINs are not in the JE cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>We must only accumulate LN or BIN LSNs, never both, and never the LSNs of other INs (above</color>
<color=#75715e> * level 1). If we broke this rule, there would be no way to constrain memory usage in our</color>
<color=#75715e> * non-recursive approach, since we could not easily predict in advance how much memory would be</color>
<color=#75715e> * needed to fetch the nested nodes. Even if we were able predict the memory needed, it would be of</color>
<color=#75715e> * little advantage to sort and fetch a small number of higher level nodes, only to accumulate the</color>
<color=#75715e> * LSNs of their descendants (which are much larger in number). The much smaller number of higher</color>
<color=#75715e> * level nodes would likely be fetched via random IO anyway, in a large data set anyway.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The above justification also applies to the algorithm we use in LN mode, in which we</color>
<color=#75715e> * accumulate and fetch only LN LSNs. In this mode we always fetch BINs explicitly (not in LSN</color>
<color=#75715e> * sorted order), if they are not resident, for the reasons stated above.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Furthermore, in BIN mode we must account for BIN-deltas. Phase I must keep a copy any</color>
<color=#75715e> * BIN-deltas encountered in the cache. And phase II must make two passes for the accumulated LSNs:</color>
<color=#75715e> * one pass to load the deltas and another to load the full BINs and merge the previously loaded</color>
<color=#75715e> * deltas. Unfortunately we must budget memory for the deltas during phase I; since most BIN LSNs</color>
<color=#75715e> * are for deltas, not full BINs, we assume that we will need to temporarily save a delta for each</color>
<color=#75715e> * LSN. This two pass approach is not like the recursive algorithm we rejected above, however, in</color>
<color=#75715e> * two respects: 1) we know in advance (roughly anyway) how much memory we will need for both</color>
<color=#75715e> * passes, and 2) the number of LSNs fetched in each pass is roughly the same.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Data Lag -------- In phase I, as an exception to what was said above, we sometimes process</color>
<color=#75715e> * nodes that are resident in the Btree (in the JE cache) if this is possible without blocking. The</color>
<color=#75715e> * primary intention of this is to provide more recent data to the callback. When accumulating BINs,</color>
<color=#75715e> * if the BIN is dirty then fetching its LSN later means that some recently written LNs will not be</color>
<color=#75715e> * included. Therefore, if the callback would not block, we process the keys in a dirty BIN during</color>
<color=#75715e> * phase I. Likewise, when accumulating LNs in a deferred-write database, we process dirty LNs if</color>
<color=#75715e> * the callback would not block. When accumulating LN LSNs for a non-deferred-write database, we can</color>
<color=#75715e> * go further and process all resident LNs, as long as the callback would not block, since we know</color>
<color=#75715e> * that no LNs are dirty.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In spite of our attempt to process resident nodes, we may not be able to process all of them</color>
<color=#75715e> * if doing so would cause the callback to block. When we can't process a dirty, resident node, the</color>
<color=#75715e> * information added (new, deleted or updated records) since the node was last flushed will not be</color>
<color=#75715e> * visible to the callback.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In other words, the data presented to the callback may lag back to the time of the last</color>
<color=#75715e> * checkpoint. It cannot lag further back than the last checkpoint, because: 1) the scan doesn't</color>
<color=#75715e> * accumulate LSNs any higher than the BIN level, and 2) checkpoints flush all dirty BINs. For a</color>
<color=#75715e> * DOS, the user may decrease the likelihood of stale data by increasing the DOS queue size,</color>
<color=#75715e> * decreasing the LSN batch size, decreasing the memory limit, or performing a checkpoint</color>
<color=#75715e> * immediately before the start of the scan. Even so, it may be impossible to guarantee that all</color>
<color=#75715e> * records written at the start of the scan are visible to the callback.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DiskOrderedScanner</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Interface implemented by the callback. */</color>
  <color=#66d9ef>interface</color> <color=#a6e22e>RecordProcessor</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Process a key-data pair, in user format (dup DB keys are already split into key and data).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param key always non-null.</color>
<color=#75715e>     * @param data is null only in keys-only mode.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>process</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dbIdx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns whether process() can be called nRecords times, immediately after calling this</color>
<color=#75715e>     * method, without any possibility of blocking. For example, with DOS this method returns true</color>
<color=#75715e>     * if the DOS queue has nRecords or more remaining capacity.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>canProcessWithoutBlocking</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>nRecords</color><color=#f8f8f2>);</color>

    <color=#66d9ef>int</color> <color=#a6e22e>getCapacity</color><color=#f8f8f2>();</color>

    <color=#66d9ef>void</color> <color=#a6e22e>checkShutdown</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   *</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DBContext</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dbIdx</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbFileSummary</color><color=#f92672>></color> <color=#f8f8f2>dbFileSummaries</color><color=#f8f8f2>;</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>prevEndingKey</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>newEndingKey</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>lastBinLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>safeToUseCachedDelta</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>parentIsLatched</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>pidx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>plsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pkey</color><color=#f8f8f2>;</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>checkLevel2Keys</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>binKey</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>reuseBin</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DBContext</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dbIdx</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbIdx</color> <color=#f92672>=</color> <color=#f8f8f2>dbIdx</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dbFileSummaries</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>cloneDbFileSummaries</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * WeakBinRefs are used to reduce the memory consumption for BIN deltas</color>
<color=#75715e>   * that are found in the je cache during phase 1. In an older implementation</color>
<color=#75715e>   * of DOS all such deltas were copied locally and the copies retained</color>
<color=#75715e>   * until phase 2b, when they would be merged with their associated full</color>
<color=#75715e>   * bins. Obviously this could consume a lot of memory.</color>
<color=#75715e>   *</color>
<color=#75715e>   * In the current implementation, dirty deltas are still treated the old</color>
<color=#75715e>   * way, i.e. copied (see below for a justification). But for clean deltas,</color>
<color=#75715e>   * a WeakBinRef is created when, during phase 1, such a delta is found in</color>
<color=#75715e>   * the je cache (the WeakBinRef is created while the delta is latched). At</color>
<color=#75715e>   * creation time, the WeakBinRef stores (a) a WeakReference to the BIN obj,</color>
<color=#75715e>   * (b) the lsn found in the parent slot for this bin (the on-disk image</color>
<color=#75715e>   * pointed to by this lsn must be the same as the latched, in-memory image,</color>
<color=#75715e>   * given that we use WeakBinRefs for clean deltas only) (c) the lsn of</color>
<color=#75715e>   * the full bin associated with this bin delta (copied out from the delta</color>
<color=#75715e>   * itself), and (d) the average size of deltas for the database and log</color>
<color=#75715e>   * file that the delta belongs to.</color>
<color=#75715e>   *</color>
<color=#75715e>   * DiskOrderedScanner.binDeltas is an ArrayList of Object refs, pointing</color>
<color=#75715e>   * to either WeakBinRefs (for clean deltas) or BINs (for copies of dirty</color>
<color=#75715e>   * deltas). The list is built during phase 1 and is used during phase 2b</color>
<color=#75715e>   * to merge the referenced deltas with their associated full BINs. The</color>
<color=#75715e>   * list is first sorted by full-bin LSN so that the full bins are fetched</color>
<color=#75715e>   * in disk order.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Shortly after a WeakBinRef is created, its associated bin gets unlatched</color>
<color=#75715e>   * and remains unlatched until the WeakBinRef is used in phase 2b. As a</color>
<color=#75715e>   * result, anything can happen to the bin in between. The bin may be evicted</color>
<color=#75715e>   * and then garbage-collected, or it may be converted to a full BIN, split,</color>
<color=#75715e>   * logged, and mutated to a delta again. If the BIN obj gets GC-ed,</color>
<color=#75715e>   * this.get() will be null when we process this WeakBinRef in phase 2b.</color>
<color=#75715e>   * In this case, to avoid doing one or two random I/Os in the middle of</color>
<color=#75715e>   * sequential I/Os, this.binLsn is saved in a set of "deferred LSNs"</color>
<color=#75715e>   * (see below) to be processed in a subsequent iteration. If the BIN obj</color>
<color=#75715e>   * is still accessible, we compare its current full-bin LSN with the one</color>
<color=#75715e>   * saved in this.fullBinLsn. If they are different, we again add</color>
<color=#75715e>   * this.binLsn to deferred-LSNs set. Again this is done to avoid</color>
<color=#75715e>   * disturbing the sequential I/O (we could use the current full-bin LSN to</color>
<color=#75715e>   * merge the delta with the correct full bin, but this would require a</color>
<color=#75715e>   * random I/O), but also because the bin could have split, and there is no</color>
<color=#75715e>   * easy way to find the other bin(s) where slots from this bin were moved</color>
<color=#75715e>   * to. Note that detecting splits via comparing the 2 full-bin LSNs is a</color>
<color=#75715e>   * conservative approach that relies on splits being logged immediately.</color>
<color=#75715e>   *</color>
<color=#75715e>   * WeakReferences are used to ref cached clean deltas in order to avoid</color>
<color=#75715e>   * counting the size of the delta in the DOS budget or having to pin the</color>
<color=#75715e>   * bin for a long period of time. Of course, if this.binLsn needs to be</color>
<color=#75715e>   * deferred for the reasons mentioned above, then an average delta size will</color>
<color=#75715e>   * be added to the memory usage for the DOS as well as the je cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * What about dirty cached deltas? We could be doing the same as for clean</color>
<color=#75715e>   * deltas. However, for dirty deltas, their unsaved updates could have</color>
<color=#75715e>   * happened before the start of the DOS and we would loose these updates</color>
<color=#75715e>   * if instead of processing the original bin delta, we have to fetch</color>
<color=#75715e>   * this.binLsn from disk. So, we would be violating the DOS contract that</color>
<color=#75715e>   * says that the returned data are not older than the start of the DOS.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>WeakBinRef</color> <color=#66d9ef>extends</color> <color=#f8f8f2>WeakReference</color><color=#f92672><</color><color=#f8f8f2>BIN</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fullBinLsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>;</color>

    <color=#75715e>/* For Sizeof util program */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>WeakBinRef</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>binLsn</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fullBinLsn</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>WeakBinRef</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>,</color> <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>binLsn</color> <color=#f92672>=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fullBinLsn</color> <color=#f92672>=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>();</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>!=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>());</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lsn</color> <color=#f92672>!=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#f8f8f2>getDeltaMemSize</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>OffHeapBinRef</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fullBinLsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>;</color>

    <color=#75715e>/* For Sizeof util program */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>OffHeapBinRef</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ohBinId</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>binLsn</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fullBinLsn</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>,</color> <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fullBinLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ohBinId</color> <color=#f92672>=</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color> <color=#f92672>=</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fullBinLsn</color> <color=#f92672>=</color> <color=#f8f8f2>fullBinLsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#f8f8f2>getDeltaMemSize</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A DeferredLsnsBatch obj stores a set of lsns whose processing cannot be</color>
<color=#75715e>   * done in the current iteration, and as a result, must be deferred until</color>
<color=#75715e>   * one of the subsequent iterations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The DeferredLsnsBatch obj also stores the total (approximate) memory</color>
<color=#75715e>   * that will be consumed when, during a subsequent phase 1a, for each bin</color>
<color=#75715e>   * pointed-to by these lsns, the bin is fetched from disk and, if it is a</color>
<color=#75715e>   * delta, stored in memory until it is merged with its associated full bin</color>
<color=#75715e>   * (which is done in phase 2b).</color>
<color=#75715e>   *</color>
<color=#75715e>   * Given that we cannot exceed the DOS memory budget during each iteration,</color>
<color=#75715e>   * no more LSNs are added to a DeferredLsnsBatch once its memoryUsage gets</color>
<color=#75715e>   * >= memoryLimit. Instead, a new DeferredLsnsBatch is created and added</color>
<color=#75715e>   * at the tail of the DiskOrderedScanner.deferredLsns queue. Only the batch</color>
<color=#75715e>   * at the head of the deferredLsns queue can be processed during each</color>
<color=#75715e>   * iteration. So, if we have N DeferredLsnsBatches in the queue, the next</color>
<color=#75715e>   * N iteration will process only deferred lsns (no phase 1 will be done</color>
<color=#75715e>   * during these N iterations).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DeferredLsnsBatch</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Fixed overhead for adding an lsn to this batch</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LSN_MEM_OVERHEAD</color> <color=#f92672>=</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHSET_ENTRY_OVERHEAD</color> <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LONG_OVERHEAD</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>lsns</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>memoryUsage</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/* For Sizeof util program */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>DeferredLsnsBatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>memoryUsage</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DeferredLsnsBatch</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>SIZEOF_DeferredLsnsBatch</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>memoryUsage</color> <color=#f92672>+=</color> <color=#f8f8f2>SIZEOF_DeferredLsnsBatch</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>free</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>SIZEOF_DeferredLsnsBatch</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>memoryUsage</color> <color=#f92672>-=</color> <color=#f8f8f2>SIZEOF_DeferredLsnsBatch</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>memoryUsage</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>containsLsn</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Called during phase 2b, when a WeakBinRef or OffHeapBinRef has to</color>
<color=#75715e>     * be deferred.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>addLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>currentMemConsumption</color> <color=#f92672>=</color> <color=#f8f8f2>LSN_MEM_OVERHEAD</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>currentMemConsumption</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * ref.memSize is the memory that will be needed during a</color>
<color=#75715e>       * subsequent phase 2a to store the delta fetched via ref.binLsn,</color>
<color=#75715e>       * if ref.binLsn is indeed pointing to a delta; 0 if ref.binLsn</color>
<color=#75715e>       * points to a full bin.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>futureMemConsumption</color> <color=#f92672>=</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>;</color>

      <color=#75715e>/* For storing ref.binLsn in the lsns array created in phase 2a. */</color>
      <color=#f8f8f2>futureMemConsumption</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * For the DeferredDeltaRef created in phase 2a to reference the</color>
<color=#75715e>       * delta fetched via ref.binLsn.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>futureMemConsumption</color> <color=#f92672>+=</color> <color=#f8f8f2>SIZEOF_DeferredDeltaRef</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>memoryUsage</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentMemConsumption</color> <color=#f92672>+</color> <color=#f8f8f2>futureMemConsumption</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>accLimitExceeded</color><color=#f8f8f2>(</color><color=#f8f8f2>memoryUsage</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Called during phase 2a after fetching the bin pointed-to by the</color>
<color=#75715e>     * given lsn.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>removeLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>LSN_MEM_OVERHEAD</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * We don't really need to subtract from this.memoryUsage here.</color>
<color=#75715e>         * It is done only for sanity checking (the assertion in</color>
<color=#75715e>         * this.free()).</color>
<color=#75715e>         */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>memDelta</color> <color=#f92672>=</color> <color=#f8f8f2>LSN_MEM_OVERHEAD</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>memDelta</color> <color=#f92672>+=</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>memDelta</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>memDelta</color> <color=#f92672>+=</color> <color=#f8f8f2>SIZEOF_DeferredDeltaRef</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>memoryUsage</color> <color=#f92672>-=</color> <color=#f8f8f2>memDelta</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>found</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>undoLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>found</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>LSN_MEM_OVERHEAD</color><color=#f8f8f2>);</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>memDelta</color> <color=#f92672>=</color> <color=#f8f8f2>LSN_MEM_OVERHEAD</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>memDelta</color> <color=#f92672>+=</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>memDelta</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>memDelta</color> <color=#f92672>+=</color> <color=#f8f8f2>SIZEOF_DeferredDeltaRef</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>memoryUsage</color> <color=#f92672>-=</color> <color=#f8f8f2>memDelta</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Wrapper for a BIN ref. Used to distinguish whether the fetching of a</color>
<color=#75715e>   * bin delta during phase 1a was done via a deferred lsn or not. This info</color>
<color=#75715e>   * is needed during phase 2b: after the delta is merged with its associated</color>
<color=#75715e>   * full bin, we need to know whether it is a deferred bin, in which case</color>
<color=#75715e>   * its records will be processed without checking their keys against</color>
<color=#75715e>   * prevEndingKey.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DeferredDeltaRef</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>

    <color=#75715e>/* For Sizeof util program */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>DeferredDeltaRef</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>delta</color> <color=#f92672>=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>SIZEOF_DeferredDeltaRef</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>free</color><color=#f8f8f2>(</color><color=#f8f8f2>DiskOrderedScanner</color> <color=#f8f8f2>scanner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>scanner</color><color=#f8f8f2>.</color><color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>SIZEOF_DeferredDeltaRef</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>LN_ONLY</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INS_LN</color> <color=#75715e>/* Any LN type will do. */</color><color=#f8f8f2>};</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>BIN_ONLY</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>{</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_BIN</color><color=#f8f8f2>};</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>BIN_OR_DELTA</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_BIN</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_BIN_DELTA</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_OLD_BIN_DELTA</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>};</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT_ARRAY_ITEM_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SIZEOF_WeakBinRef</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>DOS_WEAK_BINREF_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SIZEOF_OffHeapBinRef</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>DOS_OFFHEAP_BINREF_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SIZEOF_DeferredDeltaRef</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>DOS_DEFERRED_DELTAREF_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SIZEOF_DeferredLsnsBatch</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>DOS_DEFERRED_LSN_BATCH_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ACCUMULATED_MEM_LIMIT</color> <color=#f92672>=</color> <color=#ae81ff>100000</color><color=#f8f8f2>;</color> <color=#75715e>// bytes</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SUSPENSION_INTERVAL</color> <color=#f92672>=</color> <color=#ae81ff>50</color><color=#f8f8f2>;</color> <color=#75715e>// in milliseconds</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>scanSerial</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>countOnly</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>keysOnly</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>binsOnly</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>memoryLimit</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RecordProcessor</color> <color=#f8f8f2>processor</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>numDBs</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DBContext</color><color=#f92672>[]</color> <color=#f8f8f2>dbs</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>dbid2dbidxMap</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dupDBs</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>binDeltas</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LSNAccumulator</color> <color=#f8f8f2>lsnAcc</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LinkedList</color><color=#f92672><</color><color=#f8f8f2>DeferredLsnsBatch</color><color=#f92672>></color> <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>localMemoryUsage</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>globalMemoryUsage</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>accumulatedMemDelta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>numLsns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>nIterations</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color> <color=#f8f8f2>testHook1</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color> <color=#f8f8f2>evictionHook</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>debug</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>DiskOrderedScanner</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseImpl</color><color=#f92672>[]</color> <color=#f8f8f2>dbImpls</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>RecordProcessor</color> <color=#f8f8f2>processor</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>scanSerial</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>binsOnly</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>keysOnly</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>countOnly</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>memoryLimit</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>dbg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>processor</color> <color=#f92672>=</color> <color=#f8f8f2>processor</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>env</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>dupDBs</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>();</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>scanSerial</color> <color=#f92672>=</color> <color=#f8f8f2>scanSerial</color><color=#f8f8f2>;</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>countOnly</color> <color=#f92672>=</color> <color=#f8f8f2>countOnly</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keysOnly</color> <color=#f92672>=</color> <color=#f8f8f2>keysOnly</color> <color=#f92672>||</color> <color=#f8f8f2>countOnly</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>binsOnly</color> <color=#f92672>=</color> <color=#f8f8f2>binsOnly</color> <color=#f92672>||</color> <color=#f8f8f2>dupDBs</color> <color=#f92672>||</color> <color=#f8f8f2>keysOnly</color> <color=#f92672>||</color> <color=#f8f8f2>countOnly</color><color=#f8f8f2>;</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lsnBatchSize</color> <color=#f92672>=</color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>memoryLimit</color> <color=#f92672>=</color> <color=#f8f8f2>memoryLimit</color><color=#f8f8f2>;</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>debug</color> <color=#f92672>=</color> <color=#f8f8f2>dbg</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>numDBs</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpls</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>dbs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DBContext</color><color=#f92672>[</color><color=#f8f8f2>numDBs</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>dbid2dbidxMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>numDBs</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numDBs</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>dbid2dbidxMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>(),</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DBContext</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>dbImpls</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>lsnAcc</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>LSNAccumulator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
          <color=#a6e22e>@Override</color>
          <color=#66d9ef>void</color> <color=#a6e22e>noteMemUsage</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>addLocalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>binsOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>binDeltas</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>deferredLsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedList</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>binDeltas</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>deferredLsns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>int</color> <color=#a6e22e>getNIterations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nIterations</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For unit testing only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>getNumLsns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>numLsns</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addLocalMemory</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>localMemoryUsage</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>localMemoryUsage</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addGlobalMemory</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>globalMemoryUsage</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>globalMemoryUsage</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>accumulatedMemDelta</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>accumulatedMemDelta</color> <color=#f92672>></color> <color=#f8f8f2>ACCUMULATED_MEM_LIMIT</color>
        <color=#f92672>||</color> <color=#f8f8f2>accumulatedMemDelta</color> <color=#f92672><</color> <color=#f92672>-</color><color=#f8f8f2>ACCUMULATED_MEM_LIMIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>updateDOSMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>accumulatedMemDelta</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>accumulatedMemDelta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether phase I should terminate because the memory or LSN batch size limit has been</color>
<color=#75715e>   * exceeded.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method need not be called every LN processed; exceeding the limits by a reasonable</color>
<color=#75715e>   * amount should not cause problems, since the limits are very approximate measures anyway. It is</color>
<color=#75715e>   * acceptable to check for exceeded limits once per BIN, and this is currently how it is used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accLimitExceeded</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>accLimitExceeded</color><color=#f8f8f2>(</color><color=#f8f8f2>localMemoryUsage</color><color=#f8f8f2>,</color> <color=#f8f8f2>numLsns</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accLimitExceeded</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>mem</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>nLsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>mem</color> <color=#f92672>>=</color> <color=#f8f8f2>memoryLimit</color> <color=#f92672>||</color> <color=#f8f8f2>nLsns</color> <color=#f92672>></color> <color=#f8f8f2>lsnBatchSize</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called to perform a disk-ordered scan. Returns only when the scan is complete; i.e, when all</color>
<color=#75715e>   * records in the database have been passed to the callback.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>scan</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>protectedFilesNamePrefix</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>protectedFilesId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>FileProtector</color><color=#f8f8f2>.</color><color=#a6e22e>ProtectedFileSet</color> <color=#f8f8f2>protectedFileSet</color> <color=#f92672>=</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getFileProtector</color><color=#f8f8f2>()</color>
            <color=#f8f8f2>.</color><color=#a6e22e>protectActiveFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>protectedFilesNamePrefix</color> <color=#f92672>+</color> <color=#e6db74>"-"</color> <color=#f92672>+</color> <color=#f8f8f2>protectedFilesId</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>scanSerial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>scanSerial</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>scanInterleaved</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>globalMemoryUsage</color> <color=#f92672>==</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>TREEMAP_OVERHEAD</color><color=#f8f8f2>)</color>
          <color=#f8f8f2>:</color> <color=#e6db74>"MemoryUsage is wrong at DOS end: "</color> <color=#f92672>+</color> <color=#f8f8f2>globalMemoryUsage</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getFileProtector</color><color=#f8f8f2>().</color><color=#a6e22e>removeFileProtection</color><color=#f8f8f2>(</color><color=#f8f8f2>protectedFileSet</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>budgeted</color> <color=#f92672>=</color> <color=#f8f8f2>globalMemoryUsage</color> <color=#f92672>-</color> <color=#f8f8f2>accumulatedMemDelta</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>updateDOSMemoryUsage</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>budgeted</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>scanSerial</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>dbidx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>overBudget</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Phase I.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Skip phase 1 if we have already exceeded the DOS budget</color>
<color=#75715e>         * due to delta lsns deferred from phase 2b.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>overBudget</color> <color=#f92672>=</color> <color=#f8f8f2>accLimitExceeded</color><color=#f8f8f2>();</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbidx</color> <color=#f92672><</color> <color=#f8f8f2>numDBs</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>overBudget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>dbidx</color><color=#f92672>]</color><color=#f8f8f2>;</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>getFirstIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>dbidx</color><color=#f8f8f2>;</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binsOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>accumulateBINs</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>accumulateLNs</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>accLimitExceeded</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>overBudget</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>checkShutdown</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>getNextIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f92672>++</color><color=#f8f8f2>dbidx</color><color=#f8f8f2>;</color>
              <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatchIfOwner</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Phase II.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binsOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fetchAndProcessBINs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fetchAndProcessLNs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check if DOS is done; if not prepare for next iteration</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbidx</color> <color=#f92672>>=</color> <color=#f8f8f2>numDBs</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>binsOnly</color> <color=#f92672>||</color> <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>initNextIteration</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>scanInterleaved</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>overBudget</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Phase I.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>overBudget</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Skip phase 1 if we have already exceeded the DOS budget</color>
<color=#75715e>           * due to delta lsns deferred from phase 2b.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>accLimitExceeded</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>overBudget</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dbidx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>dbidx</color> <color=#f92672><</color> <color=#f8f8f2>numDBs</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>dbidx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>dbidx</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>getFirstIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numDBs</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>resumeParent</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binsOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>accumulateBINs</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>accumulateLNs</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>accLimitExceeded</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>overBudget</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>checkShutdown</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>getNextIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numDBs</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>releaseParent</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>done</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>overBudget</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dbidx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>dbidx</color> <color=#f92672><</color> <color=#f8f8f2>numDBs</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>dbidx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>dbidx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>dbidx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>dbidx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatchIfOwner</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>overBudget</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Finished Phase 1."</color>
                  <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                  <color=#f92672>+</color> <color=#e6db74>" because DOS budget exceeded."</color>
                  <color=#f92672>+</color> <color=#e6db74>" localMemoryUsage = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>localMemoryUsage</color>
                  <color=#f92672>+</color> <color=#e6db74>" globalMemoryUsage = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>globalMemoryUsage</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Finished Phase 1."</color>
                  <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                  <color=#f92672>+</color> <color=#e6db74>" because no more records to scan."</color>
                  <color=#f92672>+</color> <color=#e6db74>" localMemoryUsage = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>localMemoryUsage</color>
                  <color=#f92672>+</color> <color=#e6db74>" globalMemoryUsage = "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>globalMemoryUsage</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>evictionHook</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Phase II.</color>
<color=#75715e>       */</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binsOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fetchAndProcessBINs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fetchAndProcessLNs</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Finished Phase 2."</color>
                <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                <color=#f92672>+</color> <color=#e6db74>" localMemoryUsage = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>localMemoryUsage</color>
                <color=#f92672>+</color> <color=#e6db74>" globalMemoryUsage = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>globalMemoryUsage</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Check if DOS is done; if not prepare for next iteration.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>done</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>binsOnly</color> <color=#f92672>||</color> <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>initNextIteration</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Producer done in "</color> <color=#f92672>+</color> <color=#f8f8f2>nIterations</color> <color=#f92672>+</color> <color=#e6db74>" iterations"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initNextIteration</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numDBs</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>checkLevel2Keys</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>newEndingKey</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>safeToUseCachedDelta</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If this is a bin-only DOS and phase 1 was actually executed</color>
<color=#75715e>       * during the current iteration, see whether prevEndingKey must</color>
<color=#75715e>       * be moved forward.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binsOnly</color> <color=#f92672>&&</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DeferredLsnsBatch</color> <color=#f8f8f2>batch</color> <color=#f8f8f2>:</color> <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>batch</color><color=#f8f8f2>.</color><color=#a6e22e>containsLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>fetchItem</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_OR_DELTA</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#f8f8f2>getDeltaMemSize</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>batch</color><color=#f8f8f2>.</color><color=#a6e22e>undoLsn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>);</color>

            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>newEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>())</color>
                <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>newEndingKey</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                  <color=#e6db74>"LSN "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color>
                      <color=#f92672>+</color> <color=#e6db74>" for bin "</color>
                      <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                      <color=#f92672>+</color> <color=#e6db74>" was the last bin lsn seen during Phase 1."</color>
                      <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                      <color=#f92672>+</color> <color=#e6db74>" and it got deferred during "</color>
                      <color=#f92672>+</color> <color=#e6db74>"Phase "</color>
                      <color=#f92672>+</color> <color=#e6db74>"2."</color>
                      <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                      <color=#f92672>+</color> <color=#e6db74>". Moved "</color>
                      <color=#f92672>+</color> <color=#e6db74>"prevEndingKey forward"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Set lastBinLsn to NULL_LSN as a way to indicate that phase 1</color>
<color=#75715e>       * has not started yet. If phase 1 is not skipped during the next</color>
<color=#75715e>       * iteration, lastBinLsn will be set to a real lsn.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>localMemoryUsage</color> <color=#f92672>=</color> <color=#f8f8f2>lsnAcc</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryUsage</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>numLsns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binsOnly</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>DeferredLsnsBatch</color> <color=#f8f8f2>batch</color> <color=#f92672>=</color> <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>numLsns</color> <color=#f92672>=</color> <color=#f8f8f2>batch</color><color=#f8f8f2>.</color><color=#a6e22e>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>addLocalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>batch</color><color=#f8f8f2>.</color><color=#a6e22e>memoryUsage</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>nIterations</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Implements guts of phase I in binsOnly mode. Accumulates BIN deltas and BIN LSNs for the</color>
<color=#75715e>   * children of the given level 2 IN parent, and processes resident BINs under certain conditions;</color>
<color=#75715e>   * see algorithm at top of file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>accumulateBINs</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672><</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Skip BINs that were processed on the previous iteration. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipParentSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A cached delta must be copied it if it may contain any keys <=</color>
<color=#75715e>       * prevEndingKey. Otherwise, if it is the last bin processed in</color>
<color=#75715e>       * the previous iteration, it will be processed again if we take</color>
<color=#75715e>       * a weak ref to the delta and this weak ref is then cleared and</color>
<color=#75715e>       * the delta lsn being deferred as a result. Because no key checking</color>
<color=#75715e>       * is done for deferred bins, processing the bin again would result</color>
<color=#75715e>       * in duplicate records being returned to the app.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
          <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>safeToUseCachedDelta</color>
              <color=#f92672>&&</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>></color> <color=#ae81ff>0</color>
              <color=#f92672>&&</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color>
                      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>),</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>())</color>
                  <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>safeToUseCachedDelta</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>waitForConsumer</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>binNEntries</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>binLsn</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>ohBinId</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>ohBinPri2</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>isOffHeapBINPri2</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>lastBinLsn</color> <color=#f92672>=</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>ohBinId</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>boolean</color> <color=#f8f8f2>isBinDelta</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>OffHeapCache</color><color=#f8f8f2>.</color><color=#a6e22e>BINInfo</color> <color=#f8f8f2>ohInfo</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>isBinDelta</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ohInfo</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>getBINInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>isBinDelta</color> <color=#f92672>=</color> <color=#f8f8f2>ohInfo</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isBinDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getDirty</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>safeToUseCachedDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>addDirtyDeltaRef</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>cloneBINDelta</color><color=#f8f8f2>());</color>
              <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>addCleanDeltaRef</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>

            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>isOffHeapBINDirty</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>safeToUseCachedDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                <color=#f8f8f2>addDirtyDeltaRef</color><color=#f8f8f2>(</color><color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>loadBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>));</color>
              <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>addCleanDeltaOffHeapRef</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohInfo</color><color=#f8f8f2>.</color><color=#a6e22e>fullBINLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinPri2</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f92672>++</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>scanSerial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>loadBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>binNEntries</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binNEntries</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>;</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Skip the bin if its last key is <= prevEndingKey.</color>
<color=#75715e>           * Normally, this should happen only if the bin is the last</color>
<color=#75715e>           * bin from the previous iteration and the 1st bin of the</color>
<color=#75715e>           * current iteration.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>cmp</color> <color=#f92672>=</color>
                <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>binNEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>());</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cmp</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f92672>++</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>;</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If the BIN is not resident, accumulate this LSN for later</color>
<color=#75715e>         * processing during phase 2. During phase 2a, if the lsn</color>
<color=#75715e>         * points to a delta, that delta will be fetched from disk and</color>
<color=#75715e>         * stored until all lsns accumulated here have been fetched.</color>
<color=#75715e>         * Then, in phase 2b the full BINs corresponding to the stored</color>
<color=#75715e>         * deltas will be read in lsn order. So, we must budget memory</color>
<color=#75715e>         * for these deltas. Since most lsns point to deltas, we assume</color>
<color=#75715e>         * that they all point to deltas.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>getCapacity</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>binNEntries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>lsnAcc</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>binLsn</color><color=#f8f8f2>);</color>
          <color=#f92672>++</color><color=#f8f8f2>numLsns</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>addLocalMemory</color><color=#f8f8f2>(</color><color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>getDeltaMemSize</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>));</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Phase 1."</color> <color=#f92672>+</color> <color=#f8f8f2>nIterations</color> <color=#f92672>+</color> <color=#e6db74>": accumulated bin lsn: "</color> <color=#f92672>+</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>canProcessWithoutBlocking</color><color=#f8f8f2>(</color><color=#f8f8f2>binNEntries</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Phase 1."</color> <color=#f92672>+</color> <color=#f8f8f2>nIterations</color> <color=#f92672>+</color> <color=#e6db74>": Processing bin: "</color> <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Phase 1."</color>
                    <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                    <color=#f92672>+</color> <color=#e6db74>": Producer must wait before it can process bin "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>waitForConsumer</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waitForConsumer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>waitForConsumer</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>binNEntries</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>scanSerial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#75715e>/* parent slot iteration */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>addCleanDeltaRef</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>binDeltas</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>WeakBinRef</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>updateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For both the local and global memory, we count the size of the</color>
<color=#75715e>     * WeakBinRef obj, plus the ref to it in this.binDeltas. For</color>
<color=#75715e>     * the local memory we count 2 additional overheads: (a) another</color>
<color=#75715e>     * ref in the deltaArray allocated at the start of phase 2a and</color>
<color=#75715e>     * (b) we assume the ref will have to be deferred during phase 2b</color>
<color=#75715e>     * and add the memory taken to store a deferred lsn.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>addLocalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>SIZEOF_WeakBinRef</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color> <color=#f92672>+</color> <color=#f8f8f2>DeferredLsnsBatch</color><color=#f8f8f2>.</color><color=#a6e22e>LSN_MEM_OVERHEAD</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>SIZEOF_WeakBinRef</color> <color=#f92672>+</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Phase 1."</color>
              <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
              <color=#f92672>+</color> <color=#e6db74>": added weak bin ref for bin delta "</color>
              <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" at LSN = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>addCleanDeltaOffHeapRef</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>fullBINLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>ohBinPri2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>binDeltas</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>fullBINLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>moveBack</color><color=#f8f8f2>(</color><color=#f8f8f2>ohBinId</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinPri2</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For both the local and global memory, we count the size of the</color>
<color=#75715e>     * OffHeapBinRef obj, plus the ref to it in this.binDeltas. For</color>
<color=#75715e>     * the local memory we count 2 additional overheads: (a) another</color>
<color=#75715e>     * ref in the deltaArray allocated at the start of phase 2a and</color>
<color=#75715e>     * (b) we assume the ref will have to be deferred during phase 2b</color>
<color=#75715e>     * and add the memory taken to store a deferred lsn.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>addLocalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>SIZEOF_OffHeapBinRef</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color> <color=#f92672>+</color> <color=#f8f8f2>DeferredLsnsBatch</color><color=#f8f8f2>.</color><color=#a6e22e>LSN_MEM_OVERHEAD</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>SIZEOF_OffHeapBinRef</color> <color=#f92672>+</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Phase 1."</color>
              <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
              <color=#f92672>+</color> <color=#e6db74>": added off-heap bin ref for bin delta ID "</color>
              <color=#f92672>+</color> <color=#f8f8f2>ohBinId</color>
              <color=#f92672>+</color> <color=#e6db74>" at LSN = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>binLsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>addDirtyDeltaRef</color><color=#f8f8f2>(</color><color=#f8f8f2>BIN</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>binDeltas</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For the local mem, we account for the copy of the delta plus 2 refs</color>
<color=#75715e>     * to it: one in this.dirtyBinDeltas, and another in the deltaArray</color>
<color=#75715e>     * allocated at the start of phase 2a. For the global memory, the 2nd</color>
<color=#75715e>     * ref will be counted when the deltaArray is actually allocated.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>addLocalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Phase 1."</color> <color=#f92672>+</color> <color=#f8f8f2>nIterations</color> <color=#f92672>+</color> <color=#e6db74>": copied dirty or unsafe bin delta "</color> <color=#f92672>+</color> <color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Implements guts of phase I in LNs-only mode (binsOnly is false). Accumulates LN LSNs for the</color>
<color=#75715e>   * BIN children of the given level 2 IN parent, and processes resident LNs under certain</color>
<color=#75715e>   * conditions; see algorithm at top of file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>accumulateLNs</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>OffHeapCache</color> <color=#f8f8f2>ohCache</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>reuseBin</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>waitForConsumer</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672><</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Skip BINs that were processed on the previous iteration. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipParentSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>plsn</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Explicitly fetch the BIN if it is not resident, merging it with</color>
<color=#75715e>       * a delta if needed. Do not call currParent.fetchIN(i) or loadIN</color>
<color=#75715e>       * because we don't want the BIN to be attached to the in-memory</color>
<color=#75715e>       * tree.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>reuseBin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ohBinId</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapBINId</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ohBinId</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>loadBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohBinId</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>fetchItem</color><color=#f8f8f2>(</color><color=#f8f8f2>plsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_OR_DELTA</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>item</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>OldBINDelta</color> <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>OldBINDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>fetchItem</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>(),</color> <color=#f8f8f2>BIN_ONLY</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>fullBIN</color><color=#f8f8f2>;</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>fullBIN</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>fullBIN</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latchNoUpdateLRU</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>bidx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waitForConsumer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>waitForConsumer</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>reuseBin</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

          <color=#f8f8f2>bidx</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

          <color=#66d9ef>boolean</color> <color=#f8f8f2>exact</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bidx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>bidx</color> <color=#f92672>&</color> <color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>EXACT_MATCH</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exact</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bidx</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bidx</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>IN</color><color=#f8f8f2>.</color><color=#a6e22e>EXACT_MATCH</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>bidx</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>boolean</color> <color=#f8f8f2>checkBinKeys</color> <color=#f92672>=</color> <color=#f8f8f2>isBinProcessedBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>bidx</color> <color=#f92672><</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f92672>++</color><color=#f8f8f2>bidx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>bidx</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>bidx</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkBinKeys</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LN</color><color=#f8f8f2>)</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>bidx</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Accumulate LSNs of non-resident, non-embedded LNs</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ln</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>bidx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>ln</color> <color=#f92672>=</color> <color=#f8f8f2>ohCache</color><color=#f8f8f2>.</color><color=#a6e22e>loadLN</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>bidx</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ln</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>isTransientOrNull</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>bidx</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>lsnAcc</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>bidx</color><color=#f8f8f2>));</color>
                <color=#f92672>++</color><color=#f8f8f2>numLsns</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>addLocalMemory</color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>

              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * LN is resident or embedded. Process it now unless the</color>
<color=#75715e>           * queue is full.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>canProcessWithoutBlocking</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ln</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>ln</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(</color><color=#f8f8f2>bidx</color><color=#f8f8f2>));</color>

            <color=#f8f8f2>processRecord</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>bidx</color><color=#f8f8f2>),</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isExpirationInHours</color><color=#f8f8f2>());</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * LN is resident or embedded but the queue is full. We</color>
<color=#75715e>           * will suspend the producer and try again after the queue</color>
<color=#75715e>           * has free slots.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>waitForConsumer</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#75715e>/* BIN slot iteration */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waitForConsumer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>waitForConsumer</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>parent</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>scanSerial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#75715e>/* parent slot iteration */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>skipParentSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>checkLevel2Keys</color>
        <color=#f92672>&&</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672><</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>()</color>
        <color=#f92672>&&</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>())</color>
            <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>checkLevel2Keys</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>waitForConsumer</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>binNEntries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>releaseParent</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>minFree</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>binsOnly</color> <color=#f92672>?</color> <color=#f8f8f2>binNEntries</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>free</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>minFree</color><color=#f8f8f2>,</color> <color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>getCapacity</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>canProcessWithoutBlocking</color><color=#f8f8f2>(</color><color=#f8f8f2>free</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>processor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>wait</color><color=#f8f8f2>(</color><color=#f8f8f2>SUSPENSION_INTERVAL</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>checkShutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>IE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>unpin</color><color=#f8f8f2>();</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>(),</color> <color=#f8f8f2>IE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>unpin</color><color=#f8f8f2>();</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>resumeParent</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>releaseParent</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>plsn</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pkey</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>pin</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>resumeParent</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>latchShared</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>unpin</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * See "big" comment in IN.fetchINWithNoLatch() for an</color>
<color=#75715e>     * explanation of these conditions.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>()</color>
        <color=#f92672>||</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>plsn</color> <color=#f92672>!=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>)</color>
        <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isDeferredWriteMode</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>testHook1</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pkey</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*exact*/</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If we cannot re-establish the position in currParent, we search</color>
<color=#75715e>       * the tree for the parent of the BIN that should contain binKey.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Note: The last-slot key is always good, because we are basically</color>
<color=#75715e>       * searching for keys >= pkey. The 1st-slot key is never good</color>
<color=#75715e>       * because it may cover keys that are < pkey.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>testHook1</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>getFirstIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * We know for sure that binKey is contained in currParent,</color>
<color=#75715e>         * so the 1st and last lost slots are safe.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>findEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>plsn</color> <color=#f92672>==</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>reuseBin</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Implements guts of phase II in binsOnly mode. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>fetchAndProcessBINs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Phase 2a</color>
<color=#75715e>     */</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Create and sort an array of LSNs out of the LSNs gathered in phase 1</color>
<color=#75715e>     * of the current iteration (stored in the LSNAccumulator) and the LSNs</color>
<color=#75715e>     * deferred from previous iterations (stored in deferredLsns). Only the</color>
<color=#75715e>     * 1st batch of LSNs in deferredLsns is used here, because using more</color>
<color=#75715e>     * deferred LSNs (if any) would exceed the DOS budget.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nAccLsns</color> <color=#f92672>=</color> <color=#f8f8f2>lsnAcc</color><color=#f8f8f2>.</color><color=#a6e22e>getNTotalEntries</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nDeferredLsns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DeferredLsnsBatch</color> <color=#f8f8f2>deferredBatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DeferredLsnsBatch</color> <color=#f8f8f2>nextDeferredBatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>deferredBatch</color> <color=#f92672>=</color> <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>removeFirst</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>nDeferredLsns</color> <color=#f92672>=</color> <color=#f8f8f2>deferredBatch</color><color=#f8f8f2>.</color><color=#a6e22e>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>lsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>nAccLsns</color> <color=#f92672>+</color> <color=#f8f8f2>nDeferredLsns</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>lsnAcc</color><color=#f8f8f2>.</color><color=#a6e22e>getLSNs</color><color=#f8f8f2>(</color><color=#f8f8f2>lsns</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// releases the mem held by the accumulator</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>nLsns</color> <color=#f92672>=</color> <color=#f8f8f2>nAccLsns</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deferredBatch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>deferredBatch</color><color=#f8f8f2>.</color><color=#a6e22e>lsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Phase 2."</color> <color=#f92672>+</color> <color=#f8f8f2>nIterations</color> <color=#f92672>+</color> <color=#e6db74>" Found deferred LSN: "</color> <color=#f92672>+</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>lsns</color><color=#f92672>[</color><color=#f8f8f2>nLsns</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
        <color=#f92672>++</color><color=#f8f8f2>nLsns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Phase 2."</color> <color=#f92672>+</color> <color=#f8f8f2>nIterations</color> <color=#f92672>+</color> <color=#e6db74>" Num LSNs to read during phase 2a: "</color> <color=#f92672>+</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>lsns</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Create an array of delta refs. This array will be sorted later by</color>
<color=#75715e>     * full BIN LSN in order to read the corresponding full bins in disk</color>
<color=#75715e>     * order and merge them with the deltas. We populate the array from</color>
<color=#75715e>     * 3 sources: (a) the WaekBinRefs collected for clean cached deltas</color>
<color=#75715e>     * during phase 1, (b) the copies of dirty cached deltas found during</color>
<color=#75715e>     * phase 1, and (c) by reading from the log the bins whose LSN is in</color>
<color=#75715e>     * the "lsns" array, and adding to the deltaArray each such bin that</color>
<color=#75715e>     * is indeed a delta.</color>
<color=#75715e>     *</color>
<color=#75715e>     * The size of the deltaArray is pre-computed based on the assumption</color>
<color=#75715e>     * that all the LSNs in "lsns" point to deltas and all the weak bin</color>
<color=#75715e>     * refs in this.cleanBinDeltas are still deltas.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Note that the elements of the deltaArray may be type OldBINDelta, or</color>
<color=#75715e>     * BIN, or DeferredDeltaRef, or WeakBinRef.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nDeltas</color> <color=#f92672>=</color> <color=#f8f8f2>binDeltas</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>deltaArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[</color><color=#f8f8f2>nDeltas</color> <color=#f92672>+</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>deltaArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nDeltas</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>deltaArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>binDeltas</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>binDeltas</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>binDeltas</color><color=#f8f8f2>.</color><color=#a6e22e>trimToSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>nDeltas</color> <color=#f92672>*</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>));</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>boolean</color> <color=#f8f8f2>isDeferred</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>logEntry</color> <color=#f92672>=</color> <color=#f8f8f2>fetchEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN_OR_DELTA</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Object</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color> <color=#f92672>=</color> <color=#f8f8f2>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getDbId</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>getDbCtx</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * For a delta, queue fetching of the full BIN and combine the full</color>
<color=#75715e>       * BIN with the delta when it is processed below.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>item</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>OldBINDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>OldBINDelta</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>OldBINDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>deltaArray</color><color=#f92672>[</color><color=#f8f8f2>nDeltas</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
        <color=#f92672>++</color><color=#f8f8f2>nDeltas</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>());</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>setDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/*checkLatched*/</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>());</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color> <color=#f92672>=</color> <color=#f8f8f2>getDeltaMemSize</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>isDeferred</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>deferredBatch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>deferredBatch</color><color=#f8f8f2>.</color><color=#a6e22e>removeLsn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>));</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Phase 2a."</color>
                  <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                  <color=#f92672>+</color> <color=#e6db74>" Saving bin delta "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" fetched via LSN "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>deltaArray</color><color=#f92672>[</color><color=#f8f8f2>nDeltas</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDeferred</color> <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>
        <color=#f92672>++</color><color=#f8f8f2>nDeltas</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>isDeferred</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>deferredBatch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>deferredBatch</color><color=#f8f8f2>.</color><color=#a6e22e>removeLsn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Phase 2a."</color>
                <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                <color=#f92672>+</color> <color=#e6db74>" Processing full bin "</color>
                <color=#f92672>+</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" fetched via LSN "</color>
                <color=#f92672>+</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* LSN was for a full BIN, so we can just process it. */</color>
      <color=#f8f8f2>processBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>isDeferred</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>lsns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// allow GC</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deferredBatch</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>deferredBatch</color><color=#f8f8f2>.</color><color=#a6e22e>free</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>deferredBatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// allow GC</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Finished Phase 2a."</color>
              <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
              <color=#f92672>+</color> <color=#e6db74>" localMemoryUsage = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>localMemoryUsage</color>
              <color=#f92672>+</color> <color=#e6db74>" globalMemoryUsage = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>globalMemoryUsage</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDeltas</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>deltaArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>));</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Phase 2b</color>
<color=#75715e>     */</color>

    <color=#75715e>/* Sort deltas by full BIN LSN. */</color>
    <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>deltaArray</color><color=#f8f8f2>,</color>
        <color=#ae81ff>0</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>nDeltas</color><color=#f8f8f2>,</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

          <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>),</color> <color=#f8f8f2>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>getLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>OldBINDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>OldBINDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>fullBinLsn</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>WeakBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>fullBinLsn</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Fetch each full BIN and merge it with its corresponding delta, and</color>
<color=#75715e>     * process each resulting BIN.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nDeltas</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>Object</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>deltaArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>deltaArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// for GC</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>OldBINDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>OldBINDelta</color> <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>OldBINDelta</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>getDbCtx</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getDbId</color><color=#f8f8f2>());</color>

        <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>fetchItem</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>(),</color> <color=#f8f8f2>BIN_ONLY</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getMemorySize</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BIN</color> <color=#f92672>||</color> <color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The bin may be (a) a delta copied in phase 1, or (b) a</color>
<color=#75715e>         * delta fetched via lsn during phase 2a; in this case the lsn</color>
<color=#75715e>         * may be one that was collected during phase 1 of the current</color>
<color=#75715e>         * iteration, or a deferred lsn from an earlier iteration. In</color>
<color=#75715e>         * all cases we don't need to latch the bin because it was</color>
<color=#75715e>         * fetched from disk and not attached to the in-memory tree.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>BIN</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>BIN</color> <color=#f8f8f2>fullBin</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>isDeferred</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>delta</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>isDeferred</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>((</color><color=#f8f8f2>DeferredDeltaRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>).</color><color=#a6e22e>free</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>BIN</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>isDeferred</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>));</color>

        <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>getDbCtx</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseId</color><color=#f8f8f2>());</color>

        <color=#f8f8f2>fullBin</color> <color=#f92672>=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>fullBin</color><color=#f8f8f2>,</color> <color=#f8f8f2>isDeferred</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>delta</color><color=#f8f8f2>.</color><color=#a6e22e>getInMemorySize</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>OffHeapBinRef</color> <color=#f8f8f2>ref</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>loadBINIfLsnMatches</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>ohBinId</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nextDeferredBatch</color> <color=#f92672>=</color> <color=#f8f8f2>addDeferredLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>nextDeferredBatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>memSize</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Phase 2."</color>
                    <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                    <color=#f92672>+</color> <color=#e6db74>": Found stale OffHeapBinRef - "</color>
                    <color=#f92672>+</color> <color=#e6db74>"Deferring LSN: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color>
                    <color=#f92672>+</color> <color=#e6db74>" delta mem: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>DeferredLsnsBatch</color><color=#f8f8f2>.</color><color=#a6e22e>LSN_MEM_OVERHEAD</color> <color=#f92672>+</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>memSize</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>getDbCtx</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseId</color><color=#f8f8f2>());</color>

            <color=#f8f8f2>BIN</color> <color=#f8f8f2>fullBin</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>fullBin</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>fullBin</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>fullBin</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>SIZEOF_OffHeapBinRef</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>WeakBinRef</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>WeakBinRef</color> <color=#f8f8f2>ref</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>WeakBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nextDeferredBatch</color> <color=#f92672>=</color> <color=#f8f8f2>addDeferredLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>nextDeferredBatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>memSize</color><color=#f8f8f2>);</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                <color=#e6db74>"Phase 2."</color>
                    <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                    <color=#f92672>+</color> <color=#e6db74>": Found cleared WeakBinRef - "</color>
                    <color=#f92672>+</color> <color=#e6db74>"Deferring LSN: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color>
                    <color=#f92672>+</color> <color=#e6db74>" delta mem: "</color>
                    <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>DeferredLsnsBatch</color><color=#f8f8f2>.</color><color=#a6e22e>LSN_MEM_OVERHEAD</color> <color=#f92672>+</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>memSize</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>getDbCtx</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabaseId</color><color=#f8f8f2>());</color>

          <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLastFullLsn</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>fullBinLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>nextDeferredBatch</color> <color=#f92672>=</color> <color=#f8f8f2>addDeferredLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>nextDeferredBatch</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>memSize</color><color=#f8f8f2>);</color>

              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Phase 2."</color>
                        <color=#f92672>+</color> <color=#f8f8f2>nIterations</color>
                        <color=#f92672>+</color> <color=#e6db74>": Found stale WeakBinRef - "</color>
                        <color=#f92672>+</color> <color=#e6db74>"Deferring LSN: "</color>
                        <color=#f92672>+</color> <color=#f8f8f2>ref</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color>

            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>BIN</color> <color=#f8f8f2>fullBin</color><color=#f8f8f2>;</color>

              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isBINDelta</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>fullBin</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>reconstituteBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>fullBin</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>

              <color=#f8f8f2>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>fullBin</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>SIZEOF_WeakBinRef</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>deltaArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#f8f8f2>SIZEOF_JAVA_REF</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>DeferredLsnsBatch</color> <color=#a6e22e>addDeferredLsn</color><color=#f8f8f2>(</color><color=#f8f8f2>DeferredLsnsBatch</color> <color=#f8f8f2>batch</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>batch</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>batch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeferredLsnsBatch</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>addLast</color><color=#f8f8f2>(</color><color=#f8f8f2>batch</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>batch</color><color=#f8f8f2>.</color><color=#a6e22e>addLsn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>memSize</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>batch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeferredLsnsBatch</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>deferredLsns</color><color=#f8f8f2>.</color><color=#a6e22e>addLast</color><color=#f8f8f2>(</color><color=#f8f8f2>batch</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>batch</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Process a BIN during phase II in binsOnly mode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param bin the exclusively latched BIN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processBIN</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isDeferred</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>isDeferred</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processBINInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isDeferred</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>    if (!processedBINs.add(bin.getNodeId())) {</color>
<color=#75715e>        System.out.println("XXXXX bin " + bin.getNodeId() +</color>
<color=#75715e>                           " has been processed before");</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>checkBinKeys</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>isDeferred</color> <color=#f92672>&&</color> <color=#f8f8f2>isBinProcessedBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkBinKeys</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Only the key is needed, as in accumulateBINs. */</color>

      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color><color=#f8f8f2>;</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>keysOnly</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>

      <color=#f8f8f2>processRecord</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getExpiration</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isExpirationInHours</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Implements guts of phase II in LNs-only mode (binsOnly is false). */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>fetchAndProcessLNs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>lsns</color> <color=#f92672>=</color> <color=#f8f8f2>lsnAcc</color><color=#f8f8f2>.</color><color=#a6e22e>getAndSortPendingLSNs</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lsns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color><color=#f8f8f2>)</color> <color=#f8f8f2>fetchEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LN_ONLY</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color> <color=#f92672>=</color> <color=#f8f8f2>getDbCtx</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getDbId</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>postFetchInit</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>LN</color> <color=#f8f8f2>ln</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ln</color><color=#f8f8f2>.</color><color=#a6e22e>isDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>processRecord</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(),</color> <color=#f8f8f2>ln</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getExpiration</color><color=#f8f8f2>(),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>isExpirationInHours</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>addGlobalMemory</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>lsns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>DBContext</color> <color=#a6e22e>getDbCtx</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseId</color> <color=#f8f8f2>dbId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>dbIdx</color> <color=#f92672>=</color> <color=#f8f8f2>dbid2dbidxMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>dbId</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dbs</color><color=#f92672>[</color><color=#f8f8f2>dbIdx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invokes the callback to process a single key-data pair. The parameters are in the format stored</color>
<color=#75715e>   * in the Btree, and are translated here to user-format for dup DBs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processRecord</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>treeKey</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>treeData</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>treeKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dupDBs</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>countOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataEntry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>keysOnly</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>DupKeyData</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>treeKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>treeKey</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>keyEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>keysOnly</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>dataEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>countOnly</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>treeKey</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>countOnly</color> <color=#f92672>||</color> <color=#f8f8f2>keysOnly</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>treeData</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>processor</color><color=#f8f8f2>.</color><color=#a6e22e>process</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbIdx</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>expirationInHours</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Save the highest valued key for this iteration. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>newEndingKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
        <color=#f92672>||</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>newEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>treeKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>())</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>newEndingKey</color> <color=#f92672>=</color> <color=#f8f8f2>treeKey</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Fetches a log entry for the given LSN and returns its main item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param expectTypes is used to validate the type of the entry; an internal exception is thrown</color>
<color=#75715e>   *     if the log entry does not have one of the given types.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#a6e22e>fetchItem</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>expectTypes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>fetchEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>expectTypes</color><color=#f8f8f2>).</color><color=#a6e22e>getMainItem</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Fetches a log entry for the given LSN and returns it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param expectTypes is used to validate the type of the entry; an internal exception is thrown</color>
<color=#75715e>   *     if the log entry does not have one of the given types.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LogEntry</color> <color=#a6e22e>fetchEntry</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f92672>[]</color> <color=#f8f8f2>expectTypes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogManager</color> <color=#f8f8f2>logManager</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLogEntryHandleFileNotFound</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getLogType</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color> <color=#f8f8f2>expectType</color> <color=#f8f8f2>:</color> <color=#f8f8f2>expectTypes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expectType</color><color=#f8f8f2>.</color><color=#a6e22e>isLNType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>isLNType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>expectType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Expected: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>expectTypes</color><color=#f8f8f2>)</color>
            <color=#f92672>+</color> <color=#e6db74>" but got: "</color>
            <color=#f92672>+</color> <color=#f8f8f2>type</color>
            <color=#f92672>+</color> <color=#e6db74>" LSN="</color>
            <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Calculates a rough estimate of the memory needed for a BIN-delta object. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getDeltaMemSize</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color> <color=#f92672>=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DbFileSummary</color> <color=#f8f8f2>summary</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbFileSummaries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If there are no deltas in this file, then the LSN must for a full</color>
<color=#75715e>     * BIN, and no memory is needed for the delta.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>summary</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The cleaner counts deltas as INs in the DbFileSummary, and most</color>
<color=#75715e>     * are actually deltas, not INs. We double the average IN byte size</color>
<color=#75715e>     * in the file to very roughly approximate the memory for a</color>
<color=#75715e>     * deserialized BIN-delta object.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>avgINSize</color> <color=#f92672>=</color> <color=#f8f8f2>(((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>summary</color><color=#f8f8f2>.</color><color=#a6e22e>totalINSize</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>summary</color><color=#f8f8f2>.</color><color=#a6e22e>totalINCount</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>avgINSize</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Return true if the given bin has been processed in a previous</color>
<color=#75715e>   * iteration, i.e., if the 1st key of the bin is <= prevEndingKey.</color>
<color=#75715e>   * If not (which should be the common case), we don't need to check</color>
<color=#75715e>   * the rest of the BIN keys against prevEndingKey.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The result of this method is passed as the value of the checkBinKeys</color>
<color=#75715e>   * param of the skipSlot method below.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isBinProcessedBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNEntries</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>firstKey</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>firstKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>())</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether to skip a BIN slot because its LN is deleted or expired, or its key has already</color>
<color=#75715e>   * been processed in a previous iteration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>skipSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkBinKeys</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isDefunct</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Skip a slot that was processed in a previous iteration. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f92672>&&</color> <color=#f8f8f2>checkBinKeys</color>
        <color=#f92672>&&</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>compareKeys</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>prevEndingKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>binKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyComparator</color><color=#f8f8f2>())</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Moves to the first level 2 IN in the database if searchKey is null (signifying the first</color>
<color=#75715e>   * iteration), or the level 2 IN containing searchKey if it is non-null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We take the liberty of fetching the BIN (first BIN or BIN for the searchKey), when it is not</color>
<color=#75715e>   * resident, although in an ideal world no BINs would be added to the cache. Since this only</color>
<color=#75715e>   * occurs once per iteration, it is considered to be acceptable.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>getFirstIN</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>searchKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Use a retry loop to account for the possibility that after getting</color>
<color=#75715e>     * the BIN we can't find its exact parent due to a split of some kind</color>
<color=#75715e>     * while the BIN is unlatched.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Tree</color> <color=#f8f8f2>tree</color> <color=#f92672>=</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>25</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>searchKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>getFirstNode</color><color=#f8f8f2>(</color><color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>search</color><color=#f8f8f2>(</color><color=#f8f8f2>searchKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Empty database. */</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Call getParentINForChildIN with 0 as exclusiveLevel so that</color>
<color=#75715e>       * the parent will be latched in shared mode.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>targetId</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>();</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>targetKey</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getIdentifierKey</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>SearchResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color>
          <color=#f8f8f2>tree</color><color=#f8f8f2>.</color><color=#a6e22e>getParentINForChildIN</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>targetId</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>targetKey</color><color=#f8f8f2>,</color>
              <color=#f92672>-</color><color=#ae81ff>1</color> <color=#75715e>/*useTargetLevel*/</color><color=#f8f8f2>,</color>
              <color=#ae81ff>0</color> <color=#75715e>/*exclusiveLevel*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*requireExactMatch*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*doFetch*/</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color> <color=#75715e>/*trackingList*/</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>IN</color> <color=#f8f8f2>parent</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>exactParentFound</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parentIsLatched</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color> <color=#75715e>/* Retry. */</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Unable to find BIN for key: "</color> <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>searchKey</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Moves to the next level 2 IN in the database. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>getNextIN</color><color=#f8f8f2>(</color><color=#f8f8f2>DBContext</color> <color=#f8f8f2>ctx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color>
        <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color>
            <color=#f8f8f2>.</color><color=#a6e22e>getTree</color><color=#f8f8f2>()</color>
            <color=#f8f8f2>.</color><color=#a6e22e>getNextIN</color><color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*forward*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*latchShared*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>CacheMode</color><color=#f8f8f2>.</color><color=#a6e22e>UNCHANGED</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>pidx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ctx</color><color=#f8f8f2>.</color><color=#a6e22e>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * UnitTesting support</color>
<color=#75715e>   */</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTestHook1</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>testHook1</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEvictionHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>evictionHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>evictBinRefs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"DOS EVICTION HOOK"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color> <color=#f8f8f2>:</color> <color=#f8f8f2>binDeltas</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>OffHeapBinRef</color> <color=#f8f8f2>ohRef</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>OffHeapBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getOffHeapCache</color><color=#f8f8f2>().</color><color=#a6e22e>evictBINIfLsnMatch</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohRef</color><color=#f8f8f2>.</color><color=#a6e22e>ohBinId</color><color=#f8f8f2>,</color> <color=#f8f8f2>ohRef</color><color=#f8f8f2>.</color><color=#a6e22e>binLsn</color><color=#f8f8f2>);</color>

        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>WeakBinRef</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>Evictor</color> <color=#f8f8f2>evictor</color> <color=#f92672>=</color> <color=#f8f8f2>env</color><color=#f8f8f2>.</color><color=#a6e22e>getEvictor</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>WeakBinRef</color> <color=#f8f8f2>binRef</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>WeakBinRef</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color> <color=#f92672>=</color> <color=#f8f8f2>binRef</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>binRef</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getInListResident</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>releaseLatch</color><color=#f8f8f2>();</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>long</color> <color=#f8f8f2>freedBytes</color> <color=#f92672>=</color> <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>doTestEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evictor</color><color=#f8f8f2>.</color><color=#a6e22e>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>MANUAL</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Try another time; maybe the bin was just moved to the dirty LRU</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>freedBytes</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>latch</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>evictor</color><color=#f8f8f2>.</color><color=#a6e22e>doTestEvict</color><color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#f8f8f2>Evictor</color><color=#f8f8f2>.</color><color=#a6e22e>EvictionSource</color><color=#f8f8f2>.</color><color=#a6e22e>MANUAL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>