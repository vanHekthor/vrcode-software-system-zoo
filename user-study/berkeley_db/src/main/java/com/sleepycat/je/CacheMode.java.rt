<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Modes that can be specified for control over caching of records in the JE in-memory cache. When a</color>
<color=#75715e> * record is stored or retrieved, the cache mode determines how long the record is subsequently</color>
<color=#75715e> * retained in the JE in-memory cache, relative to other records in the cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When the cache overflows, JE must evict some records from the cache. By default, JE uses a</color>
<color=#75715e> * Least Recently Used (LRU) algorithm for determining which records to evict. With the LRU</color>
<color=#75715e> * algorithm, JE makes a best effort to evict the "coldest" (least recently used or accessed)</color>
<color=#75715e> * records and to retain the "hottest" records in the cache for as long as possible.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When an {@link EnvironmentMutableConfig#setOffHeapCacheSize off-heap cache} is configured,</color>
<color=#75715e> * records evicted from the main cache are placed in the off-heap cache, and a separate LRU is used</color>
<color=#75715e> * to determine when to evict a record from the off-heap cache.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>JE uses an approximate LRU approach with some exceptions and special cases.</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Individual records (LNs or Leaf Nodes) do not appear on the LRU list, i.e., their "hotness"</color>
<color=#75715e> *       is not explicitly tracked. Instead, their containing Btree node (BIN or bottom internal</color>
<color=#75715e> *       node) appears on the LRU list. Each BIN contains roughly 100 LNs (see {@link</color>
<color=#75715e> *       com.sleepycat.je.EnvironmentConfig#NODE_MAX_ENTRIES}). When an LN is accessed, its BIN is</color>
<color=#75715e> *       moved to the hot end of the LRU list, implying that all other LNs in the same BIN also are</color>
<color=#75715e> *       treated as if they are hot. The same applies if the BIN is moved to the cold end of the LRU</color>
<color=#75715e> *       list. The above statement applies to the off-heap cache also, when one is configured.</color>
<color=#75715e> *   <li>When a BIN contains LNs and the BIN reaches the cold end of the LRU list, memory can be</color>
<color=#75715e> *       reclaimed by evicting the LNs, and eviction of the BIN is deferred. The empty BIN is moved</color>
<color=#75715e> *       to the hot end of the LRU list. When an off-heap cache is configured, the eviction of LNs</color>
<color=#75715e> *       in this manner occurs independently in both caches.</color>
<color=#75715e> *   <li>When a BIN contains no LNs, it may be evicted entirely. When the BINs parent node becomes</color>
<color=#75715e> *       empty, it may also be evicted, and so on. The BINs and INs are evicted on the basis of an</color>
<color=#75715e> *       LRU, but with two exceptions:</color>
<color=#75715e> *       <p>1) Dirty BINs and INs are evicted only after eviction of all non-dirty BINs and INs.</color>
<color=#75715e> *       This is important to reduce logging and associated cleaning costs. When an off-heap cache</color>
<color=#75715e> *       is configured, BINs and INs are evicted from the main cache without regard to whether they</color>
<color=#75715e> *       are dirty. Dirty BINs and INs are evicted last, as just described, only from the off-heap</color>
<color=#75715e> *       cache.</color>
<color=#75715e> *       <p>2) A BIN may be mutated to a BIN-delta to reclaim memory, rather then being evicted</color>
<color=#75715e> *       entirely. A BIN-delta contains only the dirty entries (for LNs recently logged). A</color>
<color=#75715e> *       BIN-delta is used when its size relative to the full BIN will be small enough so that it</color>
<color=#75715e> *       will be more efficient, both on disk and in memory, to store the delta rather than the full</color>
<color=#75715e> *       BIN. (see {@link com.sleepycat.je.EnvironmentConfig#TREE_BIN_DELTA}). The advantage of</color>
<color=#75715e> *       keeping a BIN-delta in cache is that some operations, particularly record insertions, can</color>
<color=#75715e> *       be performed using the delta without having the complete BIN in cache. When a BIN is</color>
<color=#75715e> *       mutated to a BIN-delta to reclaim memory, it is placed at the hot end of the LRU list. When</color>
<color=#75715e> *       an off-heap cache is configured, BINs are not mutated to BIN-deltas in the main cache, but</color>
<color=#75715e> *       rather this is done only in the off-heap cache.</color>
<color=#75715e> *   <li>To reduce contention among threads on the LRU list, multiple LRU lists may be configured.</color>
<color=#75715e> *       See {@link com.sleepycat.je.EnvironmentConfig#EVICTOR_N_LRU_LISTS}. As described in the</color>
<color=#75715e> *       javadoc for this parameter, there is a trade-off between thread contention and the accuracy</color>
<color=#75715e> *       of the LRU. This parameter determines the number of main cache LRU lists as well as the</color>
<color=#75715e> *       number of off-heap cache LRU lists, when an off-heap cache is configured.</color>
<color=#75715e> *   <li>A non-default cache mode may be explicitly specified to override the LRU behavior. See the</color>
<color=#75715e> *       CacheMode enumeration values for details. the normal LRU behavior described above. See the</color>
<color=#75715e> *       CacheMode enumeration values for details. The behavior of each CacheMode when an off-heap</color>
<color=#75715e> *       cache is configured is also described.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>When no cache mode is explicitly specified, the default cache mode is {@link #DEFAULT}. The</color>
<color=#75715e> * default mode causes the normal LRU algorithm to be used.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>An explicit cache mode may be specified as an {@link EnvironmentConfig#setCacheMode</color>
<color=#75715e> * Environment property}, a {@link DatabaseConfig#setCacheMode Database property}, a {@link</color>
<color=#75715e> * Cursor#setCacheMode Cursor property}, or on a per-operation basis using {@link</color>
<color=#75715e> * ReadOptions#setCacheMode(CacheMode)} or {@link WriteOptions#setCacheMode(CacheMode)}. If none are</color>
<color=#75715e> * specified, {@link #DEFAULT} is used. If more than one non-null property is specified, the Cursor</color>
<color=#75715e> * property overrides the Database and Environment properties, and the Database property overrides</color>
<color=#75715e> * the Environment property.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When all records in a given Database, or all Databases, should be treated the same with</color>
<color=#75715e> * respect to caching, using the Database and/or Environment cache mode properties is sufficient.</color>
<color=#75715e> * For applications that need finer grained control, the Cursor cache mode property can be used to</color>
<color=#75715e> * provide a specific cache mode for individual records or operations. The Cursor cache mode</color>
<color=#75715e> * property can be changed at any time, and the cache mode specified will apply to subsequent</color>
<color=#75715e> * operations performed with that Cursor.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>In a Replicated Environment where a non-default cache mode is desired, the cache mode can be</color>
<color=#75715e> * configured on the Master node as described above. However, it is important to configure the cache</color>
<color=#75715e> * mode on the Replica nodes using an Environment property. That way, the cache mode will apply to</color>
<color=#75715e> * <em>write</em> operations that are replayed on the Replica for all Databases, even if the</color>
<color=#75715e> * Databases are not open by the application on the Replica. Since all nodes may be Replicas at some</color>
<color=#75715e> * point in their life cycle, it is recommended to configure the desired cache mode as an</color>
<color=#75715e> * Environment property on all nodes in a Replicated Environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>On a Replica, per-Database control over the cache mode for <em>write</em> operations is</color>
<color=#75715e> * possible by opening the Database on the Replica and configuring the cache mode. Per-Cursor</color>
<color=#75715e> * control (meaning per-record or per-operation) control of the cache mode is not possible on a</color>
<color=#75715e> * Replica for <em>write</em> operations. For <em>read</em> operations, both per-Database and</color>
<color=#75715e> * per-Cursor control is possible on the Replica, as described above.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The cache related stats in {@link EnvironmentStats} can provide some measure of the</color>
<color=#75715e> * effectiveness of the cache mode choice.</color>
<color=#75715e> *</color>
<color=#75715e> * @see <a href="EnvironmentStats.html#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The record's hotness is changed to "most recently used" by the operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This cache mode is used when the application does not need explicit control over the cache</color>
<color=#75715e>   * and a standard LRU approach is sufficient.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that {@code null} may be specified to use the {@code DEFAULT} mode.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Specifically:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>The BIN containing the record's LN will remain in the main cache, and it is moved to the</color>
<color=#75715e>   *       hot end of its LRU list.</color>
<color=#75715e>   *   <li>When an off-heap cache is configured, the record's LN and BIN will be loaded into the</color>
<color=#75715e>   *       main cache only. They will be removed from the off-heap cache, if they were present</color>
<color=#75715e>   *       there. However, if other LNs belonging to this BIN were present in the off-heap cache,</color>
<color=#75715e>   *       they will remain there.</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DEFAULT</color><color=#f8f8f2>,</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated please use {@link #DEFAULT} instead. As of JE 4.0, this mode functions exactly as</color>
<color=#75715e>   *     if {@link #DEFAULT} were specified.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>KEEP_HOT</color><color=#f8f8f2>,</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The record's hotness or coldness is unchanged by the operation where this cache mode is</color>
<color=#75715e>   * specified.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This cache mode is normally used when the application prefers that the operation should not</color>
<color=#75715e>   * perturb the cache, for example, when scanning over all records in a database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Specifically:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>A record's LN and BIN must be loaded into the main cache in order to perform the</color>
<color=#75715e>   *       operation. However, they may be removed from the main cache after the operation, to avoid</color>
<color=#75715e>   *       a net change to the cache, according to the rules below.</color>
<color=#75715e>   *   <li>If the record's LN was not present in the main cache prior to the operation, then the LN</color>
<color=#75715e>   *       will be evicted from the main cache after the operation. The LN will not be added to, or</color>
<color=#75715e>   *       removed from, the off-heap cache.</color>
<color=#75715e>   *   <li>When the LN is to be evicted from the main cache (according to the above rules) and the</color>
<color=#75715e>   *       operation is not performed via a cursor, the LN is evicted when the operation is</color>
<color=#75715e>   *       complete. When a cursor is used, the LN is evicted when the cursor is moved to a</color>
<color=#75715e>   *       different record or closed.</color>
<color=#75715e>   *   <li>If the record's BIN was not present in the main cache prior to the operation, the action</color>
<color=#75715e>   *       taken depends on whether the BIN is dirty and whether an off-heap cache is configured.</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>When the BIN is not dirty, the BIN (and LN) will be evicted from the main cache</color>
<color=#75715e>   *             after the operation. The BIN (and LN) will not be added to, or removed from, the</color>
<color=#75715e>   *             off-heap cache.</color>
<color=#75715e>   *         <li>When the BIN is dirty and an off-heap cache is <em>not</em> configured, the BIN</color>
<color=#75715e>   *             will not be evicted from the main cache and will be moved to the hot end of its</color>
<color=#75715e>   *             main cache LRU list. This is done to reduce logging.</color>
<color=#75715e>   *         <li>When the BIN is dirty and an off-heap cache <em>is</em> configured, we evict the</color>
<color=#75715e>   *             BIN from the main cache even when it is dirty because the BIN (and LN) will be</color>
<color=#75715e>   *             stored in the off-heap cache and the BIN will not be logged. The BIN will be placed</color>
<color=#75715e>   *             at the hot end of its off-heap LRU list.</color>
<color=#75715e>   *         <li>Note that when this operation loaded the BIN and the BIN becomes dirty, it is</color>
<color=#75715e>   *             normally because this operation is a write operation. However, other concurrent</color>
<color=#75715e>   *             threads can also dirty the BIN.</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   *   <li>When the BIN is to be evicted from the main cache (according to the above rules) and the</color>
<color=#75715e>   *       operation is not performed via a cursor, the BIN is evicted when the operation is</color>
<color=#75715e>   *       complete. When a cursor is used, the BIN is evicted only when the cursor moves to a</color>
<color=#75715e>   *       different BIN or is closed. Because of the way BINs are evicted, when multiple operations</color>
<color=#75715e>   *       are performed using a single cursor and not perturbing the cache is desired, it is</color>
<color=#75715e>   *       important to use this cache mode for all of the operations.</color>
<color=#75715e>   *   <li>When the BIN was present in the main cache prior to the operation, its position in the</color>
<color=#75715e>   *       LRU list will not be changed. Its position in the off-heap LRU list, if it is present in</color>
<color=#75715e>   *       the off-heap cache, will also not be changed.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   */</color>
  <color=#f8f8f2>UNCHANGED</color><color=#f8f8f2>,</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated please use {@link #UNCHANGED} instead. As of JE 4.0, this mode functions exactly as</color>
<color=#75715e>   *     if {@link #UNCHANGED} were specified.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>MAKE_COLD</color><color=#f8f8f2>,</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The record's LN is evicted after the operation, and the containing BIN is moved to the hot end</color>
<color=#75715e>   * of the LRU list.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This cache mode is normally used when not all LNs will fit into the main cache, and the</color>
<color=#75715e>   * application prefers to read the LN from the log file or load it from the off-heap cache when</color>
<color=#75715e>   * the record is accessed again, rather than have it take up space in the main cache and</color>
<color=#75715e>   * potentially cause expensive Java GC. By using this mode, the file system cache or off-heap</color>
<color=#75715e>   * cache can be relied on for holding LNs, which complements the use of the JE cache to hold BINs</color>
<color=#75715e>   * and INs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that using this mode for all operations will prevent the cache from filling, if all</color>
<color=#75715e>   * internal nodes fit in cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Specifically:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>The record's LN will be evicted from the main cache after the operation. The LN will be</color>
<color=#75715e>   *       added to the off-heap cache, if it is not already present and an off-heap cache is</color>
<color=#75715e>   *       configured.</color>
<color=#75715e>   *   <li>When the operation is not performed via a cursor, the LN is evicted when the operation is</color>
<color=#75715e>   *       complete. When a cursor is used, the LN is evicted when the cursor is moved to a</color>
<color=#75715e>   *       different record or closed.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 3.3.98</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EVICT_LN</color><color=#f8f8f2>,</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The record's BIN (and its LNs) are evicted after the operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This cache mode is normally used when not all BINs will fit into the main cache, and the</color>
<color=#75715e>   * application prefers to read the LN and BIN from the log file or load it from the off-heap cache</color>
<color=#75715e>   * when the record is accessed again, rather than have them take up space in the JE cache and</color>
<color=#75715e>   * potentially cause expensive Java GC.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Because this mode evicts all LNs in the BIN, even if they are "hot" from the perspective of</color>
<color=#75715e>   * a different accessor, this mode should be used with caution. One valid use case is where all</color>
<color=#75715e>   * accessors use this mode; in this case the cache mode might be set on a per-Database or</color>
<color=#75715e>   * per-Environment basis.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that using this mode for all operations will prevent the cache from filling, if all</color>
<color=#75715e>   * upper internal nodes fit in cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Specifically:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>The record's LN will be evicted from the main cache after the operation. The LN will be</color>
<color=#75715e>   *       added to the off-heap cache, if it is not already present and an off-heap cache is</color>
<color=#75715e>   *       configured.</color>
<color=#75715e>   *   <li>When the operation is not performed via a cursor, the LN is evicted when the operation is</color>
<color=#75715e>   *       complete. When a cursor is used, the LN is evicted when the cursor is moved to a</color>
<color=#75715e>   *       different record or closed.</color>
<color=#75715e>   *   <li>Whether the BIN is evicted depends on whether the BIN is dirty and whether an off-heap</color>
<color=#75715e>   *       cache is configured.</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>When the BIN is not dirty, the BIN (and LN) will be evicted from the main cache</color>
<color=#75715e>   *             after the operation. The BIN (and LN) will be added to the off-heap cache, if they</color>
<color=#75715e>   *             are not already present and an off-heap cache is configured. The BIN will be placed</color>
<color=#75715e>   *             at the hot end of its off-heap LRU list.</color>
<color=#75715e>   *         <li>When the BIN is dirty and an off-heap cache is <em>not</em> configured, the BIN</color>
<color=#75715e>   *             will not be evicted from the main cache and will be moved to the hot end of its</color>
<color=#75715e>   *             main cache LRU list. This is done to reduce logging.</color>
<color=#75715e>   *         <li>When the BIN is dirty and an off-heap cache <em>is</em> configured, we evict the</color>
<color=#75715e>   *             BIN from the main cache even when it is dirty because the BIN (and LN) will be</color>
<color=#75715e>   *             stored in the off-heap cache and the BIN will not be logged. The BIN will be placed</color>
<color=#75715e>   *             at the hot end of its off-heap LRU list.</color>
<color=#75715e>   *         <li>Note that BIN may have been dirtied by this operation, if it is a write operation,</color>
<color=#75715e>   *             or by earlier write operations.</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   *   <li>When the BIN is to be evicted from the main cache (according to the above rules) and the</color>
<color=#75715e>   *       operation is not performed via a cursor, the BIN is evicted when the operation is</color>
<color=#75715e>   *       complete. When a cursor is used, the BIN is evicted only when the cursor moves to a</color>
<color=#75715e>   *       different BIN or is closed. Because of the way BINs are evicted, when multiple operations</color>
<color=#75715e>   *       are performed using a single cursor and not perturbing the cache is desired, it is</color>
<color=#75715e>   *       important to use this cache mode for all of the operations.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 4.0.97</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>EVICT_BIN</color><color=#f8f8f2>,</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden For internal use only. Placeholder to avoid DPL class evolution errors. Never actually</color>
<color=#75715e>   *     used.</color>
<color=#75715e>   * @since 4.0.97</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>DYNAMIC</color>
<color=#f8f8f2>}</color>