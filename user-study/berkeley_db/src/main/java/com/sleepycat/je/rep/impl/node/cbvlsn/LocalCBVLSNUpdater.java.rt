<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.LockNotAvailableException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.NodeType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.NameIdPair</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.RepNode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.Protocol</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN.NULL_VLSN</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The methods in this class are disabled if the GlobalCBVLSN is defunct -- see {@link</color>
<color=#75715e> * GlobalCBVLSN}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When the GlobalCBVLSN is not defunct, this class supports updating the group database with</color>
<color=#75715e> * each node's local CBVLSN when it is in the Master state. There is one instance per feeder</color>
<color=#75715e> * connection, plus one for the Master. There is, logically, a LocalCBVLSNTracker instance</color>
<color=#75715e> * associated with each instance of the updater. The instance is local for an update associated with</color>
<color=#75715e> * a node in the Master state and is remote for each Replica.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The nodeCBVLSN can only increase during the lifetime of the LocalCBVLSNUpdater instance. Note</color>
<color=#75715e> * however that the value of the node's CBVLSN as stored in the database, which represents the</color>
<color=#75715e> * values from multiple updaters associated with a node over its lifetime, may both decrease and</color>
<color=#75715e> * increase over its lifetime. The decreases are due primarily to rollbacks, and should be</color>
<color=#75715e> * relatively rare.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The updaters used to maintain the Replica's local CBVLSNs are stored in the</color>
<color=#75715e> * Feeder.InputThread. The lifetime of such a LocalCBVLSNUpdater is therefore determined by the</color>
<color=#75715e> * lifetime of the connection between the Master and the Replica. The node CBVLSN is updated each</color>
<color=#75715e> * time a heart beat response is processed by the FeederInput thread. It's also updated when an old</color>
<color=#75715e> * Master detects that a Replica needs a network restore. In this case, it updates cbvlsn to the</color>
<color=#75715e> * value expected from the node after a network restore so that the global CBVLSN can continue to</color>
<color=#75715e> * make forward progress and not hold up the cleaner.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The Master maintains an updater for its own CBVLSN in the FeederManager. This updater exists</color>
<color=#75715e> * as long as the node retains its Master state.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Local CBVLSNs are used only to contribute to the calculation of the global CBVLSN. The global</color>
<color=#75715e> * CBVLSN acts as the cleaner throttle on old nodes. Any invariants, such as the rule that the</color>
<color=#75715e> * cleaner throttle cannot regress, are applied when doing the global calculation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that CBVLSNs are not stored in the database for secondary nodes, but transient</color>
<color=#75715e> * information about them is still maintained.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LocalCBVLSNUpdater</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MASTER_SOURCE</color> <color=#f92672>=</color> <color=#e6db74>"master"</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>HEARTBEAT_SOURCE</color> <color=#f92672>=</color> <color=#e6db74>"heartbeat"</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Note that all reference fields below are null when then GlobalCBVLSN is</color>
<color=#75715e>   * defunct.</color>
<color=#75715e>   */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The node ID of the node whose CBLVLSN is being tracked. If this updater</color>
<color=#75715e>   * is working on the behalf of a replica node, the nameIdPair is not the</color>
<color=#75715e>   * name of this node.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The node type of the node whose CBVLSN is being tracked. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NodeType</color> <color=#f8f8f2>trackedNodeType</color><color=#f8f8f2>;</color>

  <color=#75715e>/* This node; note that its node ID may be different from nodeId above. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The node's local CBVLSN is cached here, for use without reading the</color>
<color=#75715e>   * group db.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>nodeCBVLSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * True if this node's local CBVLSN  has changed, but the new value</color>
<color=#75715e>   * has not been stored into the group db yet.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>updatePending</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used to suppress database updates during unit testing. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>suppressGroupDBUpdates</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Same value as GlobalCBVLSN.defunct. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>defunct</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>LocalCBVLSNUpdater</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>NodeType</color> <color=#f8f8f2>trackedNodeType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>defunct</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isGlobalCBVLSNDefunct</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>defunct</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>trackedNodeType</color> <color=#f92672>=</color> <color=#f8f8f2>trackedNodeType</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>trackedNodeType</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNode</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>nodeCBVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_VLSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>updatePending</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the current CBVLSN for this node, and trips the updatePending flag so that we know there</color>
<color=#75715e>   * is something to store to the RepGroupDB.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param syncableVLSN the new local CBVLSN</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>syncableVLSN</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>source</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>defunct</color><color=#f8f8f2>;</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#e6db74>"LocalCBVLSNUpdater.set() can only be called by the master"</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>syncableVLSN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"update local CBVLSN for "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color>
              <color=#f92672>+</color> <color=#e6db74>" from nodeCBVLSN "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nodeCBVLSN</color>
              <color=#f92672>+</color> <color=#e6db74>" to "</color>
              <color=#f92672>+</color> <color=#f8f8f2>syncableVLSN</color>
              <color=#f92672>+</color> <color=#e6db74>" from "</color>
              <color=#f92672>+</color> <color=#f8f8f2>source</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>syncableVLSN</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * LCBVLSN must not decrease, since it can result in a GCBVLSN</color>
<color=#75715e>         * value that's outside a truncated VLSNIndex range. See SR</color>
<color=#75715e>         * [#17343]</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
            <color=#e6db74>"nodeCBVLSN"</color>
                <color=#f92672>+</color> <color=#f8f8f2>nodeCBVLSN</color>
                <color=#f92672>+</color> <color=#e6db74>" >= "</color>
                <color=#f92672>+</color> <color=#f8f8f2>syncableVLSN</color>
                <color=#f92672>+</color> <color=#e6db74>" attempted update local CBVLSN for "</color>
                <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color>
                <color=#f92672>+</color> <color=#e6db74>" from "</color>
                <color=#f92672>+</color> <color=#f8f8f2>source</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>nodeCBVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>syncableVLSN</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>updatePending</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the GlobalCBVLSN is not defunct, sets the current CBVLSN for this node. Can only be used by</color>
<color=#75715e>   * the master. The new cbvlsn value comes from an incoming heartbeat response message. If the</color>
<color=#75715e>   * GlobalCBVLSN is defunct, does nothing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param heartbeat The incoming heartbeat response message from the replica containing its newest</color>
<color=#75715e>   *     local cbvlsn.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateForReplica</color><color=#f8f8f2>(</color><color=#f8f8f2>Protocol</color><color=#f8f8f2>.</color><color=#a6e22e>HeartbeatResponse</color> <color=#f8f8f2>heartbeat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defunct</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>doUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>heartbeat</color><color=#f8f8f2>.</color><color=#a6e22e>getSyncupVLSN</color><color=#f8f8f2>(),</color> <color=#f8f8f2>HEARTBEAT_SOURCE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the GlobalCBVLSN is not defunct, as a master, update the database with the local CBVLSN for</color>
<color=#75715e>   * this node. This call is needed because the master's local CBVLSN will not be broadcast via a</color>
<color=#75715e>   * heartbeat, so it needs to get to the updater another way. If the GlobalCBVLSN is not defunct,</color>
<color=#75715e>   * do nothing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateForMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>LocalCBVLSNTracker</color> <color=#f8f8f2>tracker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defunct</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>doUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>tracker</color><color=#f8f8f2>.</color><color=#a6e22e>getBroadcastCBVLSN</color><color=#f8f8f2>(),</color> <color=#f8f8f2>MASTER_SOURCE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>doUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>source</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>defunct</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>set</color><color=#f8f8f2>(</color><color=#f8f8f2>vlsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>updateCBVLSN</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the GlobalCBVLSN is not defunct, update the database, with the local CBVLSN associated with</color>
<color=#75715e>   * the node ID if required. Note that updates can only be invoked on the master. If the</color>
<color=#75715e>   * GlobalCBVLSN is defunct, do nothing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defunct</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>updatePending</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>suppressGroupDBUpdates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Short circuit the database update. For testing only. */</color>
      <color=#f8f8f2>updatePending</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Don't advance VLSNs after a shutdown request, to minimize the</color>
<color=#75715e>       * need for a hard recovery.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>VLSN</color> <color=#f8f8f2>candidate</color> <color=#f92672>=</color> <color=#f8f8f2>nodeCBVLSN</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>isNull</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getGlobalCBVLSN</color><color=#f8f8f2>())</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Don't let the group CBVLSN regress.*/</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>updated</color> <color=#f92672>=</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepGroupDB</color><color=#f8f8f2>().</color><color=#a6e22e>updateLocalCBVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>,</color> <color=#f8f8f2>trackedNodeType</color><color=#f8f8f2>);</color>
      <color=#75715e>/* If not updated, we'll try again later. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>updated</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>updatePending</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentFailureException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Propagate environment failure exception so that the master</color>
<color=#75715e>       * can shut down.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LockNotAvailableException</color> <color=#f8f8f2>lnae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Expected exception, due to use of nowait transaction</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>" lock not available without waiting. "</color>
              <color=#f92672>+</color> <color=#e6db74>"local cbvlsn update skipped for node: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color>
              <color=#f92672>+</color> <color=#e6db74>" Error: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>lnae</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"local cbvlsn update failed for node: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color>
              <color=#f92672>+</color> <color=#e6db74>" Error: "</color>
              <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>"\n"</color>
              <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used during testing to suppress CBVLSN updates at this node. Note that the cleaner must also</color>
<color=#75715e>   * typically be turned off (first) in conjunction with the suppression. If multiple nodes are</color>
<color=#75715e>   * running in the VM all nodes will have the CBVLSN updates turned off.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param suppressGroupDBUpdates If true, the group DB and the group CBVLSN won't be updated at</color>
<color=#75715e>   *     the master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setSuppressGroupDBUpdates</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>suppressGroupDBUpdates</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LocalCBVLSNUpdater</color><color=#f8f8f2>.</color><color=#a6e22e>suppressGroupDBUpdates</color> <color=#f92672>=</color> <color=#f8f8f2>suppressGroupDBUpdates</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>