<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.Key</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.util.keyrange.KeyRange</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Encodes database key and data items as a byte array.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Storage and retrieval for the {@link Database Database} and {@link Cursor Cursor} methods are</color>
<color=#75715e> * based on key/data pairs. Both key and data items are represented by DatabaseEntry objects. Key</color>
<color=#75715e> * and data byte arrays may refer to arrays of zero length up to arrays of essentially unlimited</color>
<color=#75715e> * length.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The DatabaseEntry class provides simple access to an underlying object whose elements can be</color>
<color=#75715e> * examined or changed. DatabaseEntry objects can be subclassed, providing a way to associate with</color>
<color=#75715e> * it additional data or references to other structures.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Access to DatabaseEntry objects is not re-entrant. In particular, if multiple threads</color>
<color=#75715e> * simultaneously access the same DatabaseEntry object using {@link Database Database} or {@link</color>
<color=#75715e> * Cursor Cursor} methods, the results are undefined.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>DatabaseEntry objects may be used in conjunction with the object mapping support provided in</color>
<color=#75715e> * the {@link com.sleepycat.bind} package.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3><a name="params">Input and Output Parameters</a></h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>DatabaseEntry objects are used for both input values (for example, when writing to a database</color>
<color=#75715e> * or specifying a search parameter) and output values (for example, when reading from a database).</color>
<color=#75715e> * For every CRUD method ({@code get}, {@code put}, etc), each of the method's DatabaseEntry</color>
<color=#75715e> * parameters ({@code key}, {@code data}, etc) may be input or output parameters, and this is</color>
<color=#75715e> * specified by the method's documentation.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="inParam">Input Parameters</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>An input parameter is required by the JE method. The parameter may not be null, and the caller</color>
<color=#75715e> * is also responsible for initializing the data of the DatabaseEntry to a non-null byte array.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Input parameters normally may not be {@link #setPartial(int,int,boolean) partial}. However,</color>
<color=#75715e> * this is allowed under certain circumstances, namely the {@link Cursor#putCurrent} method allows</color>
<color=#75715e> * specifying a partial data parameter in order to update only part of the record's data value.</color>
<color=#75715e> * Input parameters are NOT allowed to be partial unless this is explicitly stated in the method</color>
<color=#75715e> * documentation.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Although an input parameter is always used for input, in some cases it may be also used for</color>
<color=#75715e> * output. For example, the {@link Cursor#getSearchKeyRange} method is passed a key parameter that</color>
<color=#75715e> * is used as input, but since a record with a different key (greater or equal to the key given) may</color>
<color=#75715e> * be found, the key parameter is also used to return the key that was found. Such parameters are</color>
<color=#75715e> * documented as "input/output" parameters.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Another example is when a custom key comparator is used and a key parameter is passed to a</color>
<color=#75715e> * search method. The input parameter may match a record's key even if the bytes are not equal, and</color>
<color=#75715e> * the key of the record found will be returned via the parameter. The same thing is true of data</color>
<color=#75715e> * (or primary key) parameters when a custom duplicate comparator is used. Because of this, all</color>
<color=#75715e> * input parameters of "get" methods can potentially be used for output, however, they are not</color>
<color=#75715e> * explicitly documented to be input/output parameters.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="outParam">Output Parameters</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>An output parameter is not required by the JE method. It is used to optionally return a value</color>
<color=#75715e> * to the caller. Null may be passed for the parameter if no returned value is needed. Passing null</color>
<color=#75715e> * is a common way to optimize read operations when only the record's key, and not the record's</color>
<color=#75715e> * data, is required. By passing null for the data parameter, a read from disk can be avoided when</color>
<color=#75715e> * the data is not already cached. In addition, all output parameters may be {@link</color>
<color=#75715e> * #setPartial(int,int,boolean) partial} to allow only returning a part of the data byte array. See</color>
<color=#75715e> * <a href="Cursor.html#partialEntry">Using Null and Partial DatabaseEntry Parameters</a> for more</color>
<color=#75715e> * information.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For output parameters, the byte array specified by the caller will not be used and may be</color>
<color=#75715e> * null. The JE method will will always allocate a new byte array. Therefore, after calling a method</color>
<color=#75715e> * that returns output parameters, the application can safely keep a reference to the byte array</color>
<color=#75715e> * returned by {@link #getData} without danger that the array will be overwritten in a subsequent</color>
<color=#75715e> * call.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Historical note: Prior to JE 7.0, null could not be passed for output parameters. Instead,</color>
<color=#75715e> * {@code DatabaseEntry.setPartial(0, 0, true)} was called for a data parameter to avoid reading the</color>
<color=#75715e> * record's data. Now, null can be passed instead.</color>
<color=#75715e> *</color>
<color=#75715e> * <h3>Offset and Size Properties</h3></color>
<color=#75715e> *</color>
<color=#75715e> * <p>By default the Offset property is zero and the Size property is the length of the byte array.</color>
<color=#75715e> * However, to allow for optimizations involving the partial use of a byte array, the Offset and</color>
<color=#75715e> * Size may be set to non-default values.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For output parameters, the Size will always be set to the length of the byte array and the</color>
<color=#75715e> * Offset will always be set to zero.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>However, for input parameters the Offset and Size are set to non-default values by the</color>
<color=#75715e> * built-in tuple and serial bindings. For example, with a tuple or serial binding the byte array is</color>
<color=#75715e> * grown dynamically as data is output, and the Size is set to the number of bytes actually used.</color>
<color=#75715e> * For a serial binding, the Offset is set to a non-zero value in order to implement an optimization</color>
<color=#75715e> * having to do with the serialization stream header.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>WARNING: In callbacks that are passed DatabaseEntry parameters, the application should always</color>
<color=#75715e> * honor the Size and Offset properties, rather than assuming they have default values.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DatabaseEntry</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Currently, JE stores all data records as byte array */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>dlen</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>doff</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>partial</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* FindBugs - ignore not "final" since a user can set this. */</color>
  <color=#75715e>/** @hidden The maximum number of bytes to show when toString() is called. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_DUMP_BYTES</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns all the attributes of the database entry in text form, including the underlying data.</color>
<color=#75715e>   * The maximum number of bytes that will be formatted is taken from the static variable</color>
<color=#75715e>   * DatabaseEntry.MAX_DUMP_BYTES, which defaults to 100. MAX_DUMP_BYTES may be changed by an</color>
<color=#75715e>   * application if it wishes to cause more bytes to be formatted.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#e6db74>"<DatabaseEntry"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>partial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" partial=\"true"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" doff=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>doff</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" dlen=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>dlen</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" offset=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" size=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" data=\""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>dumpData</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>size</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>MAX_DUMP_BYTES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ... "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>((</color><color=#f8f8f2>size</color> <color=#f92672>-</color> <color=#f8f8f2>MAX_DUMP_BYTES</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" bytes not shown "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\"/>"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Constructors</color>
<color=#75715e>   */</color>

  <color=#75715e>/** Constructs a DatabaseEntry with null data. The offset and size are set to zero. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DatabaseEntry</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a DatabaseEntry with a given byte array. The offset is set to zero; the size is set</color>
<color=#75715e>   * to the length of the array, or to zero if null is passed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data Byte array wrapped by the DatabaseEntry.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DatabaseEntry</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>data</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a DatabaseEntry with a given byte array, offset and size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data Byte array wrapped by the DatabaseEntry.</color>
<color=#75715e>   * @param offset Offset in the first byte in the byte array to be included.</color>
<color=#75715e>   * @param size Number of bytes in the byte array to be included.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>DatabaseEntry</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>data</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Accessors</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a DatabaseEntry that is used as an output parameter, the byte array will always be a</color>
<color=#75715e>   * newly allocated array. The byte array specified by the caller will not be used and may be null.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getData</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the byte array. The offset is set to zero; the size is set to the length of the array, or</color>
<color=#75715e>   * to zero if null is passed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data Byte array wrapped by the DatabaseEntry.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>data</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the byte array, offset and size.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param data Byte array wrapped by the DatabaseEntry.</color>
<color=#75715e>   * @param offset Offset in the first byte in the byte array to be included.</color>
<color=#75715e>   * @param size Number of bytes in the byte array to be included.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>data</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures this DatabaseEntry to read or write partial records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By default the specified data (byte array, offset and size) corresponds to the full stored</color>
<color=#75715e>   * key or data item. Optionally, the Partial property can be set to true, and the PartialOffset</color>
<color=#75715e>   * and PartialLength properties are used to specify the portion of the key or data item to be read</color>
<color=#75715e>   * or written.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the Partial properties are set only by the caller. They will never be set by a</color>
<color=#75715e>   * Database or Cursor method, nor will they every be set by bindings. Therefore, the application</color>
<color=#75715e>   * can assume that the Partial properties are not set, unless the application itself sets them</color>
<color=#75715e>   * explicitly.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>All {<a href="#outParam>output parameters</a>} may be partial. If the calling application is</color>
<color=#75715e>   * doing a retrieval, length bytes specified by <tt>dlen</tt>, starting at the offset set by</color>
<color=#75715e>   * <tt>doff</tt> bytes from the beginning of the retrieved data record are returned as if they</color>
<color=#75715e>   * comprised the entire record. If any or all of the specified bytes do not exist in the record,</color>
<color=#75715e>   * the get is successful, and any existing bytes are returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For example, if the data portion of a retrieved record was 100 bytes, and a partial</color>
<color=#75715e>   * retrieval was done using a DatabaseEntry having a partial length of 20 and a partial offset of</color>
<color=#75715e>   * 85, the retrieval would succeed and the retrieved data would be the last 15 bytes of the</color>
<color=#75715e>   * record.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Input parameters normally may not be {@link #setPartial(int,int,boolean) partial}. However,</color>
<color=#75715e>   * this is allowed under certain circumstances, namely the {@link Cursor#putCurrent} method allows</color>
<color=#75715e>   * specifying a partial data parameter in order to update only part of the record's data value.</color>
<color=#75715e>   * Input parameters are NOT allowed to be partial unless this is explicitly stated in the method</color>
<color=#75715e>   * documentation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For storing an item using a partial parameter, length bytes specified by <tt>dlen</tt>,</color>
<color=#75715e>   * starting at the offset set by <tt>doff</tt> bytes from the beginning of the specified key's</color>
<color=#75715e>   * data item are replaced by the data specified by the DatabaseEntry. If the partial length is</color>
<color=#75715e>   * smaller than the data, the record will grow; if the partial length is larger than the data, the</color>
<color=#75715e>   * record will shrink. If the partial offset is greater than the length of the data, the record</color>
<color=#75715e>   * will be extended using zero bytes as necessary, and the store will succeed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param doff The offset of the partial record being read or written by the application, in</color>
<color=#75715e>   *     bytes.</color>
<color=#75715e>   * @param dlen The byte length of the partial record being read or written by the application, in</color>
<color=#75715e>   *     bytes.</color>
<color=#75715e>   * @param partial Whether this DatabaseEntry is configured to read or write partial records.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>doff</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dlen</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>partial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setPartialOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>doff</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setPartialLength</color><color=#f8f8f2>(</color><color=#f8f8f2>dlen</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>setPartial</color><color=#f8f8f2>(</color><color=#f8f8f2>partial</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte length of the partial record being read or written by the application, in</color>
<color=#75715e>   * bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the Partial properties are set only by the caller. They will never be set by a</color>
<color=#75715e>   * Database or Cursor method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The byte length of the partial record being read or written by the application, in</color>
<color=#75715e>   *     bytes.</color>
<color=#75715e>   * @see #setPartial(int,int,boolean)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPartialLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dlen</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the byte length of the partial record being read or written by the application, in bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the Partial properties are set only by the caller. They will never be set by a</color>
<color=#75715e>   * Database or Cursor method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dlen The byte length of the partial record being read or written by the</color>
<color=#75715e>   * @see #setPartial(int,int,boolean)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPartialLength</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dlen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dlen</color> <color=#f92672>=</color> <color=#f8f8f2>dlen</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the offset of the partial record being read or written by the application, in bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the Partial properties are set only by the caller. They will never be set by a</color>
<color=#75715e>   * Database or Cursor method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return The offset of the partial record being read or written by the application, in bytes.</color>
<color=#75715e>   * @see #setPartial(int,int,boolean)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPartialOffset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>doff</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the offset of the partial record being read or written by the application, in bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the Partial properties are set only by the caller. They will never be set by a</color>
<color=#75715e>   * Database or Cursor method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param doff The offset of the partial record being read or written by the application, in</color>
<color=#75715e>   *     bytes.</color>
<color=#75715e>   * @see #setPartial(int,int,boolean)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPartialOffset</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>doff</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>doff</color> <color=#f92672>=</color> <color=#f8f8f2>doff</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether this DatabaseEntry is configured to read or write partial records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the Partial properties are set only by the caller. They will never be set by a</color>
<color=#75715e>   * Database or Cursor method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return Whether this DatabaseEntry is configured to read or write partial records.</color>
<color=#75715e>   * @see #setPartial(int,int,boolean)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getPartial</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>partial</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures this DatabaseEntry to read or write partial records.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the Partial properties are set only by the caller. They will never be set by a</color>
<color=#75715e>   * Database or Cursor method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param partial Whether this DatabaseEntry is configured to read or write partial records.</color>
<color=#75715e>   * @see #setPartial(int,int,boolean)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPartial</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>partial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>partial</color> <color=#f92672>=</color> <color=#f8f8f2>partial</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte offset into the data array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a DatabaseEntry that is used as an output parameter, the offset will always be zero.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return Offset in the first byte in the byte array to be included.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOffset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the byte offset into the data array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>ArrayIndexOutOfBoundsException if the data, offset, and size parameters refer to elements of</color>
<color=#75715e>   * the data array which do not exist. Note that this exception will not be thrown by setSize() or</color>
<color=#75715e>   * setOffset(), but will be thrown by varous JE methods if "this" is inconsistent and is used as</color>
<color=#75715e>   * an input parameter to those methods. It is the caller's responsibility to ensure that size,</color>
<color=#75715e>   * offset, and data.length are consistent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param offset Offset in the first byte in the byte array to be included.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOffset</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte size of the data array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For a DatabaseEntry that is used as an output parameter, the size will always be the length</color>
<color=#75715e>   * of the data array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return Number of bytes in the byte array to be included.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the byte size of the data array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>ArrayIndexOutOfBoundsException if the data, offset, and size parameters refer to elements of</color>
<color=#75715e>   * the data array which do not exist. Note that this exception will not be thrown by setSize() or</color>
<color=#75715e>   * setOffset(), but will be thrown by varous JE methods if "this" is inconsistent and is used as</color>
<color=#75715e>   * an input parameter to those methods. It is the caller's responsibility to ensure that size,</color>
<color=#75715e>   * offset, and data.length are consistent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param size Number of bytes in the byte array to be included.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Dumps the data as a byte array, for tracing purposes */</color>
  <color=#f8f8f2>String</color> <color=#a6e22e>dumpData</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Key</color><color=#f8f8f2>.</color><color=#a6e22e>DUMP_TYPE</color><color=#f8f8f2>.</color><color=#a6e22e>dumpByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyRange</color><color=#f8f8f2>.</color><color=#a6e22e>getByteArray</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>MAX_DUMP_BYTES</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Compares the data of two entries for byte-by-byte equality.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In either entry, if the offset is non-zero or the size is not equal to the data array</color>
<color=#75715e>   * length, then only the data bounded by these values is compared. The data array length and</color>
<color=#75715e>   * offset need not be the same in both entries for them to be considered equal.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the data array is null in one entry, then to be considered equal both entries must have a</color>
<color=#75715e>   * null data array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the partial property is set in either entry, then to be considered equal both entries</color>
<color=#75715e>   * must have the same partial properties: partial, partialOffset and partialLength.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>partial</color> <color=#f92672>||</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>partial</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>partial</color> <color=#f92672>!=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>partial</color> <color=#f92672>||</color> <color=#f8f8f2>dlen</color> <color=#f92672>!=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>dlen</color> <color=#f92672>||</color> <color=#f8f8f2>doff</color> <color=#f92672>!=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>doff</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>data</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>!=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f92672>[</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a hash code based on the data value. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>hash</color> <color=#f92672>+=</color> <color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>hash</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>