<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.ReplicaAckPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.FileProtector</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.cleaner.FileProtector.ProtectedFileSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.StartupTracker.Phase</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.ReplicationContext</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.arbitration.Arbiter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Elections</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.ElectionsConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.Proposer.Proposal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.elections.TimebasedProposalGenerator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.BinaryNodeStateProtocol.BinaryNodeStateResponse</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupImpl.NodeConflictException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepGroupProtocol.GroupResponse</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.MessageExchange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.TextProtocol.ResponseMessage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn.CleanerBarrierState</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn.GlobalCBVLSN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn.LocalCBVLSNTracker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.monitor.LeaveGroupEvent.LeaveReason</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory.ConnectOptions</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.FeederTxns</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.MasterChangeListener</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.MasterStatus</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.MasterSuggestionGenerator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription.StreamAuthenticator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.txn.ReplayTxn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.util.AtomicLongMax</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.util.ldiff.LDiffService</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils.Clock</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils.ExceptionAwareCountDownLatch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNIndex</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.vlsn.VLSNRange</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.InetSocketAddress</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicatedEnvironment.State.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Represents a replication node. This class is the locus of operations that manage the state of the</color>
<color=#75715e> * node, master, replica, etc. Once the state of a node has been established the thread of control</color>
<color=#75715e> * passes over to the Replica or FeederManager instances.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that both Feeders and the Replica instance may be active in future when we support r2r</color>
<color=#75715e> * replication, in addition to m2r replication. For now however, either the FeederManager is active,</color>
<color=#75715e> * or the Replica is and the same common thread control can be shared between the two.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RepNode</color> <color=#66d9ef>extends</color> <color=#f8f8f2>StoppableThread</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The unique node name and internal id that identifies the node within</color>
<color=#75715e>   * the rep group. There is a canonical instance of this that's updated</color>
<color=#75715e>   * when the node joins the group.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The service dispatcher used by this replication node. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The election instance for this node */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Elections</color> <color=#f8f8f2>elections</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The locus of operations when the node is a replica. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Replica</color> <color=#f8f8f2>replica</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Used when the node is a feeder. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>FeederManager</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The status of the Master. Note that this is the leading state as</color>
<color=#75715e>   * communicated to this node via the Listener. The node itself may not as</color>
<color=#75715e>   * yet have responded to this state change announced by the Listener. That</color>
<color=#75715e>   * is, nodeState, may reflect a different state until the transition to</color>
<color=#75715e>   * this state has been completed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MasterStatus</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MasterChangeListener</color> <color=#f8f8f2>changeListener</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MasterSuggestionGenerator</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Represents the application visible state of this node. It may lag the</color>
<color=#75715e>   * state as described by masterStatus.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NodeState</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The encapsulated internal replication group database. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>RepGroupDB</color> <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The latch used to indicate that the node has a well defined state as a</color>
<color=#75715e>   * Master or Replica and has finished the node-specific initialization that</color>
<color=#75715e>   * will permit it to function immediately in that capacity.</color>
<color=#75715e>   *</color>
<color=#75715e>   * For a Master it means that it's ready to start accepting connections</color>
<color=#75715e>   * from Replicas.</color>
<color=#75715e>   *</color>
<color=#75715e>   * For a Replica, it means that it has established a connection with a</color>
<color=#75715e>   * Feeder, completed the handshake process that validates it as being a</color>
<color=#75715e>   * legitimate member of the group, established a sync point, and is ready</color>
<color=#75715e>   * to start replaying the replication stream.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color> <color=#f8f8f2>readyLatch</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Latch used to freeze txn commit VLSN advancement during an election.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>CommitFreezeLatch</color> <color=#f8f8f2>vlsnFreezeLatch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CommitFreezeLatch</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Describes the nodes that form the group. This information is dynamic it's initialized at</color>
<color=#75715e>   * startup and subsequently as a result of changes made either directly to it, when the node is a</color>
<color=#75715e>   * master, or via the replication stream, when it is a Replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Always use the setGroup() method to set this iv, so that needsAck in particular is updated</color>
<color=#75715e>   * in unison.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>group</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Acks needed. Determines whether durability needs acknowledgments from other nodes, that is, the</color>
<color=#75715e>   * rep group has more than one data node that's also electable.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Only update via the setGroup method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>needsAcks</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Determines the election policy to use when the node holds its very first</color>
<color=#75715e>   * elections</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>electionQuorumPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>QuorumPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SIMPLE_MAJORITY</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of times to sleep between retries when a new node tries to locate</color>
<color=#75715e>   * a master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MASTER_QUERY_INTERVAL</color> <color=#f92672>=</color> <color=#ae81ff>10000</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Number of times to retry joining on a retryable exception. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>JOIN_RETRIES</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Encapsulates access to current time, to arrange for testing of clock</color>
<color=#75715e>   * skews.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Clock</color> <color=#f8f8f2>clock</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>com</color><color=#f8f8f2>.</color><color=#a6e22e>sleepycat</color><color=#f8f8f2>.</color><color=#a6e22e>je</color><color=#f8f8f2>.</color><color=#a6e22e>rep</color><color=#f8f8f2>.</color><color=#a6e22e>impl</color><color=#f8f8f2>.</color><color=#a6e22e>networkRestore</color><color=#f8f8f2>.</color><color=#a6e22e>FeederManager</color> <color=#f8f8f2>logFeederManager</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LDiffService</color> <color=#f8f8f2>ldiff</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>NodeStateService</color> <color=#f8f8f2>nodeStateService</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>BinaryNodeStateService</color> <color=#f8f8f2>binaryNodeStateService</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>GroupService</color> <color=#f8f8f2>groupService</color><color=#f8f8f2>;</color>

  <color=#75715e>/* tracks the local CBVLSN for this node. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>LocalCBVLSNTracker</color> <color=#f8f8f2>cbvlsnTracker</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The currently in-progress Master Transfer operation, if any. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>MasterTransfer</color> <color=#f8f8f2>xfrInProgress</color><color=#f8f8f2>;</color>

  <color=#75715e>/* calculates and manages the global, cached CBVLSN */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>GlobalCBVLSN</color> <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Determines how long to wait for a replica to catch up on a close. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>replicaCloseCatchupMs</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Manage and notify MonitorChangeEvents fired by this RepNode. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>MonitorEventManager</color> <color=#f8f8f2>monitorEventManager</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The user defined AppStateMonitor which gets the application state. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AppStateMonitor</color> <color=#f8f8f2>appStateMonitor</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A timer used for misc short-lived scheduled tasks:</color>
<color=#75715e>   * ChannelTimeoutTask, Elections.RebroadcastTask.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Timer</color> <color=#f8f8f2>timer</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ChannelTimeoutTask</color> <color=#f8f8f2>channelTimeoutTask</color><color=#f8f8f2>;</color>

  <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Locus of election and durability quorum decisions */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ElectionQuorum</color> <color=#f8f8f2>electionQuorum</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DurabilityQuorum</color> <color=#f8f8f2>durabilityQuorum</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Arbiter</color> <color=#f8f8f2>arbiter</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>NodeType</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Manages the allocation of node IDs for secondary nodes. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>TransientIds</color> <color=#f8f8f2>transientIds</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>TransientIds</color><color=#f8f8f2>(</color><color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_NODES_WITH_TRANSIENT_ID</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Synchronize on this object when setting the minimum JE version or adding a secondary node,</color>
<color=#75715e>   * which could change the JE versions of the nodes to check when setting a new minimum.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setMinJEVersion</color>
<color=#75715e>   * @see #addTransientIdNode</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>minJEVersionLock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f8f8f2>();</color>

  <color=#75715e>/* Used by tests only. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>;</color>

  <color=#75715e>/* For unit testing */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>>></color> <color=#f8f8f2>convertHooks</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The in-memory DTVLSN. It represents the highest transaction known to have been replicated to a</color>
<color=#75715e>   * majority of the Replicas.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>At a master, knowledge of this replication state may have been communicated explicitly due</color>
<color=#75715e>   * to the use of SIMPLE_MAJORITY or ALL ACKs, or it may have been communicated via a heartbeat</color>
<color=#75715e>   * indicating the progress of replication at a replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>At a replica, this state is obtained from commit/abort records in the replication stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This field is initialized from its persistent value whenever the environment is first</color>
<color=#75715e>   * opened. It may be the null VLSN value for brand new environments. This value can only advance</color>
<color=#75715e>   * as increasing numbers of transactions are acknowledged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="https://<wikihost>/trac/wiki/JEReplicationDurableTxnVLSN"> DTVLSN</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongMax</color> <color=#f8f8f2>dtvlsn</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongMax</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If not null, a test hook that is called with the name of the current node during the query for</color>
<color=#75715e>   * group membership before the node sleeps after failing to obtain information about the group</color>
<color=#75715e>   * master -- for unit testing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>queryGroupForMembershipBeforeSleepHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If not null, called by queryGroupForMembership with the name of the current node before</color>
<color=#75715e>   * querying learners for the master -- for unit testing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>queryGroupForMembershipBeforeQueryForMaster</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If not null, a test hook that is called with the name of the current node before attempting to</color>
<color=#75715e>   * contact each network restore supplier, for unit testing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>beforeFindRestoreSupplierHook</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>RepNode</color><color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>Replay</color> <color=#f8f8f2>replay</color><color=#f8f8f2>,</color> <color=#f8f8f2>NodeState</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"RepNode "</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>readyLatch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceDispatcher</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>ServiceDispatcher</color><color=#f8f8f2>(</color><color=#f8f8f2>getSocket</color><color=#f8f8f2>(),</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getChannelFactory</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>clock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Clock</color><color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getClockSkewMs</color><color=#f8f8f2>());</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repGroupDB</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RepGroupDB</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>masterStatus</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replica</color> <color=#f92672>=</color> <color=#f8f8f2>ReplicaFactory</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>replay</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>feederManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FeederManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>changeListener</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterChangeListener</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>suggestionGenerator</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterSuggestionGenerator</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nodeState</color> <color=#f92672>=</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>electionQuorum</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ElectionQuorum</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>durabilityQuorum</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DurabilityQuorum</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>utilityServicesStart</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>globalCBVLSN</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>GlobalCBVLSN</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cbvlsnTracker</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LocalCBVLSNTracker</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>monitorEventManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MonitorEventManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>timer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Timer</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>channelTimeoutTask</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChannelTimeoutTask</color><color=#f8f8f2>(</color><color=#f8f8f2>timer</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>arbiter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Arbiter</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nodeType</color> <color=#f92672>=</color> <color=#f8f8f2>NodeType</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>NODE_TYPE</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>.</color><color=#a6e22e>updateMax</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLoggedDTVLSN</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"DTVLSN at start:%,d"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>utilityServicesStart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ldiff</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LDiffService</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>logFeederManager</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>com</color><color=#f8f8f2>.</color><color=#a6e22e>sleepycat</color><color=#f8f8f2>.</color><color=#a6e22e>je</color><color=#f8f8f2>.</color><color=#a6e22e>rep</color><color=#f8f8f2>.</color><color=#a6e22e>impl</color><color=#f8f8f2>.</color><color=#a6e22e>networkRestore</color><color=#f8f8f2>.</color><color=#a6e22e>FeederManager</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Register the node state querying service. */</color>
    <color=#f8f8f2>nodeStateService</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NodeStateService</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeStateService</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>binaryNodeStateService</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BinaryNodeStateService</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>groupService</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>GroupService</color><color=#f8f8f2>(</color><color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>groupService</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Create a placeholder node, for test purposes only. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>RepNode</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#a6e22e>RepNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#a6e22e>RepNode</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#e6db74>"RepNode "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>clock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Clock</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nameIdPair</color> <color=#f92672>=</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serviceDispatcher</color> <color=#f92672>=</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>;</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repGroupDB</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>masterStatus</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replica</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>feederManager</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>changeListener</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>suggestionGenerator</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nodeState</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>cbvlsnTracker</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>globalCBVLSN</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>timer</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>channelTimeoutTask</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>electionQuorum</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>durabilityQuorum</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>arbiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>nodeType</color> <color=#f92672>=</color> <color=#f8f8f2>NodeType</color><color=#f8f8f2>.</color><color=#a6e22e>ELECTABLE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Logger</color> <color=#a6e22e>getLogger</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the node type of this node. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>NodeType</color> <color=#a6e22e>getNodeType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the timer associated with this RepNode */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Timer</color> <color=#a6e22e>getTimer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>timer</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the accumulated statistics for this node. The method encapsulates the statistics</color>
<color=#75715e>   * associated with its two principal components the FeederManager and the Replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironmentStats</color> <color=#a6e22e>getStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>RepInternal</color><color=#f8f8f2>.</color><color=#a6e22e>makeReplicatedEnvironmentStats</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resetStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>resetStats</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>resetStats</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color> <color=#a6e22e>getReadyLatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readyLatch</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>CommitFreezeLatch</color> <color=#a6e22e>getVLSNFreezeLatch</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>vlsnFreezeLatch</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resetReadyLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>exception</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ExceptionAwareCountDownLatch</color> <color=#f8f8f2>old</color> <color=#f92672>=</color> <color=#f8f8f2>readyLatch</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>readyLatch</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ExceptionAwareCountDownLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>old</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* releasing latch in some error situation. */</color>
      <color=#f8f8f2>old</color><color=#f8f8f2>.</color><color=#a6e22e>releaseAwait</color><color=#f8f8f2>(</color><color=#f8f8f2>exception</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* The methods below return the components of the rep node. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>FeederManager</color> <color=#a6e22e>feederManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Replica</color> <color=#a6e22e>replica</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replica</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Clock</color> <color=#a6e22e>getClock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>clock</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Replica</color> <color=#a6e22e>getReplica</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replica</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>RepGroupDB</color> <color=#a6e22e>getRepGroupDB</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Retrieves the node's current snapshot image of the group definition.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>There is a very brief period of time, during node start-up, where this can be <code>null</color>
<color=#75715e>   * </code>. But after that it should always return a valid object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>RepGroupImpl</color> <color=#a6e22e>getGroup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>group</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the UUID associated with the replicated environment. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>UUID</color> <color=#a6e22e>getUUID</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>group</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Group info is not available"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getUUID</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the nodeName associated with this replication node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the nodeName</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getNodeName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the nodeId associated with this replication node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the nodeId</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNodeId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getNameIdPair</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>InetSocketAddress</color> <color=#a6e22e>getSocket</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getSocket</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getHostName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHostName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getPort</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>MasterStatus</color> <color=#a6e22e>getMasterStatus</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a definitive answer to whether this node is currently the master by checking both its</color>
<color=#75715e>   * status as a master and whether the group agrees that it is the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Such an authoritative answer is needed in a network partition situation to detect a master</color>
<color=#75715e>   * that may be isolated on the minority side of a network partition.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the node is definitely the master. False if it's not or we cannot be sure.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isAuthoritativeMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionQuorum</color><color=#f8f8f2>.</color><color=#a6e22e>isAuthoritativeMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>getMasterStatus</color><color=#f8f8f2>(),</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getHeartbeatInterval</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>HEARTBEAT_INTERVAL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing only. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setVersion</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>version</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logVersion</color> <color=#f92672>=</color> <color=#f8f8f2>version</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getElectionPriority</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* A node should not become master if it cannot write. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>priority</color> <color=#f92672>=</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>NODE_PRIORITY</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>defaultPriority</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>NODE_PRIORITY</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>DESIGNATED_PRIMARY</color><color=#f8f8f2>)</color>
            <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>priority</color> <color=#f92672>==</color> <color=#f8f8f2>defaultPriority</color><color=#f8f8f2>))</color>
        <color=#f92672>?</color> <color=#f8f8f2>defaultPriority</color> <color=#f92672>+</color> <color=#ae81ff>1</color>
        <color=#f8f8f2>:</color> <color=#75715e>/* Raise its priority. */</color> <color=#f8f8f2>priority</color><color=#f8f8f2>;</color> <color=#75715e>/* Explicit priority, leave it intact. */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Amount of time to wait for a thread to finish on a shutdown. It's</color>
<color=#75715e>   * a multiple of a heartbeat, since a thread typically polls for a</color>
<color=#75715e>   * shutdown once per heartbeat.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getThreadWaitInterval</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getHeartbeatInterval</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>int</color> <color=#a6e22e>getDbTreeCacheClearingOpCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>DBTREE_CACHE_CLEAR_COUNT</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>RepImpl</color> <color=#a6e22e>getRepImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>LogManager</color> <color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>DbConfigManager</color> <color=#a6e22e>getConfigManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>VLSNIndex</color> <color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>FeederTxns</color> <color=#a6e22e>getFeederTxns</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getFeederTxns</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Elections</color> <color=#a6e22e>getElections</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>elections</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>MasterSuggestionGenerator</color> <color=#a6e22e>getSuggestionGenerator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Used by unit tests only. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>QuorumPolicy</color> <color=#a6e22e>getElectionPolicy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>electionQuorumPolicy</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an array of nodes suitable for feeding log files for a network restore.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an array of feeder nodes</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>RepNodeImpl</color><color=#f92672>[]</color> <color=#a6e22e>getLogProviders</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>RepNodeImpl</color><color=#f92672>></color> <color=#f8f8f2>nodes</color> <color=#f92672>=</color> <color=#f8f8f2>getGroup</color><color=#f8f8f2>().</color><color=#a6e22e>getDataMembers</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodes</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>RepNodeImpl</color><color=#f92672>[</color><color=#f8f8f2>nodes</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ChannelTimeoutTask</color> <color=#a6e22e>getChannelTimeoutTask</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>channelTimeoutTask</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMaster</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>isNodeMaster</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>MonitorEventManager</color> <color=#a6e22e>getMonitorEventManager</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>monitorEventManager</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Register an AppStateMonitor with this RepNode. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerAppStateMonitor</color><color=#f8f8f2>(</color><color=#f8f8f2>AppStateMonitor</color> <color=#f8f8f2>stateMonitor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>appStateMonitor</color> <color=#f92672>=</color> <color=#f8f8f2>stateMonitor</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return the application state that defined in user specified AppStateMonitor. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getAppState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If the AppStateMonitor is not defined, or there is currently no</color>
<color=#75715e>     * returned application state, return null.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>appStateMonitor</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>appStateMonitor</color><color=#f8f8f2>.</color><color=#a6e22e>getAppState</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Application state shouldn't be a zero length byte array. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>appStateMonitor</color><color=#f8f8f2>.</color><color=#a6e22e>getAppState</color><color=#f8f8f2>().</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Application state should be a byte array larger than 0."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>appStateMonitor</color><color=#f8f8f2>.</color><color=#a6e22e>getAppState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the current master name if it exists. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMasterName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_NODE_ID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the latest VLSN associated with a replicated commit. Note that since the lastTxnEndVLSN</color>
<color=#75715e>   * is computed outside the write log latch, via EnvironmentImpl.registerVLSN(LogItem) it's</color>
<color=#75715e>   * possible for it to be behind on an instantaneous basis, but it will eventually catch up when</color>
<color=#75715e>   * the updates quiesce.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getCurrentTxnEndVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLastTxnEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the instantaneous non-null DTVLSN value. The value should be non null once</color>
<color=#75715e>   * initialization has been completed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The returned value can be VLSN.UNINITIALIZED_VLSN_SEQUENCE if the node is a replica in a</color>
<color=#75715e>   * pre-dtvlsn log segment, or a master that has not as yet seen any acknowledged transactions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getDTVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>retValue</color> <color=#f92672>=</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>isNull</color><color=#f8f8f2>(</color><color=#f8f8f2>retValue</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"DTVLSN cannot be null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>retValue</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a DTVLSN (possibly null) for logging/debugging purposes. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getAnyDTVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Updates the DTVLSN with a potentially new DTVLSN value. Note that this method is only invoked</color>
<color=#75715e>   * when the node is a Master. The Replica simply sets the DTVLSN to a specific value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param candidateDTVLSN the new candidate DTVLSN</color>
<color=#75715e>   * @return the new DTVLSN which is either the candidatDTVLSN or a more recent DTVLSN ></color>
<color=#75715e>   *     candidateDTVLSN</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>updateDTVLSN</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>candidateDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>RepImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isSimulatePreDTVLSNMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>.</color><color=#a6e22e>updateMax</color><color=#f8f8f2>(</color><color=#f8f8f2>candidateDTVLSN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the DTVLSN to a specific value. This method is used exclusively by the Replica as it</color>
<color=#75715e>   * maintains the DTVLSN based upon the contents of the replication stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the previous DTVLSN value</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>setDTVLSN</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>newDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>newDTVLSN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Sets the group metadata associated with the RepNode and updates any local derived data. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>repGroupImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>group</color> <color=#f92672>=</color> <color=#f8f8f2>repGroupImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>needsAcks</color> <color=#f92672>=</color> <color=#f8f8f2>durabilityQuorum</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentRequiredAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SIMPLE_MAJORITY</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Testing API used to force this node as a master. The mastership is</color>
<color=#75715e>   * communicated upon election completion via the Listener. It's the</color>
<color=#75715e>   * responsibility of the caller to ensure that only one node is forced</color>
<color=#75715e>   * at a time via this API.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param force true to force this node as the master, false reverts back</color>
<color=#75715e>   *              to use of normal (non-preemptive) elections.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>forceMaster</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>force</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>.</color><color=#a6e22e>forceMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>force</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Initiate elections to make the changed proposal heard. */</color>
    <color=#f8f8f2>refreshCachedGroup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>initiateElection</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>,</color> <color=#f8f8f2>electionQuorumPolicy</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>int</color> <color=#a6e22e>getSecurityCheckInterval</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>SECURITY_CHECK_INTERVAL</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>StreamAuthenticator</color> <color=#a6e22e>getAuthenticator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getAuthenticator</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Starts up the thread in which the node does its processing as a master or replica. It then</color>
<color=#75715e>   * waits for the newly started thread to transition it out of the DETACHED state, and returns upon</color>
<color=#75715e>   * completion of this transition.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>startup</color><color=#f8f8f2>(</color><color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>initialElectionPolicy</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isAlive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>().</color><color=#a6e22e>isDetached</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>UNKNOWN</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>elections</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Elections</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>RepElectionsConfig</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>),</color> <color=#f8f8f2>changeListener</color><color=#f8f8f2>,</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getStartupTracker</color><color=#f8f8f2>().</color><color=#a6e22e>start</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>FIND_MASTER</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>RESET_REP_GROUP</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Invoked by DbResetRepGroup utility */</color>
        <color=#f8f8f2>reinitSelfElect</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>findMaster</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>electionQuorumPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>initialElectionPolicy</color><color=#f8f8f2>;</color>

      <color=#75715e>/* Electable members should participate in elections */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>electionQuorum</color><color=#f8f8f2>.</color><color=#a6e22e>nodeTypeParticipates</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>participate</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getStartupTracker</color><color=#f8f8f2>().</color><color=#a6e22e>stop</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>FIND_MASTER</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>start</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method must be invoked when a RepNode is first initialized and subsequently every time</color>
<color=#75715e>   * there is a change to the replication group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The Master should invoke this method each time a member is added or removed, and a replica</color>
<color=#75715e>   * should invoke it each time it detects the commit of a transaction that modifies the membership</color>
<color=#75715e>   * database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, it must be invoked after a syncup operation, since it may revert changes made</color>
<color=#75715e>   * to the membership table.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>RepGroupImpl</color> <color=#a6e22e>refreshCachedGroup</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>updateRepGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Don't update the node ID for a secondary node if</color>
<color=#75715e>         * IGNORE_SECONDARY_NODE_ID is true.  In that case, we are</color>
<color=#75715e>         * trying to convert a previously electable node to a secondary</color>
<color=#75715e>         * node, so the information about the electable node ID in the</color>
<color=#75715e>         * local copy of the rep group DB should be ignored.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isSecondary</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>IGNORE_SECONDARY_NODE_ID</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* May not be sufficiently current in the rep stream. */</color>
          <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>group</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes a node so that it's no longer a member of the group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that names referring to removed nodes cannot be reused.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nodeName identifies the node to be removed</color>
<color=#75715e>   * @throws MemberNotFoundException if the node denoted by <code>memberName</code> is not a member</color>
<color=#75715e>   *     of the replication group.</color>
<color=#75715e>   * @throws MasterStateException if the member being removed is currently the Master</color>
<color=#75715e>   * @see <a</color>
<color=#75715e>   *     href="https://sleepycat.oracle.com/trac/wiki/DynamicGroupMembership#DeletingMembers">Member</color>
<color=#75715e>   *     Deletion</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>removeMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Remove or delete a node from the group. If deleting a node, the node must not be active.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that names referring to removed nodes cannot be reused, but names for deleted nodes can</color>
<color=#75715e>   * be.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nodeName identifies the node to be removed or deleted</color>
<color=#75715e>   * @param delete whether to delete the node rather than just remove it</color>
<color=#75715e>   * @throws MemberActiveException if {@code delete} is {@code true} and the node is currently</color>
<color=#75715e>   *     active</color>
<color=#75715e>   * @throws MemberNotFoundException if the node denoted by <code>memberName</code> is not a member</color>
<color=#75715e>   *     of the replication group.</color>
<color=#75715e>   * @throws MasterStateException if the member being removed or deleted is currently the Master</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeMember</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>delete</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>checkValidity</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>delete</color> <color=#f92672>?</color> <color=#e6db74>"Deleting member"</color> <color=#f8f8f2>:</color> <color=#e6db74>"Removing member"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>delete</color> <color=#f92672>&&</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>activeReplicas</color><color=#f8f8f2>().</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemberActiveException</color><color=#f8f8f2>(</color><color=#e6db74>"Attempt to delete an active node: "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * First remove it from the cached group, effectively setting new</color>
<color=#75715e>     * durability requirements, for the ensuing group db updates.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>removeMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>delete</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Shutdown any feeder that may be active with the replica. Unless</color>
<color=#75715e>     * deleting, any subsequent attempts by the replica to rejoin the group</color>
<color=#75715e>     * will result in a failure.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>removeMember</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#f8f8f2>delete</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the network address of a node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that an alive node's address can't be updated, we'll throw an ReplicaStateException for</color>
<color=#75715e>   * this case.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nodeName identifies the node to be updated</color>
<color=#75715e>   * @param newHostName the new host name of this node</color>
<color=#75715e>   * @param newPort the new port of this node</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateAddress</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>newHostName</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>newPort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>checkValidity</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#e6db74>"Updating node's address"</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Check whether the node is still alive. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicaStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Can't update the network address for a live node."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Update the node information in the group database. */</color>
    <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setHostName</color><color=#f8f8f2>(</color><color=#f8f8f2>newHostName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setPort</color><color=#f8f8f2>(</color><color=#f8f8f2>newPort</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>setQuorumAck</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>updateMember</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Transfer the master role to one of the specified replicas.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We delegate most of the real work to an instance of the {@link MasterTransfer} class. Here,</color>
<color=#75715e>   * after some simple initial validity checking, we're concerned with coordinating the potential</color>
<color=#75715e>   * for multiple overlapping Master Transfer operation attempts. The possible outcomes are:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ol></color>
<color=#75715e>   *   <li>complete success ({@code done == true})</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>don't unblock txns here; that'll happen automatically as part of the usual handling</color>
<color=#75715e>   *             when the environment transitions from master->replica state.</color>
<color=#75715e>   *         <li>don't clear xfrInProgress, because we don't want to allow another attempt to</color>
<color=#75715e>   *             supersede</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   *   <li>timeout before establishing a winner (no superseder)</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>unblock txns</color>
<color=#75715e>   *         <li>clear xfrInProgress</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   *   <li>superseded (see {@link #setUpTransfer})</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>abort existing op (if permitted), unblock txns before unleashing the new one</color>
<color=#75715e>   *         <li>replace xfrInProgress</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   *   <li>env is closed (or invalidated because of an error) during the operation</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>release the block</color>
<color=#75715e>   *         <li>leave xfrInProgress as is.</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   * </ol></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param replicas candidate targets for new master role</color>
<color=#75715e>   * @param timeout time limit, in msec</color>
<color=#75715e>   * @param force whether to replace any existing, in-progress transfer operation</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>transferMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>replicas</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>force</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicas</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>replicas</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Parameter 'replicas' cannot be null or empty"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>().</color><color=#a6e22e>isMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Not currently master"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicas</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>getNodeName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The local node is on the list of candidate new masters, and</color>
<color=#75715e>       * we're already master: the operation is trivially satisfied.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>getNodeName</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>rep</color> <color=#f8f8f2>:</color> <color=#f8f8f2>replicas</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getNode</color><color=#f8f8f2>(</color><color=#f8f8f2>rep</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isRemoved</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Node '"</color> <color=#f92672>+</color> <color=#f8f8f2>rep</color> <color=#f92672>+</color> <color=#e6db74>"' is not currently an active member of the group"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Node '"</color> <color=#f92672>+</color> <color=#f8f8f2>rep</color> <color=#f92672>+</color> <color=#e6db74>"' must have node type ELECTABLE, but had type "</color> <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>MasterTransfer</color> <color=#f8f8f2>xfr</color> <color=#f92672>=</color> <color=#f8f8f2>setUpTransfer</color><color=#f8f8f2>(</color><color=#f8f8f2>replicas</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>force</color><color=#f8f8f2>);</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>winner</color> <color=#f92672>=</color> <color=#f8f8f2>xfr</color><color=#f8f8f2>.</color><color=#a6e22e>transfer</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>winner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xfrInProgress</color> <color=#f92672>==</color> <color=#f8f8f2>xfr</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>xfrInProgress</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets up a Master Transfer operation, ensuring that only one operation can be in progress at a</color>
<color=#75715e>   * time.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#f8f8f2>MasterTransfer</color> <color=#a6e22e>setUpTransfer</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>replicas</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>force</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>reject</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color> <color=#75715e>// initial guess, refine below if nec.</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xfrInProgress</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reject</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color> <color=#75715e>// next best guess, refine below again if nec.</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the new operation is "forcing", see if we can abort the</color>
<color=#75715e>       * existing one.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>force</color> <color=#f92672>&&</color> <color=#f8f8f2>xfrInProgress</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>MasterTransferFailureException</color><color=#f8f8f2>(</color><color=#e6db74>"superseded"</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>reject</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>unblockTxnCompletion</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reject</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTransferFailureException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"another Master Transfer (started at "</color>
              <color=#f92672>+</color> <color=#66d9ef>new</color> <color=#f8f8f2>Date</color><color=#f8f8f2>(</color><color=#f8f8f2>xfrInProgress</color><color=#f8f8f2>.</color><color=#a6e22e>getStartTime</color><color=#f8f8f2>())</color>
              <color=#f92672>+</color> <color=#e6db74>") is already in progress"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>xfrInProgress</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTransfer</color><color=#f8f8f2>(</color><color=#f8f8f2>replicas</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>xfrInProgress</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>MasterTransfer</color> <color=#a6e22e>getActiveTransfer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>xfrInProgress</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called by the RepNode when a transition to replica status has completely finished. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>clearActiveTransfer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>xfrInProgress</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs some basic validity checking, common code for some Group Membership operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param nodeName name of a replica node on which an operation is to be performed</color>
<color=#75715e>   * @param actionName textual description of the operation (for exception message)</color>
<color=#75715e>   * @return the named node</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>RepNodeImpl</color> <color=#a6e22e>checkValidity</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>actionName</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>MemberNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>().</color><color=#a6e22e>isMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Not currently a master. "</color>
              <color=#f92672>+</color> <color=#f8f8f2>actionName</color>
              <color=#f92672>+</color> <color=#e6db74>" must be "</color>
              <color=#f92672>+</color> <color=#e6db74>"invoked on the node that's currently the master."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getNode</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node:"</color> <color=#f92672>+</color> <color=#f8f8f2>nodeName</color> <color=#f92672>+</color> <color=#e6db74>"is not a member of the group:"</color> <color=#f92672>+</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isRemoved</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isQuorumAck</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemberNotFoundException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>nodeName</color>
              <color=#f92672>+</color> <color=#e6db74>"is not currently a member of "</color>
              <color=#f92672>+</color> <color=#e6db74>"the group:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" It had been removed."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Check if the node is the master itself. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>getNodeName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Updates the cached group info for the node, avoiding a database read, if the global CBVLSN is</color>
<color=#75715e>   * not defunct. If it is defunct, does nothing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param updateNameIdPair the node whose localCBVLSN must be updated.</color>
<color=#75715e>   * @param barrierState the new node syncup state</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateGroupInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>updateNameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>CleanerBarrierState</color> <color=#f8f8f2>barrierState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>updateGroupInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>updateNameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>barrierState</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When the GlobalVLSN is not defunct, recalculates it. Provoked by Replay to ensure that the</color>
<color=#75715e>   * replica's GlobalVLSN is up to date. When the GlobalVLSN is defunct, does nothing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>recalculateGlobalCBVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>recalculate</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>LocalCBVLSNTracker</color> <color=#a6e22e>getCBVLSNTracker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>cbvlsnTracker</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Finds a master node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>findMaster</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>refreshCachedGroup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>startLearner</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Current group size: "</color> <color=#f92672>+</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getElectableGroupSize</color><color=#f8f8f2>());</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>thisNode</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getNode</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>thisNode</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>&&</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Secondary nodes are not stored in the group DB, so they will not</color>
<color=#75715e>         * be found even though they are not new.  Use group UUID to</color>
<color=#75715e>         * distinguish -- it is only unknown if the node is new.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isElectable</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>hasUnknownUUID</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* A new node */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"New node "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color> <color=#f92672>+</color> <color=#e6db74>" unknown to rep group"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHelperSockets</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Not present in the replication group. Use the helper, to get</color>
<color=#75715e>       * to a master and enter the group.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getElectableGroupSize</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
          <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
          <color=#f92672>&&</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isElectable</color><color=#f8f8f2>()</color>
          <color=#f92672>&&</color> <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>getSocketAddress</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>().</color><color=#a6e22e>next</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* A startup situation, should this node become master. */</color>
        <color=#f8f8f2>selfElect</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>updateRepGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>);</color>
        <color=#75715e>/* Update minJEVersion for a new or reset group. */</color>
        <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>setDefunctJEVersion</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>queryGroupForMembership</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>thisNode</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>thisNode</color><color=#f8f8f2>.</color><color=#a6e22e>isRemoved</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node: "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" was previously deleted."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* An existing node */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Existing node "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" querying for a current master."</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The group has other members, see if they know of a master,</color>
<color=#75715e>       * along with any helpers that were also supplied.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHelperSockets</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>helperSockets</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getAllHelperSockets</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getLearner</color><color=#f8f8f2>().</color><color=#a6e22e>queryForMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method enforces the requirement that all addresses within a replication group, must be</color>
<color=#75715e>   * loopback addresses or they must all be non-local ip addresses. Mixing them means that the node</color>
<color=#75715e>   * with a loopback address cannot be contacted by a different node. Addresses specified by</color>
<color=#75715e>   * hostnames that currently have no DNS entries are assumed to not be loopback addresses.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param helperSockets the helper nodes used by this node when contacting the master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkLoopbackAddresses</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>InetAddress</color> <color=#f8f8f2>myAddress</color> <color=#f92672>=</color> <color=#f8f8f2>getSocket</color><color=#f8f8f2>().</color><color=#a6e22e>getAddress</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isLoopback</color> <color=#f92672>=</color> <color=#f8f8f2>myAddress</color><color=#f8f8f2>.</color><color=#a6e22e>isLoopbackAddress</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>socketAddress</color> <color=#f8f8f2>:</color> <color=#f8f8f2>helperSockets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InetAddress</color> <color=#f8f8f2>nodeAddress</color> <color=#f92672>=</color> <color=#f8f8f2>socketAddress</color><color=#f8f8f2>.</color><color=#a6e22e>getAddress</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the node address was specified with a hostname that does not,</color>
<color=#75715e>       * at least currently, have a DNS entry, then the address will be</color>
<color=#75715e>       * null.  We can safely assume this will not happen for loopback</color>
<color=#75715e>       * addresses, whose host names and addresses are both fixed.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nodeAddressIsLoopback</color> <color=#f92672>=</color>
          <color=#f8f8f2>(</color><color=#f8f8f2>nodeAddress</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>nodeAddress</color><color=#f8f8f2>.</color><color=#a6e22e>isLoopbackAddress</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeAddressIsLoopback</color> <color=#f92672>==</color> <color=#f8f8f2>isLoopback</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
          <color=#f8f8f2>getSocket</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" the address associated with this node, "</color>
              <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>isLoopback</color> <color=#f92672>?</color> <color=#e6db74>"is "</color> <color=#f8f8f2>:</color> <color=#e6db74>"is not "</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>"a loopback address."</color>
              <color=#f92672>+</color> <color=#e6db74>" It conflicts with an existing use, by a different node "</color>
              <color=#f92672>+</color> <color=#e6db74>" of the address:"</color>
              <color=#f92672>+</color> <color=#f8f8f2>socketAddress</color>
              <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isLoopback</color>
                  <color=#f92672>?</color> <color=#e6db74>" which is a loopback address."</color>
                  <color=#f8f8f2>:</color> <color=#e6db74>" which is not a loopback address."</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>" Such mixing of addresses within a group is not allowed, "</color>
              <color=#f92672>+</color> <color=#e6db74>"since the nodes will not be able to communicate with "</color>
              <color=#f92672>+</color> <color=#e6db74>"each other."</color><color=#f8f8f2>;</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Communicates with existing nodes in the group in order to figure out how to start up, in the</color>
<color=#75715e>   * case where the local node does not appear to be in the (local copy of the) GroupDB, typically</color>
<color=#75715e>   * because the node is starting up with an empty env directory. It could be that this is a new</color>
<color=#75715e>   * node (never before been part of the group). Or it could be a pre-existing group member that has</color>
<color=#75715e>   * lost its env dir contents and wants to be restored via a Network Restore operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We first try to find a currently running master node. (An authoritative master can easily</color>
<color=#75715e>   * handle either of the above-mentioned situations.) If we can't find a master, we look for other</color>
<color=#75715e>   * running nodes that may know of us (by asking them for their Group information).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>We query the designated helpers and all known learners. The helpers are the ones that were</color>
<color=#75715e>   * identified via the node's configuration, while the learners are the ones currently in the</color>
<color=#75715e>   * member database. We use both in order to cast the widest possible net.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Returns normally when the master is found.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InterruptedException if the current thread is interrupted, typically due to a shutdown</color>
<color=#75715e>   * @throws InsufficientLogException if the environment requires a network restore</color>
<color=#75715e>   * @see #findRestoreSuppliers</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>queryGroupForMembership</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helperSockets</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getHelperSockets</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>checkLoopbackAddresses</color><color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Not in the rep group. Use the designated helpers and other members</color>
<color=#75715e>     * of the group to help us figure out how to get started.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helpers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>helperSockets</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>helpers</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getAllHelperSockets</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>helpers</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Need a helper to add a new node into the group"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>queryGroupForMembershipBeforeQueryForMaster</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getLearner</color><color=#f8f8f2>().</color><color=#a6e22e>queryForMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>helpers</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>(</color><color=#e6db74>"Node is shutdown or invalid"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>groupMasterNameId</color> <color=#f92672>=</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* A new, or pre-query, group master. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Residual obsolete information in replicas, ignore it.</color>
<color=#75715e>           * Can't be master if we don't know our own id, but some</color>
<color=#75715e>           * other node does! This state means that the node was a</color>
<color=#75715e>           * master in the recent past, but has had its environment</color>
<color=#75715e>           * deleted since that time.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#f8f8f2>MASTER_QUERY_INTERVAL</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkGroupMasterIsAlive</color><color=#f8f8f2>(</color><color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Use the current group master if it's alive. */</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If there's no master, or the last known master cannot be</color>
<color=#75715e>       * reached, see if anyone thinks we're actually already in the</color>
<color=#75715e>       * group, and could supply us with a Network Restore. (Remember,</color>
<color=#75715e>       * we're here only if we didn't find ourselves in the local</color>
<color=#75715e>       * GroupDB. So we could be in a group restore from backup</color>
<color=#75715e>       * situation.)</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>findRestoreSuppliers</color><color=#f8f8f2>(</color><color=#f8f8f2>helpers</color><color=#f8f8f2>);</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>queryGroupForMembershipBeforeSleepHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The node could have been shutdown or invalidated while we were</color>
<color=#75715e>       * looking for restore suppliers</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>(</color><color=#e6db74>"Node is shutdown or invalid"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#f8f8f2>MASTER_QUERY_INTERVAL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"New node "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" located master: "</color> <color=#f92672>+</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Check that the master found by querying other group nodes is indeed alive and that we are not</color>
<color=#75715e>   * dealing with obsolete cached information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the master node could be contacted and was truly alive</color>
<color=#75715e>   *     <p>TODO: handle protocol version mismatch here and in DbPing, also consolidate code so that</color>
<color=#75715e>   *     a single copy is shared.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkGroupMasterIsAlive</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>masterSocket</color> <color=#f92672>=</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMaster</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>BinaryNodeStateProtocol</color> <color=#f8f8f2>protocol</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>BinaryNodeStateProtocol</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NOCHECK</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Build the connection. Set the parameter connectTimeout.*/</color>
      <color=#f8f8f2>channel</color> <color=#f92672>=</color>
          <color=#f8f8f2>repImpl</color>
              <color=#f8f8f2>.</color><color=#a6e22e>getChannelFactory</color><color=#f8f8f2>()</color>
              <color=#f8f8f2>.</color><color=#a6e22e>connect</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>masterSocket</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>new</color> <color=#f8f8f2>ConnectOptions</color><color=#f8f8f2>()</color>
                      <color=#f8f8f2>.</color><color=#a6e22e>setTcpNoDelay</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color>
                      <color=#f8f8f2>.</color><color=#a6e22e>setOpenTimeout</color><color=#f8f8f2>(</color><color=#ae81ff>5000</color><color=#f8f8f2>)</color>
                      <color=#f8f8f2>.</color><color=#a6e22e>setReadTimeout</color><color=#f8f8f2>(</color><color=#ae81ff>5000</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>ServiceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>doServiceHandshake</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>BinaryNodeStateService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Send a NodeState request to the node. */</color>
      <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>BinaryNodeStateRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>groupMasterNameId</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()),</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>

      <color=#75715e>/* Get the response and return the NodeState. */</color>
      <color=#f8f8f2>BinaryNodeStateResponse</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>BinaryNodeStateResponse</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeState</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>state</color><color=#f8f8f2>.</color><color=#a6e22e>isMaster</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Queried master:"</color> <color=#f92672>+</color> <color=#f8f8f2>groupMasterNameId</color> <color=#f92672>+</color> <color=#e6db74>" unavailable. Reason:"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>channel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>channel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Ignore it */</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets up a Network Restore, as part of the process of restoring an entire group from backup, by</color>
<color=#75715e>   * producing an appropriate {@code InsufficientLogException} if possible.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Queries each of the supplied helper hosts for their notion of the group make-up. If any of</color>
<color=#75715e>   * them consider us to be already in the group, then instead of joining the group as a new node we</color>
<color=#75715e>   * ought to try a Network Restore; and the node(s) that do already know of us are the suitable</color>
<color=#75715e>   * suppliers for it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InsufficientLogException in the successful case, if one or more suitable suppliers for</color>
<color=#75715e>   *     a Network Restore can be found; otherwise just returns.</color>
<color=#75715e>   * @throws InterruptedException if the node was shutdown or invalidated while we were looking for</color>
<color=#75715e>   *     a network restore supplier</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>findRestoreSuppliers</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>InetSocketAddress</color><color=#f92672>></color> <color=#f8f8f2>helpers</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>ReplicationNode</color><color=#f92672>></color> <color=#f8f8f2>suppliers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>RepGroupProtocol</color> <color=#f8f8f2>protocol</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>RepGroupProtocol</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getChannelFactory</color><color=#f8f8f2>());</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>InetSocketAddress</color> <color=#f8f8f2>helper</color> <color=#f8f8f2>:</color> <color=#f8f8f2>helpers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>beforeFindRestoreSupplierHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The node could have been shutdown or invalidated while we were</color>
<color=#75715e>       * looking for a network restore supplier [#25314]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>(</color><color=#e6db74>"Node is shutdown or invalid"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>MessageExchange</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color>
          <color=#f8f8f2>protocol</color>
          <color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#f8f8f2>MessageExchange</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>,</color> <color=#f8f8f2>GroupService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>new</color> <color=#a6e22e>GroupRequest</color><color=#f8f8f2>());</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Just as we did in the queryForMaster() case, quietly ignore any</color>
<color=#75715e>       * unsurprising response error or socket exceptions; we'll retry</color>
<color=#75715e>       * later if we end up not finding any Network Restore suppliers.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>run</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ResponseMessage</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>getResponseMessage</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>RGFAIL_RESP</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>getOp</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>protocol</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_RESP</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>getOp</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Expected GROUP_RESP, got "</color> <color=#f92672>+</color> <color=#f8f8f2>response</color><color=#f8f8f2>.</color><color=#a6e22e>getOp</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>": "</color> <color=#f92672>+</color> <color=#f8f8f2>response</color><color=#f8f8f2>);</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>GroupResponse</color> <color=#f8f8f2>groupResp</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>GroupResponse</color><color=#f8f8f2>)</color> <color=#f8f8f2>response</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the response from the remote node shows that I am already a</color>
<color=#75715e>       * member of the group, add the node to the list of nodes that will</color>
<color=#75715e>       * serve the Network Restore.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>RepGroupImpl</color> <color=#f8f8f2>groupInfo</color> <color=#f92672>=</color> <color=#f8f8f2>groupResp</color><color=#f8f8f2>.</color><color=#a6e22e>getGroup</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>me</color> <color=#f92672>=</color> <color=#f8f8f2>groupInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getNode</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>me</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>isRemoved</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>me</color><color=#f8f8f2>.</color><color=#a6e22e>isQuorumAck</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>ReplicationNode</color> <color=#f8f8f2>supplier</color> <color=#f92672>=</color> <color=#f8f8f2>groupInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getMember</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>supplier</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>suppliers</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>supplier</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>suppliers</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InsufficientLogException</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>suppliers</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Elects this node as the master. The operation is only valid when the group consists of just</color>
<color=#75715e>   * this node, and when this is an ELECTABLE node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   * @throws IllegalStateException if the node type is not ELECTABLE</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>selfElect</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Cannot elect node "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" as master because its node type, "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nodeType</color>
              <color=#f92672>+</color> <color=#e6db74>", is not ELECTABLE"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getFirstNodeId</color><color=#f8f8f2>());</color>

    <color=#75715e>/* Master by default of a nascent group. */</color>
    <color=#f8f8f2>Proposal</color> <color=#f8f8f2>proposal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimebasedProposalGenerator</color><color=#f8f8f2>().</color><color=#a6e22e>nextProposal</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>getLearner</color><color=#f8f8f2>().</color><color=#a6e22e>processResult</color><color=#f8f8f2>(</color><color=#f8f8f2>proposal</color><color=#f8f8f2>,</color> <color=#f8f8f2>suggestionGenerator</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>proposal</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Nascent group. "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" is master by virtue of being the first node."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>sync</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>MASTER</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMasterNameId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>initAsMaster</color><color=#f8f8f2>();</color>
    <color=#75715e>/*</color>
<color=#75715e>     * Start it off as this value. It will be rapidly updated, as</color>
<color=#75715e>     * transactions are committed.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>.</color><color=#a6e22e>updateMax</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_VLSN_SEQUENCE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>addFirstNode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>refreshCachedGroup</color><color=#f8f8f2>();</color>
    <color=#75715e>/* Unsync so that the run loop does not call for an election. */</color>
    <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>unSync</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Establishes this node as the master, after re-initializing the group with this as the sole node</color>
<color=#75715e>   * in the group. This method is used solely as part of the DbResetRepGroup utility.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException if the node type is not ELECTABLE</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>reinitSelfElect</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Cannot elect node "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" as master because its node type, "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nodeType</color>
              <color=#f92672>+</color> <color=#e6db74>", is not ELECTABLE"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Establish an empty group so transaction commits can proceed. */</color>
    <color=#f8f8f2>setGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>emptyGroup</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Reinitializing group to node "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Unilaterally transition the nodeState to Master, so that write</color>
<color=#75715e>     * transactions needed to reset the group and establish this node can</color>
<color=#75715e>     * be issued against the environment.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>MASTER</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMasterNameId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>initAsMaster</color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplayTxn</color> <color=#f8f8f2>replayTxn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>getTxns</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplayTxn</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * We don't have a node id at this point, simply use 1 since we</color>
<color=#75715e>       * know it's valid. It will subsequently be set to the the next</color>
<color=#75715e>       * node id in sequence.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nodeId</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Aborting incomplete replay txn:"</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color> <color=#f92672>+</color> <color=#e6db74>" as part of group reset"</color><color=#f8f8f2>);</color>
      <color=#75715e>/* The DTVLSN will be corrected when it's written to the log */</color>
      <color=#f8f8f2>replayTxn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER</color><color=#f8f8f2>,</color> <color=#f8f8f2>nodeId</color><color=#f8f8f2>,</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Start using new log files. The file ensures that we can safely</color>
<color=#75715e>     * truncate the past VLSNs.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>forceLogFileFlip</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>CheckpointConfig</color> <color=#f8f8f2>ckptConfig</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CheckpointConfig</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>ckptConfig</color><color=#f8f8f2>.</color><color=#a6e22e>setForce</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The checkpoint ensures that we do not have to replay VLSNs from the</color>
<color=#75715e>     * prior group and that we have a complete VLSN index on disk.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invokeCheckpoint</color><color=#f8f8f2>(</color><color=#f8f8f2>ckptConfig</color><color=#f8f8f2>,</color> <color=#e6db74>"Reinit of RepGroup"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>VLSN</color> <color=#f8f8f2>lastOldVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>getRange</color><color=#f8f8f2>().</color><color=#a6e22e>getLast</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Now create the new rep group on disk. */</color>
    <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>reinitFirstNode</color><color=#f8f8f2>(</color><color=#f8f8f2>lastOldVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>refreshCachedGroup</color><color=#f8f8f2>();</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>lastOldFile</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>getLTEFileNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>lastOldVLSN</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Discard the VLSN index covering the pre group reset VLSNS, to ensure</color>
<color=#75715e>     * that the pre reset part of the log is never replayed. We don't want</color>
<color=#75715e>     * to replay this part of the log, since it contains references to</color>
<color=#75715e>     * repnodes via node ids that are no longer part of the reset rep</color>
<color=#75715e>     * group. Note that we do not reuse rep node ids, that is, rep node id</color>
<color=#75715e>     * sequence continues across the reset operation and is not itself</color>
<color=#75715e>     * reset. Nodes joining the new group will need to do a network restore</color>
<color=#75715e>     * when they join the group.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Don't perform the truncation if RESET_REP_GROUP_RETAIN_UUID is true.</color>
<color=#75715e>     * In that case, we are only removing the rep group members, but</color>
<color=#75715e>     * retaining the remaining information, because we will be restarting</color>
<color=#75715e>     * the rep group in place with an old secondary acting as an electable</color>
<color=#75715e>     * node.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>retainUUID</color> <color=#f92672>=</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>RESET_REP_GROUP_RETAIN_UUID</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>retainUUID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>truncateFromHead</color><color=#f8f8f2>(</color><color=#f8f8f2>lastOldVLSN</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastOldFile</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>startLearner</color><color=#f8f8f2>();</color>
    <color=#75715e>/* Unsync so that the run loop does not call for an election. */</color>
    <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>unSync</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Initialize minJEVersion for a new or reset group. */</color>
    <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>setDefunctJEVersion</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When a disk limit is violated, the node state will transition to UNKNOWN and wait for disk to</color>
<color=#75715e>   * become available again before it transitions to a Replica or Master State. This method will not</color>
<color=#75715e>   * exit until one of the following occurs:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1. The disk limit violation is cleared. 2. The node is shutdown or invalidated. 3. The</color>
<color=#75715e>   * thread is interrupted, in which case InterruptedException is thrown.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>waitWhileDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Node waiting for disk space to become available. "</color>
            <color=#f92672>+</color> <color=#e6db74>"Disk limit violation:"</color>
            <color=#f92672>+</color> <color=#f8f8f2>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>());</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#ae81ff>1000</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Disk limit violation cleared."</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The top level Master/Feeder or Replica loop in support of replication. It's responsible for</color>
<color=#75715e>   * driving the node level state changes resulting from elections initiated either by this node, or</color>
<color=#75715e>   * by other members of the group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The thread is terminated via an orderly shutdown initiated as a result of an interrupt</color>
<color=#75715e>   * issued by the shutdown() method. Any exception that is not handled by the run method itself is</color>
<color=#75715e>   * caught by the thread's uncaught exception handler, and results in the RepImpl being made</color>
<color=#75715e>   * invalid. In that case, the application is responsible for closing the Replicated Environment,</color>
<color=#75715e>   * which will provoke the shutdown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: This method currently runs either the feeder loop or the replica loop. With R to R</color>
<color=#75715e>   * support, it would be possible for a Replica to run both. This will be a future feature.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Set to indicate an error-initiated shutdown. */</color>
    <color=#f8f8f2>Error</color> <color=#f8f8f2>repNodeError</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Node "</color>
              <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" started"</color>
              <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isElectable</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#e6db74>" as "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeType</color> <color=#f8f8f2>:</color> <color=#e6db74>""</color><color=#f8f8f2>));</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>UNKNOWN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Avoid unnecessary state changes. */</color>
          <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>UNKNOWN</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getDiskLimitViolation</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Progress is not possible while out of disk. So stay in</color>
<color=#75715e>           * the UNKNOWN state, participating in elections at</color>
<color=#75715e>           * election priority zero to help establish election quorum</color>
<color=#75715e>           * but avoid being elected master.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>waitWhileDiskLimitViolation</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Initiate elections if we don't have a group master, or there</color>
<color=#75715e>         * is a master, but we were unable to use it.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getGroupMasterNameId</color><color=#f8f8f2>().</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>inSync</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * But we can't if we don't have our own node ID yet or if</color>
<color=#75715e>           * we are not ELECTABLE.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>queryGroupForMembership</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>initiateElection</color><color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>,</color> <color=#f8f8f2>electionQuorumPolicy</color><color=#f8f8f2>);</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Subsequent elections must always use a simple</color>
<color=#75715e>             * majority.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>electionQuorumPolicy</color> <color=#f92672>=</color> <color=#f8f8f2>QuorumPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SIMPLE_MAJORITY</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#75715e>/* In case elections were shut down. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Start syncing this node to the new group master */</color>
        <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>sync</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>isNodeMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>initAsMaster</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>masterTransitionCleanup</color><color=#f8f8f2>();</color>

          <color=#75715e>/* Master is ready for business. */</color>
          <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>MASTER</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMasterNameId</color><color=#f8f8f2>());</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Update the JE version information stored for the master</color>
<color=#75715e>           * in the RepGroupDB, if needed.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>maybeUpdateMasterJEVersion</color><color=#f8f8f2>();</color>

          <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>runFeeders</color><color=#f8f8f2>();</color>

          <color=#75715e>/*</color>
<color=#75715e>           * At this point, the feeder manager has been shutdown.</color>
<color=#75715e>           * Re-initialize the VLSNIndex put latch mechanism, which</color>
<color=#75715e>           * is present on masters to maintain a tip cache of the</color>
<color=#75715e>           * last record on the replication stream, and by all</color>
<color=#75715e>           * nodes when doing checkpoint vlsn consistency waiting.</color>
<color=#75715e>           * Create a new feeder manager, should this node become a</color>
<color=#75715e>           * master later on.</color>
<color=#75715e>           * Set the node to UNKNOWN state right away, because the</color>
<color=#75715e>           * MasterTxn will use node state to prevent the advent of</color>
<color=#75715e>           * any replicated writes.  Once the VLSNIndex is</color>
<color=#75715e>           * initialized for replica state, the node will NPE if it</color>
<color=#75715e>           * attempts execute replicated writes.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>UNKNOWN</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>initAsReplica</color><color=#f8f8f2>();</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>runConvertHooks</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>feederManager</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FeederManager</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Replica will notify us when connection is successfully</color>
<color=#75715e>           * made, and Feeder handshake done, at which point we'll</color>
<color=#75715e>           * update nodeState.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>replicaTransitionCleanup</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>runReplicaLoop</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"RepNode main thread interrupted - "</color> <color=#f92672>+</color> <color=#e6db74>" forced shutdown."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>GroupShutdownException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"RepNode main thread sees group shutdown - "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InsufficientLogException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"RepNode main thread sees runtime ex - "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color> <color=#f92672>+</color> <color=#e6db74>" incurred during repnode loop"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>repNodeError</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"RepNode main thread shutting down."</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNodeError</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Node state at shutdown:\n"</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>repNodeError</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>Throwable</color> <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#f8f8f2>getSavedShutdownException</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Node state at shutdown:\n"</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
              <color=#e6db74>"RepNode shutdown exception:\n"</color> <color=#f92672>+</color> <color=#f8f8f2>exception</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>shutdown</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>chainExceptionCause</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>,</color> <color=#f8f8f2>exception</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>severe</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Unexpected exception during shutdown"</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Ignore exceptions on exit</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>DETACHED</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>cleanup</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the information stored for the master in the RepGroupDB if storing it is supported and</color>
<color=#75715e>   * the current version is different from the recorded version.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>maybeUpdateMasterJEVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Check if storing JE version information is supported */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getFormatVersion</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>FORMAT_VERSION_3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>currentJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentJEVersion</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getMember</color><color=#f8f8f2>(</color><color=#f8f8f2>nameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getJEVersion</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>updateJEVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>currentJEVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>updateMember</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>notifyReplicaConnected</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>changeAndNotify</color><color=#f8f8f2>(</color><color=#f8f8f2>REPLICA</color><color=#f8f8f2>,</color> <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeMasterNameId</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the node has been shutdown or if the underlying environment has been</color>
<color=#75715e>   * invalidated. It's used as the basis for exiting the FeederManager or the Replica.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShutdownOrInvalid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>wasInvalidated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>saveShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getInvalidatingException</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used to shutdown all activity associated with this replication stream. If method is invoked</color>
<color=#75715e>   * from different thread of control, it will wait until the rep node thread exits. If it's from</color>
<color=#75715e>   * the same thread, it's the caller's responsibility to exit the thread upon return from this</color>
<color=#75715e>   * method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws InterruptedException</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdown</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shutdownDone</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Shutting down node "</color> <color=#f92672>+</color> <color=#f8f8f2>nameIdPair</color> <color=#f92672>+</color> <color=#e6db74>" DTVLSN:"</color> <color=#f92672>+</color> <color=#f8f8f2>getAnyDTVLSN</color><color=#f8f8f2>());</color>

    <color=#75715e>/* Fire a LeaveGroup if this RepNode is valid. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>monitorEventManager</color><color=#f8f8f2>.</color><color=#a6e22e>notifyLeaveGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>getLeaveReason</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Stop accepting any new network requests. */</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>preShutdown</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>elections</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>elections</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Initiate the FeederManger soft shutdown if it's active. */</color>
    <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>shutdownQueue</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>getReplicaCloseCatchupMs</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>().</color><color=#a6e22e>isMaster</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A group shutdown. Shutting down the queue will cause the</color>
<color=#75715e>       * FeederManager to shutdown its feeders and exit.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>join</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Shutdown the replica, if it's active. */</color>
    <color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>shutdownThread</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"RepNode main thread: "</color> <color=#f92672>+</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" exited."</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Shut down all other services. */</color>
    <color=#f8f8f2>utilityServicesShutdown</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Shutdown all the services before shutting down the dispatcher. */</color>
    <color=#f8f8f2>MasterTransfer</color> <color=#f8f8f2>mt</color> <color=#f92672>=</color> <color=#f8f8f2>getActiveTransfer</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mt</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Exception</color> <color=#f8f8f2>ex</color> <color=#f92672>=</color> <color=#f8f8f2>getSavedShutdownException</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ex</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ex</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MasterTransferFailureException</color><color=#f8f8f2>(</color><color=#e6db74>"shutting down"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>mt</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#f8f8f2>ex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color> <color=#f92672>+</color> <color=#e6db74>" shutdown completed."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>masterStatus</color><color=#f8f8f2>.</color><color=#a6e22e>setGroupMaster</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>readyLatch</color><color=#f8f8f2>.</color><color=#a6e22e>releaseAwait</color><color=#f8f8f2>(</color><color=#f8f8f2>getSavedShutdownException</color><color=#f8f8f2>());</color>

    <color=#75715e>/* Cancel the TimerTasks. */</color>
    <color=#f8f8f2>channelTimeoutTask</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>timer</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Soft shutdown for the RepNode thread. Note that since the thread is shared by the FeederManager</color>
<color=#75715e>   * and the Replica, the FeederManager or Replica specific soft shutdown actions should already</color>
<color=#75715e>   * have been done earlier.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>initiateSoftShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getThreadWaitInterval</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the shut down reason for this node. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LeaveReason</color> <color=#a6e22e>getLeaveReason</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LeaveReason</color> <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>Exception</color> <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#f8f8f2>getSavedShutdownException</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#f8f8f2>LeaveReason</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL_SHUTDOWN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>GroupShutdownException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#f8f8f2>LeaveReason</color><color=#f8f8f2>.</color><color=#a6e22e>MASTER_SHUTDOWN_GROUP</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>reason</color> <color=#f92672>=</color> <color=#f8f8f2>LeaveReason</color><color=#f8f8f2>.</color><color=#a6e22e>ABNORMAL_TERMINATION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>reason</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>utilityServicesShutdown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ldiff</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ldiff</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logFeederManager</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logFeederManager</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>binaryNodeStateService</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>binaryNodeStateService</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeStateService</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>NodeStateService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupService</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>GroupService</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Must be invoked on the Master via the last open handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that the method itself does not shutdown the group. It merely sets</color>
<color=#75715e>   * replicaCloseCatchupMs, indicating that the ensuing handle close should shutdown the Replicas.</color>
<color=#75715e>   * The actual coordination with the closing of the handle is implemented by</color>
<color=#75715e>   * ReplicatedEnvironment.shutdownGroup().</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see ReplicatedEnvironment#shutdownGroup(long, TimeUnit)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownGroupOnClose</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeoutMs</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>().</color><color=#a6e22e>isMaster</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Node state must be "</color> <color=#f92672>+</color> <color=#f8f8f2>MASTER</color> <color=#f92672>+</color> <color=#e6db74>", not "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>replicaCloseCatchupMs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeoutMs</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>timeoutMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * JoinGroup ensures that a RepNode is actively participating in a replication group. It's invoked</color>
<color=#75715e>   * each time a replicated environment handle is created.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node is already participating in a replication group, because it's not the first</color>
<color=#75715e>   * handle to the environment, it will return without having to wait. Otherwise it will wait until</color>
<color=#75715e>   * a master is elected and this node is active, either as a Master, or as a Replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the node joins as a replica, it will wait further until it has become sufficiently</color>
<color=#75715e>   * consistent as defined by its consistency argument. By default it uses PointConsistencyPolicy to</color>
<color=#75715e>   * ensure that it is at least as consistent as the master as of the time the handle was opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A node can also join in the Unknown state if it has been configured to do so via</color>
<color=#75715e>   * ENV_UNKNOWN_STATE_TIMEOUT.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws UnknownMasterException If a master cannot be established within ENV_SETUP_TIMEOUT,</color>
<color=#75715e>   *     unless ENV_UNKNOWN_STATE_TIMEOUT has been set to allow the creation of a handle while in</color>
<color=#75715e>   *     the UNKNOWN state.</color>
<color=#75715e>   * @return MASTER, REPLICA, or UNKNOWN (if ENV_UNKNOWN_STATE_TIMEOUT is set)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>joinGroup</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>consistency</color><color=#f8f8f2>,</color> <color=#f8f8f2>QuorumPolicy</color> <color=#f8f8f2>initialElectionPolicy</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>JoinGroupTimeouts</color> <color=#f8f8f2>timeouts</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JoinGroupTimeouts</color><color=#f8f8f2>(</color><color=#f8f8f2>getConfigManager</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>startup</color><color=#f8f8f2>(</color><color=#f8f8f2>initialElectionPolicy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"joinGroup "</color> <color=#f92672>+</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>exitException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>retries</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getStartupTracker</color><color=#f8f8f2>().</color><color=#a6e22e>start</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>BECOME_CONSISTENT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getStartupTracker</color><color=#f8f8f2>().</color><color=#a6e22e>setProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>RecoveryProgress</color><color=#f8f8f2>.</color><color=#a6e22e>BECOME_CONSISTENT</color><color=#f8f8f2>);</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>retries</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>retries</color> <color=#f92672><</color> <color=#f8f8f2>JOIN_RETRIES</color><color=#f8f8f2>;</color> <color=#f8f8f2>retries</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Wait for Feeder/Replica to be fully initialized. */</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color> <color=#f92672>=</color>
              <color=#f8f8f2>getReadyLatch</color><color=#f8f8f2>().</color><color=#a6e22e>awaitOrException</color><color=#f8f8f2>(</color><color=#f8f8f2>timeouts</color><color=#f8f8f2>.</color><color=#a6e22e>getTimeout</color><color=#f8f8f2>(),</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Save the state, and use it from this point forward,</color>
<color=#75715e>           * since the node's state may change again.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>ReplicatedEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>finalState</color> <color=#f92672>=</color> <color=#f8f8f2>nodeState</color><color=#f8f8f2>.</color><color=#a6e22e>getRepEnvState</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>done</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#75715e>/* An election or setup, timeout. */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalState</color><color=#f8f8f2>.</color><color=#a6e22e>isReplica</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeouts</color><color=#f8f8f2>.</color><color=#a6e22e>timeoutIsForUnknownState</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

                <color=#75715e>/*</color>
<color=#75715e>                 * Replica syncing up; move onwards to the</color>
<color=#75715e>                 * setup timeout and continue with the syncup.</color>
<color=#75715e>                 */</color>
                <color=#f8f8f2>timeouts</color><color=#f8f8f2>.</color><color=#a6e22e>setSetupTimeout</color><color=#f8f8f2>();</color>
                <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
              <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicaConsistencyException</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Setup time exceeded %,d ms"</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeouts</color><color=#f8f8f2>.</color><color=#a6e22e>getSetupTimeout</color><color=#f8f8f2>()),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalState</color><color=#f8f8f2>.</color><color=#a6e22e>isUnknown</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>timeouts</color><color=#f8f8f2>.</color><color=#a6e22e>timeoutIsForUnknownState</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>UNKNOWN</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>UNKNOWN</color><color=#f8f8f2>:</color>

              <color=#75715e>/*</color>
<color=#75715e>               * State flipped between release of ready latch and</color>
<color=#75715e>               * nodeState.getRepEnvState() above; retry for a</color>
<color=#75715e>               * Master/Replica state.</color>
<color=#75715e>               */</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>

            <color=#66d9ef>case</color> <color=#f8f8f2>REPLICA</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>joinAsReplica</color><color=#f8f8f2>(</color><color=#f8f8f2>consistency</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>

            <color=#66d9ef>case</color> <color=#f8f8f2>MASTER</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Joining group as master"</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>

            <color=#66d9ef>case</color> <color=#f8f8f2>DETACHED</color><color=#f8f8f2>:</color>
              <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
                  <color=#e6db74>"Node in DETACHED state "</color> <color=#f92672>+</color> <color=#e6db74>"while joining group."</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>return</color> <color=#f8f8f2>finalState</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterStateException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Transition to master while establishing consistency. */</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Join retry due to master transition: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RestartRequiredException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Environment needs to be restarted: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Throwable</color> <color=#f8f8f2>cause</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cause</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>cause</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Replica</color><color=#f8f8f2>.</color><color=#a6e22e>ConnectRetryException</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

            <color=#75715e>/*</color>
<color=#75715e>             * The master may have changed. Retry if there is time</color>
<color=#75715e>             * left to do so. It may result in a new master.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>exitException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeouts</color><color=#f8f8f2>.</color><color=#a6e22e>getTimeout</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Join retry due to exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>cause</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getStartupTracker</color><color=#f8f8f2>().</color><color=#a6e22e>stop</color><color=#f8f8f2>(</color><color=#f8f8f2>Phase</color><color=#f8f8f2>.</color><color=#a6e22e>BECOME_CONSISTENT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Timed out or exceeded retries. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exitException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Exiting joinGroup after "</color> <color=#f92672>+</color> <color=#f8f8f2>retries</color> <color=#f92672>+</color> <color=#e6db74>" retries."</color> <color=#f92672>+</color> <color=#f8f8f2>exitException</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>exitException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getStateChangeEvent</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Join the group as a Replica ensuring that the node is sufficiently consistent as defined by its</color>
<color=#75715e>   * consistency policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param consistency the consistency policy to use when joining initially</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>joinAsReplica</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaConsistencyPolicy</color> <color=#f8f8f2>consistency</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>consistency</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>consistencyTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>ENV_CONSISTENCY_TIMEOUT</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>consistency</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>PointConsistencyPolicy</color><color=#f8f8f2>(</color>
              <color=#66d9ef>new</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getMasterTxnEndVLSN</color><color=#f8f8f2>()),</color> <color=#f8f8f2>consistencyTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Wait for the replica to become sufficiently consistent.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>consistency</color><color=#f8f8f2>.</color><color=#a6e22e>ensureConsistency</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Flush changes to the file system. The flush ensures in particular</color>
<color=#75715e>     * that any member database updates defining this node itself are not</color>
<color=#75715e>     * lost in case of a process crash. See SR 20607.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>flushNoSync</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color>
        <color=#e6db74>"Joined group as a replica. "</color>
            <color=#f92672>+</color> <color=#e6db74>" join consistencyPolicy="</color>
            <color=#f92672>+</color> <color=#f8f8f2>consistency</color>
            <color=#f92672>+</color> <color=#e6db74>" "</color>
            <color=#f92672>+</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>getRange</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Should be called whenever a new VLSN is associated with a log entry suitable for Replica/Feeder</color>
<color=#75715e>   * syncup. If GlobalCBVLSN is defunct, does nothing.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>trackSyncableVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>syncableVLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cbvlsnTracker</color><color=#f8f8f2>.</color><color=#a6e22e>track</color><color=#f8f8f2>(</color><color=#f8f8f2>syncableVLSN</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the global CBVLSN if it is not defunct, and otherwise a null VLSN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see GlobalCBVLSN#getCBVLSN()</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getGlobalCBVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>getCBVLSN</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether the GlobalCBVLSN is defunct -- see {@link GlobalCBVLSN}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isGlobalCBVLSNDefunct</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>isDefunct</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a VLSN appropriate for the RestoreResponse.cbvlsn field when the GlobalCBVLSN is not</color>
<color=#75715e>   * defunct, and otherwise a null VLSN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see GlobalCBVLSN#getRestoreResponseVLSN</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>VLSN</color> <color=#a6e22e>getRestoreResponseVLSN</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>VLSNRange</color> <color=#f8f8f2>range</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>getRestoreResponseVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Marks the start of the search for a matchpoint that happens during a syncup. The lower bound of</color>
<color=#75715e>   * the VLSN range must remain stable during syncup to prevent deleting files that are being read</color>
<color=#75715e>   * by a syncup file reader.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A feeder may have multiple syncups in action. The caller should call {@link #syncupEnded}</color>
<color=#75715e>   * when the syncup is done, passing the value returned by this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param syncupNode identifies the other node involved in the the syncup, and is the name to be</color>
<color=#75715e>   *     used in LogSizeStats.</color>
<color=#75715e>   * @return the ProtectedFileSet protecting the VLSNIndex range and identifying the syncup in</color>
<color=#75715e>   *     LogSizeStats.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ProtectedFileSet</color> <color=#a6e22e>syncupStarted</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color> <color=#f8f8f2>syncupNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>getVLSNIndex</color><color=#f8f8f2>().</color><color=#a6e22e>protectRangeHead</color><color=#f8f8f2>(</color><color=#f8f8f2>FileProtector</color><color=#f8f8f2>.</color><color=#a6e22e>SYNCUP_NAME</color> <color=#f92672>+</color> <color=#e6db74>"-"</color> <color=#f92672>+</color> <color=#f8f8f2>syncupNode</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>syncupEnded</color><color=#f8f8f2>(</color><color=#f8f8f2>ProtectedFileSet</color> <color=#f8f8f2>fileSet</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getFileProtector</color><color=#f8f8f2>().</color><color=#a6e22e>removeFileProtection</color><color=#f8f8f2>(</color><color=#f8f8f2>fileSet</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>long</color> <color=#a6e22e>getReplicaCloseCatchupMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicaCloseCatchupMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Arbiter</color> <color=#a6e22e>getArbiter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>arbiter</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shuts down the Network backup service *before* a rollback is initiated as part of syncup, thus</color>
<color=#75715e>   * ensuring that NetworkRestore does not see an inconsistent set of log files. Any network backup</color>
<color=#75715e>   * operations that are in progress at this node are aborted. The client of the service will</color>
<color=#75715e>   * experience network connection failures and will retry with this node (when the service is</color>
<color=#75715e>   * re-established at this node), or with some other node.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>restartNetworkBackup() is then used to restart the service after it was shut down.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownNetworkBackup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>logFeederManager</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>logFeederManager</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Restarts the network backup service *after* a rollback has been completed and the log files are</color>
<color=#75715e>   * once again in a consistent state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>restartNetworkBackup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logFeederManager</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>logFeederManager</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>com</color><color=#f8f8f2>.</color><color=#a6e22e>sleepycat</color><color=#f8f8f2>.</color><color=#a6e22e>je</color><color=#f8f8f2>.</color><color=#a6e22e>rep</color><color=#f8f8f2>.</color><color=#a6e22e>impl</color><color=#f8f8f2>.</color><color=#a6e22e>networkRestore</color><color=#f8f8f2>.</color><color=#a6e22e>FeederManager</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>serviceDispatcher</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>nameIdPair</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Dumps the states associated with any active Feeders as well as the composition of the group</color>
<color=#75715e>   * itself.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"\n"</color> <color=#f92672>+</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/* acksOnly */</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>"\n"</color> <color=#f92672>+</color> <color=#f8f8f2>getGroup</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Dumps the state associated with all active Feeders that supply acknowledgments. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpAckFeederState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>"\n"</color> <color=#f92672>+</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/* acksOnly */</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>"\n"</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>ElectionQuorum</color> <color=#a6e22e>getElectionQuorum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>electionQuorum</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>DurabilityQuorum</color> <color=#a6e22e>getDurabilityQuorum</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>durabilityQuorum</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setConvertHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>convertHooks</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>convertHooks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>convertHooks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>hook</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>runConvertHooks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>convertHooks</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>h</color> <color=#f8f8f2>:</color> <color=#f8f8f2>convertHooks</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get the group minimum JE version.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Returns the minimum JE version that is required for all nodes that join this node's</color>
<color=#75715e>   * replication group. The version returned is supported by all current and future group members.</color>
<color=#75715e>   * The minimum JE version is guaranteed to only increase over time, so long as the data for the</color>
<color=#75715e>   * environment is not rolled back or lost.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the group minimum JE version</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>JEVersion</color> <color=#a6e22e>getMinJEVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>minJEVersionLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getMinJEVersion</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks if all data nodes in the replication group support the specified JE version. Updates the</color>
<color=#75715e>   * group minimum JE version, and the group format version, as needed to require all nodes joining</color>
<color=#75715e>   * the group to be running at least the specified JE version.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method should only be called on the master, because attempts to update the rep group DB</color>
<color=#75715e>   * on an replica will fail.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newMinJEVersion the new minimum JE version</color>
<color=#75715e>   * @throws DatabaseException if an error occurs when accessing the replication group database</color>
<color=#75715e>   * @throws MinJEVersionUnsupportedException if the version is not supported by one or more current</color>
<color=#75715e>   *     group members</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMinJEVersion</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>newMinJEVersion</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>MinJEVersionUnsupportedException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Synchronize here on minJEVersionLock to prevent new secondary nodes</color>
<color=#75715e>     * from being added while updating the minimum JE version.  Electable</color>
<color=#75715e>     * nodes are stored in the RepGroupDB, so the check performed on that</color>
<color=#75715e>     * class's setMinJEVersion within a transaction insures that all</color>
<color=#75715e>     * current nodes have been checked before the minimum JE version is</color>
<color=#75715e>     * increased.  But secondary nodes are not stored persistently, so</color>
<color=#75715e>     * other synchronization is needed for them.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>minJEVersionLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Check if at least this version is already required */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>groupMinJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getMinJEVersion</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>groupMinJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>newMinJEVersion</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f8f8f2>:</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getDataMembers</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>nodeJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getJEVersion</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getNodeName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>

          <color=#75715e>/* Use the current software version for the local node */</color>
          <color=#f8f8f2>nodeJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentJEVersion</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

          <color=#75715e>/* Use the version recorded by the feeder for replicas */</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f92672>=</color> <color=#f8f8f2>feederManager</color><color=#f8f8f2>.</color><color=#a6e22e>getFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>currentReplicaJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaJEVersion</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentReplicaJEVersion</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>nodeJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>currentReplicaJEVersion</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>nodeJEVersion</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>newMinJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeJEVersion</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MinJEVersionUnsupportedException</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>newMinJEVersion</color><color=#f8f8f2>,</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>nodeJEVersion</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>repGroupDB</color><color=#f8f8f2>.</color><color=#a6e22e>setMinJEVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>newMinJEVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if acks are needed by the group for durability. This is the case if the rep group</color>
<color=#75715e>   * has > 1 data node that's also electable.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNeedsAcks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>needsAcks</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a transient ID node to the group. Assign a node ID and add the node to the RepGroupImpl.</color>
<color=#75715e>   * Don't notify the monitor: transient ID nodes do not generate GroupChangeEvents.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param node the node</color>
<color=#75715e>   * @throws IllegalStateException if the store does not currently support secondary nodes or the</color>
<color=#75715e>   *     node doesn't meet the current minimum JE version</color>
<color=#75715e>   * @throws NodeConflictException if the node conflicts with an existing persistent node</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addTransientIdNode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Attempt to call addTransientIdNode with a"</color> <color=#f92672>+</color> <color=#e6db74>" node without transient ID: "</color> <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>requiredJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>RepGroupImpl</color><color=#f8f8f2>.</color><color=#a6e22e>FORMAT_VERSION_3_JE_VERSION</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setMinJEVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>requiredJEVersion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>MinJEVersionUnsupportedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeVersion</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Secondary nodes are not currently supported."</color>
                <color=#f92672>+</color> <color=#e6db74>" The version running on node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeName</color>
                <color=#f92672>+</color> <color=#e6db74>" could not be determined,"</color>
                <color=#f92672>+</color> <color=#e6db74>" but this feature requires version "</color>
                <color=#f92672>+</color> <color=#f8f8f2>requiredJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getNumericVersionString</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" or later."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Secondary nodes are not currently supported."</color>
              <color=#f92672>+</color> <color=#e6db74>" Node "</color>
              <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeName</color>
              <color=#f92672>+</color> <color=#e6db74>" is running version "</color>
              <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>nodeVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getNumericVersionString</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>", but this feature requires version "</color>
              <color=#f92672>+</color> <color=#f8f8f2>requiredJEVersion</color><color=#f8f8f2>.</color><color=#a6e22e>getNumericVersionString</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" or later."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Synchronize on minJEVersionLock to coordinate with setMinJEVersion</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>minJEVersionLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>minJEVersion</color> <color=#f92672>=</color> <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>getMinJEVersion</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getJEVersion</color><color=#f8f8f2>().</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>minJEVersion</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"The node does not meet the minimum required version"</color>
                <color=#f92672>+</color> <color=#e6db74>" for the group."</color>
                <color=#f92672>+</color> <color=#e6db74>" Node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" is running version "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getJEVersion</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>", but the minimum required version is "</color>
                <color=#f92672>+</color> <color=#f8f8f2>minJEVersion</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>hasNullId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"New "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>().</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" node "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" already has an ID: "</color>
                <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>setId</color><color=#f8f8f2>(</color><color=#f8f8f2>transientIds</color><color=#f8f8f2>.</color><color=#a6e22e>allocateId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>addTransientIdNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Removes a node with transient id from the group. Remove the node from the RepGroupImpl and</color>
<color=#75715e>   * deallocate the node ID.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param node the node</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeTransientNode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Attempt to call removeTransientNode with a"</color> <color=#f92672>+</color> <color=#e6db74>" node without transient ID: "</color> <color=#f92672>+</color> <color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>group</color><color=#f8f8f2>.</color><color=#a6e22e>removeTransientNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>transientIds</color><color=#f8f8f2>.</color><color=#a6e22e>deallocateId</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeId</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>RepElectionsConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ElectionsConfig</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>RepElectionsConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getGroupName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>GROUP_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>NameIdPair</color> <color=#a6e22e>getNameIdPair</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ServiceDispatcher</color> <color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getElectionPriority</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getElectionPriority</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getLogVersion</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>RepImpl</color> <color=#a6e22e>getRepImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>RepNode</color> <color=#a6e22e>getRepNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Track node IDs for node with transient IDs. IDs are allocated from the specified number of</color>
<color=#75715e>   * values at the high end of the range of integers.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>TransientIds</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>BitSet</color> <color=#f8f8f2>bits</color><color=#f8f8f2>;</color>

    <color=#75715e>/** Creates an instance that allocates the specified number of IDs. */</color>
    <color=#f8f8f2>TransientIds</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bits</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BitSet</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Allocates a free ID, throwing IllegalStateException if none are available. */</color>
    <color=#66d9ef>synchronized</color> <color=#66d9ef>int</color> <color=#a6e22e>allocateId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Note that scanning for the next clear bit is somewhat</color>
<color=#75715e>       * inefficient, but this inefficiency shouldn't matter given the</color>
<color=#75715e>       * small number of secondary nodes expected.  If needed, the next</color>
<color=#75715e>       * improvement would probably be to remember the last allocated ID,</color>
<color=#75715e>       * to avoid repeated scans of an initial range of already allocated</color>
<color=#75715e>       * bits.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>bits</color><color=#f8f8f2>.</color><color=#a6e22e>nextClearBit</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pos</color> <color=#f92672>>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"No more secondary node IDs"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>bits</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>-</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Deallocates a previously allocated ID, throwing IllegalArgumentException if the argument was</color>
<color=#75715e>     * not allocated by allocateId or if the ID is not currently allocated.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>deallocateId</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>id</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672><</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>-</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Illegal secondary node ID: "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>-</color> <color=#f8f8f2>id</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>bits</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Secondary node ID is not currently allocated: "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>bits</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>