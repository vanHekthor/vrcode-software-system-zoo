<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.SyncPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.TransactionConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseId</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.ReplicationContext</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.RecoveryManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.SimpleTxnMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.TreeLocation</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.TxnChain.RevertInfo</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.VLSN</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn.NULL_LSN</color><color=#f8f8f2>;</color>

<color=#75715e>/** Used for replaying replicated operations at replica nodes. */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ReplayTxn</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Txn</color> <color=#f8f8f2>{</color>

  <color=#75715e>/* The time the Txn was initiated. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

  <color=#75715e>/* The time the txn was committed or aborted. Zero if in progress */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>endTime</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The last VLSN applied by this txn. Used for sanity checking.</color>
<color=#75715e>   * This field is currently not precisely set when a transaction is</color>
<color=#75715e>   * resurrected. The sanity check could be made more robust by setting</color>
<color=#75715e>   * this field at resurrection.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>VLSN</color> <color=#f8f8f2>lastApplied</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Tracks whether the rep group db was changed by the transaction */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>repGroupDbChange</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* NodeId of the master which initiated the commit or abort. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>masterNodeId</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The DTVLSN to be associated with this replay TXN. It's null for</color>
<color=#75715e>   * ReplayTxns that are actually written as part of a replica to master</color>
<color=#75715e>   * transition.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>SimpleTxnMap</color><color=#f92672><</color><color=#f8f8f2>ReplayTxn</color><color=#f92672>></color> <color=#f8f8f2>activeTxns</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * ReplayTxns are frequently constructed. Don't create its own logger;</color>
<color=#75715e>   * instead, use the Replay's logger.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Used when creating ReplayTxns for Replay. The ReplayTxn adds itself to the activeTxns map. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplayTxn</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>SimpleTxnMap</color><color=#f92672><</color><color=#f8f8f2>ReplayTxn</color><color=#f92672>></color> <color=#f8f8f2>activeTxns</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>,</color> <color=#f8f8f2>logger</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>registerWithActiveTxns</color><color=#f8f8f2>(</color><color=#f8f8f2>activeTxns</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Used when creating ReplayTxns at recovery. No ActiveTxns map is available. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplayTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnId</color><color=#f8f8f2>,</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>// ReplicationContext set later</color>
        <color=#f8f8f2>txnId</color><color=#f8f8f2>);</color> <color=#75715e>// mandatedId</color>
    <color=#75715e>/* Preempt reader transactions when a lock conflict occurs. */</color>
    <color=#f8f8f2>setImportunate</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>logger</color> <color=#f92672>=</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalWrite</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Don't let the ReplayTxn have a timeout of 0. If it did, it could be deadlocked against a reader</color>
<color=#75715e>   * txn. As long as there is a non zero timeout, any conflicts will be adjugated by the LockManager</color>
<color=#75715e>   * in its favor.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>getInitialLockTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getReplayTxnTimeout</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLocalWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getRepGroupDbChange</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repGroupDbChange</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>noteRepGroupDbChange</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>repGroupDbChange</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerWithActiveTxns</color><color=#f8f8f2>(</color><color=#f8f8f2>SimpleTxnMap</color><color=#f92672><</color><color=#f8f8f2>ReplayTxn</color><color=#f92672>></color> <color=#f8f8f2>newActiveTxns</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>activeTxns</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>activeTxns</color> <color=#f92672>=</color> <color=#f8f8f2>newActiveTxns</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>activeTxns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Replay transactions always use the txn id that is included in its replicated operation. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>generateId</color><color=#f8f8f2>(</color><color=#f8f8f2>TxnManager</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>mandatedId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>mandatedId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A ReplayTxn always writes the node ID of the master which generated</color>
<color=#75715e>   * the commit or abort.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>getReplicatorNodeId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>masterNodeId</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Utility method to validate DTVLSN. It ensures that the DTVLSN is not null and that DTVLSN(vlsn)</color>
<color=#75715e>   * <= VLSN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>validateDTVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>txnVLSN</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>checkDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>txnVLSN</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>isNull</color><color=#f8f8f2>(</color><color=#f8f8f2>checkDTVLSN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"DTVLSN("</color> <color=#f92672>+</color> <color=#f8f8f2>txnVLSN</color> <color=#f92672>+</color> <color=#e6db74>") is null"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnVLSN</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Can be null, if this is a in-flight replay Txn that is being</color>
<color=#75715e>       * aborted as part of a replica -> master transition and</color>
<color=#75715e>       * consequently does not have a pre-assigned vlsn; a VLSN will</color>
<color=#75715e>       * be assigned when the abort is actually written</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>checkDTVLSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkDTVLSN</color> <color=#f92672>></color> <color=#f8f8f2>txnVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>getSequence</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"DTVLSN(vlsn)="</color> <color=#f92672>+</color> <color=#f8f8f2>checkDTVLSN</color> <color=#f92672>+</color> <color=#e6db74>" > "</color> <color=#f92672>+</color> <color=#e6db74>"vlsn="</color> <color=#f92672>+</color> <color=#f8f8f2>txnVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>checkDTVLSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Commits the txn being replayed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param syncPolicy to be used for the commit.</color>
<color=#75715e>   * @param clientRepContext the replication context it encapsulates the VLSN associated with the</color>
<color=#75715e>   *     txn.</color>
<color=#75715e>   * @param commitDTVLSN the dtvlsn</color>
<color=#75715e>   * @return the commit LSN</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>commit</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>SyncPolicy</color> <color=#f8f8f2>syncPolicy</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>clientRepContext</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>commitMasterNodeId</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>commitDTVLSN</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"commit called for "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>clientRepContext</color><color=#f8f8f2>);</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>validateDTVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>clientRepContext</color><color=#f8f8f2>.</color><color=#a6e22e>getClientVLSN</color><color=#f8f8f2>(),</color> <color=#f8f8f2>commitDTVLSN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>syncPolicy</color> <color=#f92672>==</color> <color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SYNC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>durability</color> <color=#f92672>=</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>syncPolicy</color> <color=#f92672>==</color> <color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NO_SYNC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>durability</color> <color=#f92672>=</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_NO_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>syncPolicy</color> <color=#f92672>==</color> <color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE_NO_SYNC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>durability</color> <color=#f92672>=</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_WRITE_NO_SYNC</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown sync policy: "</color> <color=#f92672>+</color> <color=#f8f8f2>syncPolicy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Set the master id before commit is called, so getReplicatorNodeId()</color>
<color=#75715e>     * will return this value and write the originating node's id into</color>
<color=#75715e>     * the commit record on this log.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>masterNodeId</color> <color=#f92672>=</color> <color=#f8f8f2>commitMasterNodeId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>durability</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>endTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>commit</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Replay Txn abort semantics require use of internal commit api"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Replay Txn abort semantics require use of internal commit api"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>abort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Replay Txn abort semantics require use of internal abort api"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>forceFlush</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Replay Txn abort semantics require use of internal abort api"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>getDTVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>clientRepContext</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>abortMasterNodeId</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>abortDTVLSN</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>clientRepContext</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>validateDTVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>clientRepContext</color><color=#f8f8f2>.</color><color=#a6e22e>getClientVLSN</color><color=#f8f8f2>(),</color> <color=#f8f8f2>abortDTVLSN</color><color=#f8f8f2>);</color>
    <color=#75715e>/*</color>
<color=#75715e>     * Set the master id before abort is called, so getReplicatorNodeId()</color>
<color=#75715e>     * will return this value and write the originating node's id into</color>
<color=#75715e>     * the abort record on this log.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>masterNodeId</color> <color=#f92672>=</color> <color=#f8f8f2>abortMasterNodeId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/* forceFlush */</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>endTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Always return true in order to ensure that the VLSN is logged. Normally this method returns</color>
<color=#75715e>   * false when no LN has been logged by the txn. But when replaying a Master txn, we need to</color>
<color=#75715e>   * guarantee that the VLSN is logged on the Replica. [#20543]</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateLoggedForTxn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>isCommit</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeTxns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Txn</color> <color=#f8f8f2>removed</color> <color=#f92672>=</color> <color=#f8f8f2>activeTxns</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>getId</color><color=#f8f8f2>());</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>removed</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#e6db74>"txn was not in map "</color> <color=#f92672>+</color> <color=#66d9ef>this</color> <color=#f92672>+</color> <color=#e6db74>" "</color> <color=#f92672>+</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Invoked when a ReplayTxn is being abandoned on shutdown. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>cleanup</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>releaseWriteLocks</color><color=#f8f8f2>();</color>
    <color=#75715e>/* Close the transaction thus causing it to be unregistered. */</color>
    <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Rollback all write operations that are logged with an LSN > the matchpointLsn parameter. This</color>
<color=#75715e>   * is logically a truncation of the log entries written by this transaction. Any log entries</color>
<color=#75715e>   * created by this transaction are marked obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this is by no means a complete implementation of what would be needed to support</color>
<color=#75715e>   * user visible savepoints. This method only rolls back write operations and doesn't handle other</color>
<color=#75715e>   * types of state, like read locks and open cursors.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>There are several key assumptions: - the transaction does not hold read locks. - the</color>
<color=#75715e>   * transaction will either be resumed, and any rolled back operations will be repeated, or the</color>
<color=#75715e>   * transaction will be aborted in its entirety.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If all operations in the transaction are rolled back, this transaction is also unregistered</color>
<color=#75715e>   * and closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Rolling back a log entry through rollback is akin to truncating the transactional log. The</color>
<color=#75715e>   * on-disk entries should not be referred to by anything in the in-memory tree or the transaction</color>
<color=#75715e>   * chain. JE's append only storage and the fact that the transactional log entries are intertwined</color>
<color=#75715e>   * through the physical log prohibits any log truncation. To mimic log truncation, any rolled back</color>
<color=#75715e>   * log entry is marked as obsolete. Since only the last version of any data record is alive, any</color>
<color=#75715e>   * future uses of this transaction must use the obsoleteDupsAllowed option (see</color>
<color=#75715e>   * Txn.countObsoleteExact) to prevent asserts about duplicate obsolete offsets. For example,</color>
<color=#75715e>   * suppose the transaction logs this:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>100 LNa (version1) 200 LNa (version2) 300 LNa (version3)</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>At this point in time, LSN 100 and 200 are obsolete.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Now, suppose we roll back to LSN 100. LSNs 200 and 300 are marked obsolete by the</color>
<color=#75715e>   * rollback.(although LSN 200 was already obsolete). It is true that for an instance in time LSN</color>
<color=#75715e>   * 100 is incorrectly marked as obsolete, when it's really alive. But this transaction is going to</color>
<color=#75715e>   * either abort or resume exactly as it was before, so LSN 100 is going to be obsolete again.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Suppose txn.abort() is called. The abort() logic will mark LSN 100 as obsolete, since it is</color>
<color=#75715e>   * the latest version of the record in the transaction. Using the obsoleteDupsAllowed option</color>
<color=#75715e>   * avoids an assertion on the double recording of LSN 100.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Alternatively, suppose LNa (version2) is retransmitted and logged as LSN 400. Normal</color>
<color=#75715e>   * execution of LN.log() marks LSN 100 as obsolete, which would trigger the assertion were it not</color>
<color=#75715e>   * for obsoleteDupsAllowed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return list of LSNs that were rolled back</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>rollback</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>matchpointLsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>rollbackLsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Partial Rollback of "</color> <color=#f92672>+</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#75715e>/* This transaction didn't log anything, nothing to rollback. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>==</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rollbackLsns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * This transaction doesn't include any operations that are after</color>
<color=#75715e>       * the matchpointLsn. There is nothing to rollback.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>matchpointLsn</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rollbackLsns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>setRollback</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>undoWrites</color><color=#f8f8f2>(</color><color=#f8f8f2>matchpointLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>rollbackLsns</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The call to undoWrites() may have rolled everything back, and set</color>
<color=#75715e>     * lastLoggedLsn to NULL_LSN.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>==</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Everything was rolled back. */</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Purge any databaseImpls not needed as a result of the abort.</color>
<color=#75715e>         * Be sure to do this outside the synchronization block, to</color>
<color=#75715e>         * avoid conflict w/checkpointer.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>cleanupDatabaseImpls</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/* isCommit */</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We don't expect there to be any database handles associated with</color>
<color=#75715e>     * a ReplayTxn, because only DatabaseImpls are used. Because of that,</color>
<color=#75715e>     * there should be no cleanup needed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openedDatabaseHandles</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Replay Txn "</color> <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" has a openedDatabaseHandles"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * There is no need to call cleanupDatabaseImpls if the txn still holds</color>
<color=#75715e>     * locks. The operations in this txn will either be entirely aborted,</color>
<color=#75715e>     * or will be repeated, so any cleanup will happen when the txn ends.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>rollbackLsns</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Rollback the changes to this txn's write locked nodes up to but not including the entry at the</color>
<color=#75715e>   * specified matchpoint. When we log a transactional entry, we record the LSN of the original,</color>
<color=#75715e>   * before-this-transaction version as the abort LSN. This means that if there are multiple updates</color>
<color=#75715e>   * to a given record in a single transaction, each update only references that original version</color>
<color=#75715e>   * and its true predecessor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This was done to streamline abort processing, so that an undo reverts directly to the</color>
<color=#75715e>   * original version rather than stepping through all the intermediates. The intermediates are</color>
<color=#75715e>   * skipped. However, undo to a matchpoint may need to stop at an intermediate point, so we need to</color>
<color=#75715e>   * create a true chain of versions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To do so, we read the transaction backwards from the last logged LSN to reconstruct a</color>
<color=#75715e>   * transaction chain that links intermediate versions of records. For example, suppose our</color>
<color=#75715e>   * transaction looks like this and that we are undoing up to LSN 250</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>lsn=100 node=A (version 1) lsn=200 node=B (version 1) <-- matchpointLsn lsn=300 node=C</color>
<color=#75715e>   * (version 1) lsn=400 node=A (version 2) lsn=500 node=B (version 2) lsn=600 node=A (version 3)</color>
<color=#75715e>   * lsn=700 node=A (version 4)</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To setup the old versions, We walk from LSN 700 -> 100 700 (A) rolls back to 600 600 (A)</color>
<color=#75715e>   * rolls back to 400 500 (B) rolls back to 200 400 (A) rolls back to 100 300 (C) rolls back to an</color>
<color=#75715e>   * empty slot (NULL_LSN).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A partial rollback also requires resetting the lastLoggedLsn field, because these operations</color>
<color=#75715e>   * are no longer in the btree and their on-disk entries are no longer valid.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Lastly, the appropriate write locks must be released.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param matchpointLsn the rollback should go up to but not include this LSN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>undoWrites</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>matchpointLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>rollbackLsns</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Generate a map of node->List of intermediate LSNs for this node.</color>
<color=#75715e>     * to re-create the transaction chain.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>TreeLocation</color> <color=#f8f8f2>location</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeLocation</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Long</color> <color=#f8f8f2>undoLsn</color> <color=#f92672>=</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>TxnChain</color> <color=#f8f8f2>chain</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TxnChain</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>matchpointLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>undoLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>matchpointLsn</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>UndoReader</color> <color=#f8f8f2>undo</color> <color=#f92672>=</color> <color=#f8f8f2>UndoReader</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>RevertInfo</color> <color=#f8f8f2>revertTo</color> <color=#f92672>=</color> <color=#f8f8f2>chain</color><color=#f8f8f2>.</color><color=#a6e22e>pop</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>logFinest</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>,</color> <color=#f8f8f2>revertTo</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * When we undo this log entry, we've logically truncated</color>
<color=#75715e>         * it from the log. Remove it from the btree and mark it</color>
<color=#75715e>         * obsolete.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>RecoveryManager</color><color=#f8f8f2>.</color><color=#a6e22e>rollbackUndo</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINER</color><color=#f8f8f2>,</color> <color=#f8f8f2>location</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>revertTo</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>countObsoleteInexact</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rollbackLsns</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Move on to the previous log entry for this txn and update</color>
<color=#75715e>         * what is considered to be the end of the transaction chain.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>undoLsn</color> <color=#f92672>=</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getUserTxn</color><color=#f8f8f2>().</color><color=#a6e22e>getLastLsn</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>undoLsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Correct the fields which hold LSN and VLSN state that may</color>
<color=#75715e>       * now be changed.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>lastApplied</color> <color=#f92672>=</color> <color=#f8f8f2>chain</color><color=#f8f8f2>.</color><color=#a6e22e>getLastValidVLSN</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>updateLoggedForTxn</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>firstLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>traceAndLogException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Txn"</color><color=#f8f8f2>,</color> <color=#e6db74>"undo"</color><color=#f8f8f2>,</color> <color=#e6db74>"For LSN="</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Txn undo for LSN="</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The whole txn is rolled back, and it may not appear again. This</color>
<color=#75715e>       * is the equivalent of an abort. Do any delete processing for an</color>
<color=#75715e>       * abort which is needed.</color>
<color=#75715e>       *</color>
<color=#75715e>       * Set database state for deletes before releasing any write</color>
<color=#75715e>       * locks.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>setDeletedDatabaseState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Clear any write locks that are no longer needed. */</color>
    <color=#f8f8f2>clearWriteLocks</color><color=#f8f8f2>(</color><color=#f8f8f2>chain</color><color=#f8f8f2>.</color><color=#a6e22e>getRemainingLockedNodes</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Count an LN obsolete that is being made invisble by rollback.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Use inexact counting. Since invisible entries are not processed by the cleaner, recording</color>
<color=#75715e>   * the obsolete offset would be a waste of resources. Since we don't count offsets, we don't need</color>
<color=#75715e>   * to worry about duplicate offsets.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Some entries may be double counted if they were previously counted obsolete, for example,</color>
<color=#75715e>   * when multiple versions of an LN were logged. This is tolerated for an exceptional situation</color>
<color=#75715e>   * like rollback.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>countObsoleteInexact</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>UndoReader</color> <color=#f8f8f2>undo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * "Immediately obsolete" LNs are counted as obsolete when they are</color>
<color=#75715e>     * logged, so no need to repeat here.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>isImmediatelyObsolete</color><color=#f8f8f2>(</color><color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>envImpl</color>
        <color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>.</color><color=#a6e22e>countObsoleteNode</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>/*type*/</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntrySize</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*countExact*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the elapsed time associated with this transaction. If the transaction is in progress,</color>
<color=#75715e>   * it returns the running elapsed time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the elapsed time as above.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>elapsedTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>endTime</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>endTime</color> <color=#f8f8f2>:</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>())</color> <color=#f92672>-</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the time when this transaction was committed or aborted. Returns zero if the</color>
<color=#75715e>   * transaction is still in progress.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the end time or zero</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getEndTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>endTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLastAppliedVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>justApplied</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>justApplied</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>lastApplied</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Txn "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" attempted VLSN = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>justApplied</color>
              <color=#f92672>+</color> <color=#e6db74>" txnLastApplied = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>lastApplied</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lastApplied</color> <color=#f92672>=</color> <color=#f8f8f2>justApplied</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** ReplicatedTxns set it when the txn commit or abort arrives. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRepContext</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color> <color=#f92672>=</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Wrap the call to logger to reduce runtime overhead. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>logFinest</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>UndoReader</color> <color=#f8f8f2>undo</color><color=#f8f8f2>,</color> <color=#f8f8f2>RevertInfo</color> <color=#f8f8f2>revertTo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>logger</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>finest</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"undoLsn="</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" undo="</color> <color=#f92672>+</color> <color=#f8f8f2>undo</color> <color=#f92672>+</color> <color=#e6db74>" revertInfo="</color> <color=#f92672>+</color> <color=#f8f8f2>revertTo</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#e6db74>"<ReplayTxn id=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Copy all collections that will be needed to convert masterTxn to this</color>
<color=#75715e>   * ReplayTxn. Note that we do not need to copy the openDatabaseHandle</color>
<color=#75715e>   * collection.  That collection is only needed by an application-facing</color>
<color=#75715e>   * Txn, so that those database handles can be invalidated if</color>
<color=#75715e>   * needed. ReplayTxn is not application-facing, and uses DatabaseImpls</color>
<color=#75715e>   * rather than Databases.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>copyDatabasesForConversion</color><color=#f8f8f2>(</color><color=#f8f8f2>Txn</color> <color=#f8f8f2>masterTxn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getUndoDatabases</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>undoDatabases</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>undoDatabases</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>putAll</color><color=#f8f8f2>(</color><color=#f8f8f2>masterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getUndoDatabases</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getDeletedDatabases</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deletedDatabases</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>deletedDatabases</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>deletedDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>masterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getDeletedDatabases</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Transfer a lock from another transaction to this one. Used for master-> replica transitions,</color>
<color=#75715e>   * when a node has to transform a MasterTxn into a ReplayTxn. Another approach would be to have</color>
<color=#75715e>   * this importunate ReplayTxn call lock() on the lsn, but that path is not available because we do</color>
<color=#75715e>   * not have a handle on a databaseImpl.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>stealLockFromMasterTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LockAttemptResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>stealLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Assert, and if something strange happened, opt to invalidate</color>
<color=#75715e>     * the environment and wipe the slate clean.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
          <color=#e6db74>"Transferring from master to replica state, txn "</color>
              <color=#f92672>+</color> <color=#f8f8f2>getId</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" was unable to transfer lock for "</color>
              <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color>
              <color=#f92672>+</color> <color=#e6db74>", lock grant type="</color>
              <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>addLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>),</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>addLogInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>