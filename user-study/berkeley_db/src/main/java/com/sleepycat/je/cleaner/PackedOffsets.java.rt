<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.cleaner</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.Loggable</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Stores a sorted list of LSN offsets in a packed short representation. Each stored value is the</color>
<color=#75715e> * difference between two consecutive offsets. The stored values are stored as one or more shorts</color>
<color=#75715e> * where each short holds 0x7fff values. Shorts are in LSB order. The value is negated if more</color>
<color=#75715e> * shorts for the same offset follow; this works because offsets are always positive values.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>PackedOffsets</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Loggable</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates an empty object. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>PackedOffsets</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Verify assumption in FileSummaryLN that a new PackedOffsets instance</color>
<color=#75715e>     * has no extra extra memory that must be budgeted.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>getExtraMemorySize</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns an iterator over all offsets. */</color>
  <color=#f8f8f2>Iterator</color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Packs the given offsets, replacing any offsets stored in this object. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>pack</color><color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Allocate a maximum sized new data array. */</color>
    <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>newData</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>offsets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Pack the sorted offsets. */</color>
    <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>offsets</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>dataIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>priorVal</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>offsets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>dataIndex</color> <color=#f92672>=</color> <color=#f8f8f2>append</color><color=#f8f8f2>(</color><color=#f8f8f2>newData</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color> <color=#f92672>-</color> <color=#f8f8f2>priorVal</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>priorVal</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Copy in the exact sized new data. */</color>
    <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>dataIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>newData</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the unpacked offsets. */</color>
  <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>toArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Iterator</color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>offsets</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Copies the given value as a packed long to the array starting at the given index. Returns the</color>
<color=#75715e>   * index of the next position in the array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>to</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>val</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>short</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>&</color> <color=#ae81ff>0x7fff</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>val</color> <color=#f92672>>>>=</color> <color=#ae81ff>15</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>to</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>s</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>to</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>s</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** An iterator over all offsets. */</color>
  <color=#66d9ef>class</color> <color=#a6e22e>Iterator</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>priorVal</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>Iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>priorVal</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>shift</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>shift</color> <color=#f92672>+=</color> <color=#ae81ff>15</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>val</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>s</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#f8f8f2>shift</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>val</color> <color=#f92672>+=</color> <color=#f8f8f2>s</color> <color=#f92672><<</color> <color=#f8f8f2>shift</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>priorVal</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the extra memory used by this object when the pack() method has been called to allocate</color>
<color=#75715e>   * the data array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getExtraMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>shortArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#getLogSize */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>*</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT_BYTES</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#writeToLog */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedInt</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#readFromLog */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>unpacked</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>6</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>unpacked</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#dumpLog */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>iterator</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<offsets size=\""</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"0x"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>' '</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</offsets>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<offsets size=\"0\"/>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Never called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Loggable#getTransactionId</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTransactionId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @see Loggable#logicalEquals Always return false, this item should never be compared. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>logicalEquals</color><color=#f8f8f2>(</color><color=#f8f8f2>Loggable</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>