<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * LockConflict is a type safe enumeration of lock conflict types. Methods on LockConflict objects</color>
<color=#75715e> * are used to determine whether a conflict exists and, if so, how it should be handled.</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>LockConflict</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockConflict</color> <color=#f8f8f2>ALLOW</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockConflict</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockConflict</color> <color=#f8f8f2>BLOCK</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockConflict</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockConflict</color> <color=#f8f8f2>RESTART</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockConflict</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowed</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>restart</color><color=#f8f8f2>;</color>

  <color=#75715e>/** No conflict types can be defined outside this class. */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>LockConflict</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowed</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>restart</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowed</color> <color=#f92672>=</color> <color=#f8f8f2>allowed</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>restart</color> <color=#f92672>=</color> <color=#f8f8f2>restart</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is called first to determine whether the locks is allowed. If true, there is no</color>
<color=#75715e>   * conflict. If false, there is a conflict and the requester must wait for or be denied the lock,</color>
<color=#75715e>   * or (if getRestart returns true) an exception should be thrown to cause the requester's</color>
<color=#75715e>   * operation to be restarted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>allowed</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is called when getAllowed returns false to determine whether an exception should be</color>
<color=#75715e>   * thrown to cause the requester's operation to be restarted. If getAllowed returns false and this</color>
<color=#75715e>   * method returns false, the requester should wait for or be denied the lock, depending on the</color>
<color=#75715e>   * request mode. If getAllowed returns true, this method will always return false.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getRestart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>restart</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>