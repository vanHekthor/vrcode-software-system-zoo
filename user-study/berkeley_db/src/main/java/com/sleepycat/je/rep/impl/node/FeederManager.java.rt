<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.ReplicaAckPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.SyncPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.NodeType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.UnknownMasterException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepNodeImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn.LocalCBVLSNTracker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.cbvlsn.LocalCBVLSNUpdater</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.stream.MasterStatus.MasterSyncException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.txn.MasterTxn</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.BinaryProtocolStatDefinition</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.IntRunningTotalStat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.SizeAwaitMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.SizeAwaitMap.Predicate</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map.Entry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.BlockingQueue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.LinkedBlockingQueue</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicBoolean</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.node.FeederManagerStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>java.util.concurrent.TimeUnit.MINUTES</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * FeedManager is responsible for the creation and management of the Feeders used to respond to</color>
<color=#75715e> * connections initiated by a Replica. runfeeders() is the central loop that listens for replica</color>
<color=#75715e> * connections and manages the lifecycle of individual Feeders. It's re-entered each time the node</color>
<color=#75715e> * becomes a Master and is exited when its status changes.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There is a single instance of FeederManager that is created for a replication node. There are</color>
<color=#75715e> * many instances of Feeders per FeederManager. Each Feeder instance represents an instance of a</color>
<color=#75715e> * connection between the node serving as the feeder and the replica.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the FeederManager and the Replica currently reuse the Replication node's thread of</color>
<color=#75715e> * control. When we implement r2r we will need to revisit the thread management to provide for</color>
<color=#75715e> * concurrent operation of the FeederManger and the Replica.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>FeederManager</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The queue into which the ServiceDispatcher queues socket channels for</color>
<color=#75715e>   * new Feeder instances.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>BlockingQueue</color><color=#f92672><</color><color=#f8f8f2>DataChannel</color><color=#f92672>></color> <color=#f8f8f2>channelQueue</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedBlockingQueue</color><color=#f92672><</color><color=#f8f8f2>DataChannel</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Feeders are stored in either nascentFeeders or activeFeeders, and not</color>
<color=#75715e>   * both.  To avoid deadlock, if locking both collections, lock</color>
<color=#75715e>   * nascentFeeders first and then activeFeeders.</color>
<color=#75715e>   */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Nascent feeders that are starting up and are not yet active. They have</color>
<color=#75715e>   * network connections but have not synched up or completed handshakes.</color>
<color=#75715e>   * They are moved into the active feeder map, once they become active.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#f8f8f2>nascentFeeders</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>synchronizedSet</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Feeder</color><color=#f92672>></color><color=#f8f8f2>());</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The collection of active feeders currently feeding replicas. The map is</color>
<color=#75715e>   * indexed by the Replica's node name. Access to this map must be</color>
<color=#75715e>   * synchronized, since it's updated concurrently by the Feeders that share</color>
<color=#75715e>   * it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * A feeder is considered to be active after it has completed the handshake</color>
<color=#75715e>   * sequence with its associated Replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * Note that the SizeAwaitMap will only wait for feeders that are connected</color>
<color=#75715e>   * to electable replicas, since those are the only ones participating in</color>
<color=#75715e>   * durability decisions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SizeAwaitMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The number of active ack feeders feeding electable, i.e. acking, nodes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>ackFeeders</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The number of arbiter feeders; there can only be one currently. It's</color>
<color=#75715e>   * Atomic for consistency with ackFeeders.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>arbiterFeeders</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>arbiterFeederName</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A test delay introduced in the feeder loop to simulate a loaded master.</color>
<color=#75715e>   * The feeder waits this amount of time after each message is sent.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>testDelayMs</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Set to true to force a shutdown of the FeederManager. */</color>
  <color=#f8f8f2>AtomicBoolean</color> <color=#f8f8f2>shutdown</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Non null if the replication node must be shutdown as well. This is</color>
<color=#75715e>   * typically the result of an unexpected exception in the feeder.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>repNodeShutdownException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Used to manage the flushing of the DTVLSN via a null TXN commit when appropriate. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DTVLSNFlusher</color> <color=#f8f8f2>dtvlsnFlusher</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color><color=#f8f8f2>;</color>

  <color=#75715e>/* FeederManager statistics. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>nFeedersCreated</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>nFeedersShutdown</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongDiffMapStat</color> <color=#f8f8f2>replicaDelayMap</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongMapStat</color> <color=#f8f8f2>replicaLastCommitTimestampMap</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicLongMapStat</color> <color=#f8f8f2>replicaLastCommitVLSNMap</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongDiffMapStat</color> <color=#f8f8f2>replicaVLSNLagMap</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongAvgRateMapStat</color> <color=#f8f8f2>replicaVLSNRateMap</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The maximum lag across all replicas. Atomic values or synchronization</color>
<color=#75715e>   * are not used for the shared statistic to minimize overheads and the</color>
<color=#75715e>   * resulting occasional inaccuracy in the statics is an acceptable</color>
<color=#75715e>   * tradeoff.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongMaxZeroStat</color> <color=#f8f8f2>nMaxReplicaLag</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StringStat</color> <color=#f8f8f2>nMaxReplicaLagName</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The poll timeout used when accepting feeder connections. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pollTimeoutMs</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Identifies the Feeder Service. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FEEDER_SERVICE</color> <color=#f92672>=</color> <color=#e6db74>"Feeder"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The moving average period in milliseconds */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>MOVING_AVG_PERIOD_MILLIS</color> <color=#f92672>=</color> <color=#ae81ff>10000</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A test hook, parameterized by feeder's Name/ID pair, that delays CBVLSN updates if it throws an</color>
<color=#75715e>   * IllegalStateException.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>NameIdPair</color><color=#f92672>></color> <color=#f8f8f2>delayCBVLSNUpdateHook</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>FeederManager</color><color=#f8f8f2>(</color><color=#f8f8f2>RepNode</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNode</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>activeFeeders</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>SizeAwaitMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>MatchElectableFeeders</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>stats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>FeederManagerStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>FeederManagerStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nFeedersCreated</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntRunningTotalStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>N_FEEDERS_CREATED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nFeedersShutdown</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntRunningTotalStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>N_FEEDERS_SHUTDOWN</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nMaxReplicaLag</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongMaxZeroStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>N_MAX_REPLICA_LAG</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nMaxReplicaLagName</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>N_MAX_REPLICA_LAG_NAME</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Treat delays and lags as valid for twice the heartbeat interval, to</color>
<color=#75715e>     * allow for minor networking delays when receiving heartbeats</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>validityMillis</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getHeartbeatInterval</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>replicaDelayMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongDiffMapStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>REPLICA_DELAY_MAP</color><color=#f8f8f2>,</color> <color=#f8f8f2>validityMillis</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replicaLastCommitTimestampMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongMapStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>REPLICA_LAST_COMMIT_TIMESTAMP_MAP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replicaLastCommitVLSNMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicLongMapStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>REPLICA_LAST_COMMIT_VLSN_MAP</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replicaVLSNLagMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongDiffMapStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>REPLICA_VLSN_LAG_MAP</color><color=#f8f8f2>,</color> <color=#f8f8f2>validityMillis</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>replicaVLSNRateMap</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>LongAvgRateMapStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>REPLICA_VLSN_RATE_MAP</color><color=#f8f8f2>,</color> <color=#f8f8f2>MOVING_AVG_PERIOD_MILLIS</color><color=#f8f8f2>,</color> <color=#f8f8f2>MINUTES</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>pollTimeoutMs</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getDuration</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>FEEDER_MANAGER_POLL_TIMEOUT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dtvlsnFlusher</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DTVLSNFlusher</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A SizeAwaitMap predicate that matches feeders connected to electable replicas. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>MatchElectableFeeders</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Predicate</color><color=#f92672><</color><color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>match</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Feeder</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* The replica node might be null during unit testing */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>replica</color> <color=#f92672>=</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>replica</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getDurabilityQuorum</color><color=#f8f8f2>().</color><color=#a6e22e>replicaAcksQualify</color><color=#f8f8f2>(</color><color=#f8f8f2>replica</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the statistics associated with the FeederManager.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the statistics</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getFeederManagerStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Get the protocol stats for this FeederManager. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>getProtocolStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Aggregate stats that have not yet been aggregated. */</color>
    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>protocolStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BinaryProtocolStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>BinaryProtocolStatDefinition</color><color=#f8f8f2>.</color><color=#a6e22e>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f8f8f2>:</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>protocolStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocolStats</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>protocolStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Reset the feeders' stats of this FeederManager. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resetStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f8f8f2>:</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>resetStats</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Accumulates statistics from a terminating feeder.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param feederStats stats of feeder</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>incStats</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>feederStats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>feederStats</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTestDelayMs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>testDelayMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTestDelayMs</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>testDelayMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>testDelayMs</color> <color=#f92672>=</color> <color=#f8f8f2>testDelayMs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the RepNode associated with the FeederManager</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>RepNode</color> <color=#a6e22e>repNode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the Feeder associated with the node, if such a feeder is currently active. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Feeder</color> <color=#a6e22e>getFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Feeder</color> <color=#a6e22e>getArbiterFeeder</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>arbiterFeederName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For test use only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Feeder</color> <color=#a6e22e>putFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * Can't check for an electable node since the feeder object can be</color>
<color=#75715e>     * mocked for testing so it does not have a rep node.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ackFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>,</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>LongMaxZeroStat</color> <color=#a6e22e>getnMaxReplicaLag</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nMaxReplicaLag</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StringStat</color> <color=#a6e22e>getnMaxReplicaLagName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nMaxReplicaLagName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>LongDiffMapStat</color> <color=#a6e22e>getReplicaDelayMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicaDelayMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>AtomicLongMapStat</color> <color=#a6e22e>getReplicaLastCommitTimestampMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicaLastCommitTimestampMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>AtomicLongMapStat</color> <color=#a6e22e>getReplicaLastCommitVLSNMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicaLastCommitVLSNMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>LongDiffMapStat</color> <color=#a6e22e>getReplicaVLSNLagMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicaVLSNLagMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#f8f8f2>LongAvgRateMapStat</color> <color=#a6e22e>getReplicaVLSNRateMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>replicaVLSNRateMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>void</color> <color=#a6e22e>setRepNodeShutdownException</color><color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>rNSE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNodeShutdownException</color> <color=#f92672>=</color> <color=#f8f8f2>rNSE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The numbers of Replicas currently "active" with this feeder. Active currently means they are</color>
<color=#75715e>   * connected. It does not make any guarantees about where they are in the replication stream. They</color>
<color=#75715e>   * may, for example, be too far behind to participate in timely acks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the active replica count</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>activeReplicaCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>activeAckReplicaCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ackFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>activeAckArbiterCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>arbiterFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the set of Replicas that are currently active with this feeder. A replica is active if</color>
<color=#75715e>   * it has completed the handshake sequence.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the set of replica node names</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>activeReplicas</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Create a copy to avoid inadvertent concurrency conflicts,</color>
<color=#75715e>       * since the keySet is a view of the underlying map.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the set of active replicas and arbiters, that are currently active with this feeder and</color>
<color=#75715e>   * are supplying acknowledgments. A replica is active if it has completed the handshake sequence.</color>
<color=#75715e>   * An Arbiter is only returned if it's in active arbitration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param includeArbiters include active arbiters in the list of returned node names if true;</color>
<color=#75715e>   *     exclude arbiters otherwise.</color>
<color=#75715e>   * @return the set of replica and if includeArbiters active arbiter node names</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>activeAckReplicas</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>includeArbiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>nodeNames</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>

        <color=#75715e>/* The replica node should be non-null for an active feeder */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>replica</color> <color=#f92672>=</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replica</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isArbiter</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>includeArbiters</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getRepNode</color><color=#f8f8f2>().</color><color=#a6e22e>getArbiter</color><color=#f8f8f2>().</color><color=#a6e22e>isActive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Skip the arbiter. */</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>nodeNames</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeNames</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#a6e22e>activeReplicasMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Transitions a Feeder to being active, so that it can be used in considerations relating to</color>
<color=#75715e>   * commit acknowledgments and decisions about choosing feeders related to system load.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param feeder the feeder being transitioned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>activateFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>removed</color> <color=#f92672>=</color> <color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>removed</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>replicaName</color> <color=#f92672>=</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>NameIdPair</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>Feeder</color> <color=#f8f8f2>dup</color> <color=#f92672>=</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>replicaName</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>dup</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>dup</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
              <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNameIdPair</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" is present in both nascent and "</color>
                  <color=#f92672>+</color> <color=#e6db74>"active feeder sets"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>replicaName</color><color=#f8f8f2>,</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>().</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isArbiter</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiterFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>arbiterFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>arbiterFeederName</color> <color=#f92672>=</color> <color=#f8f8f2>replicaName</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>().</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ackFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>incrementAndGet</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>MasterTransfer</color> <color=#f8f8f2>xfr</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getActiveTransfer</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xfr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>xfr</color><color=#f8f8f2>.</color><color=#a6e22e>addFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Remove the feeder from the sets used to track it. Invoked when a feeder is shutdown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param feeder</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdown</color><color=#f8f8f2>());</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>replicaName</color> <color=#f92672>=</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNameIdPair</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>replicaName</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>arbiterFeederName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>arbiterFeederName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>replicaName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>arbiterFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>arbiterFeederName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>().</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>isElectable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ackFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>decrementAndGet</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>node</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>().</color><color=#a6e22e>hasTransientId</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>removeTransientNode</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Clears and shuts down the runFeeders by inserting a special EOF marker value into the queue.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>shutdownQueue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Rep node is still active"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>channelQueue</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#75715e>/* Add special entry so that the channelQueue.poll operation exits. */</color>
    <color=#f8f8f2>channelQueue</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_EOF_MARKER</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The core feeder listener loop that is run either in a Master node, or in a Replica that is</color>
<color=#75715e>   * serving as a Feeder to other Replica nodes. The core loop accepts connections from Replicas as</color>
<color=#75715e>   * they come in and establishes a Feeder on that connection.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The loop can be terminated for one of the following reasons:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1) A change in Masters.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>2) A forced shutdown, via a thread interrupt.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>3) A server socket level exception.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The timeout on the accept is used to ensure that the check is done at least once per timeout</color>
<color=#75715e>   * period.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>runFeeders</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"Feeder manager was shutdown"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Exception</color> <color=#f8f8f2>feederShutdownException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Feeder manager accepting requests."</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Init GlobalCBVLSN using minJEVersion in the rep group DB. */</color>
    <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getMinJEVersion</color><color=#f8f8f2>());</color>

    <color=#75715e>/* This updater represents the masters's local cbvlsn, which the master</color>
<color=#75715e>    updates directly. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LocalCBVLSNUpdater</color> <color=#f8f8f2>updater</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>LocalCBVLSNUpdater</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>(),</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LocalCBVLSNTracker</color> <color=#f8f8f2>tracker</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getCBVLSNTracker</color><color=#f8f8f2>();</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Ensure that the Global CBVLSN is initialized for the master when</color>
<color=#75715e>       * it first comes up; it's subsequently maintained in the loop</color>
<color=#75715e>       * below.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>updater</color><color=#f8f8f2>.</color><color=#a6e22e>updateForMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>tracker</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>().</color><color=#a6e22e>register</color><color=#f8f8f2>(</color><color=#f8f8f2>FEEDER_SERVICE</color><color=#f8f8f2>,</color> <color=#f8f8f2>channelQueue</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The Feeder is ready for business, indicate that the node is</color>
<color=#75715e>       * ready by counting down the latch and releasing any waiters.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getReadyLatch</color><color=#f8f8f2>().</color><color=#a6e22e>countDown</color><color=#f8f8f2>();</color>

      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>DataChannel</color> <color=#f8f8f2>feederReplicaChannel</color> <color=#f92672>=</color>
            <color=#f8f8f2>channelQueue</color><color=#f8f8f2>.</color><color=#a6e22e>poll</color><color=#f8f8f2>(</color><color=#f8f8f2>pollTimeoutMs</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederReplicaChannel</color> <color=#f92672>==</color> <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_EOF_MARKER</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Feeder manager soft shutdown."</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getMasterStatus</color><color=#f8f8f2>().</color><color=#a6e22e>assertSync</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederReplicaChannel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdownOrInvalid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Timeout and shutdown request */</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Feeder manager forced shutdown."</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Simulate extending the polling period for channel input</color>
<color=#75715e>           * by delay updating the CBVLSN, to allow tests to control</color>
<color=#75715e>           * the timing.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>TestHookExecute</color><color=#f8f8f2>.</color><color=#a6e22e>doHookIfSet</color><color=#f8f8f2>(</color><color=#f8f8f2>delayCBVLSNUpdateHook</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalStateException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Take this opportunity to update this node's CBVLSN The</color>
<color=#75715e>           * replicas are sending in their CBVLSNs through the</color>
<color=#75715e>           * heartbeat responses, but a master does not send any</color>
<color=#75715e>           * heartbeat responses, and needs a different path to</color>
<color=#75715e>           * update its local CBVLSN.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>updater</color><color=#f8f8f2>.</color><color=#a6e22e>updateForMaster</color><color=#f8f8f2>(</color><color=#f8f8f2>tracker</color><color=#f8f8f2>);</color>

          <color=#75715e>/* Flush the DTVLSN if it's warranted. */</color>
          <color=#f8f8f2>dtvlsnFlusher</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Opportunistically attempt to update minJEVersion.</color>
<color=#75715e>           * This must be done while the feeder is active.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>globalCBVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>setDefunctJEVersion</color><color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>);</color>

          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>nFeedersCreated</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Feeder</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>feederReplicaChannel</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>startFeederThreads</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Indicates a feeder socket level exception.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Feeder I/O exception: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>feederReplicaChannel</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Exception during cleanup."</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>MasterSyncException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Master change: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>

      <color=#f8f8f2>feederShutdownException</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>UnknownMasterException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Node "</color> <color=#f92672>+</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" is not a master anymore"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repNodeShutdownException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The interrupt was issued to propagate an exception from one</color>
<color=#75715e>         * of the Feeder threads. It's not a normal exit.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Feeder manager unexpected interrupt"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>repNodeShutdownException</color><color=#f8f8f2>;</color> <color=#75715e>/* Terminate the rep node */</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>isShutdown</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Feeder manager interrupted for shutdown"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>feederShutdownException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color> <color=#e6db74>"Feeder manager unexpected interrupt"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>resetReadyLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>feederShutdownException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceDispatcher</color><color=#f8f8f2>().</color><color=#a6e22e>cancel</color><color=#f8f8f2>(</color><color=#f8f8f2>FEEDER_SERVICE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>shutdownFeeders</color><color=#f8f8f2>(</color><color=#f8f8f2>feederShutdownException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
          <color=#e6db74>"Feeder manager exited. CurrentTxnEnd VLSN: "</color> <color=#f92672>+</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentTxnEndVLSN</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shuts down all the feeders managed by the FeederManager</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param feederShutdownException the exception provoking the shutdown.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownFeeders</color><color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>feederShutdownException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#f8f8f2>shutdown</color><color=#f8f8f2>.</color><color=#a6e22e>compareAndSet</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>changed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Copy sets for safe iteration in the presence of deletes.*/</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#f8f8f2>feederSet</color><color=#f8f8f2>;</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>feederSet</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Feeder</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>feederSet</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f8f8f2>:</color> <color=#f8f8f2>feederSet</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nFeedersShutdown</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>(</color><color=#f8f8f2>feederShutdownException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feederShutdownException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>feederShutdownException</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"FeederManager shutdown"</color><color=#f8f8f2>);</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Release any threads that may have been waiting, but</color>
<color=#75715e>         * don't throw any exception</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>(</color><color=#f8f8f2>feederShutdownException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>nascentFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Shuts down a specific feeder. It's typically done in response to the removal of a member from</color>
<color=#75715e>   * the group.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>shutdownFeeder</color><color=#f8f8f2>(</color><color=#f8f8f2>RepNodeImpl</color> <color=#f8f8f2>node</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f92672>=</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeder</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>nFeedersShutdown</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>shutdown</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Block until the required number of electable feeders/replica connections are established. Used</color>
<color=#75715e>   * for establishing durability quorums. Since this is counting feeder/replica connections,</color>
<color=#75715e>   * requiredReplicaCount does not include the master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the future this could be improved by also taking account the position of each feeder. If</color>
<color=#75715e>   * a feeder is lagging far behind the master and this is likely to prevent commit, we may want to</color>
<color=#75715e>   * reject the transaction at the outset to reduce the number of wasted txns/aborts. A special case</color>
<color=#75715e>   * is when the replica is in out-of-disk mode and not acking at all.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>awaitFeederReplicaConnections</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>requiredReplicaCount</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>insufficientReplicasTimeout</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>sizeAwait</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>requiredReplicaCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>insufficientReplicasTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MILLISECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * For debugging help, and for expanded exception messages, dump feeder</color>
<color=#75715e>   * related state.  If acksOnly is true, only include information about</color>
<color=#75715e>   * feeders for replicas that supply acknowledgments.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpState</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>acksOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>>></color> <color=#f8f8f2>feeds</color> <color=#f92672>=</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>feeds</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"No feeders."</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Current feeds:"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Feeder</color><color=#f92672>></color> <color=#f8f8f2>feedEntry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>feeds</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f92672>=</color> <color=#f8f8f2>feedEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Ignore secondary and external nodes if only want nodes</color>
<color=#75715e>           * that provide acknowledgments</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>acksOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>NodeType</color> <color=#f8f8f2>nodeType</color> <color=#f92672>=</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>().</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isSecondary</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>nodeType</color><color=#f8f8f2>.</color><color=#a6e22e>isExternal</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>feedEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>": "</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>dumpState</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a count of the number of feeders whose replicas are counted in durability decisions and</color>
<color=#75715e>   * have acknowledged txn-end VLSNs >= the commitVLSN argument.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param commitVLSN the commitVLSN being checked</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumCurrentAckFeeders</color><color=#f8f8f2>(</color><color=#f8f8f2>VLSN</color> <color=#f8f8f2>commitVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>DurabilityQuorum</color> <color=#f8f8f2>durabilityQuorum</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getDurabilityQuorum</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f8f8f2>:</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>commitVLSN</color><color=#f8f8f2>.</color><color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaTxnEndVLSN</color><color=#f8f8f2>())</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
            <color=#f92672>&&</color> <color=#f8f8f2>durabilityQuorum</color><color=#f8f8f2>.</color><color=#a6e22e>replicaAcksQualify</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Update the Master's DTVLSN if we can conclude based upon the state of the replicas that the</color>
<color=#75715e>   * DTVLSN needs to be advanced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is invoked when a replica heartbeat reports a more recent txn VLSN. This</color>
<color=#75715e>   * (sometimes) redundant form of DTVLS update is useful in circumstances when the value could not</color>
<color=#75715e>   * be maintained via the usual ack response processing:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1) The application is using no ack transactions explicitly.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>2) There were ack transaction timeouts due to network problems and the acks were never</color>
<color=#75715e>   * received or were received after the timeout had expired.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>updateDTVLSN</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>heartbeatVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>currDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getDTVLSN</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>heartbeatVLSN</color> <color=#f92672><=</color> <color=#f8f8f2>currDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Nothing to update, a lagging replica that's catching up */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DurabilityQuorum</color> <color=#f8f8f2>durabilityQuorum</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getDurabilityQuorum</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>durableAckCount</color> <color=#f92672>=</color>
        <color=#f8f8f2>durabilityQuorum</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentRequiredAckCount</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SIMPLE_MAJORITY</color><color=#f8f8f2>);</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>min</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>activeFeeders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>ackCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Feeder</color> <color=#f8f8f2>feeder</color> <color=#f8f8f2>:</color> <color=#f8f8f2>activeFeeders</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>durabilityQuorum</color><color=#f8f8f2>.</color><color=#a6e22e>replicaAcksQualify</color><color=#f8f8f2>(</color><color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaNode</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>replicaTxnVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>feeder</color><color=#f8f8f2>.</color><color=#a6e22e>getReplicaTxnEndVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>getSequence</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicaTxnVLSN</color> <color=#f92672><=</color> <color=#f8f8f2>currDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>replicaTxnVLSN</color> <color=#f92672><</color> <color=#f8f8f2>min</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>min</color> <color=#f92672>=</color> <color=#f8f8f2>replicaTxnVLSN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>++</color><color=#f8f8f2>ackCount</color> <color=#f92672>>=</color> <color=#f8f8f2>durableAckCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * If a majority of replicas have vlsns >= durable txn</color>
<color=#75715e>           * vlsn, advance the DTVLSN.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>updateDTVLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>min</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* DTVLSN unchanged. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set a test hook, parameterized by feeder's Name/ID pair, that delays CBVLSN updates if it</color>
<color=#75715e>   * throws an IllegalStateException.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setDelayCBVLSNUpdateHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>NameIdPair</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>delayCBVLSNUpdateHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Convenience constant used by the DTVLSN flusher when committing the null transaction. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>NULL_TXN_CONFIG</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TransactionConfig</color><color=#f8f8f2>();</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>NULL_TXN_CONFIG</color><color=#f8f8f2>.</color><color=#a6e22e>setDurability</color><color=#f8f8f2>(</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>Durability</color><color=#f8f8f2>(</color><color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE_NO_SYNC</color><color=#f8f8f2>,</color> <color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE_NO_SYNC</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicaAckPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a null (no modifications) commit record when it detects that the DTVLSN is ahead of the</color>
<color=#75715e>   * persistent DTVLSN and needs to be updated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that without this mechanism, the in-memory DTVLSN would always be ahead of the</color>
<color=#75715e>   * persisted VLSN, since in general DTVLSN(vlsn) < vlsn. That is, the commit or abort log record</color>
<color=#75715e>   * containing the DTVLSN always has a more recent VLSN than the one it contains.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>DTVLSNFlusher</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The number of feeder ticks for which the in-memory DTVLSN must be stable before it's written</color>
<color=#75715e>     * to the log as a null TXN. We are using this "tick" indirection to avoid yet another call to</color>
<color=#75715e>     * the clock. A "tick" in this context is the FEEDER_MANAGER_POLL_TIMEOUT.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>targetStableTicks</color><color=#f8f8f2>;</color>

    <color=#75715e>/** The number of ticks for which the DTVLSN has been stable. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>stableTicks</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>DTVLSNFlusher</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>heartbeatMs</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>().</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>HEARTBEAT_INTERVAL</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>targetStableTicks</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>heartbeatMs</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>pollTimeoutMs</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Used to track whether the DTVLSN has been stable enough to write out. While it's changing</color>
<color=#75715e>     * application commits and aborts are writing it out, so no need to write it here.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>stableDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Update each time we actually persist the DTVLSN via a null txn. It represents the DTVLSN</color>
<color=#75715e>     * that's been written out.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>persistedDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Identifies the Txn that was used to persist the DTVLSN. */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>nullTxnVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Persists the DTVLSN if necessary. The DTVLSN is persisted if the version in memory is more</color>
<color=#75715e>     * current than the version on disk and has not changed for targetStableTicks.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>flush</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>dtvlsn</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getDTVLSN</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dtvlsn</color> <color=#f92672>==</color> <color=#f8f8f2>nullTxnVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Don't save VLSN from null transaction as DTVLSN */</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dtvlsn</color> <color=#f92672>></color> <color=#f8f8f2>stableDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stableTicks</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>stableDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>;</color>

        <color=#75715e>/* The durable DTVLSN is being actively updated. */</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dtvlsn</color> <color=#f92672><</color> <color=#f8f8f2>stableDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Enforce the invariant that the DTVLSN cannot decrease. */</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
            <color=#e6db74>"The DTVLSN sequence cannot decrease"</color>
                <color=#f92672>+</color> <color=#e6db74>"current DTVLSN:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>dtvlsn</color>
                <color=#f92672>+</color> <color=#e6db74>" previous DTVLSN:"</color>
                <color=#f92672>+</color> <color=#f8f8f2>stableDTVLSN</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* DTVLSN == stableDTVLSN */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>++</color><color=#f8f8f2>stableTicks</color> <color=#f92672><=</color> <color=#f8f8f2>targetStableTicks</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Increase the stable tick counter. it has not been stable</color>
<color=#75715e>         * long enough.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>stableTicks</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#75715e>/* dtvlsn has been stable */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stableDTVLSN</color> <color=#f92672>></color> <color=#f8f8f2>persistedDTVLSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getActiveTransfer</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * Don't attempt writing a transaction. while a transfer is</color>
<color=#75715e>           * in progress and txns will be blocked.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
              <color=#e6db74>"Skipped null txn updating DTVLSN: "</color> <color=#f92672>+</color> <color=#f8f8f2>dtvlsn</color> <color=#f92672>+</color> <color=#e6db74>" Master transfer in progress"</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color> <color=#f92672>=</color> <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>MasterTxn</color> <color=#f8f8f2>nullTxn</color> <color=#f92672>=</color>
            <color=#f8f8f2>MasterTxn</color><color=#f8f8f2>.</color><color=#a6e22e>createNullTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>repImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>NULL_TXN_CONFIG</color><color=#f8f8f2>,</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getNameIdPair</color><color=#f8f8f2>());</color>
        <color=#75715e>/*</color>
<color=#75715e>         * We don't want to wait for any reason, if the txn fails,</color>
<color=#75715e>         * we can try later.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>nullTxn</color><color=#f8f8f2>.</color><color=#a6e22e>setTxnTimeout</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nullTxn</color><color=#f8f8f2>.</color><color=#a6e22e>commit</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
              <color=#e6db74>"Persist DTVLSN: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>dtvlsn</color>
                  <color=#f92672>+</color> <color=#e6db74>" at VLSN: "</color>
                  <color=#f92672>+</color> <color=#f8f8f2>nullTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitVLSN</color><color=#f8f8f2>()</color>
                  <color=#f92672>+</color> <color=#e6db74>" via null transaction:"</color>
                  <color=#f92672>+</color> <color=#f8f8f2>nullTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>nullTxnVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>nullTxn</color><color=#f8f8f2>.</color><color=#a6e22e>getCommitVLSN</color><color=#f8f8f2>().</color><color=#a6e22e>getSequence</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>persistedDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>dtvlsn</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>stableDTVLSN</color> <color=#f92672>=</color> <color=#f8f8f2>persistedDTVLSN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nullTxn</color><color=#f8f8f2>.</color><color=#a6e22e>abort</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>warning</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>logger</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>repNode</color><color=#f8f8f2>.</color><color=#a6e22e>getRepImpl</color><color=#f8f8f2>(),</color>
              <color=#e6db74>"Failed to write null txn updating DTVLSN; "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>