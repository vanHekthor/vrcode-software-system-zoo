<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.log.entry</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogEntryType</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.VersionedWriteLoggable</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collection</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A sub-interface of {@link LogEntry} that must be implemented by all log entries that can be</color>
<color=#75715e> * replicated. Replicable log entries are all those entries for which the associated {@link</color>
<color=#75715e> * LogEntryType}'s {@link LogEntryType#isReplicationPossible} method returns {@code true}. These are</color>
<color=#75715e> * the log entries that can be included in the replication stream distributed from feeders to</color>
<color=#75715e> * replicas during replication. See [#22336].</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Starting with the release using log version 9, as specified by {@link</color>
<color=#75715e> * LogEntryType#LOG_VERSION_REPLICATE_OLDER}, all replicable log entries need to support writing</color>
<color=#75715e> * themselves in earlier log formats, to support replication during an upgrade when the master is</color>
<color=#75715e> * replicated first. Any loggable objects that they reference should also implement {@link</color>
<color=#75715e> * com.sleepycat.je.log.VersionedWriteLoggable} for the same reason.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link #getLastFormatChange} method identifies the log version for which the entry's log</color>
<color=#75715e> * format has most recently changed. This information is used to determine if the current log format</color>
<color=#75715e> * is compatible with a non-upgraded replica.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link #getSize(int, boolean)} method overloading is used when creating the buffer that</color>
<color=#75715e> * will be used to transmit the log entry data in the earlier format.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@link #writeEntry(ByteBuffer, int, boolean)} method overloading is used to convert the</color>
<color=#75715e> * in-memory format of the log entry into the log data in the earlier format.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To simplify the implementation of writing log entries in multiple log version formats, a log</color>
<color=#75715e> * entry that needs to be written in a previous format will first be read into its in-memory format</color>
<color=#75715e> * in the current version, and then written from there to the previous format.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>ReplicableLogEntry</color> <color=#66d9ef>extends</color> <color=#f8f8f2>LogEntry</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the log version of the most recent format change for this log entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the log version of the most recent format change</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getLastFormatChange</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns all possible {@link VersionedWriteLoggable} objects that may be embedded in the binary</color>
<color=#75715e>   * data of this log entry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This is used by tests to ensure that for each X:Y pair, where X is a ReplicableLogEntry and</color>
<color=#75715e>   * Y is a VersionedWriteLoggable, and X embeds Y either directly or indirectly,</color>
<color=#75715e>   * X.getLastFormatChange is greater than or equal to Y.getLastFormatChange.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Each ReplicableLogEntry and VersionedWriteLoggable class typically has a LAST_FORMAT_CHANGE</color>
<color=#75715e>   * constant that is returned by its getLastFormatChange method. When bumping this constant for an</color>
<color=#75715e>   * object X embedded by an log entry Y, Y.LAST_FORMAT_CHANGE should also be set to the minimum of</color>
<color=#75715e>   * its current value and X.LAST_FORMAT_CHANGE.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Enforcing this rule in a general way is made possible by the getEmbeddedLoggables method of</color>
<color=#75715e>   * each ReplicableLogEntry and VersionedWriteLoggable. Note that this method is not intended to be</color>
<color=#75715e>   * called outside of tests.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>VersionedWriteLoggable</color><color=#f92672>></color> <color=#a6e22e>getEmbeddedLoggables</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of bytes needed to store this entry in the format for the specified log</color>
<color=#75715e>   * version. Earlier log versions only need to be supported for log entries with format changes</color>
<color=#75715e>   * made in {@link LogEntryType#LOG_VERSION_REPLICATE_OLDER} or greater.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param logVersion the log version</color>
<color=#75715e>   * @param forReplication whether the entry will be sent over the wire, and not written to the log.</color>
<color=#75715e>   * @return the number of bytes to store this entry for the log version</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReplication</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Serializes this object into the specified buffer in the format for the the specified log</color>
<color=#75715e>   * version. Earlier log versions only need to be supported for log entries with format changes</color>
<color=#75715e>   * made in {@link LogEntryType#LOG_VERSION_REPLICATE_OLDER} or greater.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param logBuffer the destination buffer</color>
<color=#75715e>   * @param forReplication whether the entry will be sent over the wire, and not written to the log.</color>
<color=#75715e>   * @param logVersion the log version</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>writeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReplication</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Returns whether this format has a variant that is optimized for replication. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>hasReplicationFormat</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether it is worthwhile to materialize and then re-serialize a log entry in a format</color>
<color=#75715e>   * optimized for replication. Implementations should attempt to check efficiently, without</color>
<color=#75715e>   * instantiating the log entry object. Some implementations will simply return false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: The logBuffer position must not be changed by this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: The shared LogEntry object is used for calling this method, and this method must</color>
<color=#75715e>   * not change any of the fields in the object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param logBuffer contains the entry that would be re-serialized.</color>
<color=#75715e>   * @param srcVersion the log version of entry in logBuffer.</color>
<color=#75715e>   * @param destVersion the version that would be used for re-serialization.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicationFormatWorthwhile</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>srcVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>destVersion</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>