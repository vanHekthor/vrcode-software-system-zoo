<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.utilint</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Internal class used for transient event tracing. Subclass this with specific events. Subclasses</color>
<color=#75715e> * should have toString methods for display and events should be added by calling</color>
<color=#75715e> * EventTrace.addEvent();</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EventTrace</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_EVENTS</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>TRACE_EVENTS</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>currentEvent</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>EventTrace</color><color=#f92672>[]</color> <color=#f8f8f2>events</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EventTrace</color><color=#f92672>[</color><color=#f8f8f2>MAX_EVENTS</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>threadIdHashes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>MAX_EVENTS</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>disableEvents</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#f8f8f2>comment</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>EventTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>comment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>comment</color> <color=#f92672>=</color> <color=#f8f8f2>comment</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#a6e22e>EventTrace</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>comment</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>comment</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Always return true so this method can be used with asserts: i.e. assert addEvent(xxx); */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>EventTrace</color> <color=#f8f8f2>event</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>disableEvents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nextEventIdx</color> <color=#f92672>=</color> <color=#f8f8f2>currentEvent</color><color=#f8f8f2>.</color><color=#a6e22e>getAndIncrement</color><color=#f8f8f2>()</color> <color=#f92672>%</color> <color=#f8f8f2>MAX_EVENTS</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>events</color><color=#f92672>[</color><color=#f8f8f2>nextEventIdx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>event</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>threadIdHashes</color><color=#f92672>[</color><color=#f8f8f2>nextEventIdx</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>identityHashCode</color><color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Always return true so this method can be used with asserts:</color>
<color=#75715e>   * i.e. assert addEvent(xxx);</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>addEvent</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>comment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>disableEvents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>addEvent</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>EventTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>comment</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpEvents</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>dumpEvents</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpEvents</color><color=#f8f8f2>(</color><color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>disableEvents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"----- Event Dump -----"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>EventTrace</color><color=#f92672>[]</color> <color=#f8f8f2>oldEvents</color> <color=#f92672>=</color> <color=#f8f8f2>events</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>oldThreadIdHashes</color> <color=#f92672>=</color> <color=#f8f8f2>threadIdHashes</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>disableEvents</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>currentEvent</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>MAX_EVENTS</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EventTrace</color> <color=#f8f8f2>ev</color> <color=#f92672>=</color> <color=#f8f8f2>oldEvents</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>%</color> <color=#f8f8f2>MAX_EVENTS</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ev</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>thisEventIdx</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>%</color> <color=#f8f8f2>MAX_EVENTS</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>oldThreadIdHashes</color><color=#f92672>[</color><color=#f8f8f2>thisEventIdx</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#e6db74>" "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#e6db74>"("</color> <color=#f92672>+</color> <color=#f8f8f2>thisEventIdx</color> <color=#f92672>+</color> <color=#e6db74>"): "</color> <color=#f92672>+</color> <color=#f8f8f2>ev</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ExceptionEventTrace</color> <color=#66d9ef>extends</color> <color=#f8f8f2>EventTrace</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Exception</color> <color=#f8f8f2>event</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ExceptionEventTrace</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>event</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>event</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>    public static class EvictEvent extends EventTrace {</color>
<color=#75715e>        long nodeId;</color>
<color=#75715e>        int addr;</color>

<color=#75715e>        public EvictEvent(String comment, long nodeId, int addr) {</color>
<color=#75715e>            super(comment);</color>
<color=#75715e>            this.nodeId = nodeId;</color>
<color=#75715e>            this.addr = addr;</color>
<color=#75715e>        }</color>

<color=#75715e>        public static void addEvent(String comment, IN node) {</color>
<color=#75715e>            long nodeId = node.getNodeId();</color>
<color=#75715e>            int addr = System.identityHashCode(node);</color>
<color=#75715e>            EventTrace.addEvent(new EvictEvent(comment, nodeId, addr));</color>
<color=#75715e>        }</color>

<color=#75715e>        public String toString() {</color>
<color=#75715e>            StringBuilder sb = new StringBuilder(comment);</color>
<color=#75715e>            sb.append(" IN: ").append(nodeId);</color>
<color=#75715e>            sb.append(" sIH ").append(addr);</color>
<color=#75715e>            return sb.toString();</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>

<color=#75715e>    public static class CursorTrace extends EventTrace {</color>
<color=#75715e>        long nodeId;</color>
<color=#75715e>        int index;</color>

<color=#75715e>        public CursorTrace(String comment, long nodeId, int index) {</color>
<color=#75715e>            super(comment);</color>
<color=#75715e>            this.nodeId = nodeId;</color>
<color=#75715e>            this.index = index;</color>
<color=#75715e>        }</color>

<color=#75715e>        public static void addEvent(String comment, CursorImpl cursor) {</color>
<color=#75715e>            long nodeId = cursor.getCurrentNodeId();</color>
<color=#75715e>            EventTrace.addEvent</color>
<color=#75715e>                (new CursorTrace(comment, nodeId, cursor.getIndex()));</color>
<color=#75715e>        }</color>

<color=#75715e>        public String toString() {</color>
<color=#75715e>            StringBuilder sb = new StringBuilder(comment);</color>
<color=#75715e>            sb.append(" BIN: ").append(nodeId);</color>
<color=#75715e>            sb.append(" idx: ").append(index);</color>
<color=#75715e>            return sb.toString();</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>

<color=#75715e>/*</color>
<color=#75715e>    class CursorEventTrace extends EventTrace {</color>
<color=#75715e>        private String comment;</color>
<color=#75715e>        private Node node1;</color>
<color=#75715e>        private Node node2;</color>

<color=#75715e>        CursorEventTrace(String comment, Node node1, Node node2) {</color>
<color=#75715e>            this.comment = comment;</color>
<color=#75715e>            this.node1 = node1;</color>
<color=#75715e>            this.node2 = node2;</color>
<color=#75715e>        }</color>

<color=#75715e>        public String toString() {</color>
<color=#75715e>            StringBuilder sb = new StringBuilder(comment);</color>
<color=#75715e>            if (node1 != null) {</color>
<color=#75715e>                sb.append(" ");</color>
<color=#75715e>                sb.append(node1.getNodeId());</color>
<color=#75715e>            }</color>
<color=#75715e>            if (node2 != null) {</color>
<color=#75715e>                sb.append(" ");</color>
<color=#75715e>                sb.append(node2.getNodeId());</color>
<color=#75715e>            }</color>
<color=#75715e>            return sb.toString();</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>

<color=#75715e>*/</color>
<color=#75715e>/*</color>

<color=#75715e>   static class UndoEventTrace extends EventTrace {</color>
<color=#75715e>       private String comment;</color>
<color=#75715e>       private boolean success;</color>
<color=#75715e>       private Node node;</color>
<color=#75715e>       private DbLsn logLsn;</color>
<color=#75715e>       private Node parent;</color>
<color=#75715e>       private boolean found;</color>
<color=#75715e>       private boolean replaced;</color>
<color=#75715e>       private boolean inserted;</color>
<color=#75715e>       private DbLsn replacedLsn;</color>
<color=#75715e>       private DbLsn abortLsn;</color>
<color=#75715e>       private int index;</color>

<color=#75715e>       UndoEventTrace(String comment) {</color>
<color=#75715e>           this.comment = comment;</color>
<color=#75715e>       }</color>

<color=#75715e>       UndoEventTrace(boolean success,</color>
<color=#75715e>                      Node node,</color>
<color=#75715e>                      DbLsn logLsn,</color>
<color=#75715e>                      Node parent,</color>
<color=#75715e>                      boolean found,</color>
<color=#75715e>                      boolean replaced,</color>
<color=#75715e>                      boolean inserted,</color>
<color=#75715e>                      DbLsn replacedLsn,</color>
<color=#75715e>                      DbLsn abortLsn,</color>
<color=#75715e>                      int index) {</color>
<color=#75715e>           this.comment = null;</color>
<color=#75715e>           this.success = success;</color>
<color=#75715e>           this.node = node;</color>
<color=#75715e>           this.logLsn = logLsn;</color>
<color=#75715e>           this.parent = parent;</color>
<color=#75715e>           this.found = found;</color>
<color=#75715e>           this.replaced = replaced;</color>
<color=#75715e>           this.inserted = inserted;</color>
<color=#75715e>           this.replacedLsn = replacedLsn;</color>
<color=#75715e>           this.abortLsn = abortLsn;</color>
<color=#75715e>           this.index = index;</color>
<color=#75715e>       }</color>

<color=#75715e>       public String toString() {</color>
<color=#75715e>           if (comment != null) {</color>
<color=#75715e>               return comment;</color>
<color=#75715e>           }</color>
<color=#75715e>           StringBuilder sb = new StringBuilder();</color>
<color=#75715e>           sb.append(" success=").append(success);</color>
<color=#75715e>           sb.append(" node=");</color>
<color=#75715e>           sb.append(node.getNodeId());</color>
<color=#75715e>           sb.append(" logLsn=");</color>
<color=#75715e>           sb.append(logLsn.getNoFormatString());</color>
<color=#75715e>           if (parent != null) {</color>
<color=#75715e>               sb.append(" parent=").append(parent.getNodeId());</color>
<color=#75715e>           }</color>
<color=#75715e>           sb.append(" found=");</color>
<color=#75715e>           sb.append(found);</color>
<color=#75715e>           sb.append(" replaced=");</color>
<color=#75715e>           sb.append(replaced);</color>
<color=#75715e>           sb.append(" inserted=");</color>
<color=#75715e>           sb.append(inserted);</color>
<color=#75715e>           if (replacedLsn != null) {</color>
<color=#75715e>               sb.append(" replacedLsn=");</color>
<color=#75715e>               sb.append(replacedLsn.getNoFormatString());</color>
<color=#75715e>           }</color>
<color=#75715e>           if (abortLsn != null) {</color>
<color=#75715e>               sb.append(" abortLsn=");</color>
<color=#75715e>               sb.append(abortLsn.getNoFormatString());</color>
<color=#75715e>           }</color>
<color=#75715e>           sb.append(" index=").append(index);</color>
<color=#75715e>           return sb.toString();</color>
<color=#75715e>       }</color>
<color=#75715e>   }</color>
<color=#75715e>*/</color>
<color=#75715e>/*</color>
<color=#75715e>    class CursorAdjustEventTrace extends EventTrace {</color>
<color=#75715e>        private int insertIndex;</color>
<color=#75715e>        private int cursorIndex;</color>
<color=#75715e>        private long nodeId;</color>

<color=#75715e>        CursorAdjustEventTrace(int insertIndex, int cursorIndex) {</color>
<color=#75715e>            this.insertIndex = insertIndex;</color>
<color=#75715e>            this.cursorIndex = cursorIndex;</color>
<color=#75715e>            this.nodeId = getNodeId();</color>
<color=#75715e>        }</color>

<color=#75715e>        public String toString() {</color>
<color=#75715e>            StringBuilder sb = new StringBuilder("cursor adjust ");</color>
<color=#75715e>            sb.append(insertIndex).append(" ");</color>
<color=#75715e>            sb.append(cursorIndex).append(" ");</color>
<color=#75715e>            sb.append(nodeId);</color>
<color=#75715e>            return sb.toString();</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>

<color=#75715e>*/</color>
<color=#75715e>/*</color>
<color=#75715e>    class CompressEventTrace extends EventTrace {</color>
<color=#75715e>        private int entryIndex;</color>
<color=#75715e>        private long nodeId;</color>

<color=#75715e>        CompressEventTrace(int entryIndex) {</color>
<color=#75715e>            this.entryIndex = entryIndex;</color>
<color=#75715e>            this.nodeId = getNodeId();</color>
<color=#75715e>        }</color>

<color=#75715e>        public String toString() {</color>
<color=#75715e>            StringBuilder sb = new StringBuilder("bin compress ");</color>
<color=#75715e>            sb.append(entryIndex).append(" ");</color>
<color=#75715e>            sb.append(nodeId);</color>
<color=#75715e>            return sb.toString();</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>

<color=#75715e>*/</color>
<color=#75715e>/*</color>
<color=#75715e>    class TreeEventTrace extends EventTrace {</color>
<color=#75715e>        private String comment;</color>
<color=#75715e>        private Node node1;</color>
<color=#75715e>        private Node node2;</color>

<color=#75715e>        TreeEventTrace(String comment, Node node1, Node node2) {</color>
<color=#75715e>            this.comment = comment;</color>
<color=#75715e>            this.node1 = node1;</color>
<color=#75715e>            this.node2 = node2;</color>
<color=#75715e>        }</color>

<color=#75715e>        public String toString() {</color>
<color=#75715e>            StringBuilder sb = new StringBuilder(comment);</color>
<color=#75715e>            if (node1 != null) {</color>
<color=#75715e>                sb.append(" ");</color>
<color=#75715e>                sb.append(node1.getNodeId());</color>
<color=#75715e>            }</color>
<color=#75715e>            if (node2 != null) {</color>
<color=#75715e>                sb.append(" ");</color>
<color=#75715e>                sb.append(node2.getNodeId());</color>
<color=#75715e>            }</color>
<color=#75715e>            return sb.toString();</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>

<color=#75715e>*/</color>