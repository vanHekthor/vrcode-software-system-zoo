<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * LockUpgrade is a type safe enumeration of lock upgrade types. Methods on LockUpgrade objects are</color>
<color=#75715e> * used to determine whether an upgrade is needed and, if so, how it should be handled.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LockUpgrade</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Due to static initialization circularities between LockUpgrade and</color>
<color=#75715e>   * LockType, the LockUpgrade.upgrade field of each of these LockUpgrades</color>
<color=#75715e>   * will get filled in by a piece of static code in EnvironmentImpl.</color>
<color=#75715e>   * [#16496]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>ILLEGAL</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>EXISTING</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>WRITE_PROMOTE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color> <color=#75715e>/*LockType.WRITE*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>RANGE_READ_IMMED</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color> <color=#75715e>/*LockType.RANGE_READ*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>RANGE_WRITE_IMMED</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color> <color=#75715e>/*LockType.RANGE_WRITE*/</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>RANGE_WRITE_PROMOTE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>(</color><color=#66d9ef>null</color> <color=#75715e>/*LockType.RANGE_WRITE*/</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>promotion</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>illegal</color><color=#f8f8f2>;</color>

  <color=#75715e>/** No upgrade types can be defined outside this class. */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>LockUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>promotion</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>illegal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>upgrade</color> <color=#f92672>=</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>promotion</color> <color=#f92672>=</color> <color=#f8f8f2>promotion</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>illegal</color> <color=#f92672>=</color> <color=#f8f8f2>illegal</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is called to determine whether the upgrade is illegal. If true is returned, an</color>
<color=#75715e>   * internal error has occurred. This should never happen since RANGE_INSERT should never be</color>
<color=#75715e>   * requested along with other locks by the same locker; a separate locker is used for RANGE_INSERT</color>
<color=#75715e>   * locks.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getIllegal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>illegal</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is called first to determine whether an upgrade to a new lock type is needed, and</color>
<color=#75715e>   * what the new lock type should be. If null is returned, the existing lock should be unchanged</color>
<color=#75715e>   * and no upgrade is needed. If non-null is returned, an upgrade to the returned type should be</color>
<color=#75715e>   * performed; in this case, call getPromotion to determine how to do the upgrade.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>LockType</color> <color=#a6e22e>getUpgrade</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>upgrade</color> <color=#f92672>=</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is called when getUpgrade returns non-null to determine whether the upgrade is a</color>
<color=#75715e>   * true promotion or can be granted immediately. A true promotion is a change from read to write</color>
<color=#75715e>   * locking, and may require waiting if the write lock conflicts with a lock held by another</color>
<color=#75715e>   * locker. An upgrade that is not a promotion is just a type change, and never causes a lock</color>
<color=#75715e>   * conflict.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getPromotion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>promotion</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>