<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * LockType is a type safe enumeration of all lock types. Methods on LockType objects can be used to</color>
<color=#75715e> * determine whether a type conflicts with another type or can be upgraded to another type.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LockType</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Lock types. Indexes must be kept manually synchronized in the matrixes below. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>READ</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#e6db74>"READ"</color><color=#f8f8f2>);</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>WRITE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#e6db74>"WRITE"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>RANGE_READ</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#e6db74>"RANGE_READ"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>RANGE_WRITE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#e6db74>"RANGE_WRITE"</color><color=#f8f8f2>);</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>RANGE_INSERT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>(</color><color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#e6db74>"RANGE_INSERT"</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * NONE is used for requesting a dirty read and does not appear in the conflict or upgrade</color>
<color=#75715e>   * matrices.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>NONE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#e6db74>"NONE"</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * RESTART is used for waiting for a restart and does not appear in the conflict or upgrade</color>
<color=#75715e>   * matrices.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>RESTART</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>(</color><color=#ae81ff>6</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#e6db74>"RESTART"</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whenever the conflict matrix is changed be sure to update this. For every type that can cause a</color>
<color=#75715e>   * RESTART result call setCausesRestart. This could have been determined programmatically but I</color>
<color=#75715e>   * chose to maintain it manually to avoid extra code size.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>RANGE_READ</color><color=#f8f8f2>.</color><color=#a6e22e>setCausesRestart</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>RANGE_WRITE</color><color=#f8f8f2>.</color><color=#a6e22e>setCausesRestart</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Lock conflict matrix.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getConflict</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockConflict</color><color=#f92672>[][]</color> <color=#f8f8f2>conflictMatrix</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>{</color> <color=#75715e>// READ is held and there is a request for:</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// WRITE is held and there is a request for:</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// RANGE_READ is held and there is a request for:</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// RANGE_WRITE is held and there is a request for:</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>BLOCK</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// RANGE_INSERT is held and there is a request for:</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>RESTART</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>RESTART</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockConflict</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
  <color=#f8f8f2>};</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Lock upgrade matrix.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getUpgrade</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockUpgrade</color><color=#f92672>[][]</color> <color=#f8f8f2>upgradeMatrix</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>{</color> <color=#75715e>// READ is held and there is a request for:</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE_PROMOTE</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ_IMMED</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE_PROMOTE</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// WRITE is held and there is a request for:</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE_IMMED</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE_IMMED</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// RANGE_READ is held and there is a request for:</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE_PROMOTE</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE_PROMOTE</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// RANGE_WRITE is held and there is a request for:</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
    <color=#f8f8f2>{</color> <color=#75715e>// RANGE_INSERT is held and there is a request for:</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_READ</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>ILLEGAL</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_WRITE</color>
      <color=#f8f8f2>LockUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>,</color> <color=#75715e>// RANGE_INSERT</color>
    <color=#f8f8f2>},</color>
  <color=#f8f8f2>};</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>write</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>causesRestart</color><color=#f8f8f2>;</color>

  <color=#75715e>/** No lock types can be defined outside this class. */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>LockType</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>write</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>write</color> <color=#f92672>=</color> <color=#f8f8f2>write</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if this is a WRITE or RANGE_WRITE lock. For RANGE_INSERT, false is returned</color>
<color=#75715e>   * because RANGE_INSERT is used to lock the key following the insertion key, not the insertion key</color>
<color=#75715e>   * itself.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isWriteLock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>write</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Specifies that when this type is requested it can result in LockGrantType.RESTART. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setCausesRestart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>causesRestart</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether when this type is requested it can result in LockGrantType.RESTART. */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getCausesRestart</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>causesRestart</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the LockConfict that results when this lock type is held and the given lock type is</color>
<color=#75715e>   * requested by another locker.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>LockConflict</color> <color=#a6e22e>getConflict</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color> <color=#f8f8f2>requestedType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>conflictMatrix</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>][</color><color=#f8f8f2>requestedType</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the LockUpgrade that results when this lock type is held and the given lock type is</color>
<color=#75715e>   * requested by the same locker.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For the returned LockUpgrade object, getIllegal will never return true because this method</color>
<color=#75715e>   * fires an assertion if getIllegal returns true.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>LockUpgrade</color> <color=#a6e22e>getUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color> <color=#f8f8f2>requestedType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>upgrade</color> <color=#f92672>=</color> <color=#f8f8f2>upgradeMatrix</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>][</color><color=#f8f8f2>requestedType</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>upgrade</color><color=#f8f8f2>.</color><color=#a6e22e>getIllegal</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>this</color> <color=#f92672>+</color> <color=#e6db74>" to "</color> <color=#f92672>+</color> <color=#f8f8f2>requestedType</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>