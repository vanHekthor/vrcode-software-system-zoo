<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Durability.SyncPolicy</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.AbortLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.CommitLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.LNLogEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.entry.SingleItemEntry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.recovery.RecoveryManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.TreeLocation</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.txn.TxnChain.CompareSlot</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.transaction.xa.XAResource</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.transaction.xa.Xid</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.atomic.AtomicInteger</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Logger</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.txn.LockStatDefinition.*</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.utilint.DbLsn.NULL_LSN</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Txn is the internal representation of a transaction created by a call to Environment.txnBegin.</color>
<color=#75715e> * This class must support multi-threaded use.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Txn</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Locker</color> <color=#66d9ef>implements</color> <color=#f8f8f2>VersionedWriteLoggable</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The log version of the most recent format change for this loggable.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #getLastFormatChange</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LAST_FORMAT_CHANGE</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Use an AtomicInteger to record cursors opened under this txn. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AtomicInteger</color> <color=#f8f8f2>cursors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AtomicInteger</color><color=#f8f8f2>();</color>

  <color=#75715e>/* Internal txn flags. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color> <color=#f8f8f2>txnFlags</color><color=#f8f8f2>;</color>
  <color=#75715e>/* Set if prepare() has been called on this transaction. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>IS_PREPARED</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#75715e>/* Set if xa_end(TMSUSPEND) has been called on this transaction. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>XA_SUSPENDED</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
  <color=#75715e>/* Set if this rollback() has been called on this transaction. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>PAST_ROLLBACK</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Set if this transaction may abort other transactions holding a needed</color>
<color=#75715e>   * lock.  Note that this bit flag and the setImportunate method could be</color>
<color=#75715e>   * removed in favor of overriding getImportunate in ReplayTxn.  This was</color>
<color=#75715e>   * not done, for now, to avoid changing importunate tests that use a Txn</color>
<color=#75715e>   * and call setImportunate. [#16513]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>IMPORTUNATE</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Holds the public Transaction state. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>txnState</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Information about why a Txn was made only abortable. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>onlyAbortableCause</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A Txn can be used by multiple threads. Modification to the read and</color>
<color=#75715e>   * write lock collections is done by synchronizing on the txn.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>readLocks</color><color=#f8f8f2>;</color> <color=#75715e>// key is LSN</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>;</color> <color=#75715e>// key is LSN</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A set of BuddyLockers that have this locker as their buddy.  Currently</color>
<color=#75715e>   * this set is only maintained (non-null) in a replicated environment</color>
<color=#75715e>   * because it is only needed for determining when to throw</color>
<color=#75715e>   * LockPreemptedException.  If null, it can be assumed that no other</color>
<color=#75715e>   * thread will change it.  If non-null, access should be synchronized on</color>
<color=#75715e>   * the buddyLockers object.  TinyHashSet is used because it is optimized</color>
<color=#75715e>   * for 0 to 2 entries, and normally a Txn will have at most two buddy</color>
<color=#75715e>   * lockers (for read-committed mode).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><</color><color=#f8f8f2>BuddyLocker</color><color=#f92672>></color> <color=#f8f8f2>buddyLockers</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>READ_LOCK_OVERHEAD</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHSET_ENTRY_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WRITE_LOCK_OVERHEAD</color> <color=#f92672>=</color>
      <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHMAP_ENTRY_OVERHEAD</color> <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>WRITE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * We have to keep a set of DatabaseCleanupInfo objects so after commit or</color>
<color=#75715e>   * abort of Environment.truncateDatabase() or Environment.removeDatabase(),</color>
<color=#75715e>   * we can appropriately purge the unneeded MapLN and DatabaseImpl.</color>
<color=#75715e>   * Synchronize access to this set on this object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>></color> <color=#f8f8f2>deletedDatabases</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * We need a map of the latest databaseImpl objects to drive the undo</color>
<color=#75715e>   * during an abort, because it's too hard to look up the database object in</color>
<color=#75715e>   * the mapping tree. (The normal code paths want to take locks, add</color>
<color=#75715e>   * cursors, etc.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @see #addOpenedDatabase</color>
<color=#75715e>   * @see HandleLocker</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color> <color=#f8f8f2>openedDatabaseHandles</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * First LSN logged for this transaction -- used for keeping track of the</color>
<color=#75715e>   * first active LSN point, for checkpointing. This field is not persistent.</color>
<color=#75715e>   *</color>
<color=#75715e>   * [#16861] This field is volatile to avoid making getFirstActiveLsn</color>
<color=#75715e>   * synchronized, which causes a deadlock in HA.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>volatile</color> <color=#66d9ef>long</color> <color=#f8f8f2>firstLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Last LSN logged for this transaction. Serves as the handle onto the</color>
<color=#75715e>   * chained log entries belonging to this transaction. Is persistent.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The LSN used to commit the transaction. One of commitLSN or abortLSN</color>
<color=#75715e>   * must be set after a commit() or abort() operation. Note that a commit()</color>
<color=#75715e>   * may set abortLSN, if the commit failed, and the transaction had to be</color>
<color=#75715e>   * aborted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#f8f8f2>commitLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The LSN used to record the abort of the transaction. */</color>
  <color=#66d9ef>long</color> <color=#f8f8f2>abortLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The configured durability at the time the transaction was created. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>defaultDurability</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The durability used for the actual commit. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>commitDurability</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Whether to use Serializable isolation (prevent phantoms). */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>serializableIsolation</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Whether to use Read-Committed isolation. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readCommittedIsolation</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * In-memory size, in bytes. A Txn tracks the memory needed for itself and</color>
<color=#75715e>   * the readlock, writeInfo, undoDatabases, and deletedDatabases</color>
<color=#75715e>   * collections, including the cost of each collection entry. However, the</color>
<color=#75715e>   * actual Lock object memory cost is maintained within the Lock class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>inMemorySize</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Accumulated memory budget delta. Once this exceeds ACCUMULATED_LIMIT we</color>
<color=#75715e>   * inform the MemoryBudget that a change has occurred.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>accumulatedDelta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The set of databases for which triggers were invoked during the</color>
<color=#75715e>   * course of this transaction. It's null if no triggers were invoked.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#f8f8f2>triggerDbs</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The user Transaction handle associated with this Txn. It's null if there</color>
<color=#75715e>   * isn't one, e.g. it's an internal transaction.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>transaction</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Max allowable accumulation of memory budget changes before MemoryBudget</color>
<color=#75715e>   * should be updated. This allows for consolidating multiple calls to</color>
<color=#75715e>   * updateXXXMemoryBudget() into one call. Not declared final so that unit</color>
<color=#75715e>   * tests can modify this. See SR 12273.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>ACCUMULATED_LIMIT</color> <color=#f92672>=</color> <color=#ae81ff>10000</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Each Txn instance has a handle on a ReplicationContext instance for use</color>
<color=#75715e>   * in logging a TxnCommit or TxnAbort log entries.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to track mixed mode (sync/durability) transaction API usage. When</color>
<color=#75715e>   * the sync based api is removed, these tracking ivs can be as well.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>explicitSyncConfigured</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>explicitDurabilityConfigured</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Determines whether the transaction is auto-commit */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAutoCommit</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Constructor for reading from log. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>Txn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#a6e22e>Txn</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color> <color=#75715e>/*mandatedId */</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A non-zero mandatedId is specified only by subtypes which arbitrarily impose a transaction id</color>
<color=#75715e>   * value onto the transaction. This is done by implementing a version of Locker.generateId() which</color>
<color=#75715e>   * uses the proposed id.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>Txn</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>mandatedId</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Initialize using the config but don't hold a reference to it, since</color>
<color=#75715e>     * it has not been cloned.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getReadUncommitted</color><color=#f8f8f2>(),</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getNoWait</color><color=#f8f8f2>(),</color> <color=#f8f8f2>mandatedId</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>initTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color> <color=#f92672>=</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createLocalTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Txn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createLocalAutoTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Txn</color> <color=#f8f8f2>txn</color> <color=#f92672>=</color> <color=#f8f8f2>createLocalTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>isAutoCommit</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Make a transaction for a user instigated transaction. Whether the</color>
<color=#75715e>   * environment is replicated or not determines whether a MasterTxn or</color>
<color=#75715e>   * a plain local Txn is returned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createUserTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Txn</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ret</color> <color=#f92672>=</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color>
              <color=#f92672>?</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>createRepUserTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>)</color>
              <color=#f8f8f2>:</color> <color=#f8f8f2>createLocalTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>DE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>createAutoTxn</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>ReplicationContext</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>Txn</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>.</color><color=#a6e22e>inReplicationStream</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>createRepUserTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Txn</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>isAutoCommit</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>DE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>DE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"deprecation"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initTxn</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>serializableIsolation</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSerializableIsolation</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>readCommittedIsolation</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getReadCommitted</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>defaultDurability</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getDurability</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>defaultDurability</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>explicitDurabilityConfigured</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>defaultDurability</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getDurabilityFromSync</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>explicitDurabilityConfigured</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>explicitSyncConfigured</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getSync</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getNoSync</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteNoSync</color><color=#f8f8f2>();</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>explicitDurabilityConfigured</color> <color=#f92672>&&</color> <color=#f8f8f2>explicitSyncConfigured</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>readOnly</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOnly</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>firstLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>txnFlags</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buddyLockers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><</color><color=#f8f8f2>BuddyLocker</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>txnBeginHook</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Note: readLocks, writeInfo, undoDatabases, deleteDatabases are</color>
<color=#75715e>     * initialized lazily in order to conserve memory. WriteInfo and</color>
<color=#75715e>     * undoDatabases are treated as a package deal, because they are both</color>
<color=#75715e>     * only needed if a transaction does writes.</color>
<color=#75715e>     *</color>
<color=#75715e>     * When a lock is added to this transaction, we add the collection</color>
<color=#75715e>     * entry overhead to the memory cost, but don't add the lock</color>
<color=#75715e>     * itself. That's taken care of by the Lock class.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_OVERHEAD</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>registerImmediately</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>registerTxn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * True if this transaction should be registered with the transaction manager immediately at</color>
<color=#75715e>   * startup. True for all transactions except for those ReplayTxns which were created as</color>
<color=#75715e>   * transformed master transactions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>registerImmediately</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>addBuddy</color><color=#f8f8f2>(</color><color=#f8f8f2>BuddyLocker</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buddyLockers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>buddyLockers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buddyLockers</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>buddy</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeBuddy</color><color=#f8f8f2>(</color><color=#f8f8f2>BuddyLocker</color> <color=#f8f8f2>buddy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buddyLockers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>buddyLockers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buddyLockers</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>buddy</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** UserTxns get a new unique id for each instance. */</color>
  <color=#a6e22e>@Override</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>generateId</color><color=#f8f8f2>(</color><color=#f8f8f2>TxnManager</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>ignore</color> <color=#75715e>/* mandatedId */</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>.</color><color=#a6e22e>getNextTxnId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Access to last LSN. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLastLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the durability used for the commit operation. It's only available after a commit</color>
<color=#75715e>   * operation has been initiated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the durability associated with the commit, or null if the commit has not yet been</color>
<color=#75715e>   *     initiated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Durability</color> <color=#a6e22e>getCommitDurability</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>commitDurability</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the durability associated the transaction at the time it's first created.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the durability associated with the transaction at creation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Durability</color> <color=#a6e22e>getDefaultDurability</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>defaultDurability</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getPrepared</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnFlags</color> <color=#f92672>&</color> <color=#f8f8f2>IS_PREPARED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPrepared</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>prepared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prepared</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>txnFlags</color> <color=#f92672>|=</color> <color=#f8f8f2>IS_PREPARED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>txnFlags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IS_PREPARED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSuspended</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>suspended</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>suspended</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>txnFlags</color> <color=#f92672>|=</color> <color=#f8f8f2>XA_SUSPENDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>txnFlags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>XA_SUSPENDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSuspended</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnFlags</color> <color=#f92672>&</color> <color=#f8f8f2>XA_SUSPENDED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>setRollback</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>txnFlags</color> <color=#f92672>|=</color> <color=#f8f8f2>PAST_ROLLBACK</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @return if this transaction has ever executed a rollback. A Rollback is an undo of the</color>
<color=#75715e>   *     transaction that can return either to the original pre-txn state, or to an intermediate</color>
<color=#75715e>   *     intra-txn state. An abort always returns the txn to the pre-txn state.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isRolledBack</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnFlags</color> <color=#f92672>&</color> <color=#f8f8f2>PAST_ROLLBACK</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Gets a lock on this LSN and, if it is a write lock, saves an abort LSN. Caller will set the</color>
<color=#75715e>   * abortLsn later, after the write lock has been obtained.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException via API read/write methods if the txn is closed, in theory.</color>
<color=#75715e>   *     However, this should not occur from a user API call, because the API methods first call</color>
<color=#75715e>   *     Transaction.getLocker, which will throw IllegalStateException if the txn is closed. It</color>
<color=#75715e>   *     might occur, however, if the transaction ends in the window between the call to getLocker</color>
<color=#75715e>   *     and the lock attempt.</color>
<color=#75715e>   * @throws OperationFailureException via API read/write methods if an OperationFailureException</color>
<color=#75715e>   *     occurred earlier and set the txn to abort-only.</color>
<color=#75715e>   * @see Locker#lockInternal @Override</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>LockResult</color> <color=#a6e22e>lockInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>useNoWait</color> <color=#f92672>=</color> <color=#f8f8f2>noWait</color> <color=#f92672>||</color> <color=#f8f8f2>defaultNoWait</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>useNoWait</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>getLockTimeout</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Ask for the lock. */</color>
    <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grant</color> <color=#f92672>=</color>
        <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>useNoWait</color><color=#f8f8f2>,</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>WriteLockInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>grant</color> <color=#f92672>!=</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>DENIED</color> <color=#f92672>&&</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>.</color><color=#a6e22e>isWriteLock</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>));</color>
          <color=#75715e>/* Save the latest version of this database for undoing. */</color>
          <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>database</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>(),</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockResult</color><color=#f8f8f2>(</color><color=#f8f8f2>grant</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Prepare to undo in the (very unlikely) event that logging succeeds but locking fails.</color>
<color=#75715e>   * Subclasses should call super.preLogWithoutLock. [#22875]</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogWithoutLock</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ensureWriteInfo</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>database</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>(),</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @throws IllegalStateException via XAResource */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>int</color> <color=#a6e22e>prepare</color><color=#f8f8f2>(</color><color=#f8f8f2>Xid</color> <color=#f8f8f2>xid</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>txnFlags</color> <color=#f92672>&</color> <color=#f8f8f2>IS_PREPARED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"prepare() has already been called for Transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>"."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkCursorsForClose</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>" prepare failed because there were open cursors."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>setPrepared</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>notePrepare</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>XAResource</color><color=#f8f8f2>.</color><color=#a6e22e>XA_RDONLY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>SingleItemEntry</color><color=#f92672><</color><color=#f8f8f2>TxnPrepare</color><color=#f92672>></color> <color=#f8f8f2>prepareEntry</color> <color=#f92672>=</color>
        <color=#f8f8f2>SingleItemEntry</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_TXN_PREPARE</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TxnPrepare</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>xid</color><color=#f8f8f2>));</color>
    <color=#75715e>/* Flush required. */</color>
    <color=#f8f8f2>LogManager</color> <color=#f8f8f2>logManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>logForceFlush</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>prepareEntry</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>// fsyncrequired</color>
        <color=#f8f8f2>ReplicationContext</color><color=#f8f8f2>.</color><color=#a6e22e>NO_REPLICATE</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>XAResource</color><color=#f8f8f2>.</color><color=#a6e22e>XA_OK</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>Xid</color> <color=#f8f8f2>xid</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color><color=#f8f8f2>.</color><color=#a6e22e>COMMIT_SYNC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>unRegisterXATxn</color><color=#f8f8f2>(</color><color=#f8f8f2>xid</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#f8f8f2>Xid</color> <color=#f8f8f2>xid</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>abort</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/* forceFlush */</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>unRegisterXATxn</color><color=#f8f8f2>(</color><color=#f8f8f2>xid</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Call commit() with the default sync configuration property. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>commit</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>defaultDurability</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Commit this transaction; it involves the following logical steps:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1. Run pre-commit hook.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>2. Release read locks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>3. Log a txn commit record and flush the log as indicated by the durability policy.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>4. Run the post-commit hook.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>5. Add deleted LN info to IN compressor queue.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>6. Release all write locks</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this transaction has not made any changes to the database, that is, it is a read-only</color>
<color=#75715e>   * transaction, no entry is made to the log. Otherwise, a concerted effort is made to log a commit</color>
<color=#75715e>   * entry, or an abort entry, but NOT both. If exceptions are encountered and neither entry can be</color>
<color=#75715e>   * logged, a EnvironmentFailureException is thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Error conditions (in contrast to Exceptions) always result in the environment being</color>
<color=#75715e>   * invalidated and the Error being propagated back to the application. In addition, if the</color>
<color=#75715e>   * environment is made invalid in another thread, or the transaction is closed by another thread,</color>
<color=#75715e>   * then we propagate the exception and we do not attempt to abort. This special handling is prior</color>
<color=#75715e>   * to the pre-commit stage.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>From an exception handling viewpoint the commit goes through two stages: a pre-commit stage</color>
<color=#75715e>   * spanning steps 1-3, and a post-commit stage spanning steps 4-5. The post-commit stage is</color>
<color=#75715e>   * entered only after a commit entry has been successfully logged.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Any exceptions detected during the pre-commit stage results in an attempt to log an abort</color>
<color=#75715e>   * entry. A NULL commitLsn (and abortLsn) indicates that we are in the pre-commit stage. Note in</color>
<color=#75715e>   * particular, that if the log of the commit entry (step 3) fails due to an IOException, then the</color>
<color=#75715e>   * lower levels are responsible for wrapping it in a EnvironmentFailureException which is</color>
<color=#75715e>   * propagated directly to the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Exceptions thrown in the post-commit stage are examined to see if they are expected and must</color>
<color=#75715e>   * be propagated back to the caller after completing any pending cleanup; some replication</color>
<color=#75715e>   * exceptions fall into this category. If the exception was unexpected, the environment is</color>
<color=#75715e>   * invalidated and a EnvironmentFailureException is thrown instead. The current implementation</color>
<color=#75715e>   * only allows propagation of exceptions from the post-commit hook, since we do not expect</color>
<color=#75715e>   * exceptions from any of the other post-commit operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When there are multiple failures in commit(), we want the caller to receive the first</color>
<color=#75715e>   * exception, to make the problem manifest. So an effort is made to preserve that primary</color>
<color=#75715e>   * exception and propagate it instead of any following, secondary exceptions. The secondary</color>
<color=#75715e>   * exception is always logged in such a circumstance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws IllegalStateException via Transaction.commit if cursors are open.</color>
<color=#75715e>   * @throws OperationFailureException via Transaction.commit if an OperationFailureException</color>
<color=#75715e>   *     occurred earlier and set the txn to abort-only.</color>
<color=#75715e>   *     <p>Note that IllegalStateException should never be thrown by Transaction.commit because of</color>
<color=#75715e>   *     a closed txn, since Transaction.commit and abort set the Transaction.txn to null and</color>
<color=#75715e>   *     disallow subsequent method calls (other than abort). So in a sense the call to</color>
<color=#75715e>   *     checkState(true) in this method is unnecessary, although perhaps a good safeguard.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>commit</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If frozen, throw the appropriate exception, but don't attempt to</color>
<color=#75715e>     * make any changes to cleanup the exception.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>checkIfFrozen</color><color=#f8f8f2>(</color><color=#66d9ef>true</color> <color=#75715e>/* isCommit */</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * A post commit exception that needs to be propagated back to the</color>
<color=#75715e>     * caller. Its throw is delayed until the post commit cleanup has been</color>
<color=#75715e>     * completed.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>queuedPostCommitException</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>commitDurability</color> <color=#f92672>=</color> <color=#f8f8f2>durability</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkCursorsForClose</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>" commit failed because there were open cursors."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Do the pre-commit hook before executing any commit related</color>
<color=#75715e>         * actions like releasing locks.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>updateLoggedForTxn</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>preLogCommitHook</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Release all read locks, clear lock collection. Optimize for</color>
<color=#75715e>         * the case where there are no read locks.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numReadLocks</color> <color=#f92672>=</color> <color=#f8f8f2>clearReadLocks</color><color=#f8f8f2>();</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Log the commit if we ever logged any modifications for this</color>
<color=#75715e>         * txn. Refraining from logging empty commits is more efficient</color>
<color=#75715e>         * and makes for fewer edge cases for HA. Note that this is not</color>
<color=#75715e>         * the same as the question of whether we have held any write</color>
<color=#75715e>         * locks. Various scenarios, like RMW txns and</color>
<color=#75715e>         * Cursor.putNoOverwrite can take write locks without having</color>
<color=#75715e>         * actually made any modifications.</color>
<color=#75715e>         *</color>
<color=#75715e>         * If we have outstanding write locks, we must release them</color>
<color=#75715e>         * even if we won't log a commit.  TODO: This may have been</color>
<color=#75715e>         * true in the past because of dbhandle write locks that were</color>
<color=#75715e>         * transferred away, but is probably no longer true.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numWriteLocks</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color> <color=#f8f8f2>obsoleteLsns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>numWriteLocks</color> <color=#f92672>=</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>obsoleteLsns</color> <color=#f92672>=</color> <color=#f8f8f2>getObsoleteLsnInfo</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If nothing was written to log for this txn, no need to log a</color>
<color=#75715e>         * commit.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>updateLoggedForTxn</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>LogItem</color> <color=#f8f8f2>commitItem</color> <color=#f92672>=</color> <color=#f8f8f2>logCommitEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>durability</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalSync</color><color=#f8f8f2>(),</color> <color=#f8f8f2>obsoleteLsns</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>commitLsn</color> <color=#f92672>=</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color><color=#f8f8f2>;</color>

          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>postLogCommitHook</color><color=#f8f8f2>(</color><color=#f8f8f2>commitItem</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>hookException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnState</color> <color=#f92672>==</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>MUST_ABORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
                  <color=#e6db74>"postLogCommitHook may not set MUST_ABORT"</color><color=#f8f8f2>,</color> <color=#f8f8f2>hookException</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>propagatePostCommitException</color><color=#f8f8f2>(</color><color=#f8f8f2>hookException</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>throw</color> <color=#f8f8f2>hookException</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>queuedPostCommitException</color> <color=#f92672>=</color> <color=#f8f8f2>hookException</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Set database state for deletes before releasing any write</color>
<color=#75715e>         * locks.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>setDeletedDatabaseState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

        <color=#75715e>/* Release all write locks, clear lock collection. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numWriteLocks</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>releaseWriteLocks</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>writeInfo</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>/* Unload delete info, but don't wake up the compressor. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>deleteInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>deleteInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>addToCompressorQueue</color><color=#f8f8f2>(</color><color=#f8f8f2>deleteInfo</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>());</color>
          <color=#f8f8f2>deleteInfo</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>traceCommit</color><color=#f8f8f2>(</color><color=#f8f8f2>numWriteLocks</color><color=#f8f8f2>,</color> <color=#f8f8f2>numReadLocks</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Purge any databaseImpls not needed as a result of the commit. Be</color>
<color=#75715e>       * sure to do this outside the synchronization block, to avoid</color>
<color=#75715e>       * conflict w/ checkpointer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>cleanupDatabaseImpls</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Unregister this txn. Be sure to do this outside the</color>
<color=#75715e>       * synchronization block, to avoid conflict w/ checkpointer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>queuedPostCommitException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runCommitTriggers</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>commitLsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>commitException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Env is invalid, propagate exception. */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>commitException</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>commitLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* An unfiltered post commit exception */</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INCOMPLETE</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Failed after commiting transaction "</color>
                <color=#f92672>+</color> <color=#f8f8f2>id</color>
                <color=#f92672>+</color> <color=#e6db74>" during post transaction cleanup."</color>
                <color=#f92672>+</color> <color=#e6db74>"Original exception = "</color>
                <color=#f92672>+</color> <color=#f8f8f2>commitException</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>commitException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If this transaction is frozen, just bail out, and don't try</color>
<color=#75715e>       * to clean up with an abort.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>checkIfFrozen</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>throwPreCommitException</color><color=#f8f8f2>(</color><color=#f8f8f2>durability</color><color=#f8f8f2>,</color> <color=#f8f8f2>commitException</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Final catch-all to ensure state is set, in case close(boolean)</color>
<color=#75715e>       * is not called.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnState</color> <color=#f92672>==</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>COMMITTED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>queuedPostCommitException</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Releases all write locks, nulls the lock collection. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseWriteLocks</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>writeInfo</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Aborts the current transaction and throws the pre-commit Exception, wrapped in a Database</color>
<color=#75715e>   * exception if it isn't already a DatabaseException.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the attempt at writing the abort entry fails, that is, if neither an abort entry, nor a</color>
<color=#75715e>   * commit entry was successfully written to the log, the environment is invalidated and a</color>
<color=#75715e>   * EnvironmentFailureException is thrown. Note that for HA, it's necessary that either a commit or</color>
<color=#75715e>   * abort entry be made in the log, so that it can be replayed to the replicas and the transaction</color>
<color=#75715e>   * is not left in limbo at the other nodes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param durability used to determine whether the abort record should be flushed to the log.</color>
<color=#75715e>   * @param preCommitException the exception being handled.</color>
<color=#75715e>   * @throws DatabaseException this is the normal return for the method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>throwPreCommitException</color><color=#f8f8f2>(</color><color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>,</color> <color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>preCommitException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>abortInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>durability</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalSync</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>SyncPolicy</color><color=#f8f8f2>.</color><color=#a6e22e>SYNC</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>traceAndLogException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Txn"</color><color=#f8f8f2>,</color> <color=#e6db74>"commit"</color><color=#f8f8f2>,</color> <color=#e6db74>"Commit of transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>" failed"</color><color=#f8f8f2>,</color> <color=#f8f8f2>preCommitException</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>abortT2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Env already invalid, propagate exception. */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>abortT2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>message</color> <color=#f92672>=</color>
          <color=#e6db74>"Failed while attempting to commit transaction "</color>
              <color=#f92672>+</color> <color=#f8f8f2>id</color>
              <color=#f92672>+</color> <color=#e6db74>". The attempt to abort also failed. "</color>
              <color=#f92672>+</color> <color=#e6db74>"The original exception seen from commit = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>preCommitException</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>()</color>
              <color=#f92672>+</color> <color=#e6db74>" The exception from the cleanup = "</color>
              <color=#f92672>+</color> <color=#f8f8f2>abortT2</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>writeInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>abortLsn</color> <color=#f92672>==</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Failed to log an abort or commit entry */</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentFailureReason</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_INCOMPLETE</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>preCommitException</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * An abort entry has been written, so we can proceed. Log the</color>
<color=#75715e>       * secondary exception, but throw the more meaningful original</color>
<color=#75715e>       * exception.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>envLogMsg</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>WARNING</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>);</color>
      <color=#75715e>/* The preCommitException exception will be thrown below. */</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>postLogCommitAbortHook</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Abort entry was written, wrap the exception if necessary and throw</color>
<color=#75715e>     * it.  An IllegalStateException is thrown by commit() when cursors are</color>
<color=#75715e>     * open.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>preCommitException</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DatabaseException</color>
        <color=#f92672>||</color> <color=#f8f8f2>preCommitException</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>preCommitException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Now throw an exception that shows the commit problem. */</color>
    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
        <color=#e6db74>"Failed while attempting to commit transaction "</color>
            <color=#f92672>+</color> <color=#f8f8f2>id</color>
            <color=#f92672>+</color> <color=#e6db74>", aborted instead. Original exception = "</color>
            <color=#f92672>+</color> <color=#f8f8f2>preCommitException</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>(),</color>
        <color=#f8f8f2>preCommitException</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates and logs the txn commit entry, enforcing the flush/Sync behavior.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param flushSyncBehavior the local durability requirements</color>
<color=#75715e>   * @return the committed log item</color>
<color=#75715e>   * @throws DatabaseException</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LogItem</color> <color=#a6e22e>logCommitEntry</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>SyncPolicy</color> <color=#f8f8f2>flushSyncBehavior</color><color=#f8f8f2>,</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color> <color=#f8f8f2>obsoleteLsns</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LogManager</color> <color=#f8f8f2>logManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>checkForValidReplicatorNodeId</color><color=#f8f8f2>();</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CommitLogEntry</color> <color=#f8f8f2>commitEntry</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>CommitLogEntry</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>TxnCommit</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>getReplicatorNodeId</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getDTVLSN</color><color=#f8f8f2>()));</color>

    <color=#f8f8f2>LogParams</color> <color=#f8f8f2>params</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogParams</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>entry</color> <color=#f92672>=</color> <color=#f8f8f2>commitEntry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>provisional</color> <color=#f92672>=</color> <color=#f8f8f2>Provisional</color><color=#f8f8f2>.</color><color=#a6e22e>NO</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>repContext</color> <color=#f92672>=</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>obsoleteWriteLockInfo</color> <color=#f92672>=</color> <color=#f8f8f2>obsoleteLsns</color><color=#f8f8f2>;</color>

    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>flushSyncBehavior</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SYNC</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>flushRequired</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncRequired</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>WRITE_NO_SYNC</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>flushRequired</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncRequired</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>

      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>flushRequired</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>params</color><color=#f8f8f2>.</color><color=#a6e22e>fsyncRequired</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do a final pre-log check just before the logging call, to minimize</color>
<color=#75715e>     * the window where the POSSIBLY_COMMITTED state may be set. [#21264]</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>preLogCommitCheck</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Log the commit with requested durability. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>logSuccess</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LogItem</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>params</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>logSuccess</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Exceptions thrown during logging are expected to be fatal.</color>
<color=#75715e>       * Ensure that the environment is invalidated when a non-fatal</color>
<color=#75715e>       * exception is unexpectedly thrown, since the commit durability is</color>
<color=#75715e>       * unknown [#21264].</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isValid</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Unexpected non-fatal exception while logging commit"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Ensure that the environment is invalidated. [#21264] */</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If logging fails, there is still a possibility that the commit</color>
<color=#75715e>       * is durable. [#21264]</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>logSuccess</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>POSSIBLY_COMMITTED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Pre-log check for an invalid environment or interrupted thread (this thread may have been</color>
<color=#75715e>   * interrupted but we haven't found out yet, because we haven't done a wait or an I/O) to narrow</color>
<color=#75715e>   * the time window where a commit could become partially durable. See getPartialDurability.</color>
<color=#75715e>   * [#21264]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogCommitCheck</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>interrupted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Thread interrupted prior to logging the commit"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkIfInvalid</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A replicated txn must know the node of the master which issued it.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkForValidReplicatorNodeId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getReplicatorNodeId</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>      return (repContext.getClientVLSN() != null) &&</color>
<color=#75715e>             (!repContext.getClientVLSN().isNull());</color>
<color=#75715e>             */</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Extract obsolete LSN info from writeInfo. Do not add a WriteInfo if a slot with a deleted LN</color>
<color=#75715e>   * was reused (abortKnownDeleted), to avoid double counting. And count each abortLSN only once.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color> <color=#a6e22e>getObsoleteLsnInfo</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * A Map is used to prevent double counting abortLNS if there is more</color>
<color=#75715e>     * then one WriteLockInfo with the same abortLSN in this txn, which can</color>
<color=#75715e>     * occur when the txn has performed more than one CUD ops on the same</color>
<color=#75715e>     * record.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color> <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>WriteLockInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>maybeCountObsoleteLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>maybeCountObsoleteLSN</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color> <color=#f8f8f2>obsoleteLsnSet</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color> <color=#f8f8f2>info</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getAbortLsn</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f92672>||</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getAbortKnownDeleted</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getDb</color><color=#f8f8f2>().</color><color=#a6e22e>isLNImmediatelyObsolete</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Was already counted obsolete during logging. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getAbortData</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Was already counted obsolete during logging. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>longLsn</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getAbortLsn</color><color=#f8f8f2>());</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>obsoleteLsnSet</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>longLsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>obsoleteLsnSet</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>longLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Abort this transaction. This flavor does not return an LSN, nor does it require the logging of</color>
<color=#75715e>   * a durable abort record.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>abort</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isClosed</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>abort</color><color=#f8f8f2>(</color><color=#66d9ef>false</color> <color=#75715e>/* forceFlush */</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Abort this transaction. Steps are: 1. Release LN read locks. 2. Write a txn abort entry to the</color>
<color=#75715e>   * log. This is used for log file cleaning optimization and replication, and there's no need to</color>
<color=#75715e>   * guarantee a flush to disk. 3. Find the last LN log entry written for this txn, and use that to</color>
<color=#75715e>   * traverse the log looking for nodes to undo. For each node, use the same undo logic as recovery</color>
<color=#75715e>   * to undo the transaction. Note that we walk the log in order to undo in reverse order of the</color>
<color=#75715e>   * actual operations. For example, suppose the txn did this: delete K1/D1 (in LN 10) create K1/D1</color>
<color=#75715e>   * (in LN 20) If we process LN10 before LN 20, we'd inadvertently create a duplicate tree of "K1",</color>
<color=#75715e>   * which would be fatal for the mapping tree. 4. Release the write lock for this LN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An abort differs from a rollback in that the former always undoes every operation, and</color>
<color=#75715e>   * returns it to the pre-txn state. A rollback may return the txn to an intermediate state, or to</color>
<color=#75715e>   * the pre-txn state.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>abort</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>forceFlush</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>abortInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>forceFlush</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @throws IllegalStateException via Transaction.abort if cursors are open.</color>
<color=#75715e>   *     <p>Note that IllegalStateException should never be thrown by Transaction.abort because of a</color>
<color=#75715e>   *     closed txn, since Transaction.commit and abort set the Transaction.txn to null and disallow</color>
<color=#75715e>   *     subsequent method calls (other than abort). So in a sense the call to checkState(true) in</color>
<color=#75715e>   *     this method is unnecessary, although perhaps a good safeguard.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>abortInternal</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>forceFlush</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If frozen, throw the appropriate exception, but don't attempt to</color>
<color=#75715e>     * make any changes to cleanup the exception.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>hooked</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>checkIfFrozen</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>

          <color=#75715e>/*</color>
<color=#75715e>           * State is set to ABORTED before undo, so that other</color>
<color=#75715e>           * threads cannot access this txn in the middle of undo.</color>
<color=#75715e>           * [#19321]</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>ABORTED</color><color=#f8f8f2>);</color>

          <color=#75715e>/* Log the abort. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>updateLoggedForTxn</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>preLogAbortHook</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>hooked</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>checkForValidReplicatorNodeId</color><color=#f8f8f2>();</color>
            <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>commitLsn</color> <color=#f92672>==</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>abortLsn</color> <color=#f92672>==</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>);</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>AbortLogEntry</color> <color=#f8f8f2>abortEntry</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>AbortLogEntry</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>TxnAbort</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>getReplicatorNodeId</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getDTVLSN</color><color=#f8f8f2>()));</color>
            <color=#f8f8f2>abortLsn</color> <color=#f92672>=</color>
                <color=#f8f8f2>forceFlush</color>
                    <color=#f92672>?</color> <color=#f8f8f2>envImpl</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>()</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>logForceFlush</color><color=#f8f8f2>(</color><color=#f8f8f2>abortEntry</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/* fsyncRequired */</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>)</color>
                    <color=#f8f8f2>:</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>().</color><color=#a6e22e>log</color><color=#f8f8f2>(</color><color=#f8f8f2>abortEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>repContext</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hooked</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>postLogAbortHook</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>hooked</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * undo must be called outside the synchronization block to</color>
<color=#75715e>         * preserve locking order: For non-blocking locks, the BIN</color>
<color=#75715e>         * is latched before synchronizing on the Txn.  If we were</color>
<color=#75715e>         * to synchronize while calling undo, this order would be</color>
<color=#75715e>         * reversed.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>undo</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Purge any databaseImpls not needed as a result of the abort. Be</color>
<color=#75715e>       * sure to do this outside the synchronization block, to avoid</color>
<color=#75715e>       * conflict w/ checkpointer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>cleanupDatabaseImpls</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>openCursors</color> <color=#f92672>=</color> <color=#f8f8f2>checkCursorsForClose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Abort: id = "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>" openCursors= "</color> <color=#f92672>+</color> <color=#f8f8f2>openCursors</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Invalidate any Db handles protected by this txn. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openedDatabaseHandles</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>handle</color> <color=#f8f8f2>:</color> <color=#f8f8f2>openedDatabaseHandles</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>handle</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Delay the exception until cleanup is complete. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openCursors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>checkIfInvalid</color><color=#f8f8f2>();</color>
          <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
              <color=#e6db74>"Transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>" detected open cursors while aborting"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The close method, which unregisters the txn, and must be called</color>
<color=#75715e>       * after undo and cleanupDatabaseImpls.  A transaction must remain</color>
<color=#75715e>       * registered until all actions that modify/dirty INs are complete;</color>
<color=#75715e>       * see Checkpointer class comments for details.  [#19321]</color>
<color=#75715e>       *</color>
<color=#75715e>       * close must be called, even though the state has already been set</color>
<color=#75715e>       * to ABORTED above, for two reasons: 1) To unregister the txn, and</color>
<color=#75715e>       * 2) to allow subclasses to override the close method.</color>
<color=#75715e>       *</color>
<color=#75715e>       * close must be called outside the synchronization block to avoid</color>
<color=#75715e>       * conflict w/ checkpointer.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>abortLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TriggerManager</color><color=#f8f8f2>.</color><color=#a6e22e>runAbortTriggers</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>abortLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Undo write operations and release all resources held by the transaction. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>undo</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We need to undo, or reverse the effect of any applied operations on</color>
<color=#75715e>     * the in-memory btree. We also need to make the latest version of any</color>
<color=#75715e>     * record modified by the transaction obsolete.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>alreadyUndoneLsns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>CompareSlot</color><color=#f92672>></color> <color=#f8f8f2>alreadyUndoneSlots</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeSet</color><color=#f92672><</color><color=#f8f8f2>CompareSlot</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>TreeLocation</color> <color=#f8f8f2>location</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeLocation</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>undoLsn</color> <color=#f92672>=</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>UndoReader</color> <color=#f8f8f2>undo</color> <color=#f92672>=</color> <color=#f8f8f2>UndoReader</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>);</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Only undo the first instance we see of any node. All log</color>
<color=#75715e>         * entries for a given node have the same abortLsn, so we don't</color>
<color=#75715e>         * need to undo it multiple times.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>alreadyUndoneLsns</color><color=#f8f8f2>,</color> <color=#f8f8f2>alreadyUndoneSlots</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>RecoveryManager</color><color=#f8f8f2>.</color><color=#a6e22e>abortUndo</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>(),</color> <color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINER</color><color=#f8f8f2>,</color> <color=#f8f8f2>location</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoLsn</color><color=#f8f8f2>);</color>

          <color=#f8f8f2>countObsoleteExact</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>undo</color><color=#f8f8f2>,</color> <color=#f8f8f2>isRolledBack</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/* Move on to the previous log entry for this txn. */</color>
        <color=#f8f8f2>undoLsn</color> <color=#f92672>=</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getUserTxn</color><color=#f8f8f2>().</color><color=#a6e22e>getLastLsn</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>lsnMsg</color> <color=#f92672>=</color> <color=#e6db74>"LSN="</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>traceAndLogException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Txn"</color><color=#f8f8f2>,</color> <color=#e6db74>"undo"</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsnMsg</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>addErrorMessage</color><color=#f8f8f2>(</color><color=#f8f8f2>lsnMsg</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedException</color><color=#f8f8f2>(</color>
          <color=#e6db74>"Txn undo for LSN="</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>undoLsn</color><color=#f8f8f2>),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Release all read locks after the undo (since the undo may need to</color>
<color=#75715e>     * read in mapLNs).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readLocks</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>clearReadLocks</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Set database state for deletes before releasing any write locks. */</color>
    <color=#f8f8f2>setDeletedDatabaseState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Throw away write lock collection, don't retain any locks. */</color>
    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>empty</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptySet</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>clearWriteLocks</color><color=#f8f8f2>(</color><color=#f8f8f2>empty</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Let the delete related info (binreferences and dbs) get gc'ed. Don't</color>
<color=#75715e>     * explicitly iterate and clear -- that's far less efficient, gives GC</color>
<color=#75715e>     * wrong input.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>deleteInfo</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For an explanation of obsoleteDupsAllowed, see ReplayTxn.rollback. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>countObsoleteExact</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>UndoReader</color> <color=#f8f8f2>undo</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>obsoleteDupsAllowed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>     * "Immediately obsolete" LNs are counted as obsolete when they are</color>
<color=#75715e>     * logged, so no need to repeat here.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntry</color><color=#f8f8f2>.</color><color=#a6e22e>isImmediatelyObsolete</color><color=#f8f8f2>(</color><color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LogManager</color> <color=#f8f8f2>logManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogManager</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>obsoleteDupsAllowed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>countObsoleteNodeDupsAllowed</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>// type</color>
          <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntrySize</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>logManager</color><color=#f8f8f2>.</color><color=#a6e22e>countObsoleteNode</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>undoLsn</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#75715e>// type</color>
          <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntrySize</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>,</color>
          <color=#66d9ef>true</color><color=#f8f8f2>);</color> <color=#75715e>// countExact</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Release any write locks that are not in the retainedNodes set. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>clearWriteLocks</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>retainedNodes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Release all write locks, clear lock collection. */</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>

      <color=#75715e>/* Release any write locks not in the retained set. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>retainedNodes</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>writeInfo</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>clearReadLocks</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numReadLocks</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readLocks</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>numReadLocks</color> <color=#f92672>=</color> <color=#f8f8f2>readLocks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>readLocks</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Long</color> <color=#f8f8f2>rLockNid</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>rLockNid</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>readLocks</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>numReadLocks</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called by LNLogEntry.postLogWork() via the LogManager (while still under the LWL) after a</color>
<color=#75715e>   * transactional LN is logged. Also called by the recovery manager when logging a transaction</color>
<color=#75715e>   * aware object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is synchronized by the caller, by being called within the log latch. Record the</color>
<color=#75715e>   * last LSN for this transaction, to create the transaction chain, and also record the LSN in the</color>
<color=#75715e>   * write info for abort logic.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addLogInfo</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lastLsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Save the last LSN for maintaining the transaction LSN chain. */</color>
    <color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>lastLsn</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Save handle to LSN for aborts.</color>
<color=#75715e>     *</color>
<color=#75715e>     * If this is the first LSN, save it for calculating the first LSN</color>
<color=#75715e>     * of any active txn, for checkpointing.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstLoggedLsn</color> <color=#f92672>==</color> <color=#f8f8f2>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>firstLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>lastLsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * [#16861] The firstLoggedLsn field is volatile to avoid making getFirstActiveLsn synchronized,</color>
<color=#75715e>   * which causes a deadlock in HA.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return first logged LSN, to aid recovery undo</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getFirstActiveLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>firstLoggedLsn</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return true if this txn has logged any log entries. */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>updateLoggedForTxn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @param dbImpl databaseImpl to remove</color>
<color=#75715e>   * @param deleteAtCommit true if this databaseImpl should be cleaned on commit, false if it should</color>
<color=#75715e>   *     be cleaned on abort.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>markDeleteAtTxnEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deleteAtCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deletedDatabases</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>deletedDatabases</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>delta</color> <color=#f92672>+=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHSET_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>deletedDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>DatabaseCleanupInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>deleteAtCommit</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>delta</color> <color=#f92672>+=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHSET_ENTRY_OVERHEAD</color> <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>

    <color=#75715e>/* releaseDb will be called by cleanupDatabaseImpls. */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>></color> <color=#a6e22e>getDeletedDatabases</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>deletedDatabases</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Leftover databaseImpls that are a by-product of database operations like</color>
<color=#75715e>   * removeDatabase(), truncateDatabase() will be deleted after the write</color>
<color=#75715e>   * locks are released. However, do set the database state appropriately</color>
<color=#75715e>   * before the locks are released.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>setDeletedDatabaseState</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deletedDatabases</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>deletedDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>DatabaseCleanupInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>deleteAtCommit</color> <color=#f92672>==</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>startDeleteProcessing</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Cleanup leftover databaseImpls that are a by-product of database operations like</color>
<color=#75715e>   * removeDatabase(), truncateDatabase().</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called outside the synchronization on this txn, because it calls</color>
<color=#75715e>   * finishDeleteProcessing, which gets the TxnManager's allTxns latch. The checkpointer also gets</color>
<color=#75715e>   * the allTxns latch, and within that latch, needs to synchronize on individual txns, so we must</color>
<color=#75715e>   * avoid a latching hiearchy conflict.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>[#16861] FUTURE: Perhaps this special handling is no longer needed, now that firstLoggedLsn</color>
<color=#75715e>   * is volatile and getFirstActiveLsn is not synchronized.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>cleanupDatabaseImpls</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deletedDatabases</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Make a copy of the deleted databases while synchronized. */</color>
      <color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>[]</color> <color=#f8f8f2>infoArray</color><color=#f8f8f2>;</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>infoArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>[</color><color=#f8f8f2>deletedDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>deletedDatabases</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#f8f8f2>infoArray</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseCleanupInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>infoArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>deleteAtCommit</color> <color=#f92672>==</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * If deletedDatabases contains same databases with</color>
<color=#75715e>           * different deleteAtCommit, firstly release the database,</color>
<color=#75715e>           * then delete it. [#19636]</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkRepeatedDeletedDB</color><color=#f8f8f2>(</color><color=#f8f8f2>infoArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#75715e>/* releaseDb will be called by finishDeleteProcessing. */</color>
          <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>finishDeleteProcessing</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>checkRepeatedDeletedDB</color><color=#f8f8f2>(</color><color=#f8f8f2>infoArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * If deletedDatabases contains same databases with</color>
<color=#75715e>           * different deleteAtCommit, do nothing. [#19636]</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>deletedDatabases</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkRepeatedDeletedDB</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>DatabaseCleanupInfo</color><color=#f92672>[]</color> <color=#f8f8f2>infoArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseCleanupInfo</color> <color=#f8f8f2>info</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseCleanupInfo</color> <color=#f8f8f2>element</color> <color=#f8f8f2>:</color> <color=#f8f8f2>infoArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>element</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>())</color>
          <color=#f92672>&&</color> <color=#f8f8f2>element</color><color=#f8f8f2>.</color><color=#a6e22e>deleteAtCommit</color> <color=#f92672>!=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>deleteAtCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>ensureWriteInfo</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>writeInfo</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>WriteLockInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>undoDatabases</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>TWOHASHMAPS_OVERHEAD</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Add lock to the appropriate queue. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grantStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>isWriteLock</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>ensureWriteInfo</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>WriteLockInfo</color><color=#f8f8f2>());</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>WRITE_LOCK_OVERHEAD</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>grantStatus</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>PROMOTION</color><color=#f8f8f2>)</color>
          <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>grantStatus</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_PROMOTION</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>readLocks</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>delta</color> <color=#f92672>-=</color> <color=#f8f8f2>READ_LOCK_OVERHEAD</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addReadLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addReadLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readLocks</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>readLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHSET_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>readLocks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>delta</color> <color=#f92672>+=</color> <color=#f8f8f2>READ_LOCK_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Remove the lock from the set owned by this transaction. If specified to LockManager.release,</color>
<color=#75715e>   * the lock manager will call this when its releasing a lock. Usually done because the transaction</color>
<color=#75715e>   * doesn't need to really keep the lock, i.e for a deleted record.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>removeLock</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * We could optimize by passing the lock type so we know which</color>
<color=#75715e>     * collection to look in. Be careful of demoted locks, which have</color>
<color=#75715e>     * shifted collection.</color>
<color=#75715e>     *</color>
<color=#75715e>     * Don't bother updating memory utilization here -- we'll update at</color>
<color=#75715e>     * transaction end.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>readLocks</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>readLocks</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>READ_LOCK_OVERHEAD</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>writeInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>WRITE_LOCK_OVERHEAD</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A lock is being demoted. Move it from the write collection into the read collection. */</color>
  <color=#a6e22e>@Override</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>moveWriteToReadLock</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>writeInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>WRITE_LOCK_OVERHEAD</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>found</color> <color=#f8f8f2>:</color> <color=#e6db74>"Couldn't find lock for Node "</color> <color=#f92672>+</color> <color=#f8f8f2>lsn</color> <color=#f92672>+</color> <color=#e6db74>" in writeInfo Map."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>addReadLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>updateMemoryUsage</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>delta</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>inMemorySize</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>accumulatedDelta</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>accumulatedDelta</color> <color=#f92672>></color> <color=#f8f8f2>ACCUMULATED_LIMIT</color> <color=#f92672>||</color> <color=#f8f8f2>accumulatedDelta</color> <color=#f92672><</color> <color=#f92672>-</color><color=#f8f8f2>ACCUMULATED_LIMIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>updateTxnMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>accumulatedDelta</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>accumulatedDelta</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the amount of memory currently budgeted for this transaction. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getBudgetedMemorySize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>inMemorySize</color> <color=#f92672>-</color> <color=#f8f8f2>accumulatedDelta</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the WriteLockInfo for this node. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>WriteLockInfo</color> <color=#a6e22e>getWriteLockInfo</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>WriteLockInfo</color> <color=#f8f8f2>wli</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>wli</color> <color=#f92672>=</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wli</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color>
          <color=#e6db74>"writeInfo is null in Txn.getWriteLockInfo"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>wli</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is always transactional. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Determines whether this is an auto transaction. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isAutoTxn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>isAutoCommit</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is serializable isolation if so configured. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSerializableIsolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>serializableIsolation</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is read-committed isolation if so configured. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReadCommittedIsolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readCommittedIsolation</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the sync api was used for configuration */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getExplicitSyncConfigured</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>explicitSyncConfigured</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns true if the durability api was used for configuration. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getExplicitDurabilityConfigured</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>explicitDurabilityConfigured</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This is a transactional locker. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>getTxnLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns 'this', since this locker holds no non-transactional locks. Since this is returned,</color>
<color=#75715e>   * sharing of locks is obviously supported.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Locker</color> <color=#a6e22e>newNonTxnLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This locker holds no non-transactional locks. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseNonTxnLocks</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** Created transactions do nothing at the end of the operation. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>nonTxnOperationEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * @see com.sleepycat.je.txn.Locker#operationEnd(boolean)</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>operationOK</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isAutoCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Created transactions do nothing at the end of the operation. */</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>operationOK</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>commit</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>abort</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color> <color=#75715e>// no sync required</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called at the end of a database open operation to add the database handle to a user txn. When a</color>
<color=#75715e>   * user txn aborts, handles opened using that txn are invalidated.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A non-txnal locker or auto-commit txn does not retain the handle, because the open database</color>
<color=#75715e>   * operation will succeed or fail atomically and no database invalidation is needed at a later</color>
<color=#75715e>   * time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see HandleLocker</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>addOpenedDatabase</color><color=#f8f8f2>(</color><color=#f8f8f2>Database</color> <color=#f8f8f2>dbHandle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isAutoCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>openedDatabaseHandles</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>openedDatabaseHandles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Database</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>openedDatabaseHandles</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>dbHandle</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Increase the counter if a new Cursor is opened under this transaction. */</color>
  <color=#a6e22e>@Override</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>getAndIncrement</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Decrease the counter if a Cursor is closed under this transaction. */</color>
  <color=#a6e22e>@Override</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>unRegisterCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>getAndDecrement</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Txns always require locking.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>lockingRequired</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Check if all cursors associated with the txn are closed. If not, those open cursors will be</color>
<color=#75715e>   * forcibly closed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if open cursors exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkCursorsForClose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** stats */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>collectStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"Transaction lock counts"</color><color=#f8f8f2>,</color> <color=#e6db74>"Read and write locks held by transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>IntStat</color> <color=#f8f8f2>statReadLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_READ_LOCKS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>IntStat</color> <color=#f8f8f2>statWriteLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_WRITE_LOCKS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>IntStat</color> <color=#f8f8f2>statTotalLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_TOTAL</color><color=#f8f8f2>);</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nReadLocks</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>readLocks</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>readLocks</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>statReadLocks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>nReadLocks</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nWriteLocks</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>statWriteLocks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>nWriteLocks</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>statTotalLocks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>nReadLocks</color> <color=#f92672>+</color> <color=#f8f8f2>nWriteLocks</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set the state of a transaction to abort-only. Should ONLY be called by</color>
<color=#75715e>   * OperationFailureException.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOnlyAbortable</color><color=#f8f8f2>(</color><color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>cause</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>cause</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>MUST_ABORT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>onlyAbortableCause</color> <color=#f92672>=</color> <color=#f8f8f2>cause</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Set the state of a transaction's IMPORTUNATE bit. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setImportunate</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>importunate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>importunate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>txnFlags</color> <color=#f92672>|=</color> <color=#f8f8f2>IMPORTUNATE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>txnFlags</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>IMPORTUNATE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get the state of a transaction's IMPORTUNATE bit. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getImportunate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnFlags</color> <color=#f92672>&</color> <color=#f8f8f2>IMPORTUNATE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks for preemption in this locker and all its child buddies. Does NOT call checkPreempted on</color>
<color=#75715e>   * its child buddies, since this would cause an infinite recursion.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkPreempted</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>allowPreemptedLocker</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>OperationFailureException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* First check this locker. */</color>
    <color=#f8f8f2>throwIfPreempted</color><color=#f8f8f2>(</color><color=#f8f8f2>allowPreemptedLocker</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Then check our buddy lockers. It's OK to call throwIfPreempted while</color>
<color=#75715e>     * synchronized on buddyLockers, since it takes no locks.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buddyLockers</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>buddyLockers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>BuddyLocker</color> <color=#f8f8f2>buddy</color> <color=#f8f8f2>:</color> <color=#f8f8f2>buddyLockers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>buddy</color><color=#f8f8f2>.</color><color=#a6e22e>throwIfPreempted</color><color=#f8f8f2>(</color><color=#f8f8f2>allowPreemptedLocker</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Throw an exception if the transaction is not open.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If calledByAbort is true, it means we're being called from abort(). But once closed, a</color>
<color=#75715e>   * Transaction never calls abort(). See comment at the top of abortInternal.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Caller must invoke with "this" synchronized.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>calledByAbort</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>OPEN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>

      <color=#66d9ef>case</color> <color=#f8f8f2>MUST_ABORT</color><color=#f8f8f2>:</color>

        <color=#75715e>/* Don't complain if the user is doing what we asked. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>calledByAbort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Throw the original exception that caused the txn to be set</color>
<color=#75715e>         * to abort-only, wrapped in a new exception of the same class.</color>
<color=#75715e>         * That way, both stack traces are available and the user can</color>
<color=#75715e>         * specify a meaningful class in their catch statement.</color>
<color=#75715e>         *</color>
<color=#75715e>         * It's ok for FindBugs to whine about id not being</color>
<color=#75715e>         * synchronized.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>onlyAbortableCause</color><color=#f8f8f2>.</color><color=#a6e22e>wrapSelf</color><color=#f8f8f2>(</color>
            <color=#e6db74>"Transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>" must be aborted, caused by: "</color> <color=#f92672>+</color> <color=#f8f8f2>onlyAbortableCause</color><color=#f8f8f2>);</color>

      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#75715e>/* All other states are equivalent to closed. */</color>

        <color=#75715e>/*</color>
<color=#75715e>         * It's ok for FindBugs to whine about id not being</color>
<color=#75715e>         * synchronized.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Transaction "</color> <color=#f92672>+</color> <color=#f8f8f2>id</color> <color=#f92672>+</color> <color=#e6db74>" has been closed."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Close and unregister this txn. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Set final state to COMMITTED, if not set earlier. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnState</color> <color=#f92672>==</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>COMMITTED</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* This was set earlier by abort, but here also for safety. */</color>
      <color=#f8f8f2>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>ABORTED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * UnregisterTxn must be called outside the synchronization on this</color>
<color=#75715e>     * txn, because it gets the TxnManager's allTxns latch. The</color>
<color=#75715e>     * checkpointer also gets the allTxns latch, and within that latch,</color>
<color=#75715e>     * needs to synchronize on individual txns, so we must avoid a latching</color>
<color=#75715e>     * hierarchy conflict.</color>
<color=#75715e>     *</color>
<color=#75715e>     * [#16861] FUTURE: Perhaps this special handling is no longer needed,</color>
<color=#75715e>     * now that firstLoggedLsn is volatile and getFirstActiveLsn is not</color>
<color=#75715e>     * synchronized.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnManager</color><color=#f8f8f2>().</color><color=#a6e22e>unRegisterTxn</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Set the superclass Locker state to closed. */</color>
    <color=#f8f8f2>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>setState</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>txnState</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color> <color=#a6e22e>getState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnState</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isValid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnState</color> <color=#f92672>==</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClosed</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnState</color> <color=#f92672>!=</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>OPEN</color> <color=#f92672>&&</color> <color=#f8f8f2>txnState</color> <color=#f92672>!=</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>MUST_ABORT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOnlyAbortable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>txnState</color> <color=#f92672>==</color> <color=#f8f8f2>Transaction</color><color=#f8f8f2>.</color><color=#a6e22e>State</color><color=#f8f8f2>.</color><color=#a6e22e>MUST_ABORT</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is overridden by HA txn subclasses and returns the node id of the master node that</color>
<color=#75715e>   * committed or aborted the txn.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>getReplicatorNodeId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Non replicated txns don't use a node ID. */</color>
    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This method is overridden by replication txn subclasses and returns the DTVLSN associated with</color>
<color=#75715e>   * the Txn.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>getDTVLSN</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*  Non replicated txns don't use VLSNs. */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>VLSN</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_VLSN_SEQUENCE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Log support</color>
<color=#75715e>   */</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLastFormatChange</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LAST_FORMAT_CHANGE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>VersionedWriteLoggable</color><color=#f92672>></color> <color=#a6e22e>getEmbeddedLoggables</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptyList</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*forReplication*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>writeToLog</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>LogEntryType</color><color=#f8f8f2>.</color><color=#a6e22e>LOG_VERSION</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*forReplication*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReplication</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedLongLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedLongLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>forReplication</color> <color=#f92672>?</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** It's ok for FindBugs to whine about id not being synchronized. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>logVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>forReplication</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>id</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writePackedLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>forReplication</color> <color=#f92672>?</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** It's ok for FindBugs to whine about id not being synchronized. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>6</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>lastLoggedLsn</color> <color=#f92672>=</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>entryVersion</color> <color=#f92672><</color> <color=#ae81ff>6</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasReplicationFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReplicationFormatWorthwhile</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>logBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>srcVersion</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>destVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<txn id=\""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getId</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\">"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedLsn</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</txn>"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTransactionId</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getId</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>logicalEquals</color><color=#f8f8f2>(</color><color=#f8f8f2>Loggable</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Txn</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>id</color> <color=#f92672>==</color> <color=#f8f8f2>((</color><color=#f8f8f2>Txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>other</color><color=#f8f8f2>).</color><color=#a6e22e>id</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Send trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize</color>
<color=#75715e>   * whether we send this message, we don't even want to construct the message if the level is not</color>
<color=#75715e>   * enabled. The string construction can be numerous enough to show up on a performance profile.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>traceCommit</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numWriteLocks</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>numReadLocks</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Logger</color> <color=#f8f8f2>logger</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getLogger</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>.</color><color=#a6e22e>isLoggable</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" Commit: id = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>id</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" numWriteLocks="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numWriteLocks</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" numReadLocks = "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>numReadLocks</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>fine</color><color=#f8f8f2>(</color><color=#f8f8f2>logger</color><color=#f8f8f2>,</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Store information about a DatabaseImpl that will have to be purged at transaction commit or</color>
<color=#75715e>   * abort. This handles cleanup after operations like Environment.truncateDatabase,</color>
<color=#75715e>   * Environment.removeDatabase. Cleanup like this is done outside the usual transaction commit or</color>
<color=#75715e>   * node undo processing, because the mapping tree is always auto Txn'ed to avoid deadlock and is</color>
<color=#75715e>   * essentially non-transactional.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DatabaseCleanupInfo</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>

    <color=#75715e>/* if true, clean on commit. If false, clean on abort. */</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>deleteAtCommit</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DatabaseCleanupInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deleteAtCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color> <color=#f92672>=</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>deleteAtCommit</color> <color=#f92672>=</color> <color=#f8f8f2>deleteAtCommit</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Make sure that a set of DatabaseCleanupInfo only has one entry per</color>
<color=#75715e>     * databaseImpl/deleteAtCommit tuple.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>DatabaseCleanupInfo</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>DatabaseCleanupInfo</color> <color=#f8f8f2>other</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseCleanupInfo</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>dbImpl</color><color=#f8f8f2>))</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteAtCommit</color> <color=#f92672>==</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>deleteAtCommit</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Transaction hooks used for replication support. */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A replicated environment introduces some new considerations when entering a transaction scope</color>
<color=#75715e>   * via an Environment.transactionBegin() operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On a Replica, the transactionBegin() operation must wait until the Replica has synched up to</color>
<color=#75715e>   * where it satisfies the ConsistencyPolicy that is in effect.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On a Master, the transactionBegin() must wait until the Feeder has sufficient connections to</color>
<color=#75715e>   * ensure that it can satisfy the ReplicaAckPolicy, since if it does not, it will fail at commit()</color>
<color=#75715e>   * and the work done in the transaction will need to be undone.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This hook provides the mechanism for implementing the above support for replicated</color>
<color=#75715e>   * transactions. It ignores all non-replicated transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The hook throws ReplicaStateException, if a Master switches to a Replica state while waiting</color>
<color=#75715e>   * for its Replicas connections. Changes from a Replica to a Master are handled transparently to</color>
<color=#75715e>   * the application. Exceptions manifest themselves as DatabaseException at the interface to</color>
<color=#75715e>   * minimize use of Replication based exceptions in core JE.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param config the transaction config that applies to the txn</color>
<color=#75715e>   * @throws DatabaseException if there is a failure</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>txnBeginHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TransactionConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Overridden by Txn subclasses when appropriate */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This hook is invoked before the commit of a transaction that made changes to a replicated</color>
<color=#75715e>   * environment. It's invoked for transactions executed on the master or replica, but is only</color>
<color=#75715e>   * relevant to transactions being done on the master. When invoked for a transaction on a replica</color>
<color=#75715e>   * the implementation just returns.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The hook is invoked at a very specific point in the normal commit sequence: immediately</color>
<color=#75715e>   * before the commit log entry is written to the log. It represents the last chance to abort the</color>
<color=#75715e>   * transaction and provides an opportunity to make some final checks before allowing the commit</color>
<color=#75715e>   * can go ahead. Note that it should be possible to abort the transaction at the time the hook is</color>
<color=#75715e>   * invoked.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>After invocation of the "pre" hook one of the "post" hooks: postLogCommitHook or</color>
<color=#75715e>   * postLogAbortHook must always be invoked.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Exceptions thrown by this hook result in the transaction being aborted and the exception</color>
<color=#75715e>   * being propagated back to the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException if there was a problem and that the transaction should be aborted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogCommitHook</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Overridden by Txn subclasses when appropriate */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This hook is invoked after the commit record has been written to the log, but before write</color>
<color=#75715e>   * locks have been released, so that other application cannot see the changes made by the</color>
<color=#75715e>   * transaction. At this point the transaction has been committed by the Master.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Exceptions thrown by this hook result in the transaction being completed on the Master, that</color>
<color=#75715e>   * is, locks are released, etc. and the exception is propagated back to the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param commitItem the commit item that was just logged</color>
<color=#75715e>   * @throws DatabaseException to indicate that there was a replication related problem that needs</color>
<color=#75715e>   *     to be communicated back to the application.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogCommitHook</color><color=#f8f8f2>(</color><color=#f8f8f2>LogItem</color> <color=#f8f8f2>commitItem</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Overridden by Txn subclasses when appropriate */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogAbortHook</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Override by Txn subclasses when appropriate */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Invoked if the transaction associated with the preLogCommitHook was subsequently aborted, for</color>
<color=#75715e>   * example due to a lack of disk space. This method is responsible for any cleanup that may need</color>
<color=#75715e>   * to be done as a result of the abort.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that only one of the "post" hooks (commit or abort) is invoked following the invocation</color>
<color=#75715e>   * of the "pre" hook.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogCommitAbortHook</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Overridden by Txn subclasses when appropriate */</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>postLogAbortHook</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Overridden by Txn subclasses when appropriate */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the CommitToken associated with a successful replicated commit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see com.sleepycat.je.Transaction#getCommitToken</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CommitToken</color> <color=#a6e22e>getCommitToken</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Identifies exceptions that may be propagated back to the caller during the postCommit phase of</color>
<color=#75715e>   * a transaction commit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param postCommitException the exception being evaluated</color>
<color=#75715e>   * @return true if the exception must be propagated back to the caller, false if the exception</color>
<color=#75715e>   *     indicates there is a serious problem with the commit operation and the environment should</color>
<color=#75715e>   *     be invalidated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>propagatePostCommitException</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>postCommitException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Use the marker Sets to record whether this is the first time we've see this logical node. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>firstInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>seenLsns</color><color=#f8f8f2>,</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>CompareSlot</color><color=#f92672>></color> <color=#f8f8f2>seenSlots</color><color=#f8f8f2>,</color> <color=#f8f8f2>UndoReader</color> <color=#f8f8f2>undo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LNLogEntry</color><color=#f92672><?></color> <color=#f8f8f2>undoEntry</color> <color=#f92672>=</color> <color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>logEntry</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>abortLsn1</color> <color=#f92672>=</color> <color=#f8f8f2>undoEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getAbortLsn</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>abortLsn1</color> <color=#f92672>!=</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_LSN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>seenLsns</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>abortLsn1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>CompareSlot</color> <color=#f8f8f2>slot</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CompareSlot</color><color=#f8f8f2>(</color><color=#f8f8f2>undo</color><color=#f8f8f2>.</color><color=#a6e22e>db</color><color=#f8f8f2>,</color> <color=#f8f8f2>undoEntry</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>seenSlots</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>slot</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Accumulates the set of databases for which transaction commit/abort triggers must be run.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dbImpl the database that associated with the trigger</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>noteTriggerDb</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>dbImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>triggerDbs</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>triggerDbs</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>synchronizedSet</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>triggerDbs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>dbImpl</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the set of databases for which transaction commit/abort triggers must be run. Returns</color>
<color=#75715e>   * Null if no triggers need to be run.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#a6e22e>getTriggerDbs</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>triggerDbs</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get the set of lock ids owned by this transaction */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getWriteLockIds</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeInfo</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>empty</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptySet</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>empty</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>writeInfo</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit tests. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#a6e22e>getReadLockIds</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readLocks</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>readLocks</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#a6e22e>getEnvironmentImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>Transaction</color> <color=#f8f8f2>transaction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transaction</color> <color=#f92672>=</color> <color=#f8f8f2>transaction</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Transaction</color> <color=#a6e22e>getTransaction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>transaction</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>transaction</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>transaction</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AutoTransaction</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>AutoTransaction</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Transaction</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>protected</color> <color=#a6e22e>AutoTransaction</color><color=#f8f8f2>(</color><color=#f8f8f2>Txn</color> <color=#f8f8f2>txn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* AutoTransactions do not have a convenient environment handle. */</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>txn</color><color=#f8f8f2>.</color><color=#a6e22e>getEnvironmentImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getInternalEnvHandle</color><color=#f8f8f2>(),</color> <color=#f8f8f2>txn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>commit</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"commit() not permitted on an auto transaction"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>commit</color><color=#f8f8f2>(</color><color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color> <color=#f8f8f2>Durability</color> <color=#f8f8f2>durability</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"commit() not permitted on an auto transaction"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>commitNoSync</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"commit() not permitted on an auto transaction"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>commitWriteNoSync</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"commit() not permitted on an auto transaction"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>abort</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>(</color><color=#e6db74>"abort() not permitted on an auto transaction"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>DatabaseId</color><color=#f8f8f2>,</color> <color=#f8f8f2>DatabaseImpl</color><color=#f92672>></color> <color=#a6e22e>getUndoDatabases</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>undoDatabases</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Txn freezing is used to prevent changes to transaction lock contents. A frozen transaction</color>
<color=#75715e>   * should ignore any transaction commit/abort requests. This is used only by MasterTxns, as a way</color>
<color=#75715e>   * of holding a transaction stable while cloning it to serve as a ReplayTxn during master->replica</color>
<color=#75715e>   * transitions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param isCommit true if called by commit.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>checkIfFrozen</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>isCommit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used when creating a subset of MasterTxns. Using an explicit method</color>
<color=#75715e>   * like this rather than checking class types insulates us from any</color>
<color=#75715e>   * assumptions about the class hierarchy.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMasterTxn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>