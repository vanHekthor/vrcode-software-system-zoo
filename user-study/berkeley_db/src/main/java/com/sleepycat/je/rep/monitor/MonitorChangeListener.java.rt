<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.monitor</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.ReplicatedEnvironment</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Applications can register for Monitor event notification through {@link Monitor#startListener}.</color>
<color=#75715e> * The interface defines an overloaded notify event for each event supported by the Monitor.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Changes in the composition of the replication group, or in the dynamic state of a member, are</color>
<color=#75715e> * communicated to the listener as events that are represented as subclasses of {@link</color>
<color=#75715e> * MonitorChangeEvent MonitorChangeEvent}. Classes implementing this interface supply</color>
<color=#75715e> * implementations for a <code>notify</code> associated with each type of event, so they can respond</color>
<color=#75715e> * with some application-specific course of action.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>See {@link <a href="{@docRoot}/../ReplicationGuide/monitors.html" target="_blank">Replication</color>
<color=#75715e> * Guide, Writing Monitor Nodes</a>}</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>MonitorChangeListener</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The method is invoked whenever there is new master associated with the replication group.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the method throws an exception, JE will log the exception as a trace message, which will</color>
<color=#75715e>   * be propagated through the usual channels.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newMasterEvent the event that resulted in the notify. It identifies the new master.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>NewMasterEvent</color> <color=#f8f8f2>newMasterEvent</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The method is invoked whenever there is a change in the composition of the replication group.</color>
<color=#75715e>   * That is, a new node has been added to the group or an existing member has been removed from the</color>
<color=#75715e>   * group. Note that SECONDARY nodes do not produce these events.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the method throws an exception, JE will log the exception as a trace message, which will</color>
<color=#75715e>   * be propagated through the usual channels.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param groupChangeEvent the event that resulted in the notify. It describes the new group</color>
<color=#75715e>   *     composition and identifies the node that provoked the change.</color>
<color=#75715e>   */</color>
  <color=#75715e>/*</color>
<color=#75715e>   * TODO: EXTERNAL is hidden for now. The doc need updated to include</color>
<color=#75715e>   * EXTERNAL when it becomes public.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>GroupChangeEvent</color> <color=#f8f8f2>groupChangeEvent</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The method is invoked whenever a node joins the group, by successfully opening its first {@link</color>
<color=#75715e>   * ReplicatedEnvironment ReplicatedEnvironment} handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param joinGroupEvent the event that resulted in the notify. It identifies the node that joined</color>
<color=#75715e>   *     the group.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>JoinGroupEvent</color> <color=#f8f8f2>joinGroupEvent</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The method is invoked whenever a node leaves the group by closing its last {@link</color>
<color=#75715e>   * ReplicatedEnvironment ReplicatedEnvironment} handle.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param leaveGroupEvent the event that resulted in the notify. It identifies the node that left</color>
<color=#75715e>   *     the group.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>notify</color><color=#f8f8f2>(</color><color=#f8f8f2>LeaveGroupEvent</color> <color=#f8f8f2>leaveGroupEvent</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>