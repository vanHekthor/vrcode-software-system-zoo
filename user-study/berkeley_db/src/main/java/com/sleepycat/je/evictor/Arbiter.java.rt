<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.evictor</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>

<color=#75715e>/** The Arbiter determines whether eviction should occur, by consulting the memory budget. */</color>
<color=#66d9ef>class</color> <color=#a6e22e>Arbiter</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>Totals</color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Debugging and unit test support. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f92672>></color> <color=#f8f8f2>runnableHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/* je.evictor.evictBytes */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>evictBytesSetting</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>Arbiter</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configManager</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>evictBytesSetting</color> <color=#f92672>=</color> <color=#f8f8f2>configManager</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>EVICTOR_EVICT_BYTES</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>memBudgetTotals</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>().</color><color=#a6e22e>getTotals</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if the memory budget is overspent. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isOverBudget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheUsage</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Do a check on whether synchronous eviction is needed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method is intentionally not synchronized in order to minimize overhead when</color>
<color=#75715e>   * checking for critical eviction. This method is called from application threads for every cursor</color>
<color=#75715e>   * operation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>needCriticalEviction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>over</color> <color=#f92672>=</color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheUsage</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>over</color> <color=#f92672>></color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getCriticalThreshold</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Do a check on whether the cache should still be subject to eviction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that this method is intentionally not synchronized in order to minimize overhead,</color>
<color=#75715e>   * because it's checked on every iteration of the evict batch loop.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>stillNeedsEviction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheUsage</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>evictBytesSetting</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return non zero number of bytes if eviction should happen. Caps the number of bytes a single</color>
<color=#75715e>   * thread will try to evict.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>long</color> <color=#a6e22e>getEvictionPledge</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>currentUsage</color> <color=#f92672>=</color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheUsage</color><color=#f8f8f2>();</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>maxMem</color> <color=#f92672>=</color> <color=#f8f8f2>memBudgetTotals</color><color=#f8f8f2>.</color><color=#a6e22e>getMaxMemory</color><color=#f8f8f2>();</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>overBudget</color> <color=#f92672>=</color> <color=#f8f8f2>currentUsage</color> <color=#f92672>-</color> <color=#f8f8f2>maxMem</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>doRun</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>overBudget</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>requiredEvictBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/* If running, figure out how much to evict. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doRun</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>requiredEvictBytes</color> <color=#f92672>=</color> <color=#f8f8f2>overBudget</color> <color=#f92672>+</color> <color=#f8f8f2>evictBytesSetting</color><color=#f8f8f2>;</color>
      <color=#75715e>/* Don't evict more than 50% of the cache. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentUsage</color> <color=#f92672>-</color> <color=#f8f8f2>requiredEvictBytes</color> <color=#f92672><</color> <color=#f8f8f2>maxMem</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>requiredEvictBytes</color> <color=#f92672>=</color> <color=#f8f8f2>overBudget</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxMem</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Unit testing, force eviction. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnableHook</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>doRun</color> <color=#f92672>=</color> <color=#f8f8f2>runnableHook</color><color=#f8f8f2>.</color><color=#a6e22e>getHookValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>doRun</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>requiredEvictBytes</color> <color=#f92672>=</color> <color=#f8f8f2>maxMem</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>requiredEvictBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>requiredEvictBytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* For unit testing only. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setRunnableHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>runnableHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>